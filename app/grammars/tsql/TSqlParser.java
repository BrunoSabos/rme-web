// Generated from /data/perso/dev/rme-web/app/grammars/tsql/TSqlParser.g4 by ANTLR 4.7
package grammars.tsql;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class TSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ADD=1, AES=2, ALL=3, ALLOW_CONNECTIONS=4, ALLOW_MULTIPLE_EVENT_LOSS=5, 
		ALLOW_SINGLE_EVENT_LOSS=6, ALTER=7, AND=8, ANONYMOUS=9, ANY=10, APPEND=11, 
		APPLICATION=12, AS=13, ASC=14, ASYMMETRIC=15, ASYNCHRONOUS_COMMIT=16, 
		AUTHORIZATION=17, AUTHENTICATION=18, AUTOMATED_BACKUP_PREFERENCE=19, AUTOMATIC=20, 
		AVAILABILITY_MODE=21, BACKSLASH=22, BACKUP=23, BEFORE=24, BEGIN=25, BETWEEN=26, 
		BLOCK=27, BLOCKSIZE=28, BLOCKING_HIERARCHY=29, BREAK=30, BROWSE=31, BUFFER=32, 
		BUFFERCOUNT=33, BULK=34, BY=35, CACHE=36, CALLED=37, CASCADE=38, CASE=39, 
		CERTIFICATE=40, CHANGETABLE=41, CHANGES=42, CHECK=43, CHECKPOINT=44, CHECK_POLICY=45, 
		CHECK_EXPIRATION=46, CLASSIFIER_FUNCTION=47, CLOSE=48, CLUSTER=49, CLUSTERED=50, 
		COALESCE=51, COLLATE=52, COLUMN=53, COMPRESSION=54, COMMIT=55, COMPUTE=56, 
		CONFIGURATION=57, CONSTRAINT=58, CONTAINMENT=59, CONTAINS=60, CONTAINSTABLE=61, 
		CONTEXT=62, CONTINUE=63, CONTINUE_AFTER_ERROR=64, CONTRACT=65, CONTRACT_NAME=66, 
		CONVERSATION=67, CONVERT=68, COPY_ONLY=69, CREATE=70, CROSS=71, CURRENT=72, 
		CURRENT_DATE=73, CURRENT_TIME=74, CURRENT_TIMESTAMP=75, CURRENT_USER=76, 
		CURSOR=77, CYCLE=78, DATA=79, DATA_COMPRESSION=80, DATA_SOURCE=81, DATABASE=82, 
		DATABASE_MIRRORING=83, DBCC=84, DEALLOCATE=85, DECLARE=86, DEFAULT=87, 
		DEFAULT_DATABASE=88, DEFAULT_SCHEMA=89, DELETE=90, DENY=91, DESC=92, DIAGNOSTICS=93, 
		DIFFERENTIAL=94, DISK=95, DISTINCT=96, DISTRIBUTED=97, DOUBLE=98, DOUBLE_BACK_SLASH=99, 
		DOUBLE_FORWARD_SLASH=100, DROP=101, DTC_SUPPORT=102, DUMP=103, ELSE=104, 
		ENABLED=105, END=106, ENDPOINT=107, ERRLVL=108, ESCAPE=109, ERROR=110, 
		EVENT=111, EVENTDATA=112, EVENT_RETENTION_MODE=113, EXCEPT=114, EXECUTABLE_FILE=115, 
		EXECUTE=116, EXISTS=117, EXPIREDATE=118, EXIT=119, EXTENSION=120, EXTERNAL=121, 
		EXTERNAL_ACCESS=122, FAILOVER=123, FAILURECONDITIONLEVEL=124, FAN_IN=125, 
		FETCH=126, FILE=127, FILENAME=128, FILLFACTOR=129, FILE_SNAPSHOT=130, 
		FOR=131, FORCESEEK=132, FORCE_SERVICE_ALLOW_DATA_LOSS=133, FOREIGN=134, 
		FREETEXT=135, FREETEXTTABLE=136, FROM=137, FULL=138, FUNCTION=139, GET=140, 
		GOTO=141, GOVERNOR=142, GRANT=143, GROUP=144, HAVING=145, HASHED=146, 
		HEALTHCHECKTIMEOUT=147, IDENTITY=148, IDENTITYCOL=149, IDENTITY_INSERT=150, 
		IF=151, IN=152, INCLUDE=153, INCREMENT=154, INDEX=155, INFINITE=156, INIT=157, 
		INNER=158, INSERT=159, INSTEAD=160, INTERSECT=161, INTO=162, IPV4_ADDR=163, 
		IPV6_ADDR=164, IS=165, ISNULL=166, JOIN=167, KERBEROS=168, KEY=169, KEY_PATH=170, 
		KEY_STORE_PROVIDER_NAME=171, KILL=172, LANGUAGE=173, LEFT=174, LIBRARY=175, 
		LIFETIME=176, LIKE=177, LINENO=178, LINUX=179, LISTENER_IP=180, LISTENER_PORT=181, 
		LOAD=182, LOCAL_SERVICE_NAME=183, LOG=184, MATCHED=185, MASTER=186, MAX_MEMORY=187, 
		MAXTRANSFER=188, MAXVALUE=189, MAX_DISPATCH_LATENCY=190, MAX_EVENT_SIZE=191, 
		MAX_SIZE=192, MAX_OUTSTANDING_IO_PER_VOLUME=193, MEDIADESCRIPTION=194, 
		MEDIANAME=195, MEMBER=196, MEMORY_PARTITION_MODE=197, MERGE=198, MESSAGE_FORWARDING=199, 
		MESSAGE_FORWARD_SIZE=200, MINVALUE=201, MIRROR=202, MUST_CHANGE=203, NATIONAL=204, 
		NEGOTIATE=205, NOCHECK=206, NOFORMAT=207, NOINIT=208, NONCLUSTERED=209, 
		NONE=210, NOREWIND=211, NOSKIP=212, NOUNLOAD=213, NO_CHECKSUM=214, NO_COMPRESSION=215, 
		NO_EVENT_LOSS=216, NOT=217, NOTIFICATION=218, NTLM=219, NULL=220, NULLIF=221, 
		OF=222, OFF=223, OFFSETS=224, OLD_PASSWORD=225, ON=226, ON_FAILURE=227, 
		OPEN=228, OPENDATASOURCE=229, OPENQUERY=230, OPENROWSET=231, OPENXML=232, 
		OPTION=233, OR=234, ORDER=235, OUTER=236, OVER=237, PAGE=238, PARAM_NODE=239, 
		PARTIAL=240, PASSWORD=241, PERCENT=242, PERMISSION_SET=243, PER_CPU=244, 
		PER_DB=245, PER_NODE=246, PIVOT=247, PLAN=248, PLATFORM=249, POLICY=250, 
		PRECISION=251, PREDICATE=252, PRIMARY=253, PRINT=254, PROC=255, PROCEDURE=256, 
		PROCESS=257, PUBLIC=258, PYTHON=259, R=260, RAISERROR=261, RAW=262, READ=263, 
		READTEXT=264, READ_WRITE_FILEGROUPS=265, RECONFIGURE=266, REFERENCES=267, 
		REGENERATE=268, RELATED_CONVERSATION=269, RELATED_CONVERSATION_GROUP=270, 
		REPLICATION=271, REQUIRED=272, RESET=273, RESTART=274, RESTORE=275, RESTRICT=276, 
		RESUME=277, RETAINDAYS=278, RETURN=279, RETURNS=280, REVERT=281, REVOKE=282, 
		REWIND=283, RIGHT=284, ROLLBACK=285, ROLE=286, ROWCOUNT=287, ROWGUIDCOL=288, 
		RSA_512=289, RSA_1024=290, RSA_2048=291, RSA_3072=292, RSA_4096=293, SAFETY=294, 
		RULE=295, SAFE=296, SAVE=297, SCHEDULER=298, SCHEMA=299, SCHEME=300, SECURITY=301, 
		SECURITYAUDIT=302, SELECT=303, SEMANTICKEYPHRASETABLE=304, SEMANTICSIMILARITYDETAILSTABLE=305, 
		SEMANTICSIMILARITYTABLE=306, SEQUENCE=307, SERVER=308, SERVICE=309, SERVICE_BROKER=310, 
		SERVICE_NAME=311, SESSION=312, SESSION_USER=313, SET=314, SETUSER=315, 
		SHUTDOWN=316, SID=317, SKIP_KEYWORD=318, SOFTNUMA=319, SOME=320, SOURCE=321, 
		SPECIFICATION=322, SPLIT=323, SQLDUMPERFLAGS=324, SQLDUMPERPATH=325, SQLDUMPERTIMEOUT=326, 
		STATISTICS=327, STATE=328, STATS=329, START=330, STARTED=331, STARTUP_STATE=332, 
		STOP=333, STOPPED=334, STOP_ON_ERROR=335, SUPPORTED=336, SYSTEM=337, SYSTEM_USER=338, 
		TABLE=339, TABLESAMPLE=340, TAPE=341, TARGET=342, TCP=343, TEXTSIZE=344, 
		THEN=345, TO=346, TOP=347, TRACK_CAUSALITY=348, TRAN=349, TRANSACTION=350, 
		TRANSFER=351, TRIGGER=352, TRUNCATE=353, TSEQUAL=354, UNCHECKED=355, UNION=356, 
		UNIQUE=357, UNLOCK=358, UNPIVOT=359, UNSAFE=360, UPDATE=361, UPDATETEXT=362, 
		URL=363, USE=364, USED=365, USER=366, VALUES=367, VARYING=368, VERBOSELOGGING=369, 
		VIEW=370, VISIBILITY=371, WAITFOR=372, WHEN=373, WHERE=374, WHILE=375, 
		WINDOWS=376, WITH=377, WITHIN=378, WITHOUT=379, WITNESS=380, WRITETEXT=381, 
		ABSOLUTE=382, ACCENT_SENSITIVITY=383, ACTION=384, ACTIVE=385, ACTIVATION=386, 
		ADDRESS=387, AES_128=388, AES_192=389, AES_256=390, AFFINITY=391, AFTER=392, 
		AGGREGATE=393, ALGORITHM=394, ALLOWED=395, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=396, 
		ALLOW_SNAPSHOT_ISOLATION=397, ANSI_NULLS=398, ANSI_NULL_DEFAULT=399, ANSI_PADDING=400, 
		ANSI_WARNINGS=401, APPLICATION_LOG=402, APPLY=403, ARITHABORT=404, ASSEMBLY=405, 
		AUDIT=406, AUDIT_GUID=407, AUTO=408, AUTO_CLEANUP=409, AUTO_CLOSE=410, 
		AUTO_CREATE_STATISTICS=411, AUTO_SHRINK=412, AUTO_UPDATE_STATISTICS=413, 
		AUTO_UPDATE_STATISTICS_ASYNC=414, AVAILABILITY=415, AVG=416, BACKUP_PRIORITY=417, 
		BEGIN_DIALOG=418, BIGINT=419, BINARY_BASE64=420, BINARY_CHECKSUM=421, 
		BINDING=422, BLOB_STORAGE=423, BROKER=424, BROKER_INSTANCE=425, BULK_LOGGED=426, 
		CALLER=427, CAST=428, CAP_CPU_PERCENT=429, CATALOG=430, CATCH=431, CHANGE_RETENTION=432, 
		CHANGE_TRACKING=433, CHECKSUM=434, CHECKSUM_AGG=435, CLEANUP=436, COLLECTION=437, 
		COLUMN_MASTER_KEY=438, COMMITTED=439, COMPATIBILITY_LEVEL=440, CONCAT=441, 
		CONCAT_NULL_YIELDS_NULL=442, CONTENT=443, CONTROL=444, COOKIE=445, COUNT=446, 
		COUNTER=447, COUNT_BIG=448, CPU=449, CREATE_NEW=450, CREATION_DISPOSITION=451, 
		CREDENTIAL=452, CRYPTOGRAPHIC=453, CURSOR_CLOSE_ON_COMMIT=454, CURSOR_DEFAULT=455, 
		DATEADD=456, DATEDIFF=457, DATENAME=458, DATEPART=459, DATE_CORRELATION_OPTIMIZATION=460, 
		DAYS=461, DB_CHAINING=462, DB_FAILOVER=463, DECRYPTION=464, DEFAULT_DOUBLE_QUOTE=465, 
		DEFAULT_FULLTEXT_LANGUAGE=466, DEFAULT_LANGUAGE=467, DELAY=468, DELAYED_DURABILITY=469, 
		DELETED=470, DENSE_RANK=471, DEPENDENTS=472, DES=473, DESX=474, DESCRIPTION=475, 
		DHCP=476, DIALOG=477, DIRECTORY_NAME=478, DISABLE=479, DISABLED=480, DISABLE_BROKER=481, 
		DISK_DRIVE=482, DOCUMENT=483, DYNAMIC=484, EMERGENCY=485, EMPTY=486, ENABLE=487, 
		ENABLE_BROKER=488, ENCRYPTED_VALUE=489, ENCRYPTION=490, ENDPOINT_URL=491, 
		ERROR_BROKER_CONVERSATIONS=492, EXECUTABLE=493, EXIST=494, EXPAND=495, 
		EXPIRY_DATE=496, EXPLICIT=497, FAILOVER_MODE=498, FAILURE=499, FAILURE_CONDITION_LEVEL=500, 
		FAIL_OPERATION=501, FAST=502, FAST_FORWARD=503, FILEGROUP=504, FILEGROWTH=505, 
		FILEPATH=506, FILESTREAM=507, FILTER=508, FIRST=509, FIRST_VALUE=510, 
		FOLLOWING=511, FORCE=512, FORCED=513, FORCE_FAILOVER_ALLOW_DATA_LOSS=514, 
		FORMAT=515, FORWARD_ONLY=516, FULLSCAN=517, FULLTEXT=518, GB=519, GETDATE=520, 
		GETUTCDATE=521, GLOBAL=522, GO=523, GROUPING=524, GROUPING_ID=525, GROUP_MAX_REQUESTS=526, 
		HADR=527, HASH=528, HEALTH_CHECK_TIMEOUT=529, HIGH=530, HONOR_BROKER_PRIORITY=531, 
		HOURS=532, IDENTITY_VALUE=533, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=534, 
		IMMEDIATE=535, IMPERSONATE=536, IMPORTANCE=537, INCREMENTAL=538, INITIATOR=539, 
		INPUT=540, INSENSITIVE=541, INSERTED=542, INT=543, IP=544, ISOLATION=545, 
		KB=546, KEEP=547, KEEPFIXED=548, KEYSET=549, KEYS=550, KEY_SOURCE=551, 
		LAG=552, LAST=553, LAST_VALUE=554, LEAD=555, LEVEL=556, LIST=557, LISTENER=558, 
		LISTENER_URL=559, LOB_COMPACTION=560, LOCAL=561, LOCATION=562, LOCK_ESCALATION=563, 
		LOGIN=564, LOOP=565, LOW=566, MANUAL=567, MARK=568, MAX=569, MAX_CPU_PERCENT=570, 
		MIN_CPU_PERCENT=571, MAX_FILES=572, MAX_IOPS_PER_VOLUME=573, MIN_IOPS_PER_VOLUME=574, 
		MAX_MEMORY_PERCENT=575, MIN_MEMORY_PERCENT=576, MAX_PROCESSES=577, MAX_QUEUE_READERS=578, 
		MAX_ROLLOVER_FILES=579, MAXDOP=580, MAX_DOP=581, MAXRECURSION=582, MAXSIZE=583, 
		MEDIUM=584, MESSAGE=585, MB=586, MEMORY_OPTIMIZED_DATA=587, MIN=588, MINUTES=589, 
		MIRROR_ADDRESS=590, MIN_ACTIVE_ROWVERSION=591, MIXED_PAGE_ALLOCATION=592, 
		MODIFY=593, MOVE=594, MULTI_USER=595, NAME=596, NESTED_TRIGGERS=597, NEW_ACCOUNT=598, 
		NEW_BROKER=599, NEW_PASSWORD=600, NEXT=601, NOCOUNT=602, NOEXPAND=603, 
		NODES=604, NON_TRANSACTED_ACCESS=605, NORECOMPUTE=606, NO=607, NORECOVERY=608, 
		NO_TRUNCATE=609, NO_WAIT=610, NTILE=611, NUMANODE=612, NUMBER=613, NUMERIC_ROUNDABORT=614, 
		OBJECT=615, OFFLINE=616, OFFSET=617, OLD_ACCOUNT=618, ONLINE=619, ONLY=620, 
		OPEN_EXISTING=621, OPTIMISTIC=622, OPTIMIZE=623, OUT=624, OUTPUT=625, 
		OWNER=626, PAGE_VERIFY=627, PARAMETERIZATION=628, PARTITION=629, PARTITIONS=630, 
		PARTNER=631, PATH=632, POOL=633, POISON_MESSAGE_HANDLING=634, PORT=635, 
		PRECEDING=636, PRIMARY_ROLE=637, PRIOR=638, PRIORITY=639, PRIORITY_LEVEL=640, 
		PRIVATE=641, PRIVATE_KEY=642, PRIVILEGES=643, PROCEDURE_NAME=644, PROPERTY=645, 
		PROVIDER=646, PROVIDER_KEY_NAME=647, QUEUE=648, QUEUE_DELAY=649, QUERY=650, 
		QUOTED_IDENTIFIER=651, RANGE=652, RANK=653, RC2=654, RC4=655, RC4_128=656, 
		READONLY=657, READ_COMMITTED_SNAPSHOT=658, READ_ONLY=659, READ_ONLY_ROUTING_LIST=660, 
		READ_WRITE=661, REBUILD=662, RECOMPILE=663, RECEIVE=664, RECOVERY=665, 
		RECURSIVE_TRIGGERS=666, RELATIVE=667, REMOVE=668, REORGANIZE=669, REPLICA=670, 
		REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=671, REMOTE=672, REMOTE_SERVICE_NAME=673, 
		REPEATABLE=674, REQUEST_MAX_MEMORY_GRANT_PERCENT=675, REQUEST_MAX_CPU_TIME_SEC=676, 
		REQUEST_MEMORY_GRANT_TIMEOUT_SEC=677, RESERVE_DISK_SPACE=678, RESOURCE=679, 
		RESOURCE_MANAGER_LOCATION=680, RESTRICTED_USER=681, RETENTION=682, ROBUST=683, 
		ROOT=684, ROUTE=685, ROW=686, ROWGUID=687, ROWS=688, ROW_NUMBER=689, SAMPLE=690, 
		SCHEMABINDING=691, SCOPED=692, SCROLL=693, SCROLL_LOCKS=694, SEARCH=695, 
		SECONDARY=696, SECONDARY_ONLY=697, SECONDARY_ROLE=698, SECONDS=699, SECRET=700, 
		SECURITY_LOG=701, SEEDING_MODE=702, SELF=703, SEND=704, SENT=705, SERIALIZABLE=706, 
		SESSION_TIMEOUT=707, SETERROR=708, SHOWPLAN=709, SIGNATURE=710, SIMPLE=711, 
		SINGLE_USER=712, SIZE=713, SMALLINT=714, SNAPSHOT=715, SPATIAL_WINDOW_MAX_CELLS=716, 
		START_DATE=717, STATIC=718, STATS_STREAM=719, STATUS=720, STDEV=721, STDEVP=722, 
		STOPLIST=723, SUBJECT=724, SUSPEND=725, STANDBY=726, STUFF=727, SUM=728, 
		SYMMETRIC=729, SYNCHRONOUS_COMMIT=730, SYNONYM=731, TAKE=732, TARGET_RECOVERY_TIME=733, 
		TB=734, TEXTIMAGE_ON=735, THROW=736, TIES=737, TIME=738, TIMER=739, TINYINT=740, 
		TIMEOUT=741, TORN_PAGE_DETECTION=742, TRANSFORM_NOISE_WORDS=743, TRIPLE_DES=744, 
		TRIPLE_DES_3KEY=745, TRUSTWORTHY=746, TRY=747, TSQL=748, TWO_DIGIT_YEAR_CUTOFF=749, 
		TYPE=750, TYPE_WARNING=751, UNBOUNDED=752, UNCOMMITTED=753, UNKNOWN=754, 
		UNLIMITED=755, USING=756, VALIDATION=757, VALID_XML=758, VALUE=759, VAR=760, 
		VARP=761, VIEWS=762, VIEW_METADATA=763, WELL_FORMED_XML=764, WORK=765, 
		WORKLOAD=766, XML=767, XMLNAMESPACES=768, DOLLAR_ACTION=769, SPACE=770, 
		COMMENT=771, LINE_COMMENT=772, DOUBLE_QUOTE_ID=773, SINGLE_QUOTE=774, 
		SQUARE_BRACKET_ID=775, LOCAL_ID=776, DECIMAL=777, ID=778, QUOTED_URL=779, 
		QUOTED_HOST_AND_PORT=780, STRING=781, BINARY=782, FLOAT=783, REAL=784, 
		EQUAL=785, GREATER=786, LESS=787, EXCLAMATION=788, PLUS_ASSIGN=789, MINUS_ASSIGN=790, 
		MULT_ASSIGN=791, DIV_ASSIGN=792, MOD_ASSIGN=793, AND_ASSIGN=794, XOR_ASSIGN=795, 
		OR_ASSIGN=796, DOT=797, UNDERLINE=798, AT=799, SHARP=800, DOLLAR=801, 
		LR_BRACKET=802, RR_BRACKET=803, COMMA=804, SEMI=805, COLON=806, STAR=807, 
		DIVIDE=808, MODULE=809, PLUS=810, MINUS=811, BIT_NOT=812, BIT_OR=813, 
		BIT_AND=814, BIT_XOR=815, IPV4_OCTECT=816;
	public static final int
		RULE_tsql_file = 0, RULE_batch = 1, RULE_sql_clauses = 2, RULE_sql_clause = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_cfl_statement = 6, RULE_block_statement = 7, 
		RULE_break_statement = 8, RULE_continue_statement = 9, RULE_goto_statement = 10, 
		RULE_return_statement = 11, RULE_if_statement = 12, RULE_throw_statement = 13, 
		RULE_throw_error_number = 14, RULE_throw_message = 15, RULE_throw_state = 16, 
		RULE_try_catch_statement = 17, RULE_waitfor_statement = 18, RULE_while_statement = 19, 
		RULE_print_statement = 20, RULE_raiseerror_statement = 21, RULE_empty_statement = 22, 
		RULE_another_statement = 23, RULE_alter_application_role = 24, RULE_create_application_role = 25, 
		RULE_drop_aggregate = 26, RULE_drop_application_role = 27, RULE_alter_assembly = 28, 
		RULE_alter_assembly_start = 29, RULE_alter_assembly_clause = 30, RULE_alter_assembly_from_clause = 31, 
		RULE_alter_assembly_from_clause_start = 32, RULE_alter_assembly_drop_clause = 33, 
		RULE_alter_assembly_drop_multiple_files = 34, RULE_alter_assembly_drop = 35, 
		RULE_alter_assembly_add_clause = 36, RULE_alter_asssembly_add_clause_start = 37, 
		RULE_alter_assembly_client_file_clause = 38, RULE_alter_assembly_file_name = 39, 
		RULE_alter_assembly_file_bits = 40, RULE_alter_assembly_as = 41, RULE_alter_assembly_with_clause = 42, 
		RULE_alter_assembly_with = 43, RULE_client_assembly_specifier = 44, RULE_assembly_option = 45, 
		RULE_network_file_share = 46, RULE_network_computer = 47, RULE_network_file_start = 48, 
		RULE_file_path = 49, RULE_file_directory_path_separator = 50, RULE_local_file = 51, 
		RULE_local_drive = 52, RULE_multiple_local_files = 53, RULE_multiple_local_file_start = 54, 
		RULE_create_assembly = 55, RULE_drop_assembly = 56, RULE_alter_asymmetric_key = 57, 
		RULE_alter_asymmetric_key_start = 58, RULE_asymmetric_key_option = 59, 
		RULE_asymmetric_key_option_start = 60, RULE_asymmetric_key_password_change_option = 61, 
		RULE_create_asymmetric_key = 62, RULE_drop_asymmetric_key = 63, RULE_alter_authorization = 64, 
		RULE_authorization_grantee = 65, RULE_entity_to = 66, RULE_colon_colon = 67, 
		RULE_alter_authorization_start = 68, RULE_alter_authorization_for_sql_database = 69, 
		RULE_alter_authorization_for_azure_dw = 70, RULE_alter_authorization_for_parallel_dw = 71, 
		RULE_class_type = 72, RULE_class_type_for_sql_database = 73, RULE_class_type_for_azure_dw = 74, 
		RULE_class_type_for_parallel_dw = 75, RULE_drop_availability_group = 76, 
		RULE_alter_availability_group = 77, RULE_alter_availability_group_start = 78, 
		RULE_alter_availability_group_options = 79, RULE_create_or_alter_broker_priority = 80, 
		RULE_drop_broker_priority = 81, RULE_alter_certificate = 82, RULE_alter_column_encryption_key = 83, 
		RULE_create_column_encryption_key = 84, RULE_drop_certificate = 85, RULE_drop_column_encryption_key = 86, 
		RULE_drop_column_master_key = 87, RULE_drop_contract = 88, RULE_drop_credential = 89, 
		RULE_drop_cryptograhic_provider = 90, RULE_drop_database = 91, RULE_drop_database_audit_specification = 92, 
		RULE_drop_database_scoped_credential = 93, RULE_drop_default = 94, RULE_drop_endpoint = 95, 
		RULE_drop_external_data_source = 96, RULE_drop_external_file_format = 97, 
		RULE_drop_external_library = 98, RULE_drop_external_resource_pool = 99, 
		RULE_drop_external_table = 100, RULE_drop_event_notifications = 101, RULE_drop_event_session = 102, 
		RULE_drop_fulltext_catalog = 103, RULE_drop_fulltext_index = 104, RULE_drop_fulltext_stoplist = 105, 
		RULE_drop_login = 106, RULE_drop_master_key = 107, RULE_drop_message_type = 108, 
		RULE_drop_partition_function = 109, RULE_drop_partition_scheme = 110, 
		RULE_drop_queue = 111, RULE_drop_remote_service_binding = 112, RULE_drop_resource_pool = 113, 
		RULE_drop_db_role = 114, RULE_drop_route = 115, RULE_drop_rule = 116, 
		RULE_drop_schema = 117, RULE_drop_search_property_list = 118, RULE_drop_security_policy = 119, 
		RULE_drop_sequence = 120, RULE_drop_server_audit = 121, RULE_drop_server_audit_specification = 122, 
		RULE_drop_server_role = 123, RULE_drop_service = 124, RULE_drop_signature = 125, 
		RULE_drop_statistics_name_azure_dw_and_pdw = 126, RULE_drop_symmetric_key = 127, 
		RULE_drop_synonym = 128, RULE_drop_user = 129, RULE_drop_workload_group = 130, 
		RULE_drop_xml_schema_collection = 131, RULE_disable_trigger = 132, RULE_enable_trigger = 133, 
		RULE_truncate_table = 134, RULE_create_column_master_key = 135, RULE_alter_credential = 136, 
		RULE_create_credential = 137, RULE_alter_cryptographic_provider = 138, 
		RULE_create_cryptographic_provider = 139, RULE_create_event_notification = 140, 
		RULE_create_or_alter_event_session = 141, RULE_event_session_predicate_expression = 142, 
		RULE_event_session_predicate_factor = 143, RULE_event_session_predicate_leaf = 144, 
		RULE_alter_external_data_source = 145, RULE_alter_external_library = 146, 
		RULE_create_external_library = 147, RULE_alter_external_resource_pool = 148, 
		RULE_create_external_resource_pool = 149, RULE_alter_fulltext_catalog = 150, 
		RULE_create_fulltext_catalog = 151, RULE_alter_fulltext_stoplist = 152, 
		RULE_create_fulltext_stoplist = 153, RULE_alter_login_sql_server = 154, 
		RULE_create_login_sql_server = 155, RULE_alter_login_azure_sql = 156, 
		RULE_create_login_azure_sql = 157, RULE_alter_login_azure_sql_dw_and_pdw = 158, 
		RULE_create_login_pdw = 159, RULE_alter_master_key_sql_server = 160, RULE_create_master_key_sql_server = 161, 
		RULE_alter_master_key_azure_sql = 162, RULE_create_master_key_azure_sql = 163, 
		RULE_alter_message_type = 164, RULE_alter_partition_function = 165, RULE_alter_partition_scheme = 166, 
		RULE_alter_remote_service_binding = 167, RULE_create_remote_service_binding = 168, 
		RULE_create_resource_pool = 169, RULE_alter_resource_governor = 170, RULE_alter_db_role = 171, 
		RULE_create_db_role = 172, RULE_create_route = 173, RULE_create_rule = 174, 
		RULE_alter_schema_sql = 175, RULE_create_schema = 176, RULE_create_schema_azure_sql_dw_and_pdw = 177, 
		RULE_alter_schema_azure_sql_dw_and_pdw = 178, RULE_create_search_property_list = 179, 
		RULE_create_security_policy = 180, RULE_alter_sequence = 181, RULE_create_sequence = 182, 
		RULE_alter_server_audit = 183, RULE_create_server_audit = 184, RULE_alter_server_audit_specification = 185, 
		RULE_create_server_audit_specification = 186, RULE_alter_server_configuration = 187, 
		RULE_alter_server_role = 188, RULE_create_server_role = 189, RULE_alter_server_role_pdw = 190, 
		RULE_alter_service = 191, RULE_create_service = 192, RULE_alter_service_master_key = 193, 
		RULE_alter_symmetric_key = 194, RULE_create_symmetric_key = 195, RULE_create_synonym = 196, 
		RULE_alter_user = 197, RULE_create_user = 198, RULE_create_user_azure_sql_dw = 199, 
		RULE_alter_user_azure_sql = 200, RULE_alter_workload_group = 201, RULE_create_workload_group = 202, 
		RULE_create_xml_schema_collection = 203, RULE_create_queue = 204, RULE_queue_settings = 205, 
		RULE_alter_queue = 206, RULE_queue_action = 207, RULE_queue_rebuild_options = 208, 
		RULE_create_contract = 209, RULE_conversation_statement = 210, RULE_message_statement = 211, 
		RULE_merge_statement = 212, RULE_merge_matched = 213, RULE_merge_not_matched = 214, 
		RULE_delete_statement = 215, RULE_delete_statement_from = 216, RULE_insert_statement = 217, 
		RULE_insert_statement_value = 218, RULE_receive_statement = 219, RULE_select_statement = 220, 
		RULE_time = 221, RULE_update_statement = 222, RULE_output_clause = 223, 
		RULE_output_dml_list_elem = 224, RULE_output_column_name = 225, RULE_create_database = 226, 
		RULE_create_index = 227, RULE_create_or_alter_procedure = 228, RULE_create_or_alter_trigger = 229, 
		RULE_create_or_alter_dml_trigger = 230, RULE_dml_trigger_option = 231, 
		RULE_dml_trigger_operation = 232, RULE_create_or_alter_ddl_trigger = 233, 
		RULE_ddl_trigger_operation = 234, RULE_create_or_alter_function = 235, 
		RULE_func_body_returns_select = 236, RULE_func_body_returns_table = 237, 
		RULE_func_body_returns_scalar = 238, RULE_procedure_param = 239, RULE_procedure_option = 240, 
		RULE_function_option = 241, RULE_create_statistics = 242, RULE_create_table = 243, 
		RULE_table_options = 244, RULE_create_view = 245, RULE_view_attribute = 246, 
		RULE_alter_table = 247, RULE_alter_database = 248, RULE_database_optionspec = 249, 
		RULE_auto_option = 250, RULE_change_tracking_option = 251, RULE_change_tracking_option_list = 252, 
		RULE_containment_option = 253, RULE_cursor_option = 254, RULE_alter_endpoint = 255, 
		RULE_database_mirroring_option = 256, RULE_mirroring_set_option = 257, 
		RULE_mirroring_partner = 258, RULE_mirroring_witness = 259, RULE_witness_partner_equal = 260, 
		RULE_partner_option = 261, RULE_witness_option = 262, RULE_witness_server = 263, 
		RULE_partner_server = 264, RULE_mirroring_host_port_seperator = 265, RULE_partner_server_tcp_prefix = 266, 
		RULE_port_number = 267, RULE_host = 268, RULE_date_correlation_optimization_option = 269, 
		RULE_db_encryption_option = 270, RULE_db_state_option = 271, RULE_db_update_option = 272, 
		RULE_db_user_access_option = 273, RULE_delayed_durability_option = 274, 
		RULE_external_access_option = 275, RULE_hadr_options = 276, RULE_mixed_page_allocation_option = 277, 
		RULE_parameterization_option = 278, RULE_recovery_option = 279, RULE_service_broker_option = 280, 
		RULE_snapshot_option = 281, RULE_sql_option = 282, RULE_target_recovery_time_option = 283, 
		RULE_termination = 284, RULE_drop_index = 285, RULE_drop_relational_or_xml_or_spatial_index = 286, 
		RULE_drop_backward_compatible_index = 287, RULE_drop_procedure = 288, 
		RULE_drop_trigger = 289, RULE_drop_dml_trigger = 290, RULE_drop_ddl_trigger = 291, 
		RULE_drop_function = 292, RULE_drop_statistics = 293, RULE_drop_table = 294, 
		RULE_drop_view = 295, RULE_create_type = 296, RULE_drop_type = 297, RULE_rowset_function_limited = 298, 
		RULE_openquery = 299, RULE_opendatasource = 300, RULE_declare_statement = 301, 
		RULE_cursor_statement = 302, RULE_execute_statement = 303, RULE_execute_statement_arg = 304, 
		RULE_execute_var_string = 305, RULE_security_statement = 306, RULE_create_certificate = 307, 
		RULE_existing_keys = 308, RULE_private_key_options = 309, RULE_generate_new_keys = 310, 
		RULE_date_options = 311, RULE_open_key = 312, RULE_close_key = 313, RULE_create_key = 314, 
		RULE_key_options = 315, RULE_algorithm = 316, RULE_encryption_mechanism = 317, 
		RULE_decryption_mechanism = 318, RULE_grant_permission = 319, RULE_set_statement = 320, 
		RULE_transaction_statement = 321, RULE_go_statement = 322, RULE_use_statement = 323, 
		RULE_dbcc_clause = 324, RULE_dbcc_options = 325, RULE_execute_clause = 326, 
		RULE_declare_local = 327, RULE_table_type_definition = 328, RULE_xml_type_definition = 329, 
		RULE_xml_schema_collection = 330, RULE_column_def_table_constraints = 331, 
		RULE_column_def_table_constraint = 332, RULE_column_definition = 333, 
		RULE_column_constraint = 334, RULE_table_constraint = 335, RULE_on_delete = 336, 
		RULE_on_update = 337, RULE_index_options = 338, RULE_index_option = 339, 
		RULE_declare_cursor = 340, RULE_declare_set_cursor_common = 341, RULE_declare_set_cursor_common_partial = 342, 
		RULE_fetch_cursor = 343, RULE_set_special = 344, RULE_constant_LOCAL_ID = 345, 
		RULE_expression = 346, RULE_primitive_expression = 347, RULE_case_expression = 348, 
		RULE_unary_operator_expression = 349, RULE_bracket_expression = 350, RULE_constant_expression = 351, 
		RULE_subquery = 352, RULE_with_expression = 353, RULE_common_table_expression = 354, 
		RULE_update_elem = 355, RULE_search_condition_list = 356, RULE_search_condition = 357, 
		RULE_search_condition_and = 358, RULE_search_condition_not = 359, RULE_predicate = 360, 
		RULE_query_expression = 361, RULE_sql_union = 362, RULE_query_specification = 363, 
		RULE_top_clause = 364, RULE_top_percent = 365, RULE_top_count = 366, RULE_order_by_clause = 367, 
		RULE_for_clause = 368, RULE_xml_common_directives = 369, RULE_order_by_expression = 370, 
		RULE_group_by_item = 371, RULE_option_clause = 372, RULE_option = 373, 
		RULE_optimize_for_arg = 374, RULE_select_list = 375, RULE_udt_method_arguments = 376, 
		RULE_asterisk = 377, RULE_column_elem = 378, RULE_udt_elem = 379, RULE_expression_elem = 380, 
		RULE_select_list_elem = 381, RULE_table_sources = 382, RULE_table_source = 383, 
		RULE_table_source_item_joined = 384, RULE_table_source_item = 385, RULE_open_xml = 386, 
		RULE_schema_declaration = 387, RULE_column_declaration = 388, RULE_change_table = 389, 
		RULE_join_part = 390, RULE_pivot_clause = 391, RULE_unpivot_clause = 392, 
		RULE_full_column_name_list = 393, RULE_table_name_with_hint = 394, RULE_rowset_function = 395, 
		RULE_bulk_option = 396, RULE_derived_table = 397, RULE_function_call = 398, 
		RULE_xml_data_type_methods = 399, RULE_value_method = 400, RULE_query_method = 401, 
		RULE_exist_method = 402, RULE_modify_method = 403, RULE_nodes_method = 404, 
		RULE_switch_section = 405, RULE_switch_search_condition_section = 406, 
		RULE_as_column_alias = 407, RULE_as_table_alias = 408, RULE_table_alias = 409, 
		RULE_with_table_hints = 410, RULE_insert_with_table_hints = 411, RULE_table_hint = 412, 
		RULE_index_value = 413, RULE_column_alias_list = 414, RULE_column_alias = 415, 
		RULE_table_value_constructor = 416, RULE_expression_list = 417, RULE_ranking_windowed_function = 418, 
		RULE_aggregate_windowed_function = 419, RULE_analytic_windowed_function = 420, 
		RULE_all_distinct_expression = 421, RULE_over_clause = 422, RULE_row_or_range_clause = 423, 
		RULE_window_frame_extent = 424, RULE_window_frame_bound = 425, RULE_window_frame_preceding = 426, 
		RULE_window_frame_following = 427, RULE_create_database_option = 428, 
		RULE_database_filestream_option = 429, RULE_database_file_spec = 430, 
		RULE_file_group = 431, RULE_file_spec = 432, RULE_entity_name = 433, RULE_entity_name_for_azure_dw = 434, 
		RULE_entity_name_for_parallel_dw = 435, RULE_full_table_name = 436, RULE_table_name = 437, 
		RULE_simple_name = 438, RULE_func_proc_name = 439, RULE_ddl_object = 440, 
		RULE_full_column_name = 441, RULE_column_name_list_with_order = 442, RULE_column_name_list = 443, 
		RULE_cursor_name = 444, RULE_on_off = 445, RULE_clustered = 446, RULE_null_notnull = 447, 
		RULE_null_or_default = 448, RULE_scalar_function_name = 449, RULE_begin_conversation_timer = 450, 
		RULE_begin_conversation_dialog = 451, RULE_contract_name = 452, RULE_service_name = 453, 
		RULE_end_conversation = 454, RULE_waitfor_conversation = 455, RULE_get_conversation = 456, 
		RULE_queue_id = 457, RULE_send_conversation = 458, RULE_data_type = 459, 
		RULE_default_value = 460, RULE_constant = 461, RULE_sign = 462, RULE_id = 463, 
		RULE_simple_id = 464, RULE_comparison_operator = 465, RULE_assignment_operator = 466, 
		RULE_file_size = 467;
	public static final String[] ruleNames = {
		"tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", "ddl_clause", 
		"cfl_statement", "block_statement", "break_statement", "continue_statement", 
		"goto_statement", "return_statement", "if_statement", "throw_statement", 
		"throw_error_number", "throw_message", "throw_state", "try_catch_statement", 
		"waitfor_statement", "while_statement", "print_statement", "raiseerror_statement", 
		"empty_statement", "another_statement", "alter_application_role", "create_application_role", 
		"drop_aggregate", "drop_application_role", "alter_assembly", "alter_assembly_start", 
		"alter_assembly_clause", "alter_assembly_from_clause", "alter_assembly_from_clause_start", 
		"alter_assembly_drop_clause", "alter_assembly_drop_multiple_files", "alter_assembly_drop", 
		"alter_assembly_add_clause", "alter_asssembly_add_clause_start", "alter_assembly_client_file_clause", 
		"alter_assembly_file_name", "alter_assembly_file_bits", "alter_assembly_as", 
		"alter_assembly_with_clause", "alter_assembly_with", "client_assembly_specifier", 
		"assembly_option", "network_file_share", "network_computer", "network_file_start", 
		"file_path", "file_directory_path_separator", "local_file", "local_drive", 
		"multiple_local_files", "multiple_local_file_start", "create_assembly", 
		"drop_assembly", "alter_asymmetric_key", "alter_asymmetric_key_start", 
		"asymmetric_key_option", "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
		"create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
		"authorization_grantee", "entity_to", "colon_colon", "alter_authorization_start", 
		"alter_authorization_for_sql_database", "alter_authorization_for_azure_dw", 
		"alter_authorization_for_parallel_dw", "class_type", "class_type_for_sql_database", 
		"class_type_for_azure_dw", "class_type_for_parallel_dw", "drop_availability_group", 
		"alter_availability_group", "alter_availability_group_start", "alter_availability_group_options", 
		"create_or_alter_broker_priority", "drop_broker_priority", "alter_certificate", 
		"alter_column_encryption_key", "create_column_encryption_key", "drop_certificate", 
		"drop_column_encryption_key", "drop_column_master_key", "drop_contract", 
		"drop_credential", "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification", 
		"drop_database_scoped_credential", "drop_default", "drop_endpoint", "drop_external_data_source", 
		"drop_external_file_format", "drop_external_library", "drop_external_resource_pool", 
		"drop_external_table", "drop_event_notifications", "drop_event_session", 
		"drop_fulltext_catalog", "drop_fulltext_index", "drop_fulltext_stoplist", 
		"drop_login", "drop_master_key", "drop_message_type", "drop_partition_function", 
		"drop_partition_scheme", "drop_queue", "drop_remote_service_binding", 
		"drop_resource_pool", "drop_db_role", "drop_route", "drop_rule", "drop_schema", 
		"drop_search_property_list", "drop_security_policy", "drop_sequence", 
		"drop_server_audit", "drop_server_audit_specification", "drop_server_role", 
		"drop_service", "drop_signature", "drop_statistics_name_azure_dw_and_pdw", 
		"drop_symmetric_key", "drop_synonym", "drop_user", "drop_workload_group", 
		"drop_xml_schema_collection", "disable_trigger", "enable_trigger", "truncate_table", 
		"create_column_master_key", "alter_credential", "create_credential", "alter_cryptographic_provider", 
		"create_cryptographic_provider", "create_event_notification", "create_or_alter_event_session", 
		"event_session_predicate_expression", "event_session_predicate_factor", 
		"event_session_predicate_leaf", "alter_external_data_source", "alter_external_library", 
		"create_external_library", "alter_external_resource_pool", "create_external_resource_pool", 
		"alter_fulltext_catalog", "create_fulltext_catalog", "alter_fulltext_stoplist", 
		"create_fulltext_stoplist", "alter_login_sql_server", "create_login_sql_server", 
		"alter_login_azure_sql", "create_login_azure_sql", "alter_login_azure_sql_dw_and_pdw", 
		"create_login_pdw", "alter_master_key_sql_server", "create_master_key_sql_server", 
		"alter_master_key_azure_sql", "create_master_key_azure_sql", "alter_message_type", 
		"alter_partition_function", "alter_partition_scheme", "alter_remote_service_binding", 
		"create_remote_service_binding", "create_resource_pool", "alter_resource_governor", 
		"alter_db_role", "create_db_role", "create_route", "create_rule", "alter_schema_sql", 
		"create_schema", "create_schema_azure_sql_dw_and_pdw", "alter_schema_azure_sql_dw_and_pdw", 
		"create_search_property_list", "create_security_policy", "alter_sequence", 
		"create_sequence", "alter_server_audit", "create_server_audit", "alter_server_audit_specification", 
		"create_server_audit_specification", "alter_server_configuration", "alter_server_role", 
		"create_server_role", "alter_server_role_pdw", "alter_service", "create_service", 
		"alter_service_master_key", "alter_symmetric_key", "create_symmetric_key", 
		"create_synonym", "alter_user", "create_user", "create_user_azure_sql_dw", 
		"alter_user_azure_sql", "alter_workload_group", "create_workload_group", 
		"create_xml_schema_collection", "create_queue", "queue_settings", "alter_queue", 
		"queue_action", "queue_rebuild_options", "create_contract", "conversation_statement", 
		"message_statement", "merge_statement", "merge_matched", "merge_not_matched", 
		"delete_statement", "delete_statement_from", "insert_statement", "insert_statement_value", 
		"receive_statement", "select_statement", "time", "update_statement", "output_clause", 
		"output_dml_list_elem", "output_column_name", "create_database", "create_index", 
		"create_or_alter_procedure", "create_or_alter_trigger", "create_or_alter_dml_trigger", 
		"dml_trigger_option", "dml_trigger_operation", "create_or_alter_ddl_trigger", 
		"ddl_trigger_operation", "create_or_alter_function", "func_body_returns_select", 
		"func_body_returns_table", "func_body_returns_scalar", "procedure_param", 
		"procedure_option", "function_option", "create_statistics", "create_table", 
		"table_options", "create_view", "view_attribute", "alter_table", "alter_database", 
		"database_optionspec", "auto_option", "change_tracking_option", "change_tracking_option_list", 
		"containment_option", "cursor_option", "alter_endpoint", "database_mirroring_option", 
		"mirroring_set_option", "mirroring_partner", "mirroring_witness", "witness_partner_equal", 
		"partner_option", "witness_option", "witness_server", "partner_server", 
		"mirroring_host_port_seperator", "partner_server_tcp_prefix", "port_number", 
		"host", "date_correlation_optimization_option", "db_encryption_option", 
		"db_state_option", "db_update_option", "db_user_access_option", "delayed_durability_option", 
		"external_access_option", "hadr_options", "mixed_page_allocation_option", 
		"parameterization_option", "recovery_option", "service_broker_option", 
		"snapshot_option", "sql_option", "target_recovery_time_option", "termination", 
		"drop_index", "drop_relational_or_xml_or_spatial_index", "drop_backward_compatible_index", 
		"drop_procedure", "drop_trigger", "drop_dml_trigger", "drop_ddl_trigger", 
		"drop_function", "drop_statistics", "drop_table", "drop_view", "create_type", 
		"drop_type", "rowset_function_limited", "openquery", "opendatasource", 
		"declare_statement", "cursor_statement", "execute_statement", "execute_statement_arg", 
		"execute_var_string", "security_statement", "create_certificate", "existing_keys", 
		"private_key_options", "generate_new_keys", "date_options", "open_key", 
		"close_key", "create_key", "key_options", "algorithm", "encryption_mechanism", 
		"decryption_mechanism", "grant_permission", "set_statement", "transaction_statement", 
		"go_statement", "use_statement", "dbcc_clause", "dbcc_options", "execute_clause", 
		"declare_local", "table_type_definition", "xml_type_definition", "xml_schema_collection", 
		"column_def_table_constraints", "column_def_table_constraint", "column_definition", 
		"column_constraint", "table_constraint", "on_delete", "on_update", "index_options", 
		"index_option", "declare_cursor", "declare_set_cursor_common", "declare_set_cursor_common_partial", 
		"fetch_cursor", "set_special", "constant_LOCAL_ID", "expression", "primitive_expression", 
		"case_expression", "unary_operator_expression", "bracket_expression", 
		"constant_expression", "subquery", "with_expression", "common_table_expression", 
		"update_elem", "search_condition_list", "search_condition", "search_condition_and", 
		"search_condition_not", "predicate", "query_expression", "sql_union", 
		"query_specification", "top_clause", "top_percent", "top_count", "order_by_clause", 
		"for_clause", "xml_common_directives", "order_by_expression", "group_by_item", 
		"option_clause", "option", "optimize_for_arg", "select_list", "udt_method_arguments", 
		"asterisk", "column_elem", "udt_elem", "expression_elem", "select_list_elem", 
		"table_sources", "table_source", "table_source_item_joined", "table_source_item", 
		"open_xml", "schema_declaration", "column_declaration", "change_table", 
		"join_part", "pivot_clause", "unpivot_clause", "full_column_name_list", 
		"table_name_with_hint", "rowset_function", "bulk_option", "derived_table", 
		"function_call", "xml_data_type_methods", "value_method", "query_method", 
		"exist_method", "modify_method", "nodes_method", "switch_section", "switch_search_condition_section", 
		"as_column_alias", "as_table_alias", "table_alias", "with_table_hints", 
		"insert_with_table_hints", "table_hint", "index_value", "column_alias_list", 
		"column_alias", "table_value_constructor", "expression_list", "ranking_windowed_function", 
		"aggregate_windowed_function", "analytic_windowed_function", "all_distinct_expression", 
		"over_clause", "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
		"window_frame_preceding", "window_frame_following", "create_database_option", 
		"database_filestream_option", "database_file_spec", "file_group", "file_spec", 
		"entity_name", "entity_name_for_azure_dw", "entity_name_for_parallel_dw", 
		"full_table_name", "table_name", "simple_name", "func_proc_name", "ddl_object", 
		"full_column_name", "column_name_list_with_order", "column_name_list", 
		"cursor_name", "on_off", "clustered", "null_notnull", "null_or_default", 
		"scalar_function_name", "begin_conversation_timer", "begin_conversation_dialog", 
		"contract_name", "service_name", "end_conversation", "waitfor_conversation", 
		"get_conversation", "queue_id", "send_conversation", "data_type", "default_value", 
		"constant", "sign", "id", "simple_id", "comparison_operator", "assignment_operator", 
		"file_size"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'ADD'", "'AES'", "'ALL'", "'ALLOW_CONNECTIONS'", "'ALLOW_MULTIPLE_EVENT_LOSS'", 
		"'ALLOW_SINGLE_EVENT_LOSS'", "'ALTER'", "'AND'", "'ANONYMOUS'", "'ANY'", 
		"'APPEND'", "'APPLICATION'", "'AS'", "'ASC'", "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'", 
		"'AUTHORIZATION'", "'AUTHENTICATION'", "'AUTOMATED_BACKUP_PREFERENCE'", 
		"'AUTOMATIC'", "'AVAILABILITY_MODE'", "'\\'", "'BACKUP'", "'BEFORE'", 
		"'BEGIN'", "'BETWEEN'", "'BLOCK'", "'BLOCKSIZE'", "'BLOCKING_HIERARCHY'", 
		"'BREAK'", "'BROWSE'", "'BUFFER'", "'BUFFERCOUNT'", "'BULK'", "'BY'", 
		"'CACHE'", "'CALLED'", "'CASCADE'", "'CASE'", "'CERTIFICATE'", "'CHANGETABLE'", 
		"'CHANGES'", "'CHECK'", "'CHECKPOINT'", "'CHECK_POLICY'", "'CHECK_EXPIRATION'", 
		"'CLASSIFIER_FUNCTION'", "'CLOSE'", "'CLUSTER'", "'CLUSTERED'", "'COALESCE'", 
		"'COLLATE'", "'COLUMN'", "'COMPRESSION'", "'COMMIT'", "'COMPUTE'", "'CONFIGURATION'", 
		"'CONSTRAINT'", "'CONTAINMENT'", "'CONTAINS'", "'CONTAINSTABLE'", "'CONTEXT'", 
		"'CONTINUE'", "'CONTINUE_AFTER_ERROR'", "'CONTRACT'", "'CONTRACT_NAME'", 
		"'CONVERSATION'", null, "'COPY_ONLY'", "'CREATE'", "'CROSS'", "'CURRENT'", 
		"'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
		"'CURSOR'", "'CYCLE'", "'DATA'", "'DATA_COMPRESSION'", "'DATA_SOURCE'", 
		"'DATABASE'", "'DATABASE_MIRRORING'", "'DBCC'", "'DEALLOCATE'", "'DECLARE'", 
		"'DEFAULT'", "'DEFAULT_DATABASE'", "'DEFAULT_SCHEMA'", "'DELETE'", "'DENY'", 
		"'DESC'", "'DIAGNOSTICS'", "'DIFFERENTIAL'", "'DISK'", "'DISTINCT'", "'DISTRIBUTED'", 
		"'DOUBLE'", "'\\\\'", "'//'", "'DROP'", "'DTC_SUPPORT'", "'DUMP'", "'ELSE'", 
		"'ENABLED'", "'END'", "'ENDPOINT'", "'ERRLVL'", "'ESCAPE'", "'ERROR'", 
		"'EVENT'", null, "'EVENT_RETENTION_MODE'", "'EXCEPT'", "'EXECUTABLE_FILE'", 
		null, "'EXISTS'", "'EXPIREDATE'", "'EXIT'", "'EXTENSION'", "'EXTERNAL'", 
		"'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILURECONDITIONLEVEL'", "'FAN_IN'", 
		"'FETCH'", "'FILE'", "'FILENAME'", "'FILLFACTOR'", "'FILE_SNAPSHOT'", 
		"'FOR'", "'FORCESEEK'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", "'FOREIGN'", 
		"'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", "'FULL'", "'FUNCTION'", "'GET'", 
		"'GOTO'", "'GOVERNOR'", "'GRANT'", "'GROUP'", "'HAVING'", "'HASHED'", 
		"'HEALTHCHECKTIMEOUT'", "'IDENTITY'", "'IDENTITYCOL'", "'IDENTITY_INSERT'", 
		"'IF'", "'IN'", "'INCLUDE'", "'INCREMENT'", "'INDEX'", "'INFINITE'", "'INIT'", 
		"'INNER'", "'INSERT'", "'INSTEAD'", "'INTERSECT'", "'INTO'", null, null, 
		"'IS'", "'ISNULL'", "'JOIN'", "'KERBEROS'", "'KEY'", "'KEY_PATH'", "'KEY_STORE_PROVIDER_NAME'", 
		"'KILL'", "'LANGUAGE'", "'LEFT'", "'LIBRARY'", "'LIFETIME'", "'LIKE'", 
		"'LINENO'", "'LINUX'", "'LISTENER_IP'", "'LISTENER_PORT'", "'LOAD'", "'LOCAL_SERVICE_NAME'", 
		"'LOG'", "'MATCHED'", "'MASTER'", "'MAX_MEMORY'", "'MAXTRANSFER'", "'MAXVALUE'", 
		"'MAX_DISPATCH_LATENCY'", "'MAX_EVENT_SIZE'", "'MAX_SIZE'", "'MAX_OUTSTANDING_IO_PER_VOLUME'", 
		"'MEDIADESCRIPTION'", "'MEDIANAME'", "'MEMBER'", "'MEMORY_PARTITION_MODE'", 
		"'MERGE'", "'MESSAGE_FORWARDING'", "'MESSAGE_FORWARD_SIZE'", "'MINVALUE'", 
		"'MIRROR'", "'MUST_CHANGE'", "'NATIONAL'", "'NEGOTIATE'", "'NOCHECK'", 
		"'NOFORMAT'", "'NOINIT'", "'NONCLUSTERED'", "'NONE'", "'NOREWIND'", "'NOSKIP'", 
		"'NOUNLOAD'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", "'NO_EVENT_LOSS'", 
		"'NOT'", "'NOTIFICATION'", "'NTLM'", "'NULL'", "'NULLIF'", "'OF'", "'OFF'", 
		"'OFFSETS'", "'OLD_PASSWORD'", "'ON'", "'ON_FAILURE'", "'OPEN'", "'OPENDATASOURCE'", 
		"'OPENQUERY'", "'OPENROWSET'", "'OPENXML'", "'OPTION'", "'OR'", "'ORDER'", 
		"'OUTER'", "'OVER'", "'PAGE'", "'PARAM_NODE'", "'PARTIAL'", "'PASSWORD'", 
		"'PERCENT'", "'PERMISSION_SET'", "'PER_CPU'", "'PER_DB'", "'PER_NODE'", 
		"'PIVOT'", "'PLAN'", "'PLATFORM'", "'POLICY'", "'PRECISION'", "'PREDICATE'", 
		"'PRIMARY'", "'PRINT'", "'PROC'", "'PROCEDURE'", "'PROCESS'", "'PUBLIC'", 
		"'PYTHON'", "'R'", "'RAISERROR'", "'RAW'", "'READ'", "'READTEXT'", "'READ_WRITE_FILEGROUPS'", 
		"'RECONFIGURE'", "'REFERENCES'", "'REGENERATE'", "'RELATED_CONVERSATION'", 
		"'RELATED_CONVERSATION_GROUP'", "'REPLICATION'", "'REQUIRED'", "'RESET'", 
		"'RESTART'", "'RESTORE'", "'RESTRICT'", "'RESUME'", "'RETAINDAYS'", "'RETURN'", 
		"'RETURNS'", "'REVERT'", "'REVOKE'", "'REWIND'", "'RIGHT'", "'ROLLBACK'", 
		"'ROLE'", "'ROWCOUNT'", "'ROWGUIDCOL'", "'RSA_512'", "'RSA_1024'", "'RSA_2048'", 
		"'RSA_3072'", "'RSA_4096'", "'SAFETY'", "'RULE'", "'SAFE'", "'SAVE'", 
		"'SCHEDULER'", "'SCHEMA'", "'SCHEME'", "'SECURITY'", "'SECURITYAUDIT'", 
		"'SELECT'", "'SEMANTICKEYPHRASETABLE'", "'SEMANTICSIMILARITYDETAILSTABLE'", 
		"'SEMANTICSIMILARITYTABLE'", "'SEQUENCE'", "'SERVER'", "'SERVICE'", "'SERVICE_BROKER'", 
		"'SERVICE_NAME'", "'SESSION'", "'SESSION_USER'", "'SET'", "'SETUSER'", 
		"'SHUTDOWN'", "'SID'", "'SKIP'", "'SOFTNUMA'", "'SOME'", "'SOURCE'", "'SPECIFICATION'", 
		"'SPLIT'", "'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUTS'", 
		"'STATISTICS'", "'STATE'", "'STATS'", "'START'", "'STARTED'", "'STARTUP_STATE'", 
		"'STOP'", "'STOPPED'", "'STOP_ON_ERROR'", "'SUPPORTED'", "'SYSTEM'", "'SYSTEM_USER'", 
		"'TABLE'", "'TABLESAMPLE'", "'TAPE'", "'TARGET'", "'TCP'", "'TEXTSIZE'", 
		"'THEN'", "'TO'", "'TOP'", "'TRACK_CAUSALITY'", "'TRAN'", "'TRANSACTION'", 
		"'TRANSFER'", "'TRIGGER'", "'TRUNCATE'", "'TSEQUAL'", "'UNCHECKED'", "'UNION'", 
		"'UNIQUE'", "'UNLOCK'", "'UNPIVOT'", "'UNSAFE'", "'UPDATE'", "'UPDATETEXT'", 
		"'URL'", "'USE'", "'USED'", "'USER'", "'VALUES'", "'VARYING'", "'VERBOSELOGGING'", 
		"'VIEW'", "'VISIBILITY'", "'WAITFOR'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WINDOWS'", "'WITH'", "'WITHIN'", "'WITHOUT'", "'WITNESS'", "'WRITETEXT'", 
		"'ABSOLUTE'", "'ACCENT_SENSITIVITY'", "'ACTION'", "'ACTIVE'", "'ACTIVATION'", 
		"'ADDRESS'", "'AES_128'", "'AES_192'", "'AES_256'", "'AFFINITY'", "'AFTER'", 
		"'AGGREGATE'", "'ALGORITHM'", "'ALLOWED'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
		"'ALLOW_SNAPSHOT_ISOLATION'", "'ANSI_NULLS'", "'ANSI_NULL_DEFAULT'", "'ANSI_PADDING'", 
		"'ANSI_WARNINGS'", "'APPLICATION_LOG'", "'APPLY'", "'ARITHABORT'", "'ASSEMBLY'", 
		"'AUDIT'", "'AUDIT_GUID'", "'AUTO'", "'AUTO_CLEANUP'", "'AUTO_CLOSE'", 
		"'AUTO_CREATE_STATISTICS'", "'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", 
		"'AUTO_UPDATE_STATISTICS_ASYNC'", "'AVAILABILITY'", "'AVG'", "'BACKUP_PRIORITY'", 
		"'BEGIN_DIALOG'", "'BIGINT'", "'BINARY BASE64'", "'BINARY_CHECKSUM'", 
		"'BINDING'", "'BLOB_STORAGE'", "'BROKER'", "'BROKER_INSTANCE'", "'BULK_LOGGED'", 
		"'CALLER'", null, "'CAP_CPU_PERCENT'", "'CATALOG'", "'CATCH'", "'CHANGE_RETENTION'", 
		"'CHANGE_TRACKING'", "'CHECKSUM'", "'CHECKSUM_AGG'", "'CLEANUP'", "'COLLECTION'", 
		"'COLUMN_MASTER_KEY'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", "'CONCAT'", 
		"'CONCAT_NULL_YIELDS_NULL'", "'CONTENT'", "'CONTROL'", "'COOKIE'", "'COUNT'", 
		"'COUNTER'", "'COUNT_BIG'", "'CPU'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", 
		"'CREDENTIAL'", "'CRYPTOGRAPHIC'", "'CURSOR_CLOSE_ON_COMMIT'", "'CURSOR_DEFAULT'", 
		"'DATEADD'", "'DATEDIFF'", "'DATENAME'", "'DATEPART'", "'DATE_CORRELATION_OPTIMIZATION'", 
		"'DAYS'", "'DB_CHAINING'", "'DB_FAILOVER'", "'DECRYPTION'", null, "'DEFAULT_FULLTEXT_LANGUAGE'", 
		"'DEFAULT_LANGUAGE'", "'DELAY'", "'DELAYED_DURABILITY'", "'DELETED'", 
		"'DENSE_RANK'", "'DEPENDENTS'", "'DES'", "'DESX'", "'DESCRIPTION'", "'DHCP'", 
		"'DIALOG'", "'DIRECTORY_NAME'", "'DISABLE'", "'DISABLED'", "'DISABLE_BROKER'", 
		null, "'DOCUMENT'", "'DYNAMIC'", "'EMERGENCY'", "'EMPTY'", "'ENABLE'", 
		"'ENABLE_BROKER'", "'ENCRYPTED_VALUE'", "'ENCRYPTION'", "'ENDPOINT_URL'", 
		"'ERROR_BROKER_CONVERSATIONS'", "'EXECUTABLE'", "'EXIST'", "'EXPAND'", 
		"'EXPIRY_DATE'", "'EXPLICIT'", "'FAILOVER_MODE'", "'FAILURE'", "'FAILURE_CONDITION_LEVEL'", 
		"'FAIL_OPERATION'", "'FAST'", "'FAST_FORWARD'", "'FILEGROUP'", "'FILEGROWTH'", 
		"'FILEPATH'", "'FILESTREAM'", "'FILTER'", "'FIRST'", "'FIRST_VALUE'", 
		"'FOLLOWING'", "'FORCE'", "'FORCED'", "'FORCE_FAILOVER_ALLOW_DATA_LOSS'", 
		"'FORMAT'", "'FORWARD_ONLY'", "'FULLSCAN'", "'FULLTEXT'", "'GB'", "'GETDATE'", 
		"'GETUTCDATE'", "'GLOBAL'", "'GO'", "'GROUPING'", "'GROUPING_ID'", "'GROUP_MAX_REQUESTS'", 
		"'HADR'", "'HASH'", "'HEALTH_CHECK_TIMEOUT'", "'HIGH'", "'HONOR_BROKER_PRIORITY'", 
		"'HOURS'", "'IDENTITY_VALUE'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", 
		"'IMMEDIATE'", "'IMPERSONATE'", "'IMPORTANCE'", "'INCREMENTAL'", "'INITIATOR'", 
		"'INPUT'", "'INSENSITIVE'", "'INSERTED'", "'INT'", "'IP'", "'ISOLATION'", 
		"'KB'", "'KEEP'", "'KEEPFIXED'", "'KEYSET'", "'KEYS'", "'KEY_SOURCE'", 
		"'LAG'", "'LAST'", "'LAST_VALUE'", "'LEAD'", "'LEVEL'", "'LIST'", "'LISTENER'", 
		"'LISTENER_URL'", "'LOB_COMPACTION'", "'LOCAL'", "'LOCATION'", "'LOCK_ESCALATION'", 
		"'LOGIN'", "'LOOP'", "'LOW'", "'MANUAL'", "'MARK'", "'MAX'", "'MAX_CPU_PERCENT'", 
		"'MIN_CPU_PERCENT'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", "'MIN_IOPS_PER_VOLUME'", 
		"'MAX_MEMORY_PERCENT'", "'MIN_MEMORY_PERCENT'", "'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", 
		"'MAX_ROLLOVER_FILES'", "'MAXDOP'", "'MAX_DOP'", "'MAXRECURSION'", "'MAXSIZE'", 
		"'MEDIUM'", "'MESSAGE'", "'MB'", "'MEMORY_OPTIMIZED_DATA'", "'MIN'", "'MINUTES'", 
		"'MIRROR_ADDRESS'", "'MIN_ACTIVE_ROWVERSION'", "'MIXED_PAGE_ALLOCATION'", 
		"'MODIFY'", "'MOVE'", "'MULTI_USER'", "'NAME'", "'NESTED_TRIGGERS'", "'NEW_ACCOUNT'", 
		"'NEW_BROKER'", "'NEW_PASSWORD'", "'NEXT'", "'NOCOUNT'", "'NOEXPAND'", 
		"'NODES'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", "'NO'", "'NORECOVERY'", 
		"'NO_TRUNCATE'", "'NO_WAIT'", "'NTILE'", "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", 
		"'OBJECT'", "'OFFLINE'", "'OFFSET'", "'OLD_ACCOUNT'", "'ONLINE'", "'ONLY'", 
		"'OPEN_EXISTING'", "'OPTIMISTIC'", "'OPTIMIZE'", "'OUT'", "'OUTPUT'", 
		"'OWNER'", "'PAGE_VERIFY'", "'PARAMETERIZATION'", "'PARTITION'", "'PARTITIONS'", 
		"'PARTNER'", "'PATH'", "'POOL'", "'POISON_MESSAGE_HANDLING'", "'PORT'", 
		"'PRECEDING'", "'PRIMARY_ROLE'", "'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", 
		"'PRIVATE'", "'PRIVATE_KEY'", "'PRIVILEGES'", "'PROCEDURE_NAME'", "'PROPERTY'", 
		"'PROVIDER'", "'PROVIDER_KEY_NAME'", "'QUEUE'", "'QUEUE_DELAY'", "'QUERY'", 
		"'QUOTED_IDENTIFIER'", "'RANGE'", "'RANK'", "'RC2'", "'RC4'", "'RC4_128'", 
		"'READONLY'", "'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", 
		"'READ_WRITE'", "'REBUILD'", "'RECOMPILE'", "'RECEIVE'", "'RECOVERY'", 
		"'RECURSIVE_TRIGGERS'", "'RELATIVE'", "'REMOVE'", "'REORGANIZE'", "'REPLICA'", 
		"'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", "'REMOTE'", "'REMOTE_SERVICE_NAME'", 
		"'REPEATABLE'", "'REQUEST_MAX_MEMORY_GRANT_PERCENT'", "'REQUEST_MAX_CPU_TIME_SEC'", 
		"'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", "'RESERVE_DISK_SPACE'", "'RESOURCE'", 
		"'RESOURCE_MANAGER_LOCATION'", "'RESTRICTED_USER'", "'RETENTION'", "'ROBUST'", 
		"'ROOT'", "'ROUTE'", "'ROW'", "'ROWGUID'", "'ROWS'", "'ROW_NUMBER'", "'SAMPLE'", 
		"'SCHEMABINDING'", "'SCOPED'", "'SCROLL'", "'SCROLL_LOCKS'", "'SEARCH'", 
		"'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", "'SECONDS'", "'SECRET'", 
		"'SECURITY_LOG'", "'SEEDING_MODE'", "'SELF'", "'SEND'", "'SENT'", "'SERIALIZABLE'", 
		"'SESSION_TIMEOUT'", "'SETERROR'", "'SHOWPLAN'", "'SIGNATURE'", "'SIMPLE'", 
		"'SINGLE_USER'", "'SIZE'", "'SMALLINT'", "'SNAPSHOT'", "'SPATIAL_WINDOW_MAX_CELLS'", 
		"'START_DATE'", "'STATIC'", "'STATS_STREAM'", "'STATUS'", "'STDEV'", "'STDEVP'", 
		"'STOPLIST'", "'SUBJECT'", "'SUSPEND'", "'STANDBY'", "'STUFF'", "'SUM'", 
		"'SYMMETRIC'", "'SYNCHRONOUS_COMMIT'", "'SYNONYM'", "'TAKE'", "'TARGET_RECOVERY_TIME'", 
		"'TB'", "'TEXTIMAGE_ON'", "'THROW'", "'TIES'", "'TIME'", "'TIMER'", "'TINYINT'", 
		"'TIMEOUT'", "'TORN_PAGE_DETECTION'", "'TRANSFORM_NOISE_WORDS'", "'TRIPLE_DES'", 
		"'TRIPLE_DES_3KEY'", "'TRUSTWORTHY'", "'TRY'", "'TSQL'", "'TWO_DIGIT_YEAR_CUTOFF'", 
		"'TYPE'", "'TYPE_WARNING'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNKNOWN'", 
		"'UNLIMITED'", "'USING'", "'VALIDATION'", "'VALID_XML'", "'VALUE'", "'VAR'", 
		"'VARP'", "'VIEWS'", "'VIEW_METADATA'", "'WELL_FORMED_XML'", "'WORK'", 
		"'WORKLOAD'", "'XML'", "'XMLNAMESPACES'", "'$ACTION'", null, null, null, 
		null, "'''", null, null, null, null, null, null, null, null, null, null, 
		"'='", "'>'", "'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
		"'^='", "'|='", "'.'", "'_'", "'@'", "'#'", "'$'", "'('", "')'", "','", 
		"';'", "':'", "'*'", "'/'", "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", 
		"'^'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "ADD", "AES", "ALL", "ALLOW_CONNECTIONS", "ALLOW_MULTIPLE_EVENT_LOSS", 
		"ALLOW_SINGLE_EVENT_LOSS", "ALTER", "AND", "ANONYMOUS", "ANY", "APPEND", 
		"APPLICATION", "AS", "ASC", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "AUTHORIZATION", 
		"AUTHENTICATION", "AUTOMATED_BACKUP_PREFERENCE", "AUTOMATIC", "AVAILABILITY_MODE", 
		"BACKSLASH", "BACKUP", "BEFORE", "BEGIN", "BETWEEN", "BLOCK", "BLOCKSIZE", 
		"BLOCKING_HIERARCHY", "BREAK", "BROWSE", "BUFFER", "BUFFERCOUNT", "BULK", 
		"BY", "CACHE", "CALLED", "CASCADE", "CASE", "CERTIFICATE", "CHANGETABLE", 
		"CHANGES", "CHECK", "CHECKPOINT", "CHECK_POLICY", "CHECK_EXPIRATION", 
		"CLASSIFIER_FUNCTION", "CLOSE", "CLUSTER", "CLUSTERED", "COALESCE", "COLLATE", 
		"COLUMN", "COMPRESSION", "COMMIT", "COMPUTE", "CONFIGURATION", "CONSTRAINT", 
		"CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTEXT", "CONTINUE", "CONTINUE_AFTER_ERROR", 
		"CONTRACT", "CONTRACT_NAME", "CONVERSATION", "CONVERT", "COPY_ONLY", "CREATE", 
		"CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"CURRENT_USER", "CURSOR", "CYCLE", "DATA", "DATA_COMPRESSION", "DATA_SOURCE", 
		"DATABASE", "DATABASE_MIRRORING", "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", 
		"DEFAULT_DATABASE", "DEFAULT_SCHEMA", "DELETE", "DENY", "DESC", "DIAGNOSTICS", 
		"DIFFERENTIAL", "DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DOUBLE_BACK_SLASH", 
		"DOUBLE_FORWARD_SLASH", "DROP", "DTC_SUPPORT", "DUMP", "ELSE", "ENABLED", 
		"END", "ENDPOINT", "ERRLVL", "ESCAPE", "ERROR", "EVENT", "EVENTDATA", 
		"EVENT_RETENTION_MODE", "EXCEPT", "EXECUTABLE_FILE", "EXECUTE", "EXISTS", 
		"EXPIREDATE", "EXIT", "EXTENSION", "EXTERNAL", "EXTERNAL_ACCESS", "FAILOVER", 
		"FAILURECONDITIONLEVEL", "FAN_IN", "FETCH", "FILE", "FILENAME", "FILLFACTOR", 
		"FILE_SNAPSHOT", "FOR", "FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
		"FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", "GET", 
		"GOTO", "GOVERNOR", "GRANT", "GROUP", "HAVING", "HASHED", "HEALTHCHECKTIMEOUT", 
		"IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", "IF", "IN", "INCLUDE", "INCREMENT", 
		"INDEX", "INFINITE", "INIT", "INNER", "INSERT", "INSTEAD", "INTERSECT", 
		"INTO", "IPV4_ADDR", "IPV6_ADDR", "IS", "ISNULL", "JOIN", "KERBEROS", 
		"KEY", "KEY_PATH", "KEY_STORE_PROVIDER_NAME", "KILL", "LANGUAGE", "LEFT", 
		"LIBRARY", "LIFETIME", "LIKE", "LINENO", "LINUX", "LISTENER_IP", "LISTENER_PORT", 
		"LOAD", "LOCAL_SERVICE_NAME", "LOG", "MATCHED", "MASTER", "MAX_MEMORY", 
		"MAXTRANSFER", "MAXVALUE", "MAX_DISPATCH_LATENCY", "MAX_EVENT_SIZE", "MAX_SIZE", 
		"MAX_OUTSTANDING_IO_PER_VOLUME", "MEDIADESCRIPTION", "MEDIANAME", "MEMBER", 
		"MEMORY_PARTITION_MODE", "MERGE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
		"MINVALUE", "MIRROR", "MUST_CHANGE", "NATIONAL", "NEGOTIATE", "NOCHECK", 
		"NOFORMAT", "NOINIT", "NONCLUSTERED", "NONE", "NOREWIND", "NOSKIP", "NOUNLOAD", 
		"NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", "NOT", "NOTIFICATION", 
		"NTLM", "NULL", "NULLIF", "OF", "OFF", "OFFSETS", "OLD_PASSWORD", "ON", 
		"ON_FAILURE", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML", 
		"OPTION", "OR", "ORDER", "OUTER", "OVER", "PAGE", "PARAM_NODE", "PARTIAL", 
		"PASSWORD", "PERCENT", "PERMISSION_SET", "PER_CPU", "PER_DB", "PER_NODE", 
		"PIVOT", "PLAN", "PLATFORM", "POLICY", "PRECISION", "PREDICATE", "PRIMARY", 
		"PRINT", "PROC", "PROCEDURE", "PROCESS", "PUBLIC", "PYTHON", "R", "RAISERROR", 
		"RAW", "READ", "READTEXT", "READ_WRITE_FILEGROUPS", "RECONFIGURE", "REFERENCES", 
		"REGENERATE", "RELATED_CONVERSATION", "RELATED_CONVERSATION_GROUP", "REPLICATION", 
		"REQUIRED", "RESET", "RESTART", "RESTORE", "RESTRICT", "RESUME", "RETAINDAYS", 
		"RETURN", "RETURNS", "REVERT", "REVOKE", "REWIND", "RIGHT", "ROLLBACK", 
		"ROLE", "ROWCOUNT", "ROWGUIDCOL", "RSA_512", "RSA_1024", "RSA_2048", "RSA_3072", 
		"RSA_4096", "SAFETY", "RULE", "SAFE", "SAVE", "SCHEDULER", "SCHEMA", "SCHEME", 
		"SECURITY", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", 
		"SEMANTICSIMILARITYTABLE", "SEQUENCE", "SERVER", "SERVICE", "SERVICE_BROKER", 
		"SERVICE_NAME", "SESSION", "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", 
		"SID", "SKIP_KEYWORD", "SOFTNUMA", "SOME", "SOURCE", "SPECIFICATION", 
		"SPLIT", "SQLDUMPERFLAGS", "SQLDUMPERPATH", "SQLDUMPERTIMEOUT", "STATISTICS", 
		"STATE", "STATS", "START", "STARTED", "STARTUP_STATE", "STOP", "STOPPED", 
		"STOP_ON_ERROR", "SUPPORTED", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLESAMPLE", 
		"TAPE", "TARGET", "TCP", "TEXTSIZE", "THEN", "TO", "TOP", "TRACK_CAUSALITY", 
		"TRAN", "TRANSACTION", "TRANSFER", "TRIGGER", "TRUNCATE", "TSEQUAL", "UNCHECKED", 
		"UNION", "UNIQUE", "UNLOCK", "UNPIVOT", "UNSAFE", "UPDATE", "UPDATETEXT", 
		"URL", "USE", "USED", "USER", "VALUES", "VARYING", "VERBOSELOGGING", "VIEW", 
		"VISIBILITY", "WAITFOR", "WHEN", "WHERE", "WHILE", "WINDOWS", "WITH", 
		"WITHIN", "WITHOUT", "WITNESS", "WRITETEXT", "ABSOLUTE", "ACCENT_SENSITIVITY", 
		"ACTION", "ACTIVE", "ACTIVATION", "ADDRESS", "AES_128", "AES_192", "AES_256", 
		"AFFINITY", "AFTER", "AGGREGATE", "ALGORITHM", "ALLOWED", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", 
		"ALLOW_SNAPSHOT_ISOLATION", "ANSI_NULLS", "ANSI_NULL_DEFAULT", "ANSI_PADDING", 
		"ANSI_WARNINGS", "APPLICATION_LOG", "APPLY", "ARITHABORT", "ASSEMBLY", 
		"AUDIT", "AUDIT_GUID", "AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", 
		"AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
		"AVAILABILITY", "AVG", "BACKUP_PRIORITY", "BEGIN_DIALOG", "BIGINT", "BINARY_BASE64", 
		"BINARY_CHECKSUM", "BINDING", "BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", 
		"BULK_LOGGED", "CALLER", "CAST", "CAP_CPU_PERCENT", "CATALOG", "CATCH", 
		"CHANGE_RETENTION", "CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "CLEANUP", 
		"COLLECTION", "COLUMN_MASTER_KEY", "COMMITTED", "COMPATIBILITY_LEVEL", 
		"CONCAT", "CONCAT_NULL_YIELDS_NULL", "CONTENT", "CONTROL", "COOKIE", "COUNT", 
		"COUNTER", "COUNT_BIG", "CPU", "CREATE_NEW", "CREATION_DISPOSITION", "CREDENTIAL", 
		"CRYPTOGRAPHIC", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", "DATEADD", 
		"DATEDIFF", "DATENAME", "DATEPART", "DATE_CORRELATION_OPTIMIZATION", "DAYS", 
		"DB_CHAINING", "DB_FAILOVER", "DECRYPTION", "DEFAULT_DOUBLE_QUOTE", "DEFAULT_FULLTEXT_LANGUAGE", 
		"DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", 
		"DEPENDENTS", "DES", "DESX", "DESCRIPTION", "DHCP", "DIALOG", "DIRECTORY_NAME", 
		"DISABLE", "DISABLED", "DISABLE_BROKER", "DISK_DRIVE", "DOCUMENT", "DYNAMIC", 
		"EMERGENCY", "EMPTY", "ENABLE", "ENABLE_BROKER", "ENCRYPTED_VALUE", "ENCRYPTION", 
		"ENDPOINT_URL", "ERROR_BROKER_CONVERSATIONS", "EXECUTABLE", "EXIST", "EXPAND", 
		"EXPIRY_DATE", "EXPLICIT", "FAILOVER_MODE", "FAILURE", "FAILURE_CONDITION_LEVEL", 
		"FAIL_OPERATION", "FAST", "FAST_FORWARD", "FILEGROUP", "FILEGROWTH", "FILEPATH", 
		"FILESTREAM", "FILTER", "FIRST", "FIRST_VALUE", "FOLLOWING", "FORCE", 
		"FORCED", "FORCE_FAILOVER_ALLOW_DATA_LOSS", "FORMAT", "FORWARD_ONLY", 
		"FULLSCAN", "FULLTEXT", "GB", "GETDATE", "GETUTCDATE", "GLOBAL", "GO", 
		"GROUPING", "GROUPING_ID", "GROUP_MAX_REQUESTS", "HADR", "HASH", "HEALTH_CHECK_TIMEOUT", 
		"HIGH", "HONOR_BROKER_PRIORITY", "HOURS", "IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
		"IMMEDIATE", "IMPERSONATE", "IMPORTANCE", "INCREMENTAL", "INITIATOR", 
		"INPUT", "INSENSITIVE", "INSERTED", "INT", "IP", "ISOLATION", "KB", "KEEP", 
		"KEEPFIXED", "KEYSET", "KEYS", "KEY_SOURCE", "LAG", "LAST", "LAST_VALUE", 
		"LEAD", "LEVEL", "LIST", "LISTENER", "LISTENER_URL", "LOB_COMPACTION", 
		"LOCAL", "LOCATION", "LOCK_ESCALATION", "LOGIN", "LOOP", "LOW", "MANUAL", 
		"MARK", "MAX", "MAX_CPU_PERCENT", "MIN_CPU_PERCENT", "MAX_FILES", "MAX_IOPS_PER_VOLUME", 
		"MIN_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", "MIN_MEMORY_PERCENT", "MAX_PROCESSES", 
		"MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAXDOP", "MAX_DOP", "MAXRECURSION", 
		"MAXSIZE", "MEDIUM", "MESSAGE", "MB", "MEMORY_OPTIMIZED_DATA", "MIN", 
		"MINUTES", "MIRROR_ADDRESS", "MIN_ACTIVE_ROWVERSION", "MIXED_PAGE_ALLOCATION", 
		"MODIFY", "MOVE", "MULTI_USER", "NAME", "NESTED_TRIGGERS", "NEW_ACCOUNT", 
		"NEW_BROKER", "NEW_PASSWORD", "NEXT", "NOCOUNT", "NOEXPAND", "NODES", 
		"NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NO", "NORECOVERY", "NO_TRUNCATE", 
		"NO_WAIT", "NTILE", "NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", "OBJECT", 
		"OFFLINE", "OFFSET", "OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING", 
		"OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", "PARAMETERIZATION", 
		"PARTITION", "PARTITIONS", "PARTNER", "PATH", "POOL", "POISON_MESSAGE_HANDLING", 
		"PORT", "PRECEDING", "PRIMARY_ROLE", "PRIOR", "PRIORITY", "PRIORITY_LEVEL", 
		"PRIVATE", "PRIVATE_KEY", "PRIVILEGES", "PROCEDURE_NAME", "PROPERTY", 
		"PROVIDER", "PROVIDER_KEY_NAME", "QUEUE", "QUEUE_DELAY", "QUERY", "QUOTED_IDENTIFIER", 
		"RANGE", "RANK", "RC2", "RC4", "RC4_128", "READONLY", "READ_COMMITTED_SNAPSHOT", 
		"READ_ONLY", "READ_ONLY_ROUTING_LIST", "READ_WRITE", "REBUILD", "RECOMPILE", 
		"RECEIVE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", "REMOVE", "REORGANIZE", 
		"REPLICA", "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", "REMOTE", "REMOTE_SERVICE_NAME", 
		"REPEATABLE", "REQUEST_MAX_MEMORY_GRANT_PERCENT", "REQUEST_MAX_CPU_TIME_SEC", 
		"REQUEST_MEMORY_GRANT_TIMEOUT_SEC", "RESERVE_DISK_SPACE", "RESOURCE", 
		"RESOURCE_MANAGER_LOCATION", "RESTRICTED_USER", "RETENTION", "ROBUST", 
		"ROOT", "ROUTE", "ROW", "ROWGUID", "ROWS", "ROW_NUMBER", "SAMPLE", "SCHEMABINDING", 
		"SCOPED", "SCROLL", "SCROLL_LOCKS", "SEARCH", "SECONDARY", "SECONDARY_ONLY", 
		"SECONDARY_ROLE", "SECONDS", "SECRET", "SECURITY_LOG", "SEEDING_MODE", 
		"SELF", "SEND", "SENT", "SERIALIZABLE", "SESSION_TIMEOUT", "SETERROR", 
		"SHOWPLAN", "SIGNATURE", "SIMPLE", "SINGLE_USER", "SIZE", "SMALLINT", 
		"SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", "START_DATE", "STATIC", "STATS_STREAM", 
		"STATUS", "STDEV", "STDEVP", "STOPLIST", "SUBJECT", "SUSPEND", "STANDBY", 
		"STUFF", "SUM", "SYMMETRIC", "SYNCHRONOUS_COMMIT", "SYNONYM", "TAKE", 
		"TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", "TIES", "TIME", 
		"TIMER", "TINYINT", "TIMEOUT", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", 
		"TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUSTWORTHY", "TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", 
		"TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", "UNKNOWN", "UNLIMITED", 
		"USING", "VALIDATION", "VALID_XML", "VALUE", "VAR", "VARP", "VIEWS", "VIEW_METADATA", 
		"WELL_FORMED_XML", "WORK", "WORKLOAD", "XML", "XMLNAMESPACES", "DOLLAR_ACTION", 
		"SPACE", "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", "SINGLE_QUOTE", 
		"SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", "ID", "QUOTED_URL", "QUOTED_HOST_AND_PORT", 
		"STRING", "BINARY", "FLOAT", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
		"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOT", "UNDERLINE", "AT", "SHARP", 
		"DOLLAR", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", 
		"DIVIDE", "MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", 
		"IPV4_OCTECT"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "TSqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public TSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Tsql_fileContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(TSqlParser.EOF, 0); }
		public List<BatchContext> batch() {
			return getRuleContexts(BatchContext.class);
		}
		public BatchContext batch(int i) {
			return getRuleContext(BatchContext.class,i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsql_file; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTsql_file(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTsql_file(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTsql_file(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tsql_fileContext tsql_file() throws RecognitionException {
		Tsql_fileContext _localctx = new Tsql_fileContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_tsql_file);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CALLED) | (1L << CLOSE) | (1L << COMMIT) | (1L << CONTINUE))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (CREATE - 70)) | (1L << (DATA_COMPRESSION - 70)) | (1L << (DBCC - 70)) | (1L << (DEALLOCATE - 70)) | (1L << (DECLARE - 70)) | (1L << (DELETE - 70)) | (1L << (DROP - 70)) | (1L << (END - 70)) | (1L << (EVENTDATA - 70)) | (1L << (EXECUTE - 70)) | (1L << (FETCH - 70)) | (1L << (FILENAME - 70)) | (1L << (FILLFACTOR - 70)) | (1L << (FORCESEEK - 70)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (GET - 140)) | (1L << (GOTO - 140)) | (1L << (GRANT - 140)) | (1L << (IF - 140)) | (1L << (INSERT - 140)) | (1L << (KEY - 140)) | (1L << (MASTER - 140)) | (1L << (MAX_MEMORY - 140)) | (1L << (MERGE - 140)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (OFFSETS - 224)) | (1L << (OPEN - 224)) | (1L << (PAGE - 224)) | (1L << (PRINT - 224)) | (1L << (PUBLIC - 224)) | (1L << (RAISERROR - 224)) | (1L << (RAW - 224)) | (1L << (RETURN - 224)) | (1L << (RETURNS - 224)) | (1L << (REVERT - 224)) | (1L << (ROLLBACK - 224)) | (1L << (ROWCOUNT - 224)))) != 0) || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (SAFETY - 294)) | (1L << (SAVE - 294)) | (1L << (SELECT - 294)) | (1L << (SERVER - 294)) | (1L << (SET - 294)) | (1L << (SID - 294)) | (1L << (SOURCE - 294)) | (1L << (STATE - 294)) | (1L << (TARGET - 294)) | (1L << (TRUNCATE - 294)))) != 0) || ((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & ((1L << (UPDATE - 361)) | (1L << (USE - 361)) | (1L << (WAITFOR - 361)) | (1L << (WHILE - 361)) | (1L << (WITH - 361)) | (1L << (ABSOLUTE - 361)) | (1L << (ACTIVE - 361)) | (1L << (ADDRESS - 361)) | (1L << (APPLY - 361)) | (1L << (AUTO - 361)) | (1L << (AVAILABILITY - 361)) | (1L << (AVG - 361)))) != 0) || ((((_la - 427)) & ~0x3f) == 0 && ((1L << (_la - 427)) & ((1L << (CALLER - 427)) | (1L << (CAST - 427)) | (1L << (CATCH - 427)) | (1L << (CHECKSUM_AGG - 427)) | (1L << (COMMITTED - 427)) | (1L << (CONCAT - 427)) | (1L << (CONCAT_NULL_YIELDS_NULL - 427)) | (1L << (CONTROL - 427)) | (1L << (COOKIE - 427)) | (1L << (COUNT - 427)) | (1L << (COUNTER - 427)) | (1L << (COUNT_BIG - 427)) | (1L << (DELAY - 427)) | (1L << (DELETED - 427)) | (1L << (DENSE_RANK - 427)) | (1L << (DISABLE - 427)) | (1L << (DYNAMIC - 427)) | (1L << (ENABLE - 427)) | (1L << (ENCRYPTION - 427)))) != 0) || ((((_la - 495)) & ~0x3f) == 0 && ((1L << (_la - 495)) & ((1L << (EXPAND - 495)) | (1L << (FAST - 495)) | (1L << (FAST_FORWARD - 495)) | (1L << (FIRST - 495)) | (1L << (FOLLOWING - 495)) | (1L << (FORCE - 495)) | (1L << (FORCED - 495)) | (1L << (FORWARD_ONLY - 495)) | (1L << (FULLSCAN - 495)) | (1L << (GLOBAL - 495)) | (1L << (GROUPING - 495)) | (1L << (GROUPING_ID - 495)) | (1L << (HASH - 495)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 495)) | (1L << (IMPERSONATE - 495)) | (1L << (INPUT - 495)) | (1L << (INSENSITIVE - 495)) | (1L << (INSERTED - 495)) | (1L << (ISOLATION - 495)) | (1L << (KEEP - 495)) | (1L << (KEEPFIXED - 495)) | (1L << (KEYSET - 495)) | (1L << (LAST - 495)) | (1L << (LEVEL - 495)))) != 0) || ((((_la - 561)) & ~0x3f) == 0 && ((1L << (_la - 561)) & ((1L << (LOCAL - 561)) | (1L << (LOCATION - 561)) | (1L << (LOCK_ESCALATION - 561)) | (1L << (LOGIN - 561)) | (1L << (LOOP - 561)) | (1L << (MARK - 561)) | (1L << (MAX - 561)) | (1L << (MAX_ROLLOVER_FILES - 561)) | (1L << (MAXDOP - 561)) | (1L << (MAXRECURSION - 561)) | (1L << (MIN - 561)) | (1L << (MODIFY - 561)) | (1L << (NAME - 561)) | (1L << (NEXT - 561)) | (1L << (NOCOUNT - 561)) | (1L << (NOEXPAND - 561)) | (1L << (NORECOMPUTE - 561)) | (1L << (NTILE - 561)) | (1L << (NUMBER - 561)) | (1L << (OFFSET - 561)) | (1L << (ONLINE - 561)) | (1L << (ONLY - 561)) | (1L << (OPTIMISTIC - 561)) | (1L << (OPTIMIZE - 561)) | (1L << (OUT - 561)))) != 0) || ((((_la - 625)) & ~0x3f) == 0 && ((1L << (_la - 625)) & ((1L << (OUTPUT - 625)) | (1L << (OWNER - 625)) | (1L << (PARAMETERIZATION - 625)) | (1L << (PARTITION - 625)) | (1L << (PATH - 625)) | (1L << (PRECEDING - 625)) | (1L << (PRIOR - 625)) | (1L << (PRIVILEGES - 625)) | (1L << (RANGE - 625)) | (1L << (RANK - 625)) | (1L << (READONLY - 625)) | (1L << (READ_ONLY - 625)) | (1L << (RECOMPILE - 625)) | (1L << (RELATIVE - 625)) | (1L << (REMOTE - 625)) | (1L << (REPEATABLE - 625)) | (1L << (ROBUST - 625)) | (1L << (ROOT - 625)) | (1L << (ROW - 625)) | (1L << (ROWGUID - 625)) | (1L << (ROWS - 625)))) != 0) || ((((_la - 689)) & ~0x3f) == 0 && ((1L << (_la - 689)) & ((1L << (ROW_NUMBER - 689)) | (1L << (SAMPLE - 689)) | (1L << (SCHEMABINDING - 689)) | (1L << (SCROLL - 689)) | (1L << (SCROLL_LOCKS - 689)) | (1L << (SELF - 689)) | (1L << (SEND - 689)) | (1L << (SERIALIZABLE - 689)) | (1L << (SIMPLE - 689)) | (1L << (SIZE - 689)) | (1L << (SNAPSHOT - 689)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 689)) | (1L << (STATIC - 689)) | (1L << (STATS_STREAM - 689)) | (1L << (STDEV - 689)) | (1L << (STDEVP - 689)) | (1L << (SUM - 689)) | (1L << (TEXTIMAGE_ON - 689)) | (1L << (THROW - 689)) | (1L << (TIES - 689)) | (1L << (TIME - 689)) | (1L << (TRY - 689)) | (1L << (TYPE - 689)) | (1L << (TYPE_WARNING - 689)) | (1L << (UNBOUNDED - 689)))) != 0) || ((((_la - 753)) & ~0x3f) == 0 && ((1L << (_la - 753)) & ((1L << (UNCOMMITTED - 753)) | (1L << (UNKNOWN - 753)) | (1L << (USING - 753)) | (1L << (VALUE - 753)) | (1L << (VAR - 753)) | (1L << (VARP - 753)) | (1L << (VIEWS - 753)) | (1L << (VIEW_METADATA - 753)) | (1L << (WORK - 753)) | (1L << (XML - 753)) | (1L << (XMLNAMESPACES - 753)) | (1L << (DOUBLE_QUOTE_ID - 753)) | (1L << (SQUARE_BRACKET_ID - 753)) | (1L << (ID - 753)) | (1L << (LR_BRACKET - 753)) | (1L << (SEMI - 753)))) != 0)) {
				{
				{
				setState(936);
				batch();
				}
				}
				setState(941);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(942);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BatchContext extends ParserRuleContext {
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public List<Go_statementContext> go_statement() {
			return getRuleContexts(Go_statementContext.class);
		}
		public Go_statementContext go_statement(int i) {
			return getRuleContext(Go_statementContext.class,i);
		}
		public BatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBatch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitBatch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BatchContext batch() throws RecognitionException {
		BatchContext _localctx = new BatchContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_batch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(944);
			sql_clauses();
			setState(948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==GO) {
				{
				{
				setState(945);
				go_statement();
				}
				}
				setState(950);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_clausesContext extends ParserRuleContext {
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(TSqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(TSqlParser.SEMI, i);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSql_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSql_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSql_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_clausesContext sql_clauses() throws RecognitionException {
		Sql_clausesContext _localctx = new Sql_clausesContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_clauses);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(955); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(951);
					sql_clause();
					setState(953);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
					case 1:
						{
						setState(952);
						match(SEMI);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(957); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_clauseContext extends ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return getRuleContext(Dml_clauseContext.class,0);
		}
		public Ddl_clauseContext ddl_clause() {
			return getRuleContext(Ddl_clauseContext.class,0);
		}
		public Cfl_statementContext cfl_statement() {
			return getRuleContext(Cfl_statementContext.class,0);
		}
		public Dbcc_clauseContext dbcc_clause() {
			return getRuleContext(Dbcc_clauseContext.class,0);
		}
		public Empty_statementContext empty_statement() {
			return getRuleContext(Empty_statementContext.class,0);
		}
		public Another_statementContext another_statement() {
			return getRuleContext(Another_statementContext.class,0);
		}
		public Sql_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSql_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSql_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSql_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_clauseContext sql_clause() throws RecognitionException {
		Sql_clauseContext _localctx = new Sql_clauseContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_sql_clause);
		try {
			setState(965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(959);
				dml_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(960);
				ddl_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(961);
				cfl_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(962);
				dbcc_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(963);
				empty_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(964);
				another_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_clauseContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDml_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDml_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDml_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_clauseContext dml_clause() throws RecognitionException {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_dml_clause);
		try {
			setState(972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(967);
				merge_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(968);
				delete_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(969);
				insert_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(970);
				select_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(971);
				update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_clauseContext extends ParserRuleContext {
		public Alter_application_roleContext alter_application_role() {
			return getRuleContext(Alter_application_roleContext.class,0);
		}
		public Alter_assemblyContext alter_assembly() {
			return getRuleContext(Alter_assemblyContext.class,0);
		}
		public Alter_asymmetric_keyContext alter_asymmetric_key() {
			return getRuleContext(Alter_asymmetric_keyContext.class,0);
		}
		public Alter_authorizationContext alter_authorization() {
			return getRuleContext(Alter_authorizationContext.class,0);
		}
		public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
			return getRuleContext(Alter_authorization_for_azure_dwContext.class,0);
		}
		public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
			return getRuleContext(Alter_authorization_for_parallel_dwContext.class,0);
		}
		public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
			return getRuleContext(Alter_authorization_for_sql_databaseContext.class,0);
		}
		public Alter_availability_groupContext alter_availability_group() {
			return getRuleContext(Alter_availability_groupContext.class,0);
		}
		public Alter_certificateContext alter_certificate() {
			return getRuleContext(Alter_certificateContext.class,0);
		}
		public Alter_column_encryption_keyContext alter_column_encryption_key() {
			return getRuleContext(Alter_column_encryption_keyContext.class,0);
		}
		public Alter_credentialContext alter_credential() {
			return getRuleContext(Alter_credentialContext.class,0);
		}
		public Alter_cryptographic_providerContext alter_cryptographic_provider() {
			return getRuleContext(Alter_cryptographic_providerContext.class,0);
		}
		public Alter_databaseContext alter_database() {
			return getRuleContext(Alter_databaseContext.class,0);
		}
		public Alter_db_roleContext alter_db_role() {
			return getRuleContext(Alter_db_roleContext.class,0);
		}
		public Alter_endpointContext alter_endpoint() {
			return getRuleContext(Alter_endpointContext.class,0);
		}
		public Create_or_alter_event_sessionContext create_or_alter_event_session() {
			return getRuleContext(Create_or_alter_event_sessionContext.class,0);
		}
		public Alter_external_data_sourceContext alter_external_data_source() {
			return getRuleContext(Alter_external_data_sourceContext.class,0);
		}
		public Alter_external_libraryContext alter_external_library() {
			return getRuleContext(Alter_external_libraryContext.class,0);
		}
		public Alter_external_resource_poolContext alter_external_resource_pool() {
			return getRuleContext(Alter_external_resource_poolContext.class,0);
		}
		public Alter_fulltext_catalogContext alter_fulltext_catalog() {
			return getRuleContext(Alter_fulltext_catalogContext.class,0);
		}
		public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
			return getRuleContext(Alter_fulltext_stoplistContext.class,0);
		}
		public Alter_login_azure_sqlContext alter_login_azure_sql() {
			return getRuleContext(Alter_login_azure_sqlContext.class,0);
		}
		public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
			return getRuleContext(Alter_login_azure_sql_dw_and_pdwContext.class,0);
		}
		public Alter_login_sql_serverContext alter_login_sql_server() {
			return getRuleContext(Alter_login_sql_serverContext.class,0);
		}
		public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
			return getRuleContext(Alter_master_key_azure_sqlContext.class,0);
		}
		public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
			return getRuleContext(Alter_master_key_sql_serverContext.class,0);
		}
		public Alter_message_typeContext alter_message_type() {
			return getRuleContext(Alter_message_typeContext.class,0);
		}
		public Alter_partition_functionContext alter_partition_function() {
			return getRuleContext(Alter_partition_functionContext.class,0);
		}
		public Alter_partition_schemeContext alter_partition_scheme() {
			return getRuleContext(Alter_partition_schemeContext.class,0);
		}
		public Alter_remote_service_bindingContext alter_remote_service_binding() {
			return getRuleContext(Alter_remote_service_bindingContext.class,0);
		}
		public Alter_resource_governorContext alter_resource_governor() {
			return getRuleContext(Alter_resource_governorContext.class,0);
		}
		public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
			return getRuleContext(Alter_schema_azure_sql_dw_and_pdwContext.class,0);
		}
		public Alter_schema_sqlContext alter_schema_sql() {
			return getRuleContext(Alter_schema_sqlContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_server_auditContext alter_server_audit() {
			return getRuleContext(Alter_server_auditContext.class,0);
		}
		public Alter_server_audit_specificationContext alter_server_audit_specification() {
			return getRuleContext(Alter_server_audit_specificationContext.class,0);
		}
		public Alter_server_configurationContext alter_server_configuration() {
			return getRuleContext(Alter_server_configurationContext.class,0);
		}
		public Alter_server_roleContext alter_server_role() {
			return getRuleContext(Alter_server_roleContext.class,0);
		}
		public Alter_server_role_pdwContext alter_server_role_pdw() {
			return getRuleContext(Alter_server_role_pdwContext.class,0);
		}
		public Alter_serviceContext alter_service() {
			return getRuleContext(Alter_serviceContext.class,0);
		}
		public Alter_service_master_keyContext alter_service_master_key() {
			return getRuleContext(Alter_service_master_keyContext.class,0);
		}
		public Alter_symmetric_keyContext alter_symmetric_key() {
			return getRuleContext(Alter_symmetric_keyContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Alter_userContext alter_user() {
			return getRuleContext(Alter_userContext.class,0);
		}
		public Alter_user_azure_sqlContext alter_user_azure_sql() {
			return getRuleContext(Alter_user_azure_sqlContext.class,0);
		}
		public Alter_workload_groupContext alter_workload_group() {
			return getRuleContext(Alter_workload_groupContext.class,0);
		}
		public Create_application_roleContext create_application_role() {
			return getRuleContext(Create_application_roleContext.class,0);
		}
		public Create_assemblyContext create_assembly() {
			return getRuleContext(Create_assemblyContext.class,0);
		}
		public Create_asymmetric_keyContext create_asymmetric_key() {
			return getRuleContext(Create_asymmetric_keyContext.class,0);
		}
		public Create_column_encryption_keyContext create_column_encryption_key() {
			return getRuleContext(Create_column_encryption_keyContext.class,0);
		}
		public Create_column_master_keyContext create_column_master_key() {
			return getRuleContext(Create_column_master_keyContext.class,0);
		}
		public Create_credentialContext create_credential() {
			return getRuleContext(Create_credentialContext.class,0);
		}
		public Create_cryptographic_providerContext create_cryptographic_provider() {
			return getRuleContext(Create_cryptographic_providerContext.class,0);
		}
		public Create_databaseContext create_database() {
			return getRuleContext(Create_databaseContext.class,0);
		}
		public Create_db_roleContext create_db_role() {
			return getRuleContext(Create_db_roleContext.class,0);
		}
		public Create_event_notificationContext create_event_notification() {
			return getRuleContext(Create_event_notificationContext.class,0);
		}
		public Create_external_libraryContext create_external_library() {
			return getRuleContext(Create_external_libraryContext.class,0);
		}
		public Create_external_resource_poolContext create_external_resource_pool() {
			return getRuleContext(Create_external_resource_poolContext.class,0);
		}
		public Create_fulltext_catalogContext create_fulltext_catalog() {
			return getRuleContext(Create_fulltext_catalogContext.class,0);
		}
		public Create_fulltext_stoplistContext create_fulltext_stoplist() {
			return getRuleContext(Create_fulltext_stoplistContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_login_azure_sqlContext create_login_azure_sql() {
			return getRuleContext(Create_login_azure_sqlContext.class,0);
		}
		public Create_login_pdwContext create_login_pdw() {
			return getRuleContext(Create_login_pdwContext.class,0);
		}
		public Create_login_sql_serverContext create_login_sql_server() {
			return getRuleContext(Create_login_sql_serverContext.class,0);
		}
		public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
			return getRuleContext(Create_master_key_azure_sqlContext.class,0);
		}
		public Create_master_key_sql_serverContext create_master_key_sql_server() {
			return getRuleContext(Create_master_key_sql_serverContext.class,0);
		}
		public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
			return getRuleContext(Create_or_alter_broker_priorityContext.class,0);
		}
		public Create_or_alter_functionContext create_or_alter_function() {
			return getRuleContext(Create_or_alter_functionContext.class,0);
		}
		public Create_or_alter_procedureContext create_or_alter_procedure() {
			return getRuleContext(Create_or_alter_procedureContext.class,0);
		}
		public Create_or_alter_triggerContext create_or_alter_trigger() {
			return getRuleContext(Create_or_alter_triggerContext.class,0);
		}
		public Create_remote_service_bindingContext create_remote_service_binding() {
			return getRuleContext(Create_remote_service_bindingContext.class,0);
		}
		public Create_resource_poolContext create_resource_pool() {
			return getRuleContext(Create_resource_poolContext.class,0);
		}
		public Create_routeContext create_route() {
			return getRuleContext(Create_routeContext.class,0);
		}
		public Create_ruleContext create_rule() {
			return getRuleContext(Create_ruleContext.class,0);
		}
		public Create_schemaContext create_schema() {
			return getRuleContext(Create_schemaContext.class,0);
		}
		public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
			return getRuleContext(Create_schema_azure_sql_dw_and_pdwContext.class,0);
		}
		public Create_search_property_listContext create_search_property_list() {
			return getRuleContext(Create_search_property_listContext.class,0);
		}
		public Create_security_policyContext create_security_policy() {
			return getRuleContext(Create_security_policyContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_server_auditContext create_server_audit() {
			return getRuleContext(Create_server_auditContext.class,0);
		}
		public Create_server_audit_specificationContext create_server_audit_specification() {
			return getRuleContext(Create_server_audit_specificationContext.class,0);
		}
		public Create_server_roleContext create_server_role() {
			return getRuleContext(Create_server_roleContext.class,0);
		}
		public Create_serviceContext create_service() {
			return getRuleContext(Create_serviceContext.class,0);
		}
		public Create_statisticsContext create_statistics() {
			return getRuleContext(Create_statisticsContext.class,0);
		}
		public Create_symmetric_keyContext create_symmetric_key() {
			return getRuleContext(Create_symmetric_keyContext.class,0);
		}
		public Create_synonymContext create_synonym() {
			return getRuleContext(Create_synonymContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Create_userContext create_user() {
			return getRuleContext(Create_userContext.class,0);
		}
		public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
			return getRuleContext(Create_user_azure_sql_dwContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Create_workload_groupContext create_workload_group() {
			return getRuleContext(Create_workload_groupContext.class,0);
		}
		public Create_xml_schema_collectionContext create_xml_schema_collection() {
			return getRuleContext(Create_xml_schema_collectionContext.class,0);
		}
		public Drop_aggregateContext drop_aggregate() {
			return getRuleContext(Drop_aggregateContext.class,0);
		}
		public Drop_application_roleContext drop_application_role() {
			return getRuleContext(Drop_application_roleContext.class,0);
		}
		public Drop_assemblyContext drop_assembly() {
			return getRuleContext(Drop_assemblyContext.class,0);
		}
		public Drop_asymmetric_keyContext drop_asymmetric_key() {
			return getRuleContext(Drop_asymmetric_keyContext.class,0);
		}
		public Drop_availability_groupContext drop_availability_group() {
			return getRuleContext(Drop_availability_groupContext.class,0);
		}
		public Drop_broker_priorityContext drop_broker_priority() {
			return getRuleContext(Drop_broker_priorityContext.class,0);
		}
		public Drop_certificateContext drop_certificate() {
			return getRuleContext(Drop_certificateContext.class,0);
		}
		public Drop_column_encryption_keyContext drop_column_encryption_key() {
			return getRuleContext(Drop_column_encryption_keyContext.class,0);
		}
		public Drop_column_master_keyContext drop_column_master_key() {
			return getRuleContext(Drop_column_master_keyContext.class,0);
		}
		public Drop_contractContext drop_contract() {
			return getRuleContext(Drop_contractContext.class,0);
		}
		public Drop_credentialContext drop_credential() {
			return getRuleContext(Drop_credentialContext.class,0);
		}
		public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
			return getRuleContext(Drop_cryptograhic_providerContext.class,0);
		}
		public Drop_databaseContext drop_database() {
			return getRuleContext(Drop_databaseContext.class,0);
		}
		public Drop_database_audit_specificationContext drop_database_audit_specification() {
			return getRuleContext(Drop_database_audit_specificationContext.class,0);
		}
		public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
			return getRuleContext(Drop_database_scoped_credentialContext.class,0);
		}
		public Drop_db_roleContext drop_db_role() {
			return getRuleContext(Drop_db_roleContext.class,0);
		}
		public Drop_defaultContext drop_default() {
			return getRuleContext(Drop_defaultContext.class,0);
		}
		public Drop_endpointContext drop_endpoint() {
			return getRuleContext(Drop_endpointContext.class,0);
		}
		public Drop_event_notificationsContext drop_event_notifications() {
			return getRuleContext(Drop_event_notificationsContext.class,0);
		}
		public Drop_event_sessionContext drop_event_session() {
			return getRuleContext(Drop_event_sessionContext.class,0);
		}
		public Drop_external_data_sourceContext drop_external_data_source() {
			return getRuleContext(Drop_external_data_sourceContext.class,0);
		}
		public Drop_external_file_formatContext drop_external_file_format() {
			return getRuleContext(Drop_external_file_formatContext.class,0);
		}
		public Drop_external_libraryContext drop_external_library() {
			return getRuleContext(Drop_external_libraryContext.class,0);
		}
		public Drop_external_resource_poolContext drop_external_resource_pool() {
			return getRuleContext(Drop_external_resource_poolContext.class,0);
		}
		public Drop_external_tableContext drop_external_table() {
			return getRuleContext(Drop_external_tableContext.class,0);
		}
		public Drop_fulltext_catalogContext drop_fulltext_catalog() {
			return getRuleContext(Drop_fulltext_catalogContext.class,0);
		}
		public Drop_fulltext_indexContext drop_fulltext_index() {
			return getRuleContext(Drop_fulltext_indexContext.class,0);
		}
		public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
			return getRuleContext(Drop_fulltext_stoplistContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_indexContext drop_index() {
			return getRuleContext(Drop_indexContext.class,0);
		}
		public Drop_loginContext drop_login() {
			return getRuleContext(Drop_loginContext.class,0);
		}
		public Drop_master_keyContext drop_master_key() {
			return getRuleContext(Drop_master_keyContext.class,0);
		}
		public Drop_message_typeContext drop_message_type() {
			return getRuleContext(Drop_message_typeContext.class,0);
		}
		public Drop_partition_functionContext drop_partition_function() {
			return getRuleContext(Drop_partition_functionContext.class,0);
		}
		public Drop_partition_schemeContext drop_partition_scheme() {
			return getRuleContext(Drop_partition_schemeContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_queueContext drop_queue() {
			return getRuleContext(Drop_queueContext.class,0);
		}
		public Drop_remote_service_bindingContext drop_remote_service_binding() {
			return getRuleContext(Drop_remote_service_bindingContext.class,0);
		}
		public Drop_resource_poolContext drop_resource_pool() {
			return getRuleContext(Drop_resource_poolContext.class,0);
		}
		public Drop_routeContext drop_route() {
			return getRuleContext(Drop_routeContext.class,0);
		}
		public Drop_ruleContext drop_rule() {
			return getRuleContext(Drop_ruleContext.class,0);
		}
		public Drop_schemaContext drop_schema() {
			return getRuleContext(Drop_schemaContext.class,0);
		}
		public Drop_search_property_listContext drop_search_property_list() {
			return getRuleContext(Drop_search_property_listContext.class,0);
		}
		public Drop_security_policyContext drop_security_policy() {
			return getRuleContext(Drop_security_policyContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_server_auditContext drop_server_audit() {
			return getRuleContext(Drop_server_auditContext.class,0);
		}
		public Drop_server_audit_specificationContext drop_server_audit_specification() {
			return getRuleContext(Drop_server_audit_specificationContext.class,0);
		}
		public Drop_server_roleContext drop_server_role() {
			return getRuleContext(Drop_server_roleContext.class,0);
		}
		public Drop_serviceContext drop_service() {
			return getRuleContext(Drop_serviceContext.class,0);
		}
		public Drop_signatureContext drop_signature() {
			return getRuleContext(Drop_signatureContext.class,0);
		}
		public Drop_statisticsContext drop_statistics() {
			return getRuleContext(Drop_statisticsContext.class,0);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
			return getRuleContext(Drop_statistics_name_azure_dw_and_pdwContext.class,0);
		}
		public Drop_symmetric_keyContext drop_symmetric_key() {
			return getRuleContext(Drop_symmetric_keyContext.class,0);
		}
		public Drop_synonymContext drop_synonym() {
			return getRuleContext(Drop_synonymContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Drop_userContext drop_user() {
			return getRuleContext(Drop_userContext.class,0);
		}
		public Drop_viewContext drop_view() {
			return getRuleContext(Drop_viewContext.class,0);
		}
		public Drop_workload_groupContext drop_workload_group() {
			return getRuleContext(Drop_workload_groupContext.class,0);
		}
		public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
			return getRuleContext(Drop_xml_schema_collectionContext.class,0);
		}
		public Disable_triggerContext disable_trigger() {
			return getRuleContext(Disable_triggerContext.class,0);
		}
		public Enable_triggerContext enable_trigger() {
			return getRuleContext(Enable_triggerContext.class,0);
		}
		public Truncate_tableContext truncate_table() {
			return getRuleContext(Truncate_tableContext.class,0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDdl_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDdl_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDdl_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_clauseContext ddl_clause() throws RecognitionException {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_ddl_clause);
		try {
			setState(1131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(974);
				alter_application_role();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(975);
				alter_assembly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(976);
				alter_asymmetric_key();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(977);
				alter_authorization();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(978);
				alter_authorization_for_azure_dw();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(979);
				alter_authorization_for_parallel_dw();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(980);
				alter_authorization_for_sql_database();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(981);
				alter_availability_group();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(982);
				alter_certificate();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(983);
				alter_column_encryption_key();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(984);
				alter_credential();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(985);
				alter_cryptographic_provider();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(986);
				alter_database();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(987);
				alter_db_role();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(988);
				alter_endpoint();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(989);
				create_or_alter_event_session();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(990);
				alter_external_data_source();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(991);
				alter_external_library();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(992);
				alter_external_resource_pool();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(993);
				alter_fulltext_catalog();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(994);
				alter_fulltext_stoplist();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(995);
				alter_login_azure_sql();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(996);
				alter_login_azure_sql_dw_and_pdw();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(997);
				alter_login_sql_server();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(998);
				alter_master_key_azure_sql();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(999);
				alter_master_key_sql_server();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1000);
				alter_message_type();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1001);
				alter_partition_function();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1002);
				alter_partition_scheme();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1003);
				alter_remote_service_binding();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1004);
				alter_resource_governor();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1005);
				alter_schema_azure_sql_dw_and_pdw();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1006);
				alter_schema_sql();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1007);
				alter_sequence();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1008);
				alter_server_audit();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1009);
				alter_server_audit_specification();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1010);
				alter_server_configuration();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1011);
				alter_server_role();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1012);
				alter_server_role_pdw();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1013);
				alter_service();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1014);
				alter_service_master_key();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1015);
				alter_symmetric_key();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1016);
				alter_table();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1017);
				alter_user();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1018);
				alter_user_azure_sql();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1019);
				alter_workload_group();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1020);
				create_application_role();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1021);
				create_assembly();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1022);
				create_asymmetric_key();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1023);
				create_column_encryption_key();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1024);
				create_column_master_key();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1025);
				create_credential();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1026);
				create_cryptographic_provider();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1027);
				create_database();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1028);
				create_db_role();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1029);
				create_event_notification();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1030);
				create_external_library();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1031);
				create_external_resource_pool();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1032);
				create_fulltext_catalog();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1033);
				create_fulltext_stoplist();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1034);
				create_index();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1035);
				create_login_azure_sql();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1036);
				create_login_pdw();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1037);
				create_login_sql_server();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1038);
				create_master_key_azure_sql();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1039);
				create_master_key_sql_server();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1040);
				create_or_alter_broker_priority();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1041);
				create_or_alter_function();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1042);
				create_or_alter_procedure();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1043);
				create_or_alter_trigger();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1044);
				create_remote_service_binding();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1045);
				create_resource_pool();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1046);
				create_route();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1047);
				create_rule();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1048);
				create_schema();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1049);
				create_schema_azure_sql_dw_and_pdw();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1050);
				create_search_property_list();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1051);
				create_security_policy();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1052);
				create_sequence();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1053);
				create_server_audit();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1054);
				create_server_audit_specification();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1055);
				create_server_role();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1056);
				create_service();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1057);
				create_statistics();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1058);
				create_symmetric_key();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1059);
				create_synonym();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1060);
				create_table();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1061);
				create_type();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1062);
				create_user();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1063);
				create_user_azure_sql_dw();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1064);
				create_view();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1065);
				create_workload_group();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1066);
				create_xml_schema_collection();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1067);
				drop_aggregate();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1068);
				drop_application_role();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1069);
				drop_assembly();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1070);
				drop_asymmetric_key();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1071);
				drop_availability_group();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1072);
				drop_broker_priority();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1073);
				drop_certificate();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1074);
				drop_column_encryption_key();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1075);
				drop_column_master_key();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1076);
				drop_contract();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1077);
				drop_credential();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1078);
				drop_cryptograhic_provider();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1079);
				drop_database();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(1080);
				drop_database_audit_specification();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(1081);
				drop_database_scoped_credential();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(1082);
				drop_db_role();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(1083);
				drop_default();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				setState(1084);
				drop_endpoint();
				}
				break;
			case 112:
				enterOuterAlt(_localctx, 112);
				{
				setState(1085);
				drop_event_notifications();
				}
				break;
			case 113:
				enterOuterAlt(_localctx, 113);
				{
				setState(1086);
				drop_event_session();
				}
				break;
			case 114:
				enterOuterAlt(_localctx, 114);
				{
				setState(1087);
				drop_external_data_source();
				}
				break;
			case 115:
				enterOuterAlt(_localctx, 115);
				{
				setState(1088);
				drop_external_file_format();
				}
				break;
			case 116:
				enterOuterAlt(_localctx, 116);
				{
				setState(1089);
				drop_external_library();
				}
				break;
			case 117:
				enterOuterAlt(_localctx, 117);
				{
				setState(1090);
				drop_external_resource_pool();
				}
				break;
			case 118:
				enterOuterAlt(_localctx, 118);
				{
				setState(1091);
				drop_external_table();
				}
				break;
			case 119:
				enterOuterAlt(_localctx, 119);
				{
				setState(1092);
				drop_fulltext_catalog();
				}
				break;
			case 120:
				enterOuterAlt(_localctx, 120);
				{
				setState(1093);
				drop_fulltext_index();
				}
				break;
			case 121:
				enterOuterAlt(_localctx, 121);
				{
				setState(1094);
				drop_fulltext_stoplist();
				}
				break;
			case 122:
				enterOuterAlt(_localctx, 122);
				{
				setState(1095);
				drop_function();
				}
				break;
			case 123:
				enterOuterAlt(_localctx, 123);
				{
				setState(1096);
				drop_index();
				}
				break;
			case 124:
				enterOuterAlt(_localctx, 124);
				{
				setState(1097);
				drop_login();
				}
				break;
			case 125:
				enterOuterAlt(_localctx, 125);
				{
				setState(1098);
				drop_master_key();
				}
				break;
			case 126:
				enterOuterAlt(_localctx, 126);
				{
				setState(1099);
				drop_message_type();
				}
				break;
			case 127:
				enterOuterAlt(_localctx, 127);
				{
				setState(1100);
				drop_partition_function();
				}
				break;
			case 128:
				enterOuterAlt(_localctx, 128);
				{
				setState(1101);
				drop_partition_scheme();
				}
				break;
			case 129:
				enterOuterAlt(_localctx, 129);
				{
				setState(1102);
				drop_procedure();
				}
				break;
			case 130:
				enterOuterAlt(_localctx, 130);
				{
				setState(1103);
				drop_queue();
				}
				break;
			case 131:
				enterOuterAlt(_localctx, 131);
				{
				setState(1104);
				drop_remote_service_binding();
				}
				break;
			case 132:
				enterOuterAlt(_localctx, 132);
				{
				setState(1105);
				drop_resource_pool();
				}
				break;
			case 133:
				enterOuterAlt(_localctx, 133);
				{
				setState(1106);
				drop_route();
				}
				break;
			case 134:
				enterOuterAlt(_localctx, 134);
				{
				setState(1107);
				drop_rule();
				}
				break;
			case 135:
				enterOuterAlt(_localctx, 135);
				{
				setState(1108);
				drop_schema();
				}
				break;
			case 136:
				enterOuterAlt(_localctx, 136);
				{
				setState(1109);
				drop_search_property_list();
				}
				break;
			case 137:
				enterOuterAlt(_localctx, 137);
				{
				setState(1110);
				drop_security_policy();
				}
				break;
			case 138:
				enterOuterAlt(_localctx, 138);
				{
				setState(1111);
				drop_sequence();
				}
				break;
			case 139:
				enterOuterAlt(_localctx, 139);
				{
				setState(1112);
				drop_server_audit();
				}
				break;
			case 140:
				enterOuterAlt(_localctx, 140);
				{
				setState(1113);
				drop_server_audit_specification();
				}
				break;
			case 141:
				enterOuterAlt(_localctx, 141);
				{
				setState(1114);
				drop_server_role();
				}
				break;
			case 142:
				enterOuterAlt(_localctx, 142);
				{
				setState(1115);
				drop_service();
				}
				break;
			case 143:
				enterOuterAlt(_localctx, 143);
				{
				setState(1116);
				drop_signature();
				}
				break;
			case 144:
				enterOuterAlt(_localctx, 144);
				{
				setState(1117);
				drop_statistics();
				}
				break;
			case 145:
				enterOuterAlt(_localctx, 145);
				{
				setState(1118);
				drop_statistics_name_azure_dw_and_pdw();
				}
				break;
			case 146:
				enterOuterAlt(_localctx, 146);
				{
				setState(1119);
				drop_symmetric_key();
				}
				break;
			case 147:
				enterOuterAlt(_localctx, 147);
				{
				setState(1120);
				drop_synonym();
				}
				break;
			case 148:
				enterOuterAlt(_localctx, 148);
				{
				setState(1121);
				drop_table();
				}
				break;
			case 149:
				enterOuterAlt(_localctx, 149);
				{
				setState(1122);
				drop_trigger();
				}
				break;
			case 150:
				enterOuterAlt(_localctx, 150);
				{
				setState(1123);
				drop_type();
				}
				break;
			case 151:
				enterOuterAlt(_localctx, 151);
				{
				setState(1124);
				drop_user();
				}
				break;
			case 152:
				enterOuterAlt(_localctx, 152);
				{
				setState(1125);
				drop_view();
				}
				break;
			case 153:
				enterOuterAlt(_localctx, 153);
				{
				setState(1126);
				drop_workload_group();
				}
				break;
			case 154:
				enterOuterAlt(_localctx, 154);
				{
				setState(1127);
				drop_xml_schema_collection();
				}
				break;
			case 155:
				enterOuterAlt(_localctx, 155);
				{
				setState(1128);
				disable_trigger();
				}
				break;
			case 156:
				enterOuterAlt(_localctx, 156);
				{
				setState(1129);
				enable_trigger();
				}
				break;
			case 157:
				enterOuterAlt(_localctx, 157);
				{
				setState(1130);
				truncate_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cfl_statementContext extends ParserRuleContext {
		public Block_statementContext block_statement() {
			return getRuleContext(Block_statementContext.class,0);
		}
		public Break_statementContext break_statement() {
			return getRuleContext(Break_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Throw_statementContext throw_statement() {
			return getRuleContext(Throw_statementContext.class,0);
		}
		public Try_catch_statementContext try_catch_statement() {
			return getRuleContext(Try_catch_statementContext.class,0);
		}
		public Waitfor_statementContext waitfor_statement() {
			return getRuleContext(Waitfor_statementContext.class,0);
		}
		public While_statementContext while_statement() {
			return getRuleContext(While_statementContext.class,0);
		}
		public Print_statementContext print_statement() {
			return getRuleContext(Print_statementContext.class,0);
		}
		public Raiseerror_statementContext raiseerror_statement() {
			return getRuleContext(Raiseerror_statementContext.class,0);
		}
		public Cfl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cfl_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCfl_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCfl_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCfl_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cfl_statementContext cfl_statement() throws RecognitionException {
		Cfl_statementContext _localctx = new Cfl_statementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_cfl_statement);
		try {
			setState(1145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1133);
				block_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1134);
				break_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1135);
				continue_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1136);
				goto_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1137);
				if_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1138);
				return_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1139);
				throw_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1140);
				try_catch_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1141);
				waitfor_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1142);
				while_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1143);
				print_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1144);
				raiseerror_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Block_statementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBlock_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBlock_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitBlock_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Block_statementContext block_statement() throws RecognitionException {
		Block_statementContext _localctx = new Block_statementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_block_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1147);
			match(BEGIN);
			setState(1149);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				setState(1148);
				match(SEMI);
				}
				break;
			}
			setState(1152);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				setState(1151);
				sql_clauses();
				}
				break;
			}
			setState(1154);
			match(END);
			setState(1156);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				setState(1155);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Break_statementContext extends ParserRuleContext {
		public TerminalNode BREAK() { return getToken(TSqlParser.BREAK, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_break_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBreak_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBreak_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitBreak_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Break_statementContext break_statement() throws RecognitionException {
		Break_statementContext _localctx = new Break_statementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_break_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1158);
			match(BREAK);
			setState(1160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				setState(1159);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(TSqlParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitContinue_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_continue_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1162);
			match(CONTINUE);
			setState(1164);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				setState(1163);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(TSqlParser.GOTO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGoto_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_goto_statement);
		try {
			setState(1176);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GOTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(1166);
				match(GOTO);
				setState(1167);
				id();
				setState(1169);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					setState(1168);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1171);
				id();
				setState(1172);
				match(COLON);
				setState(1174);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					setState(1173);
					match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_return_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1178);
			match(RETURN);
			setState(1180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				setState(1179);
				expression(0);
				}
				break;
			}
			setState(1183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				setState(1182);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(TSqlParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_if_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1185);
			match(IF);
			setState(1186);
			search_condition();
			setState(1187);
			sql_clause();
			setState(1190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				setState(1188);
				match(ELSE);
				setState(1189);
				sql_clause();
				}
				break;
			}
			setState(1193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				setState(1192);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_statementContext extends ParserRuleContext {
		public TerminalNode THROW() { return getToken(TSqlParser.THROW, 0); }
		public Throw_error_numberContext throw_error_number() {
			return getRuleContext(Throw_error_numberContext.class,0);
		}
		public Throw_messageContext throw_message() {
			return getRuleContext(Throw_messageContext.class,0);
		}
		public Throw_stateContext throw_state() {
			return getRuleContext(Throw_stateContext.class,0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterThrow_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitThrow_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitThrow_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Throw_statementContext throw_statement() throws RecognitionException {
		Throw_statementContext _localctx = new Throw_statementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_throw_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1195);
			match(THROW);
			setState(1202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_ID || _la==DECIMAL) {
				{
				setState(1196);
				throw_error_number();
				setState(1197);
				match(COMMA);
				setState(1198);
				throw_message();
				setState(1199);
				match(COMMA);
				setState(1200);
				throw_state();
				}
			}

			setState(1205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				setState(1204);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_error_numberContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_error_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_error_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterThrow_error_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitThrow_error_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitThrow_error_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Throw_error_numberContext throw_error_number() throws RecognitionException {
		Throw_error_numberContext _localctx = new Throw_error_numberContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_throw_error_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1207);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_messageContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_messageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_message; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterThrow_message(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitThrow_message(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitThrow_message(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Throw_messageContext throw_message() throws RecognitionException {
		Throw_messageContext _localctx = new Throw_messageContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_throw_message);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1209);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_stateContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_stateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_state; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterThrow_state(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitThrow_state(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitThrow_state(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Throw_stateContext throw_state() throws RecognitionException {
		Throw_stateContext _localctx = new Throw_stateContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_throw_state);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1211);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Try_catch_statementContext extends ParserRuleContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		public List<TerminalNode> BEGIN() { return getTokens(TSqlParser.BEGIN); }
		public TerminalNode BEGIN(int i) {
			return getToken(TSqlParser.BEGIN, i);
		}
		public List<TerminalNode> TRY() { return getTokens(TSqlParser.TRY); }
		public TerminalNode TRY(int i) {
			return getToken(TSqlParser.TRY, i);
		}
		public List<TerminalNode> END() { return getTokens(TSqlParser.END); }
		public TerminalNode END(int i) {
			return getToken(TSqlParser.END, i);
		}
		public List<TerminalNode> CATCH() { return getTokens(TSqlParser.CATCH); }
		public TerminalNode CATCH(int i) {
			return getToken(TSqlParser.CATCH, i);
		}
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public Try_catch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_try_catch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTry_catch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTry_catch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTry_catch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Try_catch_statementContext try_catch_statement() throws RecognitionException {
		Try_catch_statementContext _localctx = new Try_catch_statementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_try_catch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1213);
			match(BEGIN);
			setState(1214);
			match(TRY);
			setState(1216);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				setState(1215);
				match(SEMI);
				}
				break;
			}
			setState(1219);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				setState(1218);
				((Try_catch_statementContext)_localctx).try_clauses = sql_clauses();
				}
				break;
			}
			setState(1221);
			match(END);
			setState(1222);
			match(TRY);
			setState(1224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(1223);
				match(SEMI);
				}
			}

			setState(1226);
			match(BEGIN);
			setState(1227);
			match(CATCH);
			setState(1229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(1228);
				match(SEMI);
				}
				break;
			}
			setState(1232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(1231);
				((Try_catch_statementContext)_localctx).catch_clauses = sql_clauses();
				}
				break;
			}
			setState(1234);
			match(END);
			setState(1235);
			match(CATCH);
			setState(1237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				setState(1236);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Waitfor_statementContext extends ParserRuleContext {
		public TerminalNode WAITFOR() { return getToken(TSqlParser.WAITFOR, 0); }
		public Receive_statementContext receive_statement() {
			return getRuleContext(Receive_statementContext.class,0);
		}
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DELAY() { return getToken(TSqlParser.DELAY, 0); }
		public TerminalNode TIME() { return getToken(TSqlParser.TIME, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public Waitfor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitfor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWaitfor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWaitfor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitWaitfor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Waitfor_statementContext waitfor_statement() throws RecognitionException {
		Waitfor_statementContext _localctx = new Waitfor_statementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_waitfor_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1239);
			match(WAITFOR);
			setState(1241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(1240);
				receive_statement();
				}
				break;
			}
			setState(1244);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1243);
				match(COMMA);
				}
			}

			setState(1248);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				setState(1246);
				_la = _input.LA(1);
				if ( !(_la==DELAY || _la==TIME || _la==TIMEOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1247);
				time();
				}
				break;
			}
			setState(1251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				setState(1250);
				expression(0);
				}
				break;
			}
			setState(1254);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				setState(1253);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class While_statementContext extends ParserRuleContext {
		public TerminalNode WHILE() { return getToken(TSqlParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Sql_clauseContext sql_clause() {
			return getRuleContext(Sql_clauseContext.class,0);
		}
		public TerminalNode BREAK() { return getToken(TSqlParser.BREAK, 0); }
		public TerminalNode CONTINUE() { return getToken(TSqlParser.CONTINUE, 0); }
		public While_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_while_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWhile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWhile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitWhile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final While_statementContext while_statement() throws RecognitionException {
		While_statementContext _localctx = new While_statementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_while_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1256);
			match(WHILE);
			setState(1257);
			search_condition();
			setState(1267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				setState(1258);
				sql_clause();
				}
				break;
			case 2:
				{
				setState(1259);
				match(BREAK);
				setState(1261);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
				case 1:
					{
					setState(1260);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(1263);
				match(CONTINUE);
				setState(1265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
				case 1:
					{
					setState(1264);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Print_statementContext extends ParserRuleContext {
		public TerminalNode PRINT() { return getToken(TSqlParser.PRINT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_print_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPrint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPrint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitPrint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Print_statementContext print_statement() throws RecognitionException {
		Print_statementContext _localctx = new Print_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_print_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1269);
			match(PRINT);
			setState(1270);
			expression(0);
			setState(1272);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				setState(1271);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raiseerror_statementContext extends ParserRuleContext {
		public Token msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public TerminalNode RAISERROR() { return getToken(TSqlParser.RAISERROR, 0); }
		public List<Constant_LOCAL_IDContext> constant_LOCAL_ID() {
			return getRuleContexts(Constant_LOCAL_IDContext.class);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return getRuleContext(Constant_LOCAL_IDContext.class,i);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode SETERROR() { return getToken(TSqlParser.SETERROR, 0); }
		public Raiseerror_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raiseerror_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRaiseerror_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRaiseerror_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitRaiseerror_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Raiseerror_statementContext raiseerror_statement() throws RecognitionException {
		Raiseerror_statementContext _localctx = new Raiseerror_statementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_raiseerror_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1274);
			match(RAISERROR);
			setState(1275);
			match(LR_BRACKET);
			setState(1276);
			((Raiseerror_statementContext)_localctx).msg = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 776)) & ~0x3f) == 0 && ((1L << (_la - 776)) & ((1L << (LOCAL_ID - 776)) | (1L << (DECIMAL - 776)) | (1L << (STRING - 776)))) != 0)) ) {
				((Raiseerror_statementContext)_localctx).msg = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1277);
			match(COMMA);
			setState(1278);
			((Raiseerror_statementContext)_localctx).severity = constant_LOCAL_ID();
			setState(1279);
			match(COMMA);
			setState(1280);
			((Raiseerror_statementContext)_localctx).state = constant_LOCAL_ID();
			setState(1285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1281);
				match(COMMA);
				setState(1282);
				constant_LOCAL_ID();
				}
				}
				setState(1287);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1288);
			match(RR_BRACKET);
			setState(1291);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				setState(1289);
				match(WITH);
				setState(1290);
				_la = _input.LA(1);
				if ( !(_la==LOG || _la==SETERROR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				setState(1293);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_statementContext extends ParserRuleContext {
		public Empty_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEmpty_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEmpty_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitEmpty_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Empty_statementContext empty_statement() throws RecognitionException {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_empty_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1296);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Another_statementContext extends ParserRuleContext {
		public Declare_statementContext declare_statement() {
			return getRuleContext(Declare_statementContext.class,0);
		}
		public Cursor_statementContext cursor_statement() {
			return getRuleContext(Cursor_statementContext.class,0);
		}
		public Conversation_statementContext conversation_statement() {
			return getRuleContext(Conversation_statementContext.class,0);
		}
		public Create_contractContext create_contract() {
			return getRuleContext(Create_contractContext.class,0);
		}
		public Create_queueContext create_queue() {
			return getRuleContext(Create_queueContext.class,0);
		}
		public Alter_queueContext alter_queue() {
			return getRuleContext(Alter_queueContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public Message_statementContext message_statement() {
			return getRuleContext(Message_statementContext.class,0);
		}
		public Security_statementContext security_statement() {
			return getRuleContext(Security_statementContext.class,0);
		}
		public Set_statementContext set_statement() {
			return getRuleContext(Set_statementContext.class,0);
		}
		public Transaction_statementContext transaction_statement() {
			return getRuleContext(Transaction_statementContext.class,0);
		}
		public Use_statementContext use_statement() {
			return getRuleContext(Use_statementContext.class,0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_another_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAnother_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAnother_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAnother_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Another_statementContext another_statement() throws RecognitionException {
		Another_statementContext _localctx = new Another_statementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_another_statement);
		try {
			setState(1310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1298);
				declare_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1299);
				cursor_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1300);
				conversation_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1301);
				create_contract();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1302);
				create_queue();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1303);
				alter_queue();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1304);
				execute_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1305);
				message_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1306);
				security_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1307);
				set_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1308);
				transaction_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1309);
				use_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_application_roleContext extends ParserRuleContext {
		public IdContext appliction_role;
		public IdContext new_application_role_name;
		public Token application_role_password;
		public IdContext app_role_default_schema;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode APPLICATION() { return getToken(TSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_application_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_application_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_application_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_application_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_application_roleContext alter_application_role() throws RecognitionException {
		Alter_application_roleContext _localctx = new Alter_application_roleContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_alter_application_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1312);
			match(ALTER);
			setState(1313);
			match(APPLICATION);
			setState(1314);
			match(ROLE);
			setState(1315);
			((Alter_application_roleContext)_localctx).appliction_role = id();
			setState(1316);
			match(WITH);
			setState(1323);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				setState(1318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1317);
					match(COMMA);
					}
				}

				setState(1320);
				match(NAME);
				setState(1321);
				match(EQUAL);
				setState(1322);
				((Alter_application_roleContext)_localctx).new_application_role_name = id();
				}
				break;
			}
			setState(1331);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				setState(1326);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1325);
					match(COMMA);
					}
				}

				setState(1328);
				match(PASSWORD);
				setState(1329);
				match(EQUAL);
				setState(1330);
				((Alter_application_roleContext)_localctx).application_role_password = match(STRING);
				}
				break;
			}
			setState(1339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SCHEMA || _la==COMMA) {
				{
				setState(1334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1333);
					match(COMMA);
					}
				}

				setState(1336);
				match(DEFAULT_SCHEMA);
				setState(1337);
				match(EQUAL);
				setState(1338);
				((Alter_application_roleContext)_localctx).app_role_default_schema = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_application_roleContext extends ParserRuleContext {
		public IdContext appliction_role;
		public Token application_role_password;
		public IdContext app_role_default_schema;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode APPLICATION() { return getToken(TSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_application_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_application_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_application_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_application_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_application_roleContext create_application_role() throws RecognitionException {
		Create_application_roleContext _localctx = new Create_application_roleContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_create_application_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1341);
			match(CREATE);
			setState(1342);
			match(APPLICATION);
			setState(1343);
			match(ROLE);
			setState(1344);
			((Create_application_roleContext)_localctx).appliction_role = id();
			setState(1345);
			match(WITH);
			setState(1352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				setState(1347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1346);
					match(COMMA);
					}
				}

				setState(1349);
				match(PASSWORD);
				setState(1350);
				match(EQUAL);
				setState(1351);
				((Create_application_roleContext)_localctx).application_role_password = match(STRING);
				}
				break;
			}
			setState(1360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SCHEMA || _la==COMMA) {
				{
				setState(1355);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1354);
					match(COMMA);
					}
				}

				setState(1357);
				match(DEFAULT_SCHEMA);
				setState(1358);
				match(EQUAL);
				setState(1359);
				((Create_application_roleContext)_localctx).app_role_default_schema = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_aggregateContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext aggregate_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(TSqlParser.AGGREGATE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_aggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_aggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_aggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_aggregate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_aggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_aggregateContext drop_aggregate() throws RecognitionException {
		Drop_aggregateContext _localctx = new Drop_aggregateContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_drop_aggregate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1362);
			match(DROP);
			setState(1363);
			match(AGGREGATE);
			setState(1366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1364);
				match(IF);
				setState(1365);
				match(EXISTS);
				}
			}

			setState(1371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				setState(1368);
				((Drop_aggregateContext)_localctx).schema_name = id();
				setState(1369);
				match(DOT);
				}
				break;
			}
			setState(1373);
			((Drop_aggregateContext)_localctx).aggregate_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_application_roleContext extends ParserRuleContext {
		public IdContext rolename;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode APPLICATION() { return getToken(TSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_application_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_application_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_application_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_application_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_application_roleContext drop_application_role() throws RecognitionException {
		Drop_application_roleContext _localctx = new Drop_application_roleContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_drop_application_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1375);
			match(DROP);
			setState(1376);
			match(APPLICATION);
			setState(1377);
			match(ROLE);
			setState(1378);
			((Drop_application_roleContext)_localctx).rolename = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assemblyContext extends ParserRuleContext {
		public IdContext assembly_name;
		public Alter_assembly_startContext alter_assembly_start() {
			return getRuleContext(Alter_assembly_startContext.class,0);
		}
		public Alter_assembly_clauseContext alter_assembly_clause() {
			return getRuleContext(Alter_assembly_clauseContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assemblyContext alter_assembly() throws RecognitionException {
		Alter_assemblyContext _localctx = new Alter_assemblyContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_alter_assembly);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1380);
			alter_assembly_start();
			setState(1381);
			((Alter_assemblyContext)_localctx).assembly_name = id();
			setState(1382);
			alter_assembly_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public Alter_assembly_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_startContext alter_assembly_start() throws RecognitionException {
		Alter_assembly_startContext _localctx = new Alter_assembly_startContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_alter_assembly_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1384);
			match(ALTER);
			setState(1385);
			match(ASSEMBLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_clauseContext extends ParserRuleContext {
		public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
			return getRuleContext(Alter_assembly_from_clauseContext.class,0);
		}
		public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
			return getRuleContext(Alter_assembly_with_clauseContext.class,0);
		}
		public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
			return getRuleContext(Alter_assembly_drop_clauseContext.class,0);
		}
		public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
			return getRuleContext(Alter_assembly_add_clauseContext.class,0);
		}
		public Alter_assembly_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_clauseContext alter_assembly_clause() throws RecognitionException {
		Alter_assembly_clauseContext _localctx = new Alter_assembly_clauseContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_alter_assembly_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1387);
				alter_assembly_from_clause();
				}
			}

			setState(1391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				setState(1390);
				alter_assembly_with_clause();
				}
				break;
			}
			setState(1394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				setState(1393);
				alter_assembly_drop_clause();
				}
				break;
			}
			setState(1397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADD) {
				{
				setState(1396);
				alter_assembly_add_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_from_clauseContext extends ParserRuleContext {
		public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
			return getRuleContext(Alter_assembly_from_clause_startContext.class,0);
		}
		public Client_assembly_specifierContext client_assembly_specifier() {
			return getRuleContext(Client_assembly_specifierContext.class,0);
		}
		public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
			return getRuleContext(Alter_assembly_file_bitsContext.class,0);
		}
		public Alter_assembly_from_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_from_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_from_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly_from_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_from_clauseContext alter_assembly_from_clause() throws RecognitionException {
		Alter_assembly_from_clauseContext _localctx = new Alter_assembly_from_clauseContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_alter_assembly_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1399);
			alter_assembly_from_clause_start();
			setState(1402);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_BACK_SLASH:
			case DISK_DRIVE:
			case STRING:
				{
				setState(1400);
				client_assembly_specifier();
				}
				break;
			case AS:
				{
				setState(1401);
				alter_assembly_file_bits();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_from_clause_startContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Alter_assembly_from_clause_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_from_clause_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_from_clause_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_from_clause_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly_from_clause_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() throws RecognitionException {
		Alter_assembly_from_clause_startContext _localctx = new Alter_assembly_from_clause_startContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_alter_assembly_from_clause_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1404);
			match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_drop_clauseContext extends ParserRuleContext {
		public Alter_assembly_dropContext alter_assembly_drop() {
			return getRuleContext(Alter_assembly_dropContext.class,0);
		}
		public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
			return getRuleContext(Alter_assembly_drop_multiple_filesContext.class,0);
		}
		public Alter_assembly_drop_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_drop_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_drop_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly_drop_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_drop_clauseContext alter_assembly_drop_clause() throws RecognitionException {
		Alter_assembly_drop_clauseContext _localctx = new Alter_assembly_drop_clauseContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_alter_assembly_drop_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1406);
			alter_assembly_drop();
			setState(1407);
			alter_assembly_drop_multiple_files();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_drop_multiple_filesContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Multiple_local_filesContext multiple_local_files() {
			return getRuleContext(Multiple_local_filesContext.class,0);
		}
		public Alter_assembly_drop_multiple_filesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop_multiple_files; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_drop_multiple_files(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_drop_multiple_files(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly_drop_multiple_files(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() throws RecognitionException {
		Alter_assembly_drop_multiple_filesContext _localctx = new Alter_assembly_drop_multiple_filesContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_alter_assembly_drop_multiple_files);
		try {
			setState(1411);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1409);
				match(ALL);
				}
				break;
			case DISK_DRIVE:
			case SINGLE_QUOTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1410);
				multiple_local_files();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_dropContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_assembly_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_dropContext alter_assembly_drop() throws RecognitionException {
		Alter_assembly_dropContext _localctx = new Alter_assembly_dropContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_alter_assembly_drop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1413);
			match(DROP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_add_clauseContext extends ParserRuleContext {
		public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
			return getRuleContext(Alter_asssembly_add_clause_startContext.class,0);
		}
		public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
			return getRuleContext(Alter_assembly_client_file_clauseContext.class,0);
		}
		public Alter_assembly_add_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_add_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_add_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_add_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly_add_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_add_clauseContext alter_assembly_add_clause() throws RecognitionException {
		Alter_assembly_add_clauseContext _localctx = new Alter_assembly_add_clauseContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_alter_assembly_add_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1415);
			alter_asssembly_add_clause_start();
			setState(1416);
			alter_assembly_client_file_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asssembly_add_clause_startContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Alter_asssembly_add_clause_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asssembly_add_clause_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_asssembly_add_clause_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_asssembly_add_clause_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_asssembly_add_clause_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() throws RecognitionException {
		Alter_asssembly_add_clause_startContext _localctx = new Alter_asssembly_add_clause_startContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_alter_asssembly_add_clause_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1418);
			match(ADD);
			setState(1419);
			match(FILE);
			setState(1420);
			match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_client_file_clauseContext extends ParserRuleContext {
		public Alter_assembly_file_nameContext alter_assembly_file_name() {
			return getRuleContext(Alter_assembly_file_nameContext.class,0);
		}
		public Alter_assembly_asContext alter_assembly_as() {
			return getRuleContext(Alter_assembly_asContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_assembly_client_file_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_client_file_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_client_file_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_client_file_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly_client_file_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() throws RecognitionException {
		Alter_assembly_client_file_clauseContext _localctx = new Alter_assembly_client_file_clauseContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_alter_assembly_client_file_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1422);
			alter_assembly_file_name();
			setState(1426);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1423);
				alter_assembly_as();
				setState(1424);
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_file_nameContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Alter_assembly_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_file_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_file_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly_file_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_file_nameContext alter_assembly_file_name() throws RecognitionException {
		Alter_assembly_file_nameContext _localctx = new Alter_assembly_file_nameContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_alter_assembly_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1428);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_file_bitsContext extends ParserRuleContext {
		public Alter_assembly_asContext alter_assembly_as() {
			return getRuleContext(Alter_assembly_asContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_assembly_file_bitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_file_bits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_file_bits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_file_bits(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly_file_bits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_file_bitsContext alter_assembly_file_bits() throws RecognitionException {
		Alter_assembly_file_bitsContext _localctx = new Alter_assembly_file_bitsContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_alter_assembly_file_bits);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1430);
			alter_assembly_as();
			setState(1431);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_asContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Alter_assembly_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_asContext alter_assembly_as() throws RecognitionException {
		Alter_assembly_asContext _localctx = new Alter_assembly_asContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_alter_assembly_as);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1433);
			match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_with_clauseContext extends ParserRuleContext {
		public Alter_assembly_withContext alter_assembly_with() {
			return getRuleContext(Alter_assembly_withContext.class,0);
		}
		public Assembly_optionContext assembly_option() {
			return getRuleContext(Assembly_optionContext.class,0);
		}
		public Alter_assembly_with_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_with_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_with_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly_with_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_with_clauseContext alter_assembly_with_clause() throws RecognitionException {
		Alter_assembly_with_clauseContext _localctx = new Alter_assembly_with_clauseContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_alter_assembly_with_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1435);
			alter_assembly_with();
			setState(1436);
			assembly_option(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Alter_assembly_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_with(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_assembly_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_withContext alter_assembly_with() throws RecognitionException {
		Alter_assembly_withContext _localctx = new Alter_assembly_withContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_alter_assembly_with);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1438);
			match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Client_assembly_specifierContext extends ParserRuleContext {
		public Network_file_shareContext network_file_share() {
			return getRuleContext(Network_file_shareContext.class,0);
		}
		public Local_fileContext local_file() {
			return getRuleContext(Local_fileContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Client_assembly_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_client_assembly_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClient_assembly_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClient_assembly_specifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitClient_assembly_specifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Client_assembly_specifierContext client_assembly_specifier() throws RecognitionException {
		Client_assembly_specifierContext _localctx = new Client_assembly_specifierContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_client_assembly_specifier);
		try {
			setState(1443);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_BACK_SLASH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1440);
				network_file_share();
				}
				break;
			case DISK_DRIVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1441);
				local_file();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 3);
				{
				setState(1442);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assembly_optionContext extends ParserRuleContext {
		public TerminalNode PERMISSION_SET() { return getToken(TSqlParser.PERMISSION_SET, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode SAFE() { return getToken(TSqlParser.SAFE, 0); }
		public TerminalNode EXTERNAL_ACCESS() { return getToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public TerminalNode UNSAFE() { return getToken(TSqlParser.UNSAFE, 0); }
		public TerminalNode VISIBILITY() { return getToken(TSqlParser.VISIBILITY, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode UNCHECKED() { return getToken(TSqlParser.UNCHECKED, 0); }
		public TerminalNode DATA() { return getToken(TSqlParser.DATA, 0); }
		public Assembly_optionContext assembly_option() {
			return getRuleContext(Assembly_optionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Assembly_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assembly_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAssembly_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAssembly_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAssembly_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assembly_optionContext assembly_option() throws RecognitionException {
		return assembly_option(0);
	}

	private Assembly_optionContext assembly_option(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Assembly_optionContext _localctx = new Assembly_optionContext(_ctx, _parentState);
		Assembly_optionContext _prevctx = _localctx;
		int _startState = 90;
		enterRecursionRule(_localctx, 90, RULE_assembly_option, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1454);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PERMISSION_SET:
				{
				setState(1446);
				match(PERMISSION_SET);
				setState(1447);
				match(EQUAL);
				setState(1448);
				_la = _input.LA(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case VISIBILITY:
				{
				setState(1449);
				match(VISIBILITY);
				setState(1450);
				match(EQUAL);
				setState(1451);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNCHECKED:
				{
				setState(1452);
				match(UNCHECKED);
				setState(1453);
				match(DATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(1460);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,62,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assembly_optionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_assembly_option);
					setState(1456);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1457);
					match(COMMA);
					}
					} 
				}
				setState(1462);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,62,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Network_file_shareContext extends ParserRuleContext {
		public Network_file_startContext network_file_start() {
			return getRuleContext(Network_file_startContext.class,0);
		}
		public Network_computerContext network_computer() {
			return getRuleContext(Network_computerContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public Network_file_shareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_file_share; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNetwork_file_share(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNetwork_file_share(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitNetwork_file_share(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Network_file_shareContext network_file_share() throws RecognitionException {
		Network_file_shareContext _localctx = new Network_file_shareContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_network_file_share);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1463);
			network_file_start();
			setState(1464);
			network_computer();
			setState(1465);
			file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_computerContext extends ParserRuleContext {
		public IdContext computer_name;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Network_computerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_computer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNetwork_computer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNetwork_computer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitNetwork_computer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Network_computerContext network_computer() throws RecognitionException {
		Network_computerContext _localctx = new Network_computerContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_network_computer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1467);
			((Network_computerContext)_localctx).computer_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_file_startContext extends ParserRuleContext {
		public TerminalNode DOUBLE_BACK_SLASH() { return getToken(TSqlParser.DOUBLE_BACK_SLASH, 0); }
		public Network_file_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_file_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNetwork_file_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNetwork_file_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitNetwork_file_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Network_file_startContext network_file_start() throws RecognitionException {
		Network_file_startContext _localctx = new Network_file_startContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_network_file_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1469);
			match(DOUBLE_BACK_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_pathContext extends ParserRuleContext {
		public File_directory_path_separatorContext file_directory_path_separator() {
			return getRuleContext(File_directory_path_separatorContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public File_pathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_path(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_path(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFile_path(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_pathContext file_path() throws RecognitionException {
		File_pathContext _localctx = new File_pathContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_file_path);
		try {
			setState(1475);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BACKSLASH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1471);
				file_directory_path_separator();
				setState(1472);
				file_path();
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1474);
				id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_directory_path_separatorContext extends ParserRuleContext {
		public File_directory_path_separatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_directory_path_separator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_directory_path_separator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_directory_path_separator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFile_directory_path_separator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_directory_path_separatorContext file_directory_path_separator() throws RecognitionException {
		File_directory_path_separatorContext _localctx = new File_directory_path_separatorContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_file_directory_path_separator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1477);
			match(BACKSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_fileContext extends ParserRuleContext {
		public Local_driveContext local_drive() {
			return getRuleContext(Local_driveContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public Local_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_file; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterLocal_file(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitLocal_file(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitLocal_file(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_fileContext local_file() throws RecognitionException {
		Local_fileContext _localctx = new Local_fileContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_local_file);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1479);
			local_drive();
			setState(1480);
			file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_driveContext extends ParserRuleContext {
		public TerminalNode DISK_DRIVE() { return getToken(TSqlParser.DISK_DRIVE, 0); }
		public Local_driveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_drive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterLocal_drive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitLocal_drive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitLocal_drive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_driveContext local_drive() throws RecognitionException {
		Local_driveContext _localctx = new Local_driveContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_local_drive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1482);
			match(DISK_DRIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_local_filesContext extends ParserRuleContext {
		public Multiple_local_file_startContext multiple_local_file_start() {
			return getRuleContext(Multiple_local_file_startContext.class,0);
		}
		public Local_fileContext local_file() {
			return getRuleContext(Local_fileContext.class,0);
		}
		public TerminalNode SINGLE_QUOTE() { return getToken(TSqlParser.SINGLE_QUOTE, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Multiple_local_filesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_local_files; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMultiple_local_files(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMultiple_local_files(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitMultiple_local_files(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiple_local_filesContext multiple_local_files() throws RecognitionException {
		Multiple_local_filesContext _localctx = new Multiple_local_filesContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_multiple_local_files);
		try {
			setState(1490);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE_QUOTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1484);
				multiple_local_file_start();
				setState(1485);
				local_file();
				setState(1486);
				match(SINGLE_QUOTE);
				setState(1487);
				match(COMMA);
				}
				break;
			case DISK_DRIVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1489);
				local_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_local_file_startContext extends ParserRuleContext {
		public TerminalNode SINGLE_QUOTE() { return getToken(TSqlParser.SINGLE_QUOTE, 0); }
		public Multiple_local_file_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_local_file_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMultiple_local_file_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMultiple_local_file_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitMultiple_local_file_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiple_local_file_startContext multiple_local_file_start() throws RecognitionException {
		Multiple_local_file_startContext _localctx = new Multiple_local_file_startContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_multiple_local_file_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1492);
			match(SINGLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_assemblyContext extends ParserRuleContext {
		public IdContext assembly_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PERMISSION_SET() { return getToken(TSqlParser.PERMISSION_SET, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public TerminalNode SAFE() { return getToken(TSqlParser.SAFE, 0); }
		public TerminalNode EXTERNAL_ACCESS() { return getToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public TerminalNode UNSAFE() { return getToken(TSqlParser.UNSAFE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_assembly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_assembly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_assemblyContext create_assembly() throws RecognitionException {
		Create_assemblyContext _localctx = new Create_assemblyContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_create_assembly);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1494);
			match(CREATE);
			setState(1495);
			match(ASSEMBLY);
			setState(1496);
			((Create_assemblyContext)_localctx).assembly_name = id();
			setState(1499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(1497);
				match(AUTHORIZATION);
				setState(1498);
				((Create_assemblyContext)_localctx).owner_name = id();
				}
			}

			setState(1501);
			match(FROM);
			setState(1506); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1503);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1502);
					match(COMMA);
					}
				}

				setState(1505);
				_la = _input.LA(1);
				if ( !(_la==STRING || _la==BINARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(1508); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 781)) & ~0x3f) == 0 && ((1L << (_la - 781)) & ((1L << (STRING - 781)) | (1L << (BINARY - 781)) | (1L << (COMMA - 781)))) != 0) );
			setState(1514);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				setState(1510);
				match(WITH);
				setState(1511);
				match(PERMISSION_SET);
				setState(1512);
				match(EQUAL);
				setState(1513);
				_la = _input.LA(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_assemblyContext extends ParserRuleContext {
		public IdContext assembly_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode DEPENDENTS() { return getToken(TSqlParser.DEPENDENTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_assembly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_assembly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_assemblyContext drop_assembly() throws RecognitionException {
		Drop_assemblyContext _localctx = new Drop_assemblyContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_drop_assembly);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1516);
			match(DROP);
			setState(1517);
			match(ASSEMBLY);
			setState(1520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1518);
				match(IF);
				setState(1519);
				match(EXISTS);
				}
			}

			setState(1526); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1523);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1522);
						match(COMMA);
						}
					}

					setState(1525);
					((Drop_assemblyContext)_localctx).assembly_name = id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1528); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(1533);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				setState(1530);
				match(WITH);
				setState(1531);
				match(NO);
				setState(1532);
				match(DEPENDENTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asymmetric_keyContext extends ParserRuleContext {
		public IdContext Asym_Key_Name;
		public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
			return getRuleContext(Alter_asymmetric_key_startContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Asymmetric_key_optionContext asymmetric_key_option() {
			return getRuleContext(Asymmetric_key_optionContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_asymmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_asymmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_asymmetric_keyContext alter_asymmetric_key() throws RecognitionException {
		Alter_asymmetric_keyContext _localctx = new Alter_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_alter_asymmetric_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1535);
			alter_asymmetric_key_start();
			setState(1536);
			((Alter_asymmetric_keyContext)_localctx).Asym_Key_Name = id();
			setState(1541);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(1537);
				asymmetric_key_option();
				}
				break;
			case REMOVE:
				{
				setState(1538);
				match(REMOVE);
				setState(1539);
				match(PRIVATE);
				setState(1540);
				match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asymmetric_key_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_key_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asymmetric_key_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_asymmetric_key_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_asymmetric_key_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_asymmetric_key_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_asymmetric_key_startContext alter_asymmetric_key_start() throws RecognitionException {
		Alter_asymmetric_key_startContext _localctx = new Alter_asymmetric_key_startContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alter_asymmetric_key_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1543);
			match(ALTER);
			setState(1544);
			match(ASYMMETRIC);
			setState(1545);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_optionContext extends ParserRuleContext {
		public Asymmetric_key_option_startContext asymmetric_key_option_start() {
			return getRuleContext(Asymmetric_key_option_startContext.class,0);
		}
		public List<Asymmetric_key_password_change_optionContext> asymmetric_key_password_change_option() {
			return getRuleContexts(Asymmetric_key_password_change_optionContext.class);
		}
		public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option(int i) {
			return getRuleContext(Asymmetric_key_password_change_optionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Asymmetric_key_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAsymmetric_key_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAsymmetric_key_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAsymmetric_key_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Asymmetric_key_optionContext asymmetric_key_option() throws RecognitionException {
		Asymmetric_key_optionContext _localctx = new Asymmetric_key_optionContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_asymmetric_key_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1547);
			asymmetric_key_option_start();
			setState(1548);
			asymmetric_key_password_change_option();
			setState(1551);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1549);
				match(COMMA);
				setState(1550);
				asymmetric_key_password_change_option();
				}
			}

			setState(1553);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_option_startContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Asymmetric_key_option_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_option_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAsymmetric_key_option_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAsymmetric_key_option_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAsymmetric_key_option_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Asymmetric_key_option_startContext asymmetric_key_option_start() throws RecognitionException {
		Asymmetric_key_option_startContext _localctx = new Asymmetric_key_option_startContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_asymmetric_key_option_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1555);
			match(WITH);
			setState(1556);
			match(PRIVATE);
			setState(1557);
			match(KEY);
			setState(1558);
			match(LR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_password_change_optionContext extends ParserRuleContext {
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public Asymmetric_key_password_change_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_password_change_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAsymmetric_key_password_change_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAsymmetric_key_password_change_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAsymmetric_key_password_change_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option() throws RecognitionException {
		Asymmetric_key_password_change_optionContext _localctx = new Asymmetric_key_password_change_optionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_asymmetric_key_password_change_option);
		try {
			setState(1570);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1560);
				match(DECRYPTION);
				setState(1561);
				match(BY);
				setState(1562);
				match(PASSWORD);
				setState(1563);
				match(EQUAL);
				setState(1564);
				match(STRING);
				}
				break;
			case ENCRYPTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(1565);
				match(ENCRYPTION);
				setState(1566);
				match(BY);
				setState(1567);
				match(PASSWORD);
				setState(1568);
				match(EQUAL);
				setState(1569);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_asymmetric_keyContext extends ParserRuleContext {
		public IdContext Asym_Key_Nam;
		public IdContext database_principal_name;
		public IdContext Assembly_Name;
		public IdContext Provider_Name;
		public Token provider_key_name;
		public Token asymmetric_key_password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EXECUTABLE_FILE() { return getToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode RSA_4096() { return getToken(TSqlParser.RSA_4096, 0); }
		public TerminalNode RSA_3072() { return getToken(TSqlParser.RSA_3072, 0); }
		public TerminalNode RSA_2048() { return getToken(TSqlParser.RSA_2048, 0); }
		public TerminalNode RSA_1024() { return getToken(TSqlParser.RSA_1024, 0); }
		public TerminalNode RSA_512() { return getToken(TSqlParser.RSA_512, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_asymmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_asymmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_asymmetric_keyContext create_asymmetric_key() throws RecognitionException {
		Create_asymmetric_keyContext _localctx = new Create_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_create_asymmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1572);
			match(CREATE);
			setState(1573);
			match(ASYMMETRIC);
			setState(1574);
			match(KEY);
			setState(1575);
			((Create_asymmetric_keyContext)_localctx).Asym_Key_Nam = id();
			setState(1578);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(1576);
				match(AUTHORIZATION);
				setState(1577);
				((Create_asymmetric_keyContext)_localctx).database_principal_name = id();
				}
			}

			setState(1593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1580);
				match(FROM);
				setState(1591);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILE:
					{
					setState(1581);
					match(FILE);
					setState(1582);
					match(EQUAL);
					setState(1583);
					match(STRING);
					}
					break;
				case EXECUTABLE_FILE:
					{
					setState(1584);
					match(EXECUTABLE_FILE);
					setState(1585);
					match(EQUAL);
					setState(1586);
					match(STRING);
					}
					break;
				case ASSEMBLY:
					{
					setState(1587);
					match(ASSEMBLY);
					setState(1588);
					((Create_asymmetric_keyContext)_localctx).Assembly_Name = id();
					}
					break;
				case PROVIDER:
					{
					setState(1589);
					match(PROVIDER);
					setState(1590);
					((Create_asymmetric_keyContext)_localctx).Provider_Name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(1607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(1595);
				match(WITH);
				setState(1605);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALGORITHM:
					{
					setState(1596);
					match(ALGORITHM);
					setState(1597);
					match(EQUAL);
					setState(1598);
					_la = _input.LA(1);
					if ( !(((((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & ((1L << (RSA_512 - 289)) | (1L << (RSA_1024 - 289)) | (1L << (RSA_2048 - 289)) | (1L << (RSA_3072 - 289)) | (1L << (RSA_4096 - 289)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					setState(1599);
					match(PROVIDER_KEY_NAME);
					setState(1600);
					match(EQUAL);
					setState(1601);
					((Create_asymmetric_keyContext)_localctx).provider_key_name = match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					setState(1602);
					match(CREATION_DISPOSITION);
					setState(1603);
					match(EQUAL);
					setState(1604);
					_la = _input.LA(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(1614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				setState(1609);
				match(ENCRYPTION);
				setState(1610);
				match(BY);
				setState(1611);
				match(PASSWORD);
				setState(1612);
				match(EQUAL);
				setState(1613);
				((Create_asymmetric_keyContext)_localctx).asymmetric_key_password = match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_asymmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Drop_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_asymmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_asymmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_asymmetric_keyContext drop_asymmetric_key() throws RecognitionException {
		Drop_asymmetric_keyContext _localctx = new Drop_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_drop_asymmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1616);
			match(DROP);
			setState(1617);
			match(ASYMMETRIC);
			setState(1618);
			match(KEY);
			setState(1619);
			((Drop_asymmetric_keyContext)_localctx).key_name = id();
			setState(1623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REMOVE) {
				{
				setState(1620);
				match(REMOVE);
				setState(1621);
				match(PROVIDER);
				setState(1622);
				match(KEY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorizationContext extends ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_nameContext entity_name() {
			return getRuleContext(Entity_nameContext.class,0);
		}
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_authorization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_authorizationContext alter_authorization() throws RecognitionException {
		Alter_authorizationContext _localctx = new Alter_authorizationContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alter_authorization);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1625);
			alter_authorization_start();
			setState(1629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				setState(1626);
				class_type();
				setState(1627);
				colon_colon();
				}
				break;
			}
			setState(1631);
			((Alter_authorizationContext)_localctx).entity = entity_name();
			setState(1632);
			entity_to();
			setState(1633);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Authorization_granteeContext extends ParserRuleContext {
		public IdContext principal_name;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public Authorization_granteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorization_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAuthorization_grantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAuthorization_grantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAuthorization_grantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Authorization_granteeContext authorization_grantee() throws RecognitionException {
		Authorization_granteeContext _localctx = new Authorization_granteeContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_authorization_grantee);
		try {
			setState(1638);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1635);
				((Authorization_granteeContext)_localctx).principal_name = id();
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(1636);
				match(SCHEMA);
				setState(1637);
				match(OWNER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_toContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public Entity_toContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_to; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEntity_to(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEntity_to(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitEntity_to(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Entity_toContext entity_to() throws RecognitionException {
		Entity_toContext _localctx = new Entity_toContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_entity_to);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1640);
			match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Colon_colonContext extends ParserRuleContext {
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public Colon_colonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colon_colon; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColon_colon(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColon_colon(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitColon_colon(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Colon_colonContext colon_colon() throws RecognitionException {
		Colon_colonContext _localctx = new Colon_colonContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_colon_colon);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1642);
			match(COLON);
			setState(1643);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Alter_authorization_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_authorization_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_authorization_startContext alter_authorization_start() throws RecognitionException {
		Alter_authorization_startContext _localctx = new Alter_authorization_startContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_alter_authorization_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1645);
			match(ALTER);
			setState(1646);
			match(AUTHORIZATION);
			setState(1647);
			match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_sql_databaseContext extends ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_nameContext entity_name() {
			return getRuleContext(Entity_nameContext.class,0);
		}
		public Class_type_for_sql_databaseContext class_type_for_sql_database() {
			return getRuleContext(Class_type_for_sql_databaseContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_sql_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_sql_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization_for_sql_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization_for_sql_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_authorization_for_sql_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() throws RecognitionException {
		Alter_authorization_for_sql_databaseContext _localctx = new Alter_authorization_for_sql_databaseContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alter_authorization_for_sql_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1649);
			alter_authorization_start();
			setState(1653);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				setState(1650);
				class_type_for_sql_database();
				setState(1651);
				colon_colon();
				}
				break;
			}
			setState(1655);
			((Alter_authorization_for_sql_databaseContext)_localctx).entity = entity_name();
			setState(1656);
			entity_to();
			setState(1657);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_azure_dwContext extends ParserRuleContext {
		public Entity_name_for_azure_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
			return getRuleContext(Entity_name_for_azure_dwContext.class,0);
		}
		public Class_type_for_azure_dwContext class_type_for_azure_dw() {
			return getRuleContext(Class_type_for_azure_dwContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_azure_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization_for_azure_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization_for_azure_dw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_authorization_for_azure_dw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() throws RecognitionException {
		Alter_authorization_for_azure_dwContext _localctx = new Alter_authorization_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_alter_authorization_for_azure_dw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1659);
			alter_authorization_start();
			setState(1663);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SCHEMA || _la==OBJECT) {
				{
				setState(1660);
				class_type_for_azure_dw();
				setState(1661);
				colon_colon();
				}
			}

			setState(1665);
			((Alter_authorization_for_azure_dwContext)_localctx).entity = entity_name_for_azure_dw();
			setState(1666);
			entity_to();
			setState(1667);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_parallel_dwContext extends ParserRuleContext {
		public Entity_name_for_parallel_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
			return getRuleContext(Entity_name_for_parallel_dwContext.class,0);
		}
		public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
			return getRuleContext(Class_type_for_parallel_dwContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_parallel_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization_for_parallel_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization_for_parallel_dw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_authorization_for_parallel_dw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() throws RecognitionException {
		Alter_authorization_for_parallel_dwContext _localctx = new Alter_authorization_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_alter_authorization_for_parallel_dw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1669);
			alter_authorization_start();
			setState(1673);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATABASE || _la==SCHEMA || _la==OBJECT) {
				{
				setState(1670);
				class_type_for_parallel_dw();
				setState(1671);
				colon_colon();
				}
			}

			setState(1675);
			((Alter_authorization_for_parallel_dwContext)_localctx).entity = entity_name_for_parallel_dw();
			setState(1676);
			entity_to();
			setState(1677);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_typeContext extends ParserRuleContext {
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSqlParser.ENDPOINT, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClass_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClass_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitClass_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_typeContext class_type() throws RecognitionException {
		Class_typeContext _localctx = new Class_typeContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_class_type);
		try {
			setState(1713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1679);
				match(OBJECT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1680);
				match(ASSEMBLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1681);
				match(ASYMMETRIC);
				setState(1682);
				match(KEY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1683);
				match(AVAILABILITY);
				setState(1684);
				match(GROUP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1685);
				match(CERTIFICATE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1686);
				match(CONTRACT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1687);
				match(TYPE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1688);
				match(DATABASE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1689);
				match(ENDPOINT);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1690);
				match(FULLTEXT);
				setState(1691);
				match(CATALOG);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1692);
				match(FULLTEXT);
				setState(1693);
				match(STOPLIST);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1694);
				match(MESSAGE);
				setState(1695);
				match(TYPE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1696);
				match(REMOTE);
				setState(1697);
				match(SERVICE);
				setState(1698);
				match(BINDING);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1699);
				match(ROLE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1700);
				match(ROUTE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1701);
				match(SCHEMA);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1702);
				match(SEARCH);
				setState(1703);
				match(PROPERTY);
				setState(1704);
				match(LIST);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1705);
				match(SERVER);
				setState(1706);
				match(ROLE);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1707);
				match(SERVICE);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1708);
				match(SYMMETRIC);
				setState(1709);
				match(KEY);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1710);
				match(XML);
				setState(1711);
				match(SCHEMA);
				setState(1712);
				match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_sql_databaseContext extends ParserRuleContext {
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_sql_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_sql_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClass_type_for_sql_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClass_type_for_sql_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitClass_type_for_sql_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_type_for_sql_databaseContext class_type_for_sql_database() throws RecognitionException {
		Class_type_for_sql_databaseContext _localctx = new Class_type_for_sql_databaseContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_class_type_for_sql_database);
		try {
			setState(1736);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1715);
				match(OBJECT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1716);
				match(ASSEMBLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1717);
				match(ASYMMETRIC);
				setState(1718);
				match(KEY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1719);
				match(CERTIFICATE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1720);
				match(TYPE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1721);
				match(DATABASE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1722);
				match(FULLTEXT);
				setState(1723);
				match(CATALOG);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1724);
				match(FULLTEXT);
				setState(1725);
				match(STOPLIST);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1726);
				match(ROLE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1727);
				match(SCHEMA);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1728);
				match(SEARCH);
				setState(1729);
				match(PROPERTY);
				setState(1730);
				match(LIST);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1731);
				match(SYMMETRIC);
				setState(1732);
				match(KEY);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1733);
				match(XML);
				setState(1734);
				match(SCHEMA);
				setState(1735);
				match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_azure_dwContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_azure_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClass_type_for_azure_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClass_type_for_azure_dw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitClass_type_for_azure_dw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_type_for_azure_dwContext class_type_for_azure_dw() throws RecognitionException {
		Class_type_for_azure_dwContext _localctx = new Class_type_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_class_type_for_azure_dw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1738);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || _la==OBJECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_parallel_dwContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_parallel_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClass_type_for_parallel_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClass_type_for_parallel_dw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitClass_type_for_parallel_dw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_type_for_parallel_dwContext class_type_for_parallel_dw() throws RecognitionException {
		Class_type_for_parallel_dwContext _localctx = new Class_type_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_class_type_for_parallel_dw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1740);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==OBJECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_availability_groupContext extends ParserRuleContext {
		public IdContext group_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_availability_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_availability_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_availability_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_availability_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_availability_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_availability_groupContext drop_availability_group() throws RecognitionException {
		Drop_availability_groupContext _localctx = new Drop_availability_groupContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_drop_availability_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1742);
			match(DROP);
			setState(1743);
			match(AVAILABILITY);
			setState(1744);
			match(GROUP);
			setState(1745);
			((Drop_availability_groupContext)_localctx).group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_groupContext extends ParserRuleContext {
		public Alter_availability_group_startContext alter_availability_group_start() {
			return getRuleContext(Alter_availability_group_startContext.class,0);
		}
		public Alter_availability_group_optionsContext alter_availability_group_options() {
			return getRuleContext(Alter_availability_group_optionsContext.class,0);
		}
		public Alter_availability_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_availability_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_availability_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_availability_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_availability_groupContext alter_availability_group() throws RecognitionException {
		Alter_availability_groupContext _localctx = new Alter_availability_groupContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_alter_availability_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1747);
			alter_availability_group_start();
			setState(1748);
			alter_availability_group_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_group_startContext extends ParserRuleContext {
		public IdContext group_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_availability_group_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_availability_group_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_availability_group_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_availability_group_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_availability_group_startContext alter_availability_group_start() throws RecognitionException {
		Alter_availability_group_startContext _localctx = new Alter_availability_group_startContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_alter_availability_group_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1750);
			match(ALTER);
			setState(1751);
			match(AVAILABILITY);
			setState(1752);
			match(GROUP);
			setState(1753);
			((Alter_availability_group_startContext)_localctx).group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_group_optionsContext extends ParserRuleContext {
		public Token milliseconds;
		public IdContext database_name;
		public Token server_instance;
		public Token session_timeout;
		public Token ag_name;
		public Token ag_name_modified;
		public Token listener_name;
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode AUTOMATED_BACKUP_PREFERENCE() { return getToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode FAILURE_CONDITION_LEVEL() { return getToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode HEALTH_CHECK_TIMEOUT() { return getToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public TerminalNode DB_FAILOVER() { return getToken(TSqlParser.DB_FAILOVER, 0); }
		public TerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return getToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode SECONDARY_ONLY() { return getToken(TSqlParser.SECONDARY_ONLY, 0); }
		public TerminalNode SECONDARY() { return getToken(TSqlParser.SECONDARY, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode REPLICA() { return getToken(TSqlParser.REPLICA, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> WITH() { return getTokens(TSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(TSqlParser.WITH, i);
		}
		public TerminalNode ENDPOINT_URL() { return getToken(TSqlParser.ENDPOINT_URL, 0); }
		public List<TerminalNode> AVAILABILITY_MODE() { return getTokens(TSqlParser.AVAILABILITY_MODE); }
		public TerminalNode AVAILABILITY_MODE(int i) {
			return getToken(TSqlParser.AVAILABILITY_MODE, i);
		}
		public List<TerminalNode> FAILOVER_MODE() { return getTokens(TSqlParser.FAILOVER_MODE); }
		public TerminalNode FAILOVER_MODE(int i) {
			return getToken(TSqlParser.FAILOVER_MODE, i);
		}
		public List<TerminalNode> SEEDING_MODE() { return getTokens(TSqlParser.SEEDING_MODE); }
		public TerminalNode SEEDING_MODE(int i) {
			return getToken(TSqlParser.SEEDING_MODE, i);
		}
		public TerminalNode BACKUP_PRIORITY() { return getToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public TerminalNode PRIMARY_ROLE() { return getToken(TSqlParser.PRIMARY_ROLE, 0); }
		public List<TerminalNode> ALLOW_CONNECTIONS() { return getTokens(TSqlParser.ALLOW_CONNECTIONS); }
		public TerminalNode ALLOW_CONNECTIONS(int i) {
			return getToken(TSqlParser.ALLOW_CONNECTIONS, i);
		}
		public TerminalNode SECONDARY_ROLE() { return getToken(TSqlParser.SECONDARY_ROLE, 0); }
		public List<TerminalNode> SYNCHRONOUS_COMMIT() { return getTokens(TSqlParser.SYNCHRONOUS_COMMIT); }
		public TerminalNode SYNCHRONOUS_COMMIT(int i) {
			return getToken(TSqlParser.SYNCHRONOUS_COMMIT, i);
		}
		public List<TerminalNode> ASYNCHRONOUS_COMMIT() { return getTokens(TSqlParser.ASYNCHRONOUS_COMMIT); }
		public TerminalNode ASYNCHRONOUS_COMMIT(int i) {
			return getToken(TSqlParser.ASYNCHRONOUS_COMMIT, i);
		}
		public List<TerminalNode> AUTOMATIC() { return getTokens(TSqlParser.AUTOMATIC); }
		public TerminalNode AUTOMATIC(int i) {
			return getToken(TSqlParser.AUTOMATIC, i);
		}
		public List<TerminalNode> MANUAL() { return getTokens(TSqlParser.MANUAL); }
		public TerminalNode MANUAL(int i) {
			return getToken(TSqlParser.MANUAL, i);
		}
		public TerminalNode READ_WRITE() { return getToken(TSqlParser.READ_WRITE, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode READ_ONLY_ROUTING_LIST() { return getToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode SESSION_TIMEOUT() { return getToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode JOIN() { return getToken(TSqlParser.JOIN, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public List<TerminalNode> LISTENER_URL() { return getTokens(TSqlParser.LISTENER_URL); }
		public TerminalNode LISTENER_URL(int i) {
			return getToken(TSqlParser.LISTENER_URL, i);
		}
		public TerminalNode GRANT() { return getToken(TSqlParser.GRANT, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ANY() { return getToken(TSqlParser.ANY, 0); }
		public TerminalNode DENY() { return getToken(TSqlParser.DENY, 0); }
		public TerminalNode FAILOVER() { return getToken(TSqlParser.FAILOVER, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public TerminalNode LISTENER() { return getToken(TSqlParser.LISTENER, 0); }
		public TerminalNode DHCP() { return getToken(TSqlParser.DHCP, 0); }
		public TerminalNode IP() { return getToken(TSqlParser.IP, 0); }
		public List<TerminalNode> IPV4_ADDR() { return getTokens(TSqlParser.IPV4_ADDR); }
		public TerminalNode IPV4_ADDR(int i) {
			return getToken(TSqlParser.IPV4_ADDR, i);
		}
		public TerminalNode PORT() { return getToken(TSqlParser.PORT, 0); }
		public List<TerminalNode> IPV6_ADDR() { return getTokens(TSqlParser.IPV6_ADDR); }
		public TerminalNode IPV6_ADDR(int i) {
			return getToken(TSqlParser.IPV6_ADDR, i);
		}
		public TerminalNode RESTART() { return getToken(TSqlParser.RESTART, 0); }
		public TerminalNode OFFLINE() { return getToken(TSqlParser.OFFLINE, 0); }
		public TerminalNode DTC_SUPPORT() { return getToken(TSqlParser.DTC_SUPPORT, 0); }
		public TerminalNode PER_DB() { return getToken(TSqlParser.PER_DB, 0); }
		public Alter_availability_group_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_availability_group_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_availability_group_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_availability_group_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_availability_group_optionsContext alter_availability_group_options() throws RecognitionException {
		Alter_availability_group_optionsContext _localctx = new Alter_availability_group_optionsContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_alter_availability_group_options);
		int _la;
		try {
			setState(2105);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1755);
				match(SET);
				setState(1756);
				match(LR_BRACKET);
				{
				setState(1772);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTOMATED_BACKUP_PREFERENCE:
					{
					setState(1757);
					match(AUTOMATED_BACKUP_PREFERENCE);
					setState(1758);
					match(EQUAL);
					setState(1759);
					_la = _input.LA(1);
					if ( !(_la==NONE || _la==PRIMARY || _la==SECONDARY || _la==SECONDARY_ONLY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FAILURE_CONDITION_LEVEL:
					{
					setState(1760);
					match(FAILURE_CONDITION_LEVEL);
					setState(1761);
					match(EQUAL);
					setState(1762);
					match(DECIMAL);
					}
					break;
				case HEALTH_CHECK_TIMEOUT:
					{
					setState(1763);
					match(HEALTH_CHECK_TIMEOUT);
					setState(1764);
					match(EQUAL);
					setState(1765);
					((Alter_availability_group_optionsContext)_localctx).milliseconds = match(DECIMAL);
					}
					break;
				case DB_FAILOVER:
					{
					setState(1766);
					match(DB_FAILOVER);
					setState(1767);
					match(EQUAL);
					setState(1768);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					{
					setState(1769);
					match(REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
					setState(1770);
					match(EQUAL);
					setState(1771);
					match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1774);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1775);
				match(ADD);
				setState(1776);
				match(DATABASE);
				setState(1777);
				((Alter_availability_group_optionsContext)_localctx).database_name = id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1778);
				match(REMOVE);
				setState(1779);
				match(DATABASE);
				setState(1780);
				((Alter_availability_group_optionsContext)_localctx).database_name = id();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1781);
				match(ADD);
				setState(1782);
				match(REPLICA);
				setState(1783);
				match(ON);
				setState(1784);
				((Alter_availability_group_optionsContext)_localctx).server_instance = match(STRING);
				{
				setState(1785);
				match(WITH);
				setState(1786);
				match(LR_BRACKET);
				{
				setState(1790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDPOINT_URL) {
					{
					setState(1787);
					match(ENDPOINT_URL);
					setState(1788);
					match(EQUAL);
					setState(1789);
					match(STRING);
					}
				}

				setState(1798);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
				case 1:
					{
					setState(1793);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1792);
						match(COMMA);
						}
					}

					setState(1795);
					match(AVAILABILITY_MODE);
					setState(1796);
					match(EQUAL);
					setState(1797);
					_la = _input.LA(1);
					if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1806);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
				case 1:
					{
					setState(1801);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1800);
						match(COMMA);
						}
					}

					setState(1803);
					match(FAILOVER_MODE);
					setState(1804);
					match(EQUAL);
					setState(1805);
					_la = _input.LA(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1814);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
				case 1:
					{
					setState(1809);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1808);
						match(COMMA);
						}
					}

					setState(1811);
					match(SEEDING_MODE);
					setState(1812);
					match(EQUAL);
					setState(1813);
					_la = _input.LA(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1822);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					setState(1817);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1816);
						match(COMMA);
						}
					}

					setState(1819);
					match(BACKUP_PRIORITY);
					setState(1820);
					match(EQUAL);
					setState(1821);
					match(DECIMAL);
					}
					break;
				}
				setState(1833);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
				case 1:
					{
					setState(1825);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1824);
						match(COMMA);
						}
					}

					setState(1827);
					match(PRIMARY_ROLE);
					setState(1828);
					match(LR_BRACKET);
					setState(1829);
					match(ALLOW_CONNECTIONS);
					setState(1830);
					match(EQUAL);
					setState(1831);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==READ_WRITE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1832);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECONDARY_ROLE || _la==COMMA) {
					{
					setState(1836);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1835);
						match(COMMA);
						}
					}

					setState(1838);
					match(SECONDARY_ROLE);
					setState(1839);
					match(LR_BRACKET);
					setState(1840);
					match(ALLOW_CONNECTIONS);
					setState(1841);
					match(EQUAL);
					{
					setState(1842);
					match(READ_ONLY);
					}
					setState(1843);
					match(RR_BRACKET);
					}
				}

				}
				}
				setState(1846);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1847);
				match(SECONDARY_ROLE);
				setState(1848);
				match(LR_BRACKET);
				setState(1857);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					setState(1849);
					match(ALLOW_CONNECTIONS);
					setState(1850);
					match(EQUAL);
					setState(1851);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					setState(1852);
					match(READ_ONLY_ROUTING_LIST);
					setState(1853);
					match(EQUAL);
					{
					setState(1854);
					match(LR_BRACKET);
					{
					{
					setState(1855);
					match(STRING);
					}
					}
					setState(1856);
					match(RR_BRACKET);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1859);
				match(PRIMARY_ROLE);
				setState(1860);
				match(LR_BRACKET);
				setState(1883);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					setState(1861);
					match(ALLOW_CONNECTIONS);
					setState(1862);
					match(EQUAL);
					setState(1863);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					setState(1864);
					match(READ_ONLY_ROUTING_LIST);
					setState(1865);
					match(EQUAL);
					{
					setState(1866);
					match(LR_BRACKET);
					setState(1877);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
					case RR_BRACKET:
					case COMMA:
						{
						setState(1873);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==STRING || _la==COMMA) {
							{
							{
							setState(1868);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1867);
								match(COMMA);
								}
							}

							setState(1870);
							match(STRING);
							}
							}
							setState(1875);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					case NONE:
						{
						setState(1876);
						match(NONE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1879);
					match(RR_BRACKET);
					}
					}
					break;
				case SESSION_TIMEOUT:
					{
					setState(1880);
					match(SESSION_TIMEOUT);
					setState(1881);
					match(EQUAL);
					setState(1882);
					((Alter_availability_group_optionsContext)_localctx).session_timeout = match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1885);
				match(MODIFY);
				setState(1886);
				match(REPLICA);
				setState(1887);
				match(ON);
				setState(1888);
				((Alter_availability_group_optionsContext)_localctx).server_instance = match(STRING);
				setState(1946);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WITH:
					{
					setState(1889);
					match(WITH);
					setState(1890);
					match(LR_BRACKET);
					setState(1906);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ENDPOINT_URL:
						{
						setState(1891);
						match(ENDPOINT_URL);
						setState(1892);
						match(EQUAL);
						setState(1893);
						match(STRING);
						}
						break;
					case AVAILABILITY_MODE:
						{
						setState(1894);
						match(AVAILABILITY_MODE);
						setState(1895);
						match(EQUAL);
						setState(1896);
						_la = _input.LA(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case FAILOVER_MODE:
						{
						setState(1897);
						match(FAILOVER_MODE);
						setState(1898);
						match(EQUAL);
						setState(1899);
						_la = _input.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case SEEDING_MODE:
						{
						setState(1900);
						match(SEEDING_MODE);
						setState(1901);
						match(EQUAL);
						setState(1902);
						_la = _input.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case BACKUP_PRIORITY:
						{
						setState(1903);
						match(BACKUP_PRIORITY);
						setState(1904);
						match(EQUAL);
						setState(1905);
						match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case SECONDARY_ROLE:
					{
					setState(1908);
					match(SECONDARY_ROLE);
					setState(1909);
					match(LR_BRACKET);
					setState(1918);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						setState(1910);
						match(ALLOW_CONNECTIONS);
						setState(1911);
						match(EQUAL);
						setState(1912);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						setState(1913);
						match(READ_ONLY_ROUTING_LIST);
						setState(1914);
						match(EQUAL);
						{
						setState(1915);
						match(LR_BRACKET);
						{
						{
						setState(1916);
						match(STRING);
						}
						}
						setState(1917);
						match(RR_BRACKET);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case PRIMARY_ROLE:
					{
					setState(1920);
					match(PRIMARY_ROLE);
					setState(1921);
					match(LR_BRACKET);
					setState(1944);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						setState(1922);
						match(ALLOW_CONNECTIONS);
						setState(1923);
						match(EQUAL);
						setState(1924);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						setState(1925);
						match(READ_ONLY_ROUTING_LIST);
						setState(1926);
						match(EQUAL);
						{
						setState(1927);
						match(LR_BRACKET);
						setState(1938);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
						case RR_BRACKET:
						case COMMA:
							{
							setState(1934);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==STRING || _la==COMMA) {
								{
								{
								setState(1929);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(1928);
									match(COMMA);
									}
								}

								setState(1931);
								match(STRING);
								}
								}
								setState(1936);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							}
							break;
						case NONE:
							{
							setState(1937);
							match(NONE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1940);
						match(RR_BRACKET);
						}
						}
						break;
					case SESSION_TIMEOUT:
						{
						setState(1941);
						match(SESSION_TIMEOUT);
						setState(1942);
						match(EQUAL);
						setState(1943);
						((Alter_availability_group_optionsContext)_localctx).session_timeout = match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1948);
				match(RR_BRACKET);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1949);
				match(REMOVE);
				setState(1950);
				match(REPLICA);
				setState(1951);
				match(ON);
				setState(1952);
				match(STRING);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1953);
				match(JOIN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1954);
				match(JOIN);
				setState(1955);
				match(AVAILABILITY);
				setState(1956);
				match(GROUP);
				setState(1957);
				match(ON);
				setState(1980); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1959);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1958);
						match(COMMA);
						}
					}

					setState(1961);
					((Alter_availability_group_optionsContext)_localctx).ag_name = match(STRING);
					setState(1962);
					match(WITH);
					setState(1963);
					match(LR_BRACKET);
					{
					setState(1964);
					match(LISTENER_URL);
					setState(1965);
					match(EQUAL);
					setState(1966);
					match(STRING);
					setState(1967);
					match(COMMA);
					setState(1968);
					match(AVAILABILITY_MODE);
					setState(1969);
					match(EQUAL);
					setState(1970);
					_la = _input.LA(1);
					if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1971);
					match(COMMA);
					setState(1972);
					match(FAILOVER_MODE);
					setState(1973);
					match(EQUAL);
					setState(1974);
					match(MANUAL);
					setState(1975);
					match(COMMA);
					setState(1976);
					match(SEEDING_MODE);
					setState(1977);
					match(EQUAL);
					setState(1978);
					_la = _input.LA(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1979);
					match(RR_BRACKET);
					}
					}
					}
					setState(1982); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STRING || _la==COMMA );
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1984);
				match(MODIFY);
				setState(1985);
				match(AVAILABILITY);
				setState(1986);
				match(GROUP);
				setState(1987);
				match(ON);
				setState(2022); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1989);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1988);
						match(COMMA);
						}
					}

					setState(1991);
					((Alter_availability_group_optionsContext)_localctx).ag_name_modified = match(STRING);
					setState(1992);
					match(WITH);
					setState(1993);
					match(LR_BRACKET);
					{
					setState(1994);
					match(LISTENER_URL);
					setState(1995);
					match(EQUAL);
					setState(1996);
					match(STRING);
					setState(2003);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
					case 1:
						{
						setState(1998);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1997);
							match(COMMA);
							}
						}

						setState(2000);
						match(AVAILABILITY_MODE);
						setState(2001);
						match(EQUAL);
						setState(2002);
						_la = _input.LA(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(2011);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
					case 1:
						{
						setState(2006);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2005);
							match(COMMA);
							}
						}

						setState(2008);
						match(FAILOVER_MODE);
						setState(2009);
						match(EQUAL);
						setState(2010);
						match(MANUAL);
						}
						break;
					}
					setState(2019);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SEEDING_MODE || _la==COMMA) {
						{
						setState(2014);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2013);
							match(COMMA);
							}
						}

						setState(2016);
						match(SEEDING_MODE);
						setState(2017);
						match(EQUAL);
						setState(2018);
						_la = _input.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2021);
					match(RR_BRACKET);
					}
					}
					}
					setState(2024); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STRING || _la==COMMA );
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2026);
				match(GRANT);
				setState(2027);
				match(CREATE);
				setState(2028);
				match(ANY);
				setState(2029);
				match(DATABASE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2030);
				match(DENY);
				setState(2031);
				match(CREATE);
				setState(2032);
				match(ANY);
				setState(2033);
				match(DATABASE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2034);
				match(FAILOVER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2035);
				match(FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2036);
				match(ADD);
				setState(2037);
				match(LISTENER);
				setState(2038);
				((Alter_availability_group_optionsContext)_localctx).listener_name = match(STRING);
				setState(2039);
				match(LR_BRACKET);
				setState(2073);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
				case 1:
					{
					setState(2040);
					match(WITH);
					setState(2041);
					match(DHCP);
					{
					setState(2042);
					match(ON);
					setState(2043);
					match(LR_BRACKET);
					{
					setState(2044);
					match(IPV4_ADDR);
					setState(2045);
					match(IPV4_ADDR);
					}
					setState(2047);
					match(RR_BRACKET);
					}
					}
					break;
				case 2:
					{
					setState(2048);
					match(WITH);
					setState(2049);
					match(IP);
					setState(2050);
					match(LR_BRACKET);
					{
					setState(2062); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2052);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2051);
							match(COMMA);
							}
						}

						setState(2054);
						match(LR_BRACKET);
						setState(2059);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case IPV4_ADDR:
							{
							setState(2055);
							match(IPV4_ADDR);
							setState(2056);
							match(COMMA);
							setState(2057);
							match(IPV4_ADDR);
							}
							break;
						case IPV6_ADDR:
							{
							setState(2058);
							match(IPV6_ADDR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2061);
						match(RR_BRACKET);
						}
						}
						setState(2064); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==LR_BRACKET || _la==COMMA );
					setState(2066);
					match(RR_BRACKET);
					setState(2071);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2067);
						match(COMMA);
						setState(2068);
						match(PORT);
						setState(2069);
						match(EQUAL);
						setState(2070);
						match(DECIMAL);
						}
					}

					}
					}
					break;
				}
				setState(2075);
				match(RR_BRACKET);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2076);
				match(MODIFY);
				setState(2077);
				match(LISTENER);
				setState(2090);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
					{
					setState(2078);
					match(ADD);
					setState(2079);
					match(IP);
					setState(2080);
					match(LR_BRACKET);
					setState(2084);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case IPV4_ADDR:
						{
						setState(2081);
						match(IPV4_ADDR);
						setState(2082);
						match(IPV4_ADDR);
						}
						break;
					case IPV6_ADDR:
						{
						setState(2083);
						match(IPV6_ADDR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2086);
					match(RR_BRACKET);
					}
					break;
				case PORT:
					{
					setState(2087);
					match(PORT);
					setState(2088);
					match(EQUAL);
					setState(2089);
					match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2092);
				match(RESTART);
				setState(2093);
				match(LISTENER);
				setState(2094);
				match(STRING);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2095);
				match(REMOVE);
				setState(2096);
				match(LISTENER);
				setState(2097);
				match(STRING);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2098);
				match(OFFLINE);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2099);
				match(WITH);
				setState(2100);
				match(LR_BRACKET);
				setState(2101);
				match(DTC_SUPPORT);
				setState(2102);
				match(EQUAL);
				setState(2103);
				match(PER_DB);
				setState(2104);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_broker_priorityContext extends ParserRuleContext {
		public IdContext ConversationPriorityName;
		public Token RemoteServiceName;
		public Token PriorityValue;
		public TerminalNode BROKER() { return getToken(TSqlParser.BROKER, 0); }
		public TerminalNode PRIORITY() { return getToken(TSqlParser.PRIORITY, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode CONTRACT_NAME() { return getToken(TSqlParser.CONTRACT_NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode LOCAL_SERVICE_NAME() { return getToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public TerminalNode REMOTE_SERVICE_NAME() { return getToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public TerminalNode PRIORITY_LEVEL() { return getToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public List<TerminalNode> ANY() { return getTokens(TSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(TSqlParser.ANY, i);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE_FORWARD_SLASH() { return getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Create_or_alter_broker_priorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_broker_priority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_broker_priority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_broker_priority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_or_alter_broker_priority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_broker_priorityContext create_or_alter_broker_priority() throws RecognitionException {
		Create_or_alter_broker_priorityContext _localctx = new Create_or_alter_broker_priorityContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_create_or_alter_broker_priority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2107);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2108);
			match(BROKER);
			setState(2109);
			match(PRIORITY);
			setState(2110);
			((Create_or_alter_broker_priorityContext)_localctx).ConversationPriorityName = id();
			setState(2111);
			match(FOR);
			setState(2112);
			match(CONVERSATION);
			setState(2113);
			match(SET);
			setState(2114);
			match(LR_BRACKET);
			setState(2124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTRACT_NAME) {
				{
				setState(2115);
				match(CONTRACT_NAME);
				setState(2116);
				match(EQUAL);
				setState(2119);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					{
					setState(2117);
					id();
					}
					}
					break;
				case ANY:
					{
					setState(2118);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2121);
					match(COMMA);
					}
				}

				}
			}

			setState(2138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_SERVICE_NAME) {
				{
				setState(2126);
				match(LOCAL_SERVICE_NAME);
				setState(2127);
				match(EQUAL);
				setState(2133);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case DOUBLE_FORWARD_SLASH:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(2129);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOUBLE_FORWARD_SLASH) {
						{
						setState(2128);
						match(DOUBLE_FORWARD_SLASH);
						}
					}

					setState(2131);
					id();
					}
					break;
				case ANY:
					{
					setState(2132);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2135);
					match(COMMA);
					}
				}

				}
			}

			setState(2149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REMOTE_SERVICE_NAME) {
				{
				setState(2140);
				match(REMOTE_SERVICE_NAME);
				setState(2141);
				match(EQUAL);
				setState(2144);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(2142);
					((Create_or_alter_broker_priorityContext)_localctx).RemoteServiceName = match(STRING);
					}
					break;
				case ANY:
					{
					setState(2143);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2146);
					match(COMMA);
					}
				}

				}
			}

			setState(2157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIORITY_LEVEL) {
				{
				setState(2151);
				match(PRIORITY_LEVEL);
				setState(2152);
				match(EQUAL);
				setState(2155);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(2153);
					((Create_or_alter_broker_priorityContext)_localctx).PriorityValue = match(DECIMAL);
					}
					break;
				case DEFAULT:
					{
					setState(2154);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(2159);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_broker_priorityContext extends ParserRuleContext {
		public IdContext ConversationPriorityName;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode BROKER() { return getToken(TSqlParser.BROKER, 0); }
		public TerminalNode PRIORITY() { return getToken(TSqlParser.PRIORITY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_broker_priorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_broker_priority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_broker_priority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_broker_priority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_broker_priority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_broker_priorityContext drop_broker_priority() throws RecognitionException {
		Drop_broker_priorityContext _localctx = new Drop_broker_priorityContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_drop_broker_priority);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2161);
			match(DROP);
			setState(2162);
			match(BROKER);
			setState(2163);
			match(PRIORITY);
			setState(2164);
			((Drop_broker_priorityContext)_localctx).ConversationPriorityName = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PRIVATE_KEY() { return getToken(TSqlParser.PRIVATE_KEY, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode ACTIVE() { return getToken(TSqlParser.ACTIVE, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode BEGIN_DIALOG() { return getToken(TSqlParser.BEGIN_DIALOG, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public List<TerminalNode> FILE() { return getTokens(TSqlParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(TSqlParser.FILE, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> DECRYPTION() { return getTokens(TSqlParser.DECRYPTION); }
		public TerminalNode DECRYPTION(int i) {
			return getToken(TSqlParser.DECRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(TSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(TSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_certificate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_certificate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_certificateContext alter_certificate() throws RecognitionException {
		Alter_certificateContext _localctx = new Alter_certificateContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_alter_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2166);
			match(ALTER);
			setState(2167);
			match(CERTIFICATE);
			setState(2168);
			((Alter_certificateContext)_localctx).certificate_name = id();
			setState(2208);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				setState(2169);
				match(REMOVE);
				setState(2170);
				match(PRIVATE_KEY);
				}
				break;
			case 2:
				{
				setState(2171);
				match(WITH);
				setState(2172);
				match(PRIVATE);
				setState(2173);
				match(KEY);
				setState(2174);
				match(LR_BRACKET);
				setState(2197); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2197);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(2175);
						match(FILE);
						setState(2176);
						match(EQUAL);
						setState(2177);
						match(STRING);
						setState(2179);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2178);
							match(COMMA);
							}
						}

						}
						break;
					case DECRYPTION:
						{
						setState(2181);
						match(DECRYPTION);
						setState(2182);
						match(BY);
						setState(2183);
						match(PASSWORD);
						setState(2184);
						match(EQUAL);
						setState(2185);
						match(STRING);
						setState(2187);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2186);
							match(COMMA);
							}
						}

						}
						break;
					case ENCRYPTION:
						{
						setState(2189);
						match(ENCRYPTION);
						setState(2190);
						match(BY);
						setState(2191);
						match(PASSWORD);
						setState(2192);
						match(EQUAL);
						setState(2193);
						match(STRING);
						setState(2195);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2194);
							match(COMMA);
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(2199); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION );
				setState(2201);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(2202);
				match(WITH);
				setState(2203);
				match(ACTIVE);
				setState(2204);
				match(FOR);
				setState(2205);
				match(BEGIN_DIALOG);
				setState(2206);
				match(EQUAL);
				setState(2207);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_encryption_keyContext extends ParserRuleContext {
		public IdContext column_encryption_key;
		public IdContext column_master_key_name;
		public Token algorithm_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode VALUE() { return getToken(TSqlParser.VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode COLUMN_MASTER_KEY() { return getToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode ENCRYPTED_VALUE() { return getToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Alter_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_column_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_column_encryption_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_column_encryption_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_encryption_keyContext alter_column_encryption_key() throws RecognitionException {
		Alter_column_encryption_keyContext _localctx = new Alter_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_alter_column_encryption_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2210);
			match(ALTER);
			setState(2211);
			match(COLUMN);
			setState(2212);
			match(ENCRYPTION);
			setState(2213);
			match(KEY);
			setState(2214);
			((Alter_column_encryption_keyContext)_localctx).column_encryption_key = id();
			setState(2215);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2216);
			match(VALUE);
			setState(2217);
			match(LR_BRACKET);
			setState(2218);
			match(COLUMN_MASTER_KEY);
			setState(2219);
			match(EQUAL);
			setState(2220);
			((Alter_column_encryption_keyContext)_localctx).column_master_key_name = id();
			setState(2229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2221);
				match(COMMA);
				setState(2222);
				match(ALGORITHM);
				setState(2223);
				match(EQUAL);
				setState(2224);
				((Alter_column_encryption_keyContext)_localctx).algorithm_name = match(STRING);
				setState(2225);
				match(COMMA);
				setState(2226);
				match(ENCRYPTED_VALUE);
				setState(2227);
				match(EQUAL);
				setState(2228);
				match(BINARY);
				}
			}

			setState(2231);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_column_encryption_keyContext extends ParserRuleContext {
		public IdContext column_encryption_key;
		public IdContext column_master_key_name;
		public Token algorithm_name;
		public Token encrypted_value;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> COLUMN_MASTER_KEY() { return getTokens(TSqlParser.COLUMN_MASTER_KEY); }
		public TerminalNode COLUMN_MASTER_KEY(int i) {
			return getToken(TSqlParser.COLUMN_MASTER_KEY, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(TSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(TSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> ENCRYPTED_VALUE() { return getTokens(TSqlParser.ENCRYPTED_VALUE); }
		public TerminalNode ENCRYPTED_VALUE(int i) {
			return getToken(TSqlParser.ENCRYPTED_VALUE, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public Create_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_column_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_column_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_column_encryption_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_column_encryption_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_column_encryption_keyContext create_column_encryption_key() throws RecognitionException {
		Create_column_encryption_keyContext _localctx = new Create_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_create_column_encryption_key);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2233);
			match(CREATE);
			setState(2234);
			match(COLUMN);
			setState(2235);
			match(ENCRYPTION);
			setState(2236);
			match(KEY);
			setState(2237);
			((Create_column_encryption_keyContext)_localctx).column_encryption_key = id();
			setState(2238);
			match(WITH);
			setState(2239);
			match(VALUES);
			setState(2259); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2240);
					match(LR_BRACKET);
					setState(2242);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2241);
						match(COMMA);
						}
					}

					setState(2244);
					match(COLUMN_MASTER_KEY);
					setState(2245);
					match(EQUAL);
					setState(2246);
					((Create_column_encryption_keyContext)_localctx).column_master_key_name = id();
					setState(2247);
					match(COMMA);
					setState(2248);
					match(ALGORITHM);
					setState(2249);
					match(EQUAL);
					setState(2250);
					((Create_column_encryption_keyContext)_localctx).algorithm_name = match(STRING);
					setState(2251);
					match(COMMA);
					setState(2252);
					match(ENCRYPTED_VALUE);
					setState(2253);
					match(EQUAL);
					setState(2254);
					((Create_column_encryption_keyContext)_localctx).encrypted_value = match(BINARY);
					setState(2255);
					match(RR_BRACKET);
					setState(2257);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2256);
						match(COMMA);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2261); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,155,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_certificate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_certificate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_certificateContext drop_certificate() throws RecognitionException {
		Drop_certificateContext _localctx = new Drop_certificateContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_drop_certificate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2263);
			match(DROP);
			setState(2264);
			match(CERTIFICATE);
			setState(2265);
			((Drop_certificateContext)_localctx).certificate_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_encryption_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_column_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_column_encryption_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_column_encryption_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_column_encryption_keyContext drop_column_encryption_key() throws RecognitionException {
		Drop_column_encryption_keyContext _localctx = new Drop_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_drop_column_encryption_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2267);
			match(DROP);
			setState(2268);
			match(COLUMN);
			setState(2269);
			match(ENCRYPTION);
			setState(2270);
			match(KEY);
			setState(2271);
			((Drop_column_encryption_keyContext)_localctx).key_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_master_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_column_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_column_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_column_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_column_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_column_master_keyContext drop_column_master_key() throws RecognitionException {
		Drop_column_master_keyContext _localctx = new Drop_column_master_keyContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_drop_column_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2273);
			match(DROP);
			setState(2274);
			match(COLUMN);
			setState(2275);
			match(MASTER);
			setState(2276);
			match(KEY);
			setState(2277);
			((Drop_column_master_keyContext)_localctx).key_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_contractContext extends ParserRuleContext {
		public IdContext dropped_contract_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_contractContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_contract; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_contract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_contract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_contract(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_contractContext drop_contract() throws RecognitionException {
		Drop_contractContext _localctx = new Drop_contractContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_drop_contract);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2279);
			match(DROP);
			setState(2280);
			match(CONTRACT);
			setState(2281);
			((Drop_contractContext)_localctx).dropped_contract_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_credential(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_credential(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_credentialContext drop_credential() throws RecognitionException {
		Drop_credentialContext _localctx = new Drop_credentialContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_drop_credential);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2283);
			match(DROP);
			setState(2284);
			match(CREDENTIAL);
			setState(2285);
			((Drop_credentialContext)_localctx).credential_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_cryptograhic_providerContext extends ParserRuleContext {
		public IdContext provider_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_cryptograhic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_cryptograhic_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_cryptograhic_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_cryptograhic_provider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_cryptograhic_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_cryptograhic_providerContext drop_cryptograhic_provider() throws RecognitionException {
		Drop_cryptograhic_providerContext _localctx = new Drop_cryptograhic_providerContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_drop_cryptograhic_provider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2287);
			match(DROP);
			setState(2288);
			match(CRYPTOGRAPHIC);
			setState(2289);
			match(PROVIDER);
			setState(2290);
			((Drop_cryptograhic_providerContext)_localctx).provider_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_databaseContext extends ParserRuleContext {
		public IdContext database_name_or_database_snapshot_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_databaseContext drop_database() throws RecognitionException {
		Drop_databaseContext _localctx = new Drop_databaseContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_drop_database);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2292);
			match(DROP);
			setState(2293);
			match(DATABASE);
			setState(2296);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2294);
				match(IF);
				setState(2295);
				match(EXISTS);
				}
			}

			setState(2302); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2299);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2298);
						match(COMMA);
						}
					}

					setState(2301);
					((Drop_databaseContext)_localctx).database_name_or_database_snapshot_name = id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2304); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,158,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_database_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_database_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_database_audit_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_database_audit_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_database_audit_specificationContext drop_database_audit_specification() throws RecognitionException {
		Drop_database_audit_specificationContext _localctx = new Drop_database_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_drop_database_audit_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2306);
			match(DROP);
			setState(2307);
			match(DATABASE);
			setState(2308);
			match(AUDIT);
			setState(2309);
			match(SPECIFICATION);
			setState(2310);
			((Drop_database_audit_specificationContext)_localctx).audit_specification_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_scoped_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SCOPED() { return getToken(TSqlParser.SCOPED, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_database_scoped_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_scoped_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_database_scoped_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_database_scoped_credential(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_database_scoped_credential(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_database_scoped_credentialContext drop_database_scoped_credential() throws RecognitionException {
		Drop_database_scoped_credentialContext _localctx = new Drop_database_scoped_credentialContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_drop_database_scoped_credential);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2312);
			match(DROP);
			setState(2313);
			match(DATABASE);
			setState(2314);
			match(SCOPED);
			setState(2315);
			match(CREDENTIAL);
			setState(2316);
			((Drop_database_scoped_credentialContext)_localctx).credential_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_defaultContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext default_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_defaultContext drop_default() throws RecognitionException {
		Drop_defaultContext _localctx = new Drop_defaultContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_drop_default);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2318);
			match(DROP);
			setState(2319);
			match(DEFAULT);
			setState(2322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2320);
				match(IF);
				setState(2321);
				match(EXISTS);
				}
			}

			{
			setState(2325);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2324);
				match(COMMA);
				}
			}

			setState(2330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				setState(2327);
				((Drop_defaultContext)_localctx).schema_name = id();
				setState(2328);
				match(DOT);
				}
				break;
			}
			setState(2332);
			((Drop_defaultContext)_localctx).default_name = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_endpointContext extends ParserRuleContext {
		public IdContext endPointName;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSqlParser.ENDPOINT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_endpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_endpoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_endpoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_endpoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_endpoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_endpointContext drop_endpoint() throws RecognitionException {
		Drop_endpointContext _localctx = new Drop_endpointContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_drop_endpoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2334);
			match(DROP);
			setState(2335);
			match(ENDPOINT);
			setState(2336);
			((Drop_endpointContext)_localctx).endPointName = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_data_sourceContext extends ParserRuleContext {
		public IdContext external_data_source_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode DATA() { return getToken(TSqlParser.DATA, 0); }
		public TerminalNode SOURCE() { return getToken(TSqlParser.SOURCE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_external_data_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_data_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_data_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_data_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_external_data_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_external_data_sourceContext drop_external_data_source() throws RecognitionException {
		Drop_external_data_sourceContext _localctx = new Drop_external_data_sourceContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_drop_external_data_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2338);
			match(DROP);
			setState(2339);
			match(EXTERNAL);
			setState(2340);
			match(DATA);
			setState(2341);
			match(SOURCE);
			setState(2342);
			((Drop_external_data_sourceContext)_localctx).external_data_source_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_file_formatContext extends ParserRuleContext {
		public IdContext external_file_format_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(TSqlParser.FORMAT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_external_file_formatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_file_format; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_file_format(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_file_format(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_external_file_format(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_external_file_formatContext drop_external_file_format() throws RecognitionException {
		Drop_external_file_formatContext _localctx = new Drop_external_file_formatContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_drop_external_file_format);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2344);
			match(DROP);
			setState(2345);
			match(EXTERNAL);
			setState(2346);
			match(FILE);
			setState(2347);
			match(FORMAT);
			setState(2348);
			((Drop_external_file_formatContext)_localctx).external_file_format_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_libraryContext extends ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSqlParser.LIBRARY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Drop_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_library(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_external_library(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_external_libraryContext drop_external_library() throws RecognitionException {
		Drop_external_libraryContext _localctx = new Drop_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_drop_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2350);
			match(DROP);
			setState(2351);
			match(EXTERNAL);
			setState(2352);
			match(LIBRARY);
			setState(2353);
			((Drop_external_libraryContext)_localctx).library_name = id();
			setState(2356);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(2354);
				match(AUTHORIZATION);
				setState(2355);
				((Drop_external_libraryContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_resource_pool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_external_resource_pool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_external_resource_poolContext drop_external_resource_pool() throws RecognitionException {
		Drop_external_resource_poolContext _localctx = new Drop_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_drop_external_resource_pool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2358);
			match(DROP);
			setState(2359);
			match(EXTERNAL);
			setState(2360);
			match(RESOURCE);
			setState(2361);
			match(POOL);
			setState(2362);
			((Drop_external_resource_poolContext)_localctx).pool_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_tableContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext table;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_external_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_external_tableContext drop_external_table() throws RecognitionException {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_drop_external_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2364);
			match(DROP);
			setState(2365);
			match(EXTERNAL);
			setState(2366);
			match(TABLE);
			setState(2370);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(2367);
				((Drop_external_tableContext)_localctx).database_name = id();
				setState(2368);
				match(DOT);
				}
				break;
			}
			setState(2375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				setState(2372);
				((Drop_external_tableContext)_localctx).schema_name = id();
				setState(2373);
				match(DOT);
				}
				break;
			}
			setState(2377);
			((Drop_external_tableContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_event_notificationsContext extends ParserRuleContext {
		public IdContext notification_name;
		public IdContext queue_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(TSqlParser.EVENT, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSqlParser.NOTIFICATION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_event_notificationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event_notifications; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_event_notifications(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_event_notifications(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_event_notifications(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_event_notificationsContext drop_event_notifications() throws RecognitionException {
		Drop_event_notificationsContext _localctx = new Drop_event_notificationsContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_drop_event_notifications);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2379);
			match(DROP);
			setState(2380);
			match(EVENT);
			setState(2381);
			match(NOTIFICATION);
			setState(2386); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2382);
					match(COMMA);
					}
				}

				setState(2385);
				((Drop_event_notificationsContext)_localctx).notification_name = id();
				}
				}
				setState(2388); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CALLED || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (DATA_COMPRESSION - 80)) | (1L << (EVENTDATA - 80)) | (1L << (FILENAME - 80)) | (1L << (FILLFACTOR - 80)) | (1L << (FORCESEEK - 80)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KEY - 169)) | (1L << (MASTER - 169)) | (1L << (MAX_MEMORY - 169)) | (1L << (OFFSETS - 169)))) != 0) || ((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (PAGE - 238)) | (1L << (PUBLIC - 238)) | (1L << (RAW - 238)) | (1L << (RETURN - 238)) | (1L << (RETURNS - 238)) | (1L << (ROWCOUNT - 238)) | (1L << (SAFETY - 238)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (SERVER - 308)) | (1L << (SID - 308)) | (1L << (SOURCE - 308)) | (1L << (STATE - 308)) | (1L << (TARGET - 308)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (ABSOLUTE - 382)) | (1L << (ACTIVE - 382)) | (1L << (ADDRESS - 382)) | (1L << (APPLY - 382)) | (1L << (AUTO - 382)) | (1L << (AVAILABILITY - 382)) | (1L << (AVG - 382)) | (1L << (CALLER - 382)) | (1L << (CAST - 382)) | (1L << (CATCH - 382)) | (1L << (CHECKSUM_AGG - 382)) | (1L << (COMMITTED - 382)) | (1L << (CONCAT - 382)) | (1L << (CONCAT_NULL_YIELDS_NULL - 382)) | (1L << (CONTROL - 382)) | (1L << (COOKIE - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (COUNT - 446)) | (1L << (COUNTER - 446)) | (1L << (COUNT_BIG - 446)) | (1L << (DELAY - 446)) | (1L << (DELETED - 446)) | (1L << (DENSE_RANK - 446)) | (1L << (DISABLE - 446)) | (1L << (DYNAMIC - 446)) | (1L << (ENCRYPTION - 446)) | (1L << (EXPAND - 446)) | (1L << (FAST - 446)) | (1L << (FAST_FORWARD - 446)) | (1L << (FIRST - 446)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCED - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (GLOBAL - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HASH - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (ISOLATION - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEYSET - 511)) | (1L << (LAST - 511)) | (1L << (LEVEL - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (MARK - 511)) | (1L << (MAX - 511)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MIN - 579)) | (1L << (MODIFY - 579)) | (1L << (NAME - 579)) | (1L << (NEXT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NTILE - 579)) | (1L << (NUMBER - 579)) | (1L << (OFFSET - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)) | (1L << (OUTPUT - 579)) | (1L << (OWNER - 579)) | (1L << (PARAMETERIZATION - 579)) | (1L << (PARTITION - 579)) | (1L << (PATH - 579)) | (1L << (PRECEDING - 579)) | (1L << (PRIOR - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PRIVILEGES - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (READONLY - 643)) | (1L << (READ_ONLY - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROW - 643)) | (1L << (ROWGUID - 643)) | (1L << (ROWS - 643)) | (1L << (ROW_NUMBER - 643)) | (1L << (SAMPLE - 643)) | (1L << (SCHEMABINDING - 643)) | (1L << (SCROLL - 643)) | (1L << (SCROLL_LOCKS - 643)) | (1L << (SELF - 643)) | (1L << (SERIALIZABLE - 643)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (SIMPLE - 711)) | (1L << (SIZE - 711)) | (1L << (SNAPSHOT - 711)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 711)) | (1L << (STATIC - 711)) | (1L << (STATS_STREAM - 711)) | (1L << (STDEV - 711)) | (1L << (STDEVP - 711)) | (1L << (SUM - 711)) | (1L << (TEXTIMAGE_ON - 711)) | (1L << (THROW - 711)) | (1L << (TIES - 711)) | (1L << (TIME - 711)) | (1L << (TRY - 711)) | (1L << (TYPE - 711)) | (1L << (TYPE_WARNING - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNKNOWN - 711)) | (1L << (USING - 711)) | (1L << (VALUE - 711)) | (1L << (VAR - 711)) | (1L << (VARP - 711)) | (1L << (VIEWS - 711)) | (1L << (VIEW_METADATA - 711)) | (1L << (WORK - 711)) | (1L << (XML - 711)) | (1L << (XMLNAMESPACES - 711)) | (1L << (DOUBLE_QUOTE_ID - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (SQUARE_BRACKET_ID - 775)) | (1L << (ID - 775)) | (1L << (COMMA - 775)))) != 0) );
			setState(2390);
			match(ON);
			setState(2395);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERVER:
				{
				setState(2391);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(2392);
				match(DATABASE);
				}
				break;
			case QUEUE:
				{
				setState(2393);
				match(QUEUE);
				setState(2394);
				((Drop_event_notificationsContext)_localctx).queue_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_event_sessionContext extends ParserRuleContext {
		public IdContext event_session_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(TSqlParser.EVENT, 0); }
		public TerminalNode SESSION() { return getToken(TSqlParser.SESSION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_event_sessionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event_session; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_event_session(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_event_session(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_event_session(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_event_sessionContext drop_event_session() throws RecognitionException {
		Drop_event_sessionContext _localctx = new Drop_event_sessionContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_drop_event_session);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2397);
			match(DROP);
			setState(2398);
			match(EVENT);
			setState(2399);
			match(SESSION);
			setState(2400);
			((Drop_event_sessionContext)_localctx).event_session_name = id();
			setState(2401);
			match(ON);
			setState(2402);
			match(SERVER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_catalogContext extends ParserRuleContext {
		public IdContext catalog_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_catalog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_fulltext_catalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_fulltext_catalog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_fulltext_catalog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_fulltext_catalogContext drop_fulltext_catalog() throws RecognitionException {
		Drop_fulltext_catalogContext _localctx = new Drop_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_drop_fulltext_catalog);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2404);
			match(DROP);
			setState(2405);
			match(FULLTEXT);
			setState(2406);
			match(CATALOG);
			setState(2407);
			((Drop_fulltext_catalogContext)_localctx).catalog_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_indexContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext table;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_fulltext_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_fulltext_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_fulltext_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_fulltext_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_fulltext_indexContext drop_fulltext_index() throws RecognitionException {
		Drop_fulltext_indexContext _localctx = new Drop_fulltext_indexContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_drop_fulltext_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2409);
			match(DROP);
			setState(2410);
			match(FULLTEXT);
			setState(2411);
			match(INDEX);
			setState(2412);
			match(ON);
			setState(2416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				setState(2413);
				((Drop_fulltext_indexContext)_localctx).schema = id();
				setState(2414);
				match(DOT);
				}
				break;
			}
			setState(2418);
			((Drop_fulltext_indexContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_stoplistContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_stoplist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_fulltext_stoplist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_fulltext_stoplist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_fulltext_stoplist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_fulltext_stoplistContext drop_fulltext_stoplist() throws RecognitionException {
		Drop_fulltext_stoplistContext _localctx = new Drop_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_drop_fulltext_stoplist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2420);
			match(DROP);
			setState(2421);
			match(FULLTEXT);
			setState(2422);
			match(STOPLIST);
			setState(2423);
			((Drop_fulltext_stoplistContext)_localctx).stoplist_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_loginContext extends ParserRuleContext {
		public IdContext login_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_loginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_login; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_login(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_login(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_login(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_loginContext drop_login() throws RecognitionException {
		Drop_loginContext _localctx = new Drop_loginContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_drop_login);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2425);
			match(DROP);
			setState(2426);
			match(LOGIN);
			setState(2427);
			((Drop_loginContext)_localctx).login_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_master_keyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Drop_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_master_keyContext drop_master_key() throws RecognitionException {
		Drop_master_keyContext _localctx = new Drop_master_keyContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_drop_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2429);
			match(DROP);
			setState(2430);
			match(MASTER);
			setState(2431);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_message_typeContext extends ParserRuleContext {
		public IdContext message_type_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_message_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_message_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_message_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_message_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_message_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_message_typeContext drop_message_type() throws RecognitionException {
		Drop_message_typeContext _localctx = new Drop_message_typeContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_drop_message_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2433);
			match(DROP);
			setState(2434);
			match(MESSAGE);
			setState(2435);
			match(TYPE);
			setState(2436);
			((Drop_message_typeContext)_localctx).message_type_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_partition_functionContext extends ParserRuleContext {
		public IdContext partition_function_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_partition_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_partition_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_partition_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_partition_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_partition_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_partition_functionContext drop_partition_function() throws RecognitionException {
		Drop_partition_functionContext _localctx = new Drop_partition_functionContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_drop_partition_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2438);
			match(DROP);
			setState(2439);
			match(PARTITION);
			setState(2440);
			match(FUNCTION);
			setState(2441);
			((Drop_partition_functionContext)_localctx).partition_function_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_partition_schemeContext extends ParserRuleContext {
		public IdContext partition_scheme_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode SCHEME() { return getToken(TSqlParser.SCHEME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_partition_schemeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_partition_scheme; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_partition_scheme(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_partition_scheme(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_partition_scheme(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_partition_schemeContext drop_partition_scheme() throws RecognitionException {
		Drop_partition_schemeContext _localctx = new Drop_partition_schemeContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_drop_partition_scheme);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2443);
			match(DROP);
			setState(2444);
			match(PARTITION);
			setState(2445);
			match(SCHEME);
			setState(2446);
			((Drop_partition_schemeContext)_localctx).partition_scheme_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_queueContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Drop_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_queue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_queue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_queueContext drop_queue() throws RecognitionException {
		Drop_queueContext _localctx = new Drop_queueContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_drop_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2448);
			match(DROP);
			setState(2449);
			match(QUEUE);
			setState(2453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(2450);
				((Drop_queueContext)_localctx).database_name = id();
				setState(2451);
				match(DOT);
				}
				break;
			}
			setState(2458);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				setState(2455);
				((Drop_queueContext)_localctx).schema_name = id();
				setState(2456);
				match(DOT);
				}
				break;
			}
			setState(2460);
			((Drop_queueContext)_localctx).queue_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_remote_service_bindingContext extends ParserRuleContext {
		public IdContext binding_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_remote_service_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_remote_service_binding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_remote_service_binding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_remote_service_binding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_remote_service_bindingContext drop_remote_service_binding() throws RecognitionException {
		Drop_remote_service_bindingContext _localctx = new Drop_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_drop_remote_service_binding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2462);
			match(DROP);
			setState(2463);
			match(REMOTE);
			setState(2464);
			match(SERVICE);
			setState(2465);
			match(BINDING);
			setState(2466);
			((Drop_remote_service_bindingContext)_localctx).binding_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_resource_pool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_resource_pool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_resource_poolContext drop_resource_pool() throws RecognitionException {
		Drop_resource_poolContext _localctx = new Drop_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_drop_resource_pool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2468);
			match(DROP);
			setState(2469);
			match(RESOURCE);
			setState(2470);
			match(POOL);
			setState(2471);
			((Drop_resource_poolContext)_localctx).pool_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_db_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_db_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_db_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_db_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_db_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_db_roleContext drop_db_role() throws RecognitionException {
		Drop_db_roleContext _localctx = new Drop_db_roleContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_drop_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2473);
			match(DROP);
			setState(2474);
			match(ROLE);
			setState(2477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2475);
				match(IF);
				setState(2476);
				match(EXISTS);
				}
			}

			setState(2479);
			((Drop_db_roleContext)_localctx).role_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_routeContext extends ParserRuleContext {
		public IdContext route_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_routeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_route; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_route(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_route(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_route(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_routeContext drop_route() throws RecognitionException {
		Drop_routeContext _localctx = new Drop_routeContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_drop_route);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2481);
			match(DROP);
			setState(2482);
			match(ROUTE);
			setState(2483);
			((Drop_routeContext)_localctx).route_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ruleContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext rule_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode RULE() { return getToken(TSqlParser.RULE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_rule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_rule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_ruleContext drop_rule() throws RecognitionException {
		Drop_ruleContext _localctx = new Drop_ruleContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_drop_rule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2485);
			match(DROP);
			setState(2486);
			match(RULE);
			setState(2489);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(2487);
				match(IF);
				setState(2488);
				match(EXISTS);
				}
				break;
			}
			setState(2500);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				setState(2492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2491);
					match(COMMA);
					}
				}

				setState(2497);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
				case 1:
					{
					setState(2494);
					((Drop_ruleContext)_localctx).schema_name = id();
					setState(2495);
					match(DOT);
					}
					break;
				}
				setState(2499);
				((Drop_ruleContext)_localctx).rule_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_schemaContext extends ParserRuleContext {
		public IdContext schema_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_schemaContext drop_schema() throws RecognitionException {
		Drop_schemaContext _localctx = new Drop_schemaContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_drop_schema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2502);
			match(DROP);
			setState(2503);
			match(SCHEMA);
			setState(2506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2504);
				match(IF);
				setState(2505);
				match(EXISTS);
				}
			}

			setState(2508);
			((Drop_schemaContext)_localctx).schema_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_search_property_listContext extends ParserRuleContext {
		public IdContext property_list_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_search_property_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_search_property_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_search_property_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_search_property_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_search_property_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_search_property_listContext drop_search_property_list() throws RecognitionException {
		Drop_search_property_listContext _localctx = new Drop_search_property_listContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_drop_search_property_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2510);
			match(DROP);
			setState(2511);
			match(SEARCH);
			setState(2512);
			match(PROPERTY);
			setState(2513);
			match(LIST);
			setState(2514);
			((Drop_search_property_listContext)_localctx).property_list_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_security_policyContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext security_policy_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SECURITY() { return getToken(TSqlParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(TSqlParser.POLICY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_security_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_security_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_security_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_security_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_security_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_security_policyContext drop_security_policy() throws RecognitionException {
		Drop_security_policyContext _localctx = new Drop_security_policyContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_drop_security_policy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2516);
			match(DROP);
			setState(2517);
			match(SECURITY);
			setState(2518);
			match(POLICY);
			setState(2521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2519);
				match(IF);
				setState(2520);
				match(EXISTS);
				}
			}

			setState(2526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				setState(2523);
				((Drop_security_policyContext)_localctx).schema_name = id();
				setState(2524);
				match(DOT);
				}
				break;
			}
			setState(2528);
			((Drop_security_policyContext)_localctx).security_policy_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext sequence_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSqlParser.SEQUENCE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_drop_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2530);
			match(DROP);
			setState(2531);
			match(SEQUENCE);
			setState(2534);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(2532);
				match(IF);
				setState(2533);
				match(EXISTS);
				}
				break;
			}
			setState(2550);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				setState(2537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2536);
					match(COMMA);
					}
				}

				setState(2542);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
				case 1:
					{
					setState(2539);
					((Drop_sequenceContext)_localctx).database_name = id();
					setState(2540);
					match(DOT);
					}
					break;
				}
				setState(2547);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
				case 1:
					{
					setState(2544);
					((Drop_sequenceContext)_localctx).schema_name = id();
					setState(2545);
					match(DOT);
					}
					break;
				}
				setState(2549);
				((Drop_sequenceContext)_localctx).sequence_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_auditContext extends ParserRuleContext {
		public IdContext audit_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_server_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_server_audit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_server_audit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_server_auditContext drop_server_audit() throws RecognitionException {
		Drop_server_auditContext _localctx = new Drop_server_auditContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_drop_server_audit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2552);
			match(DROP);
			setState(2553);
			match(SERVER);
			setState(2554);
			match(AUDIT);
			setState(2555);
			((Drop_server_auditContext)_localctx).audit_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_server_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_server_audit_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_server_audit_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_server_audit_specificationContext drop_server_audit_specification() throws RecognitionException {
		Drop_server_audit_specificationContext _localctx = new Drop_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_drop_server_audit_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2557);
			match(DROP);
			setState(2558);
			match(SERVER);
			setState(2559);
			match(AUDIT);
			setState(2560);
			match(SPECIFICATION);
			setState(2561);
			((Drop_server_audit_specificationContext)_localctx).audit_specification_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_server_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_server_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_server_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_server_roleContext drop_server_role() throws RecognitionException {
		Drop_server_roleContext _localctx = new Drop_server_roleContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_drop_server_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2563);
			match(DROP);
			setState(2564);
			match(SERVER);
			setState(2565);
			match(ROLE);
			setState(2566);
			((Drop_server_roleContext)_localctx).role_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_serviceContext extends ParserRuleContext {
		public IdContext dropped_service_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_service(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_service(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_service(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_serviceContext drop_service() throws RecognitionException {
		Drop_serviceContext _localctx = new Drop_serviceContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_drop_service);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2568);
			match(DROP);
			setState(2569);
			match(SERVICE);
			setState(2570);
			((Drop_serviceContext)_localctx).dropped_service_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_signatureContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext module_name;
		public IdContext cert_name;
		public IdContext Asym_key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SIGNATURE() { return getToken(TSqlParser.SIGNATURE, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COUNTER() { return getToken(TSqlParser.COUNTER, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public List<TerminalNode> CERTIFICATE() { return getTokens(TSqlParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(TSqlParser.CERTIFICATE, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(TSqlParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(TSqlParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_signature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_signature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_signature(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_signature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_signatureContext drop_signature() throws RecognitionException {
		Drop_signatureContext _localctx = new Drop_signatureContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_drop_signature);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2572);
			match(DROP);
			setState(2574);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COUNTER) {
				{
				setState(2573);
				match(COUNTER);
				}
			}

			setState(2576);
			match(SIGNATURE);
			setState(2577);
			match(FROM);
			setState(2581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				setState(2578);
				((Drop_signatureContext)_localctx).schema_name = id();
				setState(2579);
				match(DOT);
				}
				break;
			}
			setState(2583);
			((Drop_signatureContext)_localctx).module_name = id();
			setState(2584);
			match(BY);
			setState(2596); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2596);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
				case 1:
					{
					setState(2586);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2585);
						match(COMMA);
						}
					}

					setState(2588);
					match(CERTIFICATE);
					setState(2589);
					((Drop_signatureContext)_localctx).cert_name = id();
					}
					break;
				case 2:
					{
					setState(2591);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2590);
						match(COMMA);
						}
					}

					setState(2593);
					match(ASYMMETRIC);
					setState(2594);
					match(KEY);
					setState(2595);
					((Drop_signatureContext)_localctx).Asym_key_name = id();
					}
					break;
				}
				}
				setState(2598); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ASYMMETRIC || _la==CERTIFICATE || _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statistics_name_azure_dw_and_pdwContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext object_name;
		public IdContext statistics_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics_name_azure_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_statistics_name_azure_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_statistics_name_azure_dw_and_pdw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_statistics_name_azure_dw_and_pdw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() throws RecognitionException {
		Drop_statistics_name_azure_dw_and_pdwContext _localctx = new Drop_statistics_name_azure_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_drop_statistics_name_azure_dw_and_pdw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2600);
			match(DROP);
			setState(2601);
			match(STATISTICS);
			setState(2605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				setState(2602);
				((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).schema_name = id();
				setState(2603);
				match(DOT);
				}
				break;
			}
			setState(2607);
			((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).object_name = id();
			setState(2608);
			match(DOT);
			setState(2609);
			((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).statistics_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_symmetric_keyContext extends ParserRuleContext {
		public IdContext symmetric_key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Drop_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_symmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_symmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_symmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_symmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_symmetric_keyContext drop_symmetric_key() throws RecognitionException {
		Drop_symmetric_keyContext _localctx = new Drop_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_drop_symmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2611);
			match(DROP);
			setState(2612);
			match(SYMMETRIC);
			setState(2613);
			match(KEY);
			setState(2614);
			((Drop_symmetric_keyContext)_localctx).symmetric_key_name = id();
			setState(2618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REMOVE) {
				{
				setState(2615);
				match(REMOVE);
				setState(2616);
				match(PROVIDER);
				setState(2617);
				match(KEY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_synonymContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext synonym_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SYNONYM() { return getToken(TSqlParser.SYNONYM, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_synonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_synonym(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_synonym(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_synonymContext drop_synonym() throws RecognitionException {
		Drop_synonymContext _localctx = new Drop_synonymContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_drop_synonym);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2620);
			match(DROP);
			setState(2621);
			match(SYNONYM);
			setState(2624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2622);
				match(IF);
				setState(2623);
				match(EXISTS);
				}
			}

			setState(2629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2626);
				((Drop_synonymContext)_localctx).schema = id();
				setState(2627);
				match(DOT);
				}
				break;
			}
			setState(2631);
			((Drop_synonymContext)_localctx).synonym_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_userContext extends ParserRuleContext {
		public IdContext user_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_user(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_user(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_userContext drop_user() throws RecognitionException {
		Drop_userContext _localctx = new Drop_userContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_drop_user);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2633);
			match(DROP);
			setState(2634);
			match(USER);
			setState(2637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2635);
				match(IF);
				setState(2636);
				match(EXISTS);
				}
			}

			setState(2639);
			((Drop_userContext)_localctx).user_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_workload_groupContext extends ParserRuleContext {
		public IdContext group_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_workload_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_workload_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_workload_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_workload_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_workload_groupContext drop_workload_group() throws RecognitionException {
		Drop_workload_groupContext _localctx = new Drop_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_drop_workload_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2641);
			match(DROP);
			setState(2642);
			match(WORKLOAD);
			setState(2643);
			match(GROUP);
			setState(2644);
			((Drop_workload_groupContext)_localctx).group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_xml_schema_collectionContext extends ParserRuleContext {
		public IdContext relational_schema;
		public IdContext sql_identifier;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_xml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_xml_schema_collection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_xml_schema_collection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_xml_schema_collectionContext drop_xml_schema_collection() throws RecognitionException {
		Drop_xml_schema_collectionContext _localctx = new Drop_xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_drop_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2646);
			match(DROP);
			setState(2647);
			match(XML);
			setState(2648);
			match(SCHEMA);
			setState(2649);
			match(COLLECTION);
			setState(2653);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(2650);
				((Drop_xml_schema_collectionContext)_localctx).relational_schema = id();
				setState(2651);
				match(DOT);
				}
				break;
			}
			setState(2655);
			((Drop_xml_schema_collectionContext)_localctx).sql_identifier = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disable_triggerContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext trigger_name;
		public IdContext schema_id;
		public IdContext object_name;
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Disable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disable_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDisable_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDisable_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDisable_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Disable_triggerContext disable_trigger() throws RecognitionException {
		Disable_triggerContext _localctx = new Disable_triggerContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_disable_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2657);
			match(DISABLE);
			setState(2658);
			match(TRIGGER);
			setState(2673);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case COMMA:
				{
				setState(2668); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2660);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2659);
						match(COMMA);
						}
					}

					setState(2665);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
					case 1:
						{
						setState(2662);
						((Disable_triggerContext)_localctx).schema_name = id();
						setState(2663);
						match(DOT);
						}
						break;
					}
					setState(2667);
					((Disable_triggerContext)_localctx).trigger_name = id();
					}
					}
					setState(2670); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (DATA_COMPRESSION - 80)) | (1L << (EVENTDATA - 80)) | (1L << (FILENAME - 80)) | (1L << (FILLFACTOR - 80)) | (1L << (FORCESEEK - 80)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KEY - 169)) | (1L << (MASTER - 169)) | (1L << (MAX_MEMORY - 169)) | (1L << (OFFSETS - 169)))) != 0) || ((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (PAGE - 238)) | (1L << (PUBLIC - 238)) | (1L << (RAW - 238)) | (1L << (RETURN - 238)) | (1L << (RETURNS - 238)) | (1L << (ROWCOUNT - 238)) | (1L << (SAFETY - 238)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (SERVER - 308)) | (1L << (SID - 308)) | (1L << (SOURCE - 308)) | (1L << (STATE - 308)) | (1L << (TARGET - 308)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (ABSOLUTE - 382)) | (1L << (ACTIVE - 382)) | (1L << (ADDRESS - 382)) | (1L << (APPLY - 382)) | (1L << (AUTO - 382)) | (1L << (AVAILABILITY - 382)) | (1L << (AVG - 382)) | (1L << (CALLER - 382)) | (1L << (CAST - 382)) | (1L << (CATCH - 382)) | (1L << (CHECKSUM_AGG - 382)) | (1L << (COMMITTED - 382)) | (1L << (CONCAT - 382)) | (1L << (CONCAT_NULL_YIELDS_NULL - 382)) | (1L << (CONTROL - 382)) | (1L << (COOKIE - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (COUNT - 446)) | (1L << (COUNTER - 446)) | (1L << (COUNT_BIG - 446)) | (1L << (DELAY - 446)) | (1L << (DELETED - 446)) | (1L << (DENSE_RANK - 446)) | (1L << (DISABLE - 446)) | (1L << (DYNAMIC - 446)) | (1L << (ENCRYPTION - 446)) | (1L << (EXPAND - 446)) | (1L << (FAST - 446)) | (1L << (FAST_FORWARD - 446)) | (1L << (FIRST - 446)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCED - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (GLOBAL - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HASH - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (ISOLATION - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEYSET - 511)) | (1L << (LAST - 511)) | (1L << (LEVEL - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (MARK - 511)) | (1L << (MAX - 511)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MIN - 579)) | (1L << (MODIFY - 579)) | (1L << (NAME - 579)) | (1L << (NEXT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NTILE - 579)) | (1L << (NUMBER - 579)) | (1L << (OFFSET - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)) | (1L << (OUTPUT - 579)) | (1L << (OWNER - 579)) | (1L << (PARAMETERIZATION - 579)) | (1L << (PARTITION - 579)) | (1L << (PATH - 579)) | (1L << (PRECEDING - 579)) | (1L << (PRIOR - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PRIVILEGES - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (READONLY - 643)) | (1L << (READ_ONLY - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROW - 643)) | (1L << (ROWGUID - 643)) | (1L << (ROWS - 643)) | (1L << (ROW_NUMBER - 643)) | (1L << (SAMPLE - 643)) | (1L << (SCHEMABINDING - 643)) | (1L << (SCROLL - 643)) | (1L << (SCROLL_LOCKS - 643)) | (1L << (SELF - 643)) | (1L << (SERIALIZABLE - 643)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (SIMPLE - 711)) | (1L << (SIZE - 711)) | (1L << (SNAPSHOT - 711)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 711)) | (1L << (STATIC - 711)) | (1L << (STATS_STREAM - 711)) | (1L << (STDEV - 711)) | (1L << (STDEVP - 711)) | (1L << (SUM - 711)) | (1L << (TEXTIMAGE_ON - 711)) | (1L << (THROW - 711)) | (1L << (TIES - 711)) | (1L << (TIME - 711)) | (1L << (TRY - 711)) | (1L << (TYPE - 711)) | (1L << (TYPE_WARNING - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNKNOWN - 711)) | (1L << (USING - 711)) | (1L << (VALUE - 711)) | (1L << (VAR - 711)) | (1L << (VARP - 711)) | (1L << (VIEWS - 711)) | (1L << (VIEW_METADATA - 711)) | (1L << (WORK - 711)) | (1L << (XML - 711)) | (1L << (XMLNAMESPACES - 711)) | (1L << (DOUBLE_QUOTE_ID - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (SQUARE_BRACKET_ID - 775)) | (1L << (ID - 775)) | (1L << (COMMA - 775)))) != 0) );
				}
				break;
			case ALL:
				{
				setState(2672);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2675);
			match(ON);
			setState(2685);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(2679);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
				case 1:
					{
					setState(2676);
					((Disable_triggerContext)_localctx).schema_id = id();
					setState(2677);
					match(DOT);
					}
					break;
				}
				setState(2681);
				((Disable_triggerContext)_localctx).object_name = id();
				}
				break;
			case DATABASE:
				{
				setState(2682);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(2683);
				match(ALL);
				setState(2684);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enable_triggerContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext trigger_name;
		public IdContext schema_id;
		public IdContext object_name;
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Enable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEnable_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEnable_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitEnable_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enable_triggerContext enable_trigger() throws RecognitionException {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_enable_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2687);
			match(ENABLE);
			setState(2688);
			match(TRIGGER);
			setState(2703);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case COMMA:
				{
				setState(2698); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2690);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2689);
						match(COMMA);
						}
					}

					setState(2695);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
					case 1:
						{
						setState(2692);
						((Enable_triggerContext)_localctx).schema_name = id();
						setState(2693);
						match(DOT);
						}
						break;
					}
					setState(2697);
					((Enable_triggerContext)_localctx).trigger_name = id();
					}
					}
					setState(2700); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (DATA_COMPRESSION - 80)) | (1L << (EVENTDATA - 80)) | (1L << (FILENAME - 80)) | (1L << (FILLFACTOR - 80)) | (1L << (FORCESEEK - 80)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KEY - 169)) | (1L << (MASTER - 169)) | (1L << (MAX_MEMORY - 169)) | (1L << (OFFSETS - 169)))) != 0) || ((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (PAGE - 238)) | (1L << (PUBLIC - 238)) | (1L << (RAW - 238)) | (1L << (RETURN - 238)) | (1L << (RETURNS - 238)) | (1L << (ROWCOUNT - 238)) | (1L << (SAFETY - 238)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (SERVER - 308)) | (1L << (SID - 308)) | (1L << (SOURCE - 308)) | (1L << (STATE - 308)) | (1L << (TARGET - 308)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (ABSOLUTE - 382)) | (1L << (ACTIVE - 382)) | (1L << (ADDRESS - 382)) | (1L << (APPLY - 382)) | (1L << (AUTO - 382)) | (1L << (AVAILABILITY - 382)) | (1L << (AVG - 382)) | (1L << (CALLER - 382)) | (1L << (CAST - 382)) | (1L << (CATCH - 382)) | (1L << (CHECKSUM_AGG - 382)) | (1L << (COMMITTED - 382)) | (1L << (CONCAT - 382)) | (1L << (CONCAT_NULL_YIELDS_NULL - 382)) | (1L << (CONTROL - 382)) | (1L << (COOKIE - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (COUNT - 446)) | (1L << (COUNTER - 446)) | (1L << (COUNT_BIG - 446)) | (1L << (DELAY - 446)) | (1L << (DELETED - 446)) | (1L << (DENSE_RANK - 446)) | (1L << (DISABLE - 446)) | (1L << (DYNAMIC - 446)) | (1L << (ENCRYPTION - 446)) | (1L << (EXPAND - 446)) | (1L << (FAST - 446)) | (1L << (FAST_FORWARD - 446)) | (1L << (FIRST - 446)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCED - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (GLOBAL - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HASH - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (ISOLATION - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEYSET - 511)) | (1L << (LAST - 511)) | (1L << (LEVEL - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (MARK - 511)) | (1L << (MAX - 511)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MIN - 579)) | (1L << (MODIFY - 579)) | (1L << (NAME - 579)) | (1L << (NEXT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NTILE - 579)) | (1L << (NUMBER - 579)) | (1L << (OFFSET - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)) | (1L << (OUTPUT - 579)) | (1L << (OWNER - 579)) | (1L << (PARAMETERIZATION - 579)) | (1L << (PARTITION - 579)) | (1L << (PATH - 579)) | (1L << (PRECEDING - 579)) | (1L << (PRIOR - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PRIVILEGES - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (READONLY - 643)) | (1L << (READ_ONLY - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROW - 643)) | (1L << (ROWGUID - 643)) | (1L << (ROWS - 643)) | (1L << (ROW_NUMBER - 643)) | (1L << (SAMPLE - 643)) | (1L << (SCHEMABINDING - 643)) | (1L << (SCROLL - 643)) | (1L << (SCROLL_LOCKS - 643)) | (1L << (SELF - 643)) | (1L << (SERIALIZABLE - 643)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (SIMPLE - 711)) | (1L << (SIZE - 711)) | (1L << (SNAPSHOT - 711)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 711)) | (1L << (STATIC - 711)) | (1L << (STATS_STREAM - 711)) | (1L << (STDEV - 711)) | (1L << (STDEVP - 711)) | (1L << (SUM - 711)) | (1L << (TEXTIMAGE_ON - 711)) | (1L << (THROW - 711)) | (1L << (TIES - 711)) | (1L << (TIME - 711)) | (1L << (TRY - 711)) | (1L << (TYPE - 711)) | (1L << (TYPE_WARNING - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNKNOWN - 711)) | (1L << (USING - 711)) | (1L << (VALUE - 711)) | (1L << (VAR - 711)) | (1L << (VARP - 711)) | (1L << (VIEWS - 711)) | (1L << (VIEW_METADATA - 711)) | (1L << (WORK - 711)) | (1L << (XML - 711)) | (1L << (XMLNAMESPACES - 711)) | (1L << (DOUBLE_QUOTE_ID - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (SQUARE_BRACKET_ID - 775)) | (1L << (ID - 775)) | (1L << (COMMA - 775)))) != 0) );
				}
				break;
			case ALL:
				{
				setState(2702);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2705);
			match(ON);
			setState(2715);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(2709);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					setState(2706);
					((Enable_triggerContext)_localctx).schema_id = id();
					setState(2707);
					match(DOT);
					}
					break;
				}
				setState(2711);
				((Enable_triggerContext)_localctx).object_name = id();
				}
				break;
			case DATABASE:
				{
				setState(2712);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(2713);
				match(ALL);
				setState(2714);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truncate_tableContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext table;
		public TerminalNode TRUNCATE() { return getToken(TSqlParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public TerminalNode PARTITIONS() { return getToken(TSqlParser.PARTITIONS, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Truncate_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTruncate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTruncate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTruncate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_tableContext truncate_table() throws RecognitionException {
		Truncate_tableContext _localctx = new Truncate_tableContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_truncate_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2717);
			match(TRUNCATE);
			setState(2718);
			match(TABLE);
			setState(2722);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				setState(2719);
				((Truncate_tableContext)_localctx).database_name = id();
				setState(2720);
				match(DOT);
				}
				break;
			}
			setState(2727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				setState(2724);
				((Truncate_tableContext)_localctx).schema_name = id();
				setState(2725);
				match(DOT);
				}
				break;
			}
			setState(2729);
			((Truncate_tableContext)_localctx).table = id();
			setState(2749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				setState(2730);
				match(WITH);
				setState(2731);
				match(LR_BRACKET);
				setState(2732);
				match(PARTITIONS);
				setState(2733);
				match(LR_BRACKET);
				setState(2743); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2735);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2734);
						match(COMMA);
						}
					}

					setState(2741);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
					case 1:
						{
						setState(2737);
						match(DECIMAL);
						}
						break;
					case 2:
						{
						setState(2738);
						match(DECIMAL);
						setState(2739);
						match(TO);
						setState(2740);
						match(DECIMAL);
						}
						break;
					}
					}
					}
					setState(2745); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DECIMAL || _la==COMMA );
				setState(2747);
				match(RR_BRACKET);
				setState(2748);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_column_master_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public Token key_store_provider_name;
		public Token key_path;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode KEY_STORE_PROVIDER_NAME() { return getToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode KEY_PATH() { return getToken(TSqlParser.KEY_PATH, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Create_column_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_column_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_column_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_column_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_column_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_column_master_keyContext create_column_master_key() throws RecognitionException {
		Create_column_master_keyContext _localctx = new Create_column_master_keyContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_create_column_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2751);
			match(CREATE);
			setState(2752);
			match(COLUMN);
			setState(2753);
			match(MASTER);
			setState(2754);
			match(KEY);
			setState(2755);
			((Create_column_master_keyContext)_localctx).key_name = id();
			setState(2756);
			match(WITH);
			setState(2757);
			match(LR_BRACKET);
			setState(2758);
			match(KEY_STORE_PROVIDER_NAME);
			setState(2759);
			match(EQUAL);
			setState(2760);
			((Create_column_master_keyContext)_localctx).key_store_provider_name = match(STRING);
			setState(2761);
			match(COMMA);
			setState(2762);
			match(KEY_PATH);
			setState(2763);
			match(EQUAL);
			setState(2764);
			((Create_column_master_keyContext)_localctx).key_path = match(STRING);
			setState(2765);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public Token identity_name;
		public Token secret;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode SECRET() { return getToken(TSqlParser.SECRET, 0); }
		public Alter_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_credential(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_credential(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_credentialContext alter_credential() throws RecognitionException {
		Alter_credentialContext _localctx = new Alter_credentialContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_alter_credential);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2767);
			match(ALTER);
			setState(2768);
			match(CREDENTIAL);
			setState(2769);
			((Alter_credentialContext)_localctx).credential_name = id();
			setState(2770);
			match(WITH);
			setState(2771);
			match(IDENTITY);
			setState(2772);
			match(EQUAL);
			setState(2773);
			((Alter_credentialContext)_localctx).identity_name = match(STRING);
			setState(2778);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2774);
				match(COMMA);
				setState(2775);
				match(SECRET);
				setState(2776);
				match(EQUAL);
				setState(2777);
				((Alter_credentialContext)_localctx).secret = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public Token identity_name;
		public Token secret;
		public IdContext cryptographic_provider_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode SECRET() { return getToken(TSqlParser.SECRET, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Create_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_credential(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_credential(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_credentialContext create_credential() throws RecognitionException {
		Create_credentialContext _localctx = new Create_credentialContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_create_credential);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2780);
			match(CREATE);
			setState(2781);
			match(CREDENTIAL);
			setState(2782);
			((Create_credentialContext)_localctx).credential_name = id();
			setState(2783);
			match(WITH);
			setState(2784);
			match(IDENTITY);
			setState(2785);
			match(EQUAL);
			setState(2786);
			((Create_credentialContext)_localctx).identity_name = match(STRING);
			setState(2791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2787);
				match(COMMA);
				setState(2788);
				match(SECRET);
				setState(2789);
				match(EQUAL);
				setState(2790);
				((Create_credentialContext)_localctx).secret = match(STRING);
				}
			}

			setState(2797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2793);
				match(FOR);
				setState(2794);
				match(CRYPTOGRAPHIC);
				setState(2795);
				match(PROVIDER);
				setState(2796);
				((Create_credentialContext)_localctx).cryptographic_provider_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_cryptographic_providerContext extends ParserRuleContext {
		public IdContext provider_name;
		public Token crypto_provider_ddl_file;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public Alter_cryptographic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_cryptographic_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_cryptographic_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_cryptographic_provider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_cryptographic_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_cryptographic_providerContext alter_cryptographic_provider() throws RecognitionException {
		Alter_cryptographic_providerContext _localctx = new Alter_cryptographic_providerContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_alter_cryptographic_provider);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2799);
			match(ALTER);
			setState(2800);
			match(CRYPTOGRAPHIC);
			setState(2801);
			match(PROVIDER);
			setState(2802);
			((Alter_cryptographic_providerContext)_localctx).provider_name = id();
			setState(2807);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(2803);
				match(FROM);
				setState(2804);
				match(FILE);
				setState(2805);
				match(EQUAL);
				setState(2806);
				((Alter_cryptographic_providerContext)_localctx).crypto_provider_ddl_file = match(STRING);
				}
			}

			setState(2810);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				setState(2809);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_cryptographic_providerContext extends ParserRuleContext {
		public IdContext provider_name;
		public Token path_of_DLL;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_cryptographic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_cryptographic_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_cryptographic_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_cryptographic_provider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_cryptographic_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_cryptographic_providerContext create_cryptographic_provider() throws RecognitionException {
		Create_cryptographic_providerContext _localctx = new Create_cryptographic_providerContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_create_cryptographic_provider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2812);
			match(CREATE);
			setState(2813);
			match(CRYPTOGRAPHIC);
			setState(2814);
			match(PROVIDER);
			setState(2815);
			((Create_cryptographic_providerContext)_localctx).provider_name = id();
			setState(2816);
			match(FROM);
			setState(2817);
			match(FILE);
			setState(2818);
			match(EQUAL);
			setState(2819);
			((Create_cryptographic_providerContext)_localctx).path_of_DLL = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_event_notificationContext extends ParserRuleContext {
		public IdContext event_notification_name;
		public IdContext queue_name;
		public IdContext event_type_or_group;
		public Token broker_service;
		public Token broker_service_specifier_or_current_database;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(TSqlParser.EVENT, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSqlParser.NOTIFICATION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FAN_IN() { return getToken(TSqlParser.FAN_IN, 0); }
		public Create_event_notificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_notification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_event_notification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_event_notification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_event_notification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_event_notificationContext create_event_notification() throws RecognitionException {
		Create_event_notificationContext _localctx = new Create_event_notificationContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_create_event_notification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2821);
			match(CREATE);
			setState(2822);
			match(EVENT);
			setState(2823);
			match(NOTIFICATION);
			setState(2824);
			((Create_event_notificationContext)_localctx).event_notification_name = id();
			setState(2825);
			match(ON);
			setState(2830);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERVER:
				{
				setState(2826);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(2827);
				match(DATABASE);
				}
				break;
			case QUEUE:
				{
				setState(2828);
				match(QUEUE);
				setState(2829);
				((Create_event_notificationContext)_localctx).queue_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2834);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2832);
				match(WITH);
				setState(2833);
				match(FAN_IN);
				}
			}

			setState(2836);
			match(FOR);
			setState(2841); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2837);
					match(COMMA);
					}
				}

				setState(2840);
				((Create_event_notificationContext)_localctx).event_type_or_group = id();
				}
				}
				setState(2843); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CALLED || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (DATA_COMPRESSION - 80)) | (1L << (EVENTDATA - 80)) | (1L << (FILENAME - 80)) | (1L << (FILLFACTOR - 80)) | (1L << (FORCESEEK - 80)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KEY - 169)) | (1L << (MASTER - 169)) | (1L << (MAX_MEMORY - 169)) | (1L << (OFFSETS - 169)))) != 0) || ((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (PAGE - 238)) | (1L << (PUBLIC - 238)) | (1L << (RAW - 238)) | (1L << (RETURN - 238)) | (1L << (RETURNS - 238)) | (1L << (ROWCOUNT - 238)) | (1L << (SAFETY - 238)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (SERVER - 308)) | (1L << (SID - 308)) | (1L << (SOURCE - 308)) | (1L << (STATE - 308)) | (1L << (TARGET - 308)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (ABSOLUTE - 382)) | (1L << (ACTIVE - 382)) | (1L << (ADDRESS - 382)) | (1L << (APPLY - 382)) | (1L << (AUTO - 382)) | (1L << (AVAILABILITY - 382)) | (1L << (AVG - 382)) | (1L << (CALLER - 382)) | (1L << (CAST - 382)) | (1L << (CATCH - 382)) | (1L << (CHECKSUM_AGG - 382)) | (1L << (COMMITTED - 382)) | (1L << (CONCAT - 382)) | (1L << (CONCAT_NULL_YIELDS_NULL - 382)) | (1L << (CONTROL - 382)) | (1L << (COOKIE - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (COUNT - 446)) | (1L << (COUNTER - 446)) | (1L << (COUNT_BIG - 446)) | (1L << (DELAY - 446)) | (1L << (DELETED - 446)) | (1L << (DENSE_RANK - 446)) | (1L << (DISABLE - 446)) | (1L << (DYNAMIC - 446)) | (1L << (ENCRYPTION - 446)) | (1L << (EXPAND - 446)) | (1L << (FAST - 446)) | (1L << (FAST_FORWARD - 446)) | (1L << (FIRST - 446)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCED - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (GLOBAL - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HASH - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (ISOLATION - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEYSET - 511)) | (1L << (LAST - 511)) | (1L << (LEVEL - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (MARK - 511)) | (1L << (MAX - 511)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MIN - 579)) | (1L << (MODIFY - 579)) | (1L << (NAME - 579)) | (1L << (NEXT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NTILE - 579)) | (1L << (NUMBER - 579)) | (1L << (OFFSET - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)) | (1L << (OUTPUT - 579)) | (1L << (OWNER - 579)) | (1L << (PARAMETERIZATION - 579)) | (1L << (PARTITION - 579)) | (1L << (PATH - 579)) | (1L << (PRECEDING - 579)) | (1L << (PRIOR - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PRIVILEGES - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (READONLY - 643)) | (1L << (READ_ONLY - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROW - 643)) | (1L << (ROWGUID - 643)) | (1L << (ROWS - 643)) | (1L << (ROW_NUMBER - 643)) | (1L << (SAMPLE - 643)) | (1L << (SCHEMABINDING - 643)) | (1L << (SCROLL - 643)) | (1L << (SCROLL_LOCKS - 643)) | (1L << (SELF - 643)) | (1L << (SERIALIZABLE - 643)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (SIMPLE - 711)) | (1L << (SIZE - 711)) | (1L << (SNAPSHOT - 711)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 711)) | (1L << (STATIC - 711)) | (1L << (STATS_STREAM - 711)) | (1L << (STDEV - 711)) | (1L << (STDEVP - 711)) | (1L << (SUM - 711)) | (1L << (TEXTIMAGE_ON - 711)) | (1L << (THROW - 711)) | (1L << (TIES - 711)) | (1L << (TIME - 711)) | (1L << (TRY - 711)) | (1L << (TYPE - 711)) | (1L << (TYPE_WARNING - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNKNOWN - 711)) | (1L << (USING - 711)) | (1L << (VALUE - 711)) | (1L << (VAR - 711)) | (1L << (VARP - 711)) | (1L << (VIEWS - 711)) | (1L << (VIEW_METADATA - 711)) | (1L << (WORK - 711)) | (1L << (XML - 711)) | (1L << (XMLNAMESPACES - 711)) | (1L << (DOUBLE_QUOTE_ID - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (SQUARE_BRACKET_ID - 775)) | (1L << (ID - 775)) | (1L << (COMMA - 775)))) != 0) );
			setState(2845);
			match(TO);
			setState(2846);
			match(SERVICE);
			setState(2847);
			((Create_event_notificationContext)_localctx).broker_service = match(STRING);
			setState(2848);
			match(COMMA);
			setState(2849);
			((Create_event_notificationContext)_localctx).broker_service_specifier_or_current_database = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_event_sessionContext extends ParserRuleContext {
		public IdContext event_session_name;
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext event_name;
		public IdContext event_customizable_attributue;
		public IdContext action_name;
		public IdContext target_name;
		public IdContext target_parameter_name;
		public Token max_memory;
		public Token max_dispatch_latency_seconds;
		public Token max_event_size;
		public List<TerminalNode> EVENT() { return getTokens(TSqlParser.EVENT); }
		public TerminalNode EVENT(int i) {
			return getToken(TSqlParser.EVENT, i);
		}
		public TerminalNode SESSION() { return getToken(TSqlParser.SESSION, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(TSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(TSqlParser.DROP, i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> TARGET() { return getTokens(TSqlParser.TARGET); }
		public TerminalNode TARGET(int i) {
			return getToken(TSqlParser.TARGET, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode START() { return getToken(TSqlParser.START, 0); }
		public TerminalNode STOP() { return getToken(TSqlParser.STOP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> SET() { return getTokens(TSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(TSqlParser.SET, i);
		}
		public TerminalNode MAX_MEMORY() { return getToken(TSqlParser.MAX_MEMORY, 0); }
		public TerminalNode EVENT_RETENTION_MODE() { return getToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public TerminalNode MAX_DISPATCH_LATENCY() { return getToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public TerminalNode MAX_EVENT_SIZE() { return getToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public TerminalNode MEMORY_PARTITION_MODE() { return getToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public TerminalNode TRACK_CAUSALITY() { return getToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public TerminalNode STARTUP_STATE() { return getToken(TSqlParser.STARTUP_STATE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> KB() { return getTokens(TSqlParser.KB); }
		public TerminalNode KB(int i) {
			return getToken(TSqlParser.KB, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSqlParser.MB, i);
		}
		public TerminalNode ALLOW_SINGLE_EVENT_LOSS() { return getToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public TerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return getToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public TerminalNode NO_EVENT_LOSS() { return getToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode PER_NODE() { return getToken(TSqlParser.PER_NODE, 0); }
		public TerminalNode PER_CPU() { return getToken(TSqlParser.PER_CPU, 0); }
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode SECONDS() { return getToken(TSqlParser.SECONDS, 0); }
		public TerminalNode INFINITE() { return getToken(TSqlParser.INFINITE, 0); }
		public List<TerminalNode> ACTION() { return getTokens(TSqlParser.ACTION); }
		public TerminalNode ACTION(int i) {
			return getToken(TSqlParser.ACTION, i);
		}
		public List<TerminalNode> WHERE() { return getTokens(TSqlParser.WHERE); }
		public TerminalNode WHERE(int i) {
			return getToken(TSqlParser.WHERE, i);
		}
		public List<Event_session_predicate_expressionContext> event_session_predicate_expression() {
			return getRuleContexts(Event_session_predicate_expressionContext.class);
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return getRuleContext(Event_session_predicate_expressionContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Create_or_alter_event_sessionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_event_session; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_event_session(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_event_session(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_or_alter_event_session(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_event_sessionContext create_or_alter_event_session() throws RecognitionException {
		Create_or_alter_event_sessionContext _localctx = new Create_or_alter_event_sessionContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_create_or_alter_event_session);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2851);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2852);
			match(EVENT);
			setState(2853);
			match(SESSION);
			setState(2854);
			((Create_or_alter_event_sessionContext)_localctx).event_session_name = id();
			setState(2855);
			match(ON);
			setState(2856);
			match(SERVER);
			setState(2924);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,234,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2858);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2857);
						match(COMMA);
						}
					}

					setState(2860);
					match(ADD);
					setState(2861);
					match(EVENT);
					{
					setState(2865);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
					case 1:
						{
						setState(2862);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
						setState(2863);
						match(DOT);
						}
						break;
					}
					setState(2867);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
					setState(2868);
					match(DOT);
					setState(2869);
					((Create_or_alter_event_sessionContext)_localctx).event_name = id();
					}
					setState(2919);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,233,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(2871);
							match(LR_BRACKET);
							setState(2885);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==SET) {
								{
								setState(2872);
								match(SET);
								setState(2882);
								_errHandler.sync(this);
								_la = _input.LA(1);
								while (_la==CALLED || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (DATA_COMPRESSION - 80)) | (1L << (EVENTDATA - 80)) | (1L << (FILENAME - 80)) | (1L << (FILLFACTOR - 80)) | (1L << (FORCESEEK - 80)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KEY - 169)) | (1L << (MASTER - 169)) | (1L << (MAX_MEMORY - 169)) | (1L << (OFFSETS - 169)))) != 0) || ((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (PAGE - 238)) | (1L << (PUBLIC - 238)) | (1L << (RAW - 238)) | (1L << (RETURN - 238)) | (1L << (RETURNS - 238)) | (1L << (ROWCOUNT - 238)) | (1L << (SAFETY - 238)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (SERVER - 308)) | (1L << (SID - 308)) | (1L << (SOURCE - 308)) | (1L << (STATE - 308)) | (1L << (TARGET - 308)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (ABSOLUTE - 382)) | (1L << (ACTIVE - 382)) | (1L << (ADDRESS - 382)) | (1L << (APPLY - 382)) | (1L << (AUTO - 382)) | (1L << (AVAILABILITY - 382)) | (1L << (AVG - 382)) | (1L << (CALLER - 382)) | (1L << (CAST - 382)) | (1L << (CATCH - 382)) | (1L << (CHECKSUM_AGG - 382)) | (1L << (COMMITTED - 382)) | (1L << (CONCAT - 382)) | (1L << (CONCAT_NULL_YIELDS_NULL - 382)) | (1L << (CONTROL - 382)) | (1L << (COOKIE - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (COUNT - 446)) | (1L << (COUNTER - 446)) | (1L << (COUNT_BIG - 446)) | (1L << (DELAY - 446)) | (1L << (DELETED - 446)) | (1L << (DENSE_RANK - 446)) | (1L << (DISABLE - 446)) | (1L << (DYNAMIC - 446)) | (1L << (ENCRYPTION - 446)) | (1L << (EXPAND - 446)) | (1L << (FAST - 446)) | (1L << (FAST_FORWARD - 446)) | (1L << (FIRST - 446)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCED - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (GLOBAL - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HASH - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (ISOLATION - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEYSET - 511)) | (1L << (LAST - 511)) | (1L << (LEVEL - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (MARK - 511)) | (1L << (MAX - 511)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MIN - 579)) | (1L << (MODIFY - 579)) | (1L << (NAME - 579)) | (1L << (NEXT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NTILE - 579)) | (1L << (NUMBER - 579)) | (1L << (OFFSET - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)) | (1L << (OUTPUT - 579)) | (1L << (OWNER - 579)) | (1L << (PARAMETERIZATION - 579)) | (1L << (PARTITION - 579)) | (1L << (PATH - 579)) | (1L << (PRECEDING - 579)) | (1L << (PRIOR - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PRIVILEGES - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (READONLY - 643)) | (1L << (READ_ONLY - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROW - 643)) | (1L << (ROWGUID - 643)) | (1L << (ROWS - 643)) | (1L << (ROW_NUMBER - 643)) | (1L << (SAMPLE - 643)) | (1L << (SCHEMABINDING - 643)) | (1L << (SCROLL - 643)) | (1L << (SCROLL_LOCKS - 643)) | (1L << (SELF - 643)) | (1L << (SERIALIZABLE - 643)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (SIMPLE - 711)) | (1L << (SIZE - 711)) | (1L << (SNAPSHOT - 711)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 711)) | (1L << (STATIC - 711)) | (1L << (STATS_STREAM - 711)) | (1L << (STDEV - 711)) | (1L << (STDEVP - 711)) | (1L << (SUM - 711)) | (1L << (TEXTIMAGE_ON - 711)) | (1L << (THROW - 711)) | (1L << (TIES - 711)) | (1L << (TIME - 711)) | (1L << (TRY - 711)) | (1L << (TYPE - 711)) | (1L << (TYPE_WARNING - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNKNOWN - 711)) | (1L << (USING - 711)) | (1L << (VALUE - 711)) | (1L << (VAR - 711)) | (1L << (VARP - 711)) | (1L << (VIEWS - 711)) | (1L << (VIEW_METADATA - 711)) | (1L << (WORK - 711)) | (1L << (XML - 711)) | (1L << (XMLNAMESPACES - 711)) | (1L << (DOUBLE_QUOTE_ID - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (SQUARE_BRACKET_ID - 775)) | (1L << (ID - 775)) | (1L << (COMMA - 775)))) != 0)) {
									{
									{
									setState(2874);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(2873);
										match(COMMA);
										}
									}

									setState(2876);
									((Create_or_alter_event_sessionContext)_localctx).event_customizable_attributue = id();
									setState(2877);
									match(EQUAL);
									setState(2878);
									_la = _input.LA(1);
									if ( !(_la==DECIMAL || _la==STRING) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									}
									setState(2884);
									_errHandler.sync(this);
									_la = _input.LA(1);
								}
								}
							}

							setState(2907); 
							_errHandler.sync(this);
							_la = _input.LA(1);
							do {
								{
								{
								setState(2887);
								match(ACTION);
								setState(2888);
								match(LR_BRACKET);
								setState(2901); 
								_errHandler.sync(this);
								_la = _input.LA(1);
								do {
									{
									{
									setState(2890);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(2889);
										match(COMMA);
										}
									}

									setState(2895);
									_errHandler.sync(this);
									switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
									case 1:
										{
										setState(2892);
										((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
										setState(2893);
										match(DOT);
										}
										break;
									}
									setState(2897);
									((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
									setState(2898);
									match(DOT);
									setState(2899);
									((Create_or_alter_event_sessionContext)_localctx).action_name = id();
									}
									}
									setState(2903); 
									_errHandler.sync(this);
									_la = _input.LA(1);
								} while ( _la==CALLED || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (DATA_COMPRESSION - 80)) | (1L << (EVENTDATA - 80)) | (1L << (FILENAME - 80)) | (1L << (FILLFACTOR - 80)) | (1L << (FORCESEEK - 80)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KEY - 169)) | (1L << (MASTER - 169)) | (1L << (MAX_MEMORY - 169)) | (1L << (OFFSETS - 169)))) != 0) || ((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (PAGE - 238)) | (1L << (PUBLIC - 238)) | (1L << (RAW - 238)) | (1L << (RETURN - 238)) | (1L << (RETURNS - 238)) | (1L << (ROWCOUNT - 238)) | (1L << (SAFETY - 238)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (SERVER - 308)) | (1L << (SID - 308)) | (1L << (SOURCE - 308)) | (1L << (STATE - 308)) | (1L << (TARGET - 308)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (ABSOLUTE - 382)) | (1L << (ACTIVE - 382)) | (1L << (ADDRESS - 382)) | (1L << (APPLY - 382)) | (1L << (AUTO - 382)) | (1L << (AVAILABILITY - 382)) | (1L << (AVG - 382)) | (1L << (CALLER - 382)) | (1L << (CAST - 382)) | (1L << (CATCH - 382)) | (1L << (CHECKSUM_AGG - 382)) | (1L << (COMMITTED - 382)) | (1L << (CONCAT - 382)) | (1L << (CONCAT_NULL_YIELDS_NULL - 382)) | (1L << (CONTROL - 382)) | (1L << (COOKIE - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (COUNT - 446)) | (1L << (COUNTER - 446)) | (1L << (COUNT_BIG - 446)) | (1L << (DELAY - 446)) | (1L << (DELETED - 446)) | (1L << (DENSE_RANK - 446)) | (1L << (DISABLE - 446)) | (1L << (DYNAMIC - 446)) | (1L << (ENCRYPTION - 446)) | (1L << (EXPAND - 446)) | (1L << (FAST - 446)) | (1L << (FAST_FORWARD - 446)) | (1L << (FIRST - 446)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCED - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (GLOBAL - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HASH - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (ISOLATION - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEYSET - 511)) | (1L << (LAST - 511)) | (1L << (LEVEL - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (MARK - 511)) | (1L << (MAX - 511)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MIN - 579)) | (1L << (MODIFY - 579)) | (1L << (NAME - 579)) | (1L << (NEXT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NTILE - 579)) | (1L << (NUMBER - 579)) | (1L << (OFFSET - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)) | (1L << (OUTPUT - 579)) | (1L << (OWNER - 579)) | (1L << (PARAMETERIZATION - 579)) | (1L << (PARTITION - 579)) | (1L << (PATH - 579)) | (1L << (PRECEDING - 579)) | (1L << (PRIOR - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PRIVILEGES - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (READONLY - 643)) | (1L << (READ_ONLY - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROW - 643)) | (1L << (ROWGUID - 643)) | (1L << (ROWS - 643)) | (1L << (ROW_NUMBER - 643)) | (1L << (SAMPLE - 643)) | (1L << (SCHEMABINDING - 643)) | (1L << (SCROLL - 643)) | (1L << (SCROLL_LOCKS - 643)) | (1L << (SELF - 643)) | (1L << (SERIALIZABLE - 643)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (SIMPLE - 711)) | (1L << (SIZE - 711)) | (1L << (SNAPSHOT - 711)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 711)) | (1L << (STATIC - 711)) | (1L << (STATS_STREAM - 711)) | (1L << (STDEV - 711)) | (1L << (STDEVP - 711)) | (1L << (SUM - 711)) | (1L << (TEXTIMAGE_ON - 711)) | (1L << (THROW - 711)) | (1L << (TIES - 711)) | (1L << (TIME - 711)) | (1L << (TRY - 711)) | (1L << (TYPE - 711)) | (1L << (TYPE_WARNING - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNKNOWN - 711)) | (1L << (USING - 711)) | (1L << (VALUE - 711)) | (1L << (VAR - 711)) | (1L << (VARP - 711)) | (1L << (VIEWS - 711)) | (1L << (VIEW_METADATA - 711)) | (1L << (WORK - 711)) | (1L << (XML - 711)) | (1L << (XMLNAMESPACES - 711)) | (1L << (DOUBLE_QUOTE_ID - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (SQUARE_BRACKET_ID - 775)) | (1L << (ID - 775)) | (1L << (COMMA - 775)))) != 0) );
								setState(2905);
								match(RR_BRACKET);
								}
								}
								setState(2909); 
								_errHandler.sync(this);
								_la = _input.LA(1);
							} while ( _la==ACTION );
							setState(2913);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==WHERE) {
								{
								setState(2911);
								match(WHERE);
								setState(2912);
								event_session_predicate_expression();
								}
							}

							setState(2915);
							match(RR_BRACKET);
							}
							} 
						}
						setState(2921);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,233,_ctx);
					}
					}
					} 
				}
				setState(2926);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,234,_ctx);
			}
			setState(2943);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,237,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2928);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2927);
						match(COMMA);
						}
					}

					setState(2930);
					match(DROP);
					setState(2931);
					match(EVENT);
					setState(2935);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
					case 1:
						{
						setState(2932);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
						setState(2933);
						match(DOT);
						}
						break;
					}
					setState(2937);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
					setState(2938);
					match(DOT);
					setState(2939);
					((Create_or_alter_event_sessionContext)_localctx).event_name = id();
					}
					} 
				}
				setState(2945);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,237,_ctx);
			}
			setState(2987);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ADD) {
				{
				{
				{
				setState(2946);
				match(ADD);
				setState(2947);
				match(TARGET);
				setState(2951);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
				case 1:
					{
					setState(2948);
					((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
					setState(2949);
					match(DOT);
					}
					break;
				}
				setState(2953);
				((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
				setState(2954);
				match(DOT);
				setState(2955);
				((Create_or_alter_event_sessionContext)_localctx).target_name = id();
				}
				setState(2982);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,244,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2957);
						match(LR_BRACKET);
						setState(2958);
						match(SET);
						setState(2974); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(2960);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2959);
								match(COMMA);
								}
							}

							setState(2962);
							((Create_or_alter_event_sessionContext)_localctx).target_parameter_name = id();
							setState(2963);
							match(EQUAL);
							setState(2972);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
							case LR_BRACKET:
								{
								setState(2965);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==LR_BRACKET) {
									{
									setState(2964);
									match(LR_BRACKET);
									}
								}

								setState(2967);
								match(DECIMAL);
								setState(2969);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
								case 1:
									{
									setState(2968);
									match(RR_BRACKET);
									}
									break;
								}
								}
								break;
							case STRING:
								{
								setState(2971);
								match(STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							}
							setState(2976); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==CALLED || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (DATA_COMPRESSION - 80)) | (1L << (EVENTDATA - 80)) | (1L << (FILENAME - 80)) | (1L << (FILLFACTOR - 80)) | (1L << (FORCESEEK - 80)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KEY - 169)) | (1L << (MASTER - 169)) | (1L << (MAX_MEMORY - 169)) | (1L << (OFFSETS - 169)))) != 0) || ((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (PAGE - 238)) | (1L << (PUBLIC - 238)) | (1L << (RAW - 238)) | (1L << (RETURN - 238)) | (1L << (RETURNS - 238)) | (1L << (ROWCOUNT - 238)) | (1L << (SAFETY - 238)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (SERVER - 308)) | (1L << (SID - 308)) | (1L << (SOURCE - 308)) | (1L << (STATE - 308)) | (1L << (TARGET - 308)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (ABSOLUTE - 382)) | (1L << (ACTIVE - 382)) | (1L << (ADDRESS - 382)) | (1L << (APPLY - 382)) | (1L << (AUTO - 382)) | (1L << (AVAILABILITY - 382)) | (1L << (AVG - 382)) | (1L << (CALLER - 382)) | (1L << (CAST - 382)) | (1L << (CATCH - 382)) | (1L << (CHECKSUM_AGG - 382)) | (1L << (COMMITTED - 382)) | (1L << (CONCAT - 382)) | (1L << (CONCAT_NULL_YIELDS_NULL - 382)) | (1L << (CONTROL - 382)) | (1L << (COOKIE - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (COUNT - 446)) | (1L << (COUNTER - 446)) | (1L << (COUNT_BIG - 446)) | (1L << (DELAY - 446)) | (1L << (DELETED - 446)) | (1L << (DENSE_RANK - 446)) | (1L << (DISABLE - 446)) | (1L << (DYNAMIC - 446)) | (1L << (ENCRYPTION - 446)) | (1L << (EXPAND - 446)) | (1L << (FAST - 446)) | (1L << (FAST_FORWARD - 446)) | (1L << (FIRST - 446)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCED - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (GLOBAL - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HASH - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (ISOLATION - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEYSET - 511)) | (1L << (LAST - 511)) | (1L << (LEVEL - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (MARK - 511)) | (1L << (MAX - 511)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MIN - 579)) | (1L << (MODIFY - 579)) | (1L << (NAME - 579)) | (1L << (NEXT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NTILE - 579)) | (1L << (NUMBER - 579)) | (1L << (OFFSET - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)) | (1L << (OUTPUT - 579)) | (1L << (OWNER - 579)) | (1L << (PARAMETERIZATION - 579)) | (1L << (PARTITION - 579)) | (1L << (PATH - 579)) | (1L << (PRECEDING - 579)) | (1L << (PRIOR - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PRIVILEGES - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (READONLY - 643)) | (1L << (READ_ONLY - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROW - 643)) | (1L << (ROWGUID - 643)) | (1L << (ROWS - 643)) | (1L << (ROW_NUMBER - 643)) | (1L << (SAMPLE - 643)) | (1L << (SCHEMABINDING - 643)) | (1L << (SCROLL - 643)) | (1L << (SCROLL_LOCKS - 643)) | (1L << (SELF - 643)) | (1L << (SERIALIZABLE - 643)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (SIMPLE - 711)) | (1L << (SIZE - 711)) | (1L << (SNAPSHOT - 711)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 711)) | (1L << (STATIC - 711)) | (1L << (STATS_STREAM - 711)) | (1L << (STDEV - 711)) | (1L << (STDEVP - 711)) | (1L << (SUM - 711)) | (1L << (TEXTIMAGE_ON - 711)) | (1L << (THROW - 711)) | (1L << (TIES - 711)) | (1L << (TIME - 711)) | (1L << (TRY - 711)) | (1L << (TYPE - 711)) | (1L << (TYPE_WARNING - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNKNOWN - 711)) | (1L << (USING - 711)) | (1L << (VALUE - 711)) | (1L << (VAR - 711)) | (1L << (VARP - 711)) | (1L << (VIEWS - 711)) | (1L << (VIEW_METADATA - 711)) | (1L << (WORK - 711)) | (1L << (XML - 711)) | (1L << (XMLNAMESPACES - 711)) | (1L << (DOUBLE_QUOTE_ID - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (SQUARE_BRACKET_ID - 775)) | (1L << (ID - 775)) | (1L << (COMMA - 775)))) != 0) );
						setState(2978);
						match(RR_BRACKET);
						}
						} 
					}
					setState(2984);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,244,_ctx);
				}
				}
				}
				setState(2989);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3003);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,247,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2990);
					match(DROP);
					setState(2991);
					match(TARGET);
					setState(2995);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
					case 1:
						{
						setState(2992);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
						setState(2993);
						match(DOT);
						}
						break;
					}
					setState(2997);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
					setState(2998);
					match(DOT);
					setState(2999);
					((Create_or_alter_event_sessionContext)_localctx).target_name = id();
					}
					} 
				}
				setState(3005);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,247,_ctx);
			}
			setState(3071);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				{
				setState(3006);
				match(WITH);
				setState(3007);
				match(LR_BRACKET);
				setState(3015);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(3009);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3008);
						match(COMMA);
						}
					}

					setState(3011);
					match(MAX_MEMORY);
					setState(3012);
					match(EQUAL);
					setState(3013);
					((Create_or_alter_event_sessionContext)_localctx).max_memory = match(DECIMAL);
					setState(3014);
					_la = _input.LA(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3023);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					setState(3018);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3017);
						match(COMMA);
						}
					}

					setState(3020);
					match(EVENT_RETENTION_MODE);
					setState(3021);
					match(EQUAL);
					setState(3022);
					_la = _input.LA(1);
					if ( !(_la==ALLOW_MULTIPLE_EVENT_LOSS || _la==ALLOW_SINGLE_EVENT_LOSS || _la==NO_EVENT_LOSS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3035);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					setState(3026);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3025);
						match(COMMA);
						}
					}

					setState(3028);
					match(MAX_DISPATCH_LATENCY);
					setState(3029);
					match(EQUAL);
					setState(3033);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DECIMAL:
						{
						setState(3030);
						((Create_or_alter_event_sessionContext)_localctx).max_dispatch_latency_seconds = match(DECIMAL);
						setState(3031);
						match(SECONDS);
						}
						break;
					case INFINITE:
						{
						setState(3032);
						match(INFINITE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(3044);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
				case 1:
					{
					setState(3038);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3037);
						match(COMMA);
						}
					}

					setState(3040);
					match(MAX_EVENT_SIZE);
					setState(3041);
					match(EQUAL);
					setState(3042);
					((Create_or_alter_event_sessionContext)_localctx).max_event_size = match(DECIMAL);
					setState(3043);
					_la = _input.LA(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3052);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					setState(3047);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3046);
						match(COMMA);
						}
					}

					setState(3049);
					match(MEMORY_PARTITION_MODE);
					setState(3050);
					match(EQUAL);
					setState(3051);
					_la = _input.LA(1);
					if ( !(((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (NONE - 210)) | (1L << (PER_CPU - 210)) | (1L << (PER_NODE - 210)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3060);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
				case 1:
					{
					setState(3055);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3054);
						match(COMMA);
						}
					}

					setState(3057);
					match(TRACK_CAUSALITY);
					setState(3058);
					match(EQUAL);
					setState(3059);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTUP_STATE || _la==COMMA) {
					{
					setState(3063);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3062);
						match(COMMA);
						}
					}

					setState(3065);
					match(STARTUP_STATE);
					setState(3066);
					match(EQUAL);
					setState(3067);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3070);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				{
				setState(3073);
				match(STATE);
				setState(3074);
				match(EQUAL);
				setState(3075);
				_la = _input.LA(1);
				if ( !(_la==START || _la==STOP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_expressionContext extends ParserRuleContext {
		public List<Event_session_predicate_factorContext> event_session_predicate_factor() {
			return getRuleContexts(Event_session_predicate_factorContext.class);
		}
		public Event_session_predicate_factorContext event_session_predicate_factor(int i) {
			return getRuleContext(Event_session_predicate_factorContext.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<Event_session_predicate_expressionContext> event_session_predicate_expression() {
			return getRuleContexts(Event_session_predicate_expressionContext.class);
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return getRuleContext(Event_session_predicate_expressionContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> NOT() { return getTokens(TSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(TSqlParser.NOT, i);
		}
		public List<TerminalNode> AND() { return getTokens(TSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(TSqlParser.AND, i);
		}
		public List<TerminalNode> OR() { return getTokens(TSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(TSqlParser.OR, i);
		}
		public Event_session_predicate_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEvent_session_predicate_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEvent_session_predicate_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitEvent_session_predicate_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_session_predicate_expressionContext event_session_predicate_expression() throws RecognitionException {
		Event_session_predicate_expressionContext _localctx = new Event_session_predicate_expressionContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_event_session_predicate_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3094); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3078);
					match(COMMA);
					}
				}

				setState(3082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND || _la==OR) {
					{
					setState(3081);
					_la = _input.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3085);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3084);
					match(NOT);
					}
				}

				setState(3092);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					setState(3087);
					event_session_predicate_factor();
					}
					break;
				case 2:
					{
					setState(3088);
					match(LR_BRACKET);
					setState(3089);
					event_session_predicate_expression();
					setState(3090);
					match(RR_BRACKET);
					}
					break;
				}
				}
				}
				setState(3096); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AND || _la==CALLED || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (DATA_COMPRESSION - 80)) | (1L << (EVENTDATA - 80)) | (1L << (FILENAME - 80)) | (1L << (FILLFACTOR - 80)) | (1L << (FORCESEEK - 80)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KEY - 169)) | (1L << (MASTER - 169)) | (1L << (MAX_MEMORY - 169)) | (1L << (NOT - 169)) | (1L << (OFFSETS - 169)))) != 0) || ((((_la - 234)) & ~0x3f) == 0 && ((1L << (_la - 234)) & ((1L << (OR - 234)) | (1L << (PAGE - 234)) | (1L << (PUBLIC - 234)) | (1L << (RAW - 234)) | (1L << (RETURN - 234)) | (1L << (RETURNS - 234)) | (1L << (ROWCOUNT - 234)) | (1L << (SAFETY - 234)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (SERVER - 308)) | (1L << (SID - 308)) | (1L << (SOURCE - 308)) | (1L << (STATE - 308)) | (1L << (TARGET - 308)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (ABSOLUTE - 382)) | (1L << (ACTIVE - 382)) | (1L << (ADDRESS - 382)) | (1L << (APPLY - 382)) | (1L << (AUTO - 382)) | (1L << (AVAILABILITY - 382)) | (1L << (AVG - 382)) | (1L << (CALLER - 382)) | (1L << (CAST - 382)) | (1L << (CATCH - 382)) | (1L << (CHECKSUM_AGG - 382)) | (1L << (COMMITTED - 382)) | (1L << (CONCAT - 382)) | (1L << (CONCAT_NULL_YIELDS_NULL - 382)) | (1L << (CONTROL - 382)) | (1L << (COOKIE - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (COUNT - 446)) | (1L << (COUNTER - 446)) | (1L << (COUNT_BIG - 446)) | (1L << (DELAY - 446)) | (1L << (DELETED - 446)) | (1L << (DENSE_RANK - 446)) | (1L << (DISABLE - 446)) | (1L << (DYNAMIC - 446)) | (1L << (ENCRYPTION - 446)) | (1L << (EXPAND - 446)) | (1L << (FAST - 446)) | (1L << (FAST_FORWARD - 446)) | (1L << (FIRST - 446)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCED - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (GLOBAL - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HASH - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (ISOLATION - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEYSET - 511)) | (1L << (LAST - 511)) | (1L << (LEVEL - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (MARK - 511)) | (1L << (MAX - 511)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MIN - 579)) | (1L << (MODIFY - 579)) | (1L << (NAME - 579)) | (1L << (NEXT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NTILE - 579)) | (1L << (NUMBER - 579)) | (1L << (OFFSET - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)) | (1L << (OUTPUT - 579)) | (1L << (OWNER - 579)) | (1L << (PARAMETERIZATION - 579)) | (1L << (PARTITION - 579)) | (1L << (PATH - 579)) | (1L << (PRECEDING - 579)) | (1L << (PRIOR - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PRIVILEGES - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (READONLY - 643)) | (1L << (READ_ONLY - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROW - 643)) | (1L << (ROWGUID - 643)) | (1L << (ROWS - 643)) | (1L << (ROW_NUMBER - 643)) | (1L << (SAMPLE - 643)) | (1L << (SCHEMABINDING - 643)) | (1L << (SCROLL - 643)) | (1L << (SCROLL_LOCKS - 643)) | (1L << (SELF - 643)) | (1L << (SERIALIZABLE - 643)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (SIMPLE - 711)) | (1L << (SIZE - 711)) | (1L << (SNAPSHOT - 711)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 711)) | (1L << (STATIC - 711)) | (1L << (STATS_STREAM - 711)) | (1L << (STDEV - 711)) | (1L << (STDEVP - 711)) | (1L << (SUM - 711)) | (1L << (TEXTIMAGE_ON - 711)) | (1L << (THROW - 711)) | (1L << (TIES - 711)) | (1L << (TIME - 711)) | (1L << (TRY - 711)) | (1L << (TYPE - 711)) | (1L << (TYPE_WARNING - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNKNOWN - 711)) | (1L << (USING - 711)) | (1L << (VALUE - 711)) | (1L << (VAR - 711)) | (1L << (VARP - 711)) | (1L << (VIEWS - 711)) | (1L << (VIEW_METADATA - 711)) | (1L << (WORK - 711)) | (1L << (XML - 711)) | (1L << (XMLNAMESPACES - 711)) | (1L << (DOUBLE_QUOTE_ID - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (SQUARE_BRACKET_ID - 775)) | (1L << (ID - 775)) | (1L << (LR_BRACKET - 775)) | (1L << (COMMA - 775)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_factorContext extends ParserRuleContext {
		public Event_session_predicate_leafContext event_session_predicate_leaf() {
			return getRuleContext(Event_session_predicate_leafContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Event_session_predicate_expressionContext event_session_predicate_expression() {
			return getRuleContext(Event_session_predicate_expressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Event_session_predicate_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEvent_session_predicate_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEvent_session_predicate_factor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitEvent_session_predicate_factor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_session_predicate_factorContext event_session_predicate_factor() throws RecognitionException {
		Event_session_predicate_factorContext _localctx = new Event_session_predicate_factorContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_event_session_predicate_factor);
		try {
			setState(3103);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3098);
				event_session_predicate_leaf();
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3099);
				match(LR_BRACKET);
				setState(3100);
				event_session_predicate_expression();
				setState(3101);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_leafContext extends ParserRuleContext {
		public IdContext event_field_name;
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext predicate_source_name;
		public IdContext predicate_compare_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode GREATER() { return getToken(TSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSqlParser.LESS, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public TerminalNode EXCLAMATION() { return getToken(TSqlParser.EXCLAMATION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Event_session_predicate_leafContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_leaf; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEvent_session_predicate_leaf(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEvent_session_predicate_leaf(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitEvent_session_predicate_leaf(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_session_predicate_leafContext event_session_predicate_leaf() throws RecognitionException {
		Event_session_predicate_leafContext _localctx = new Event_session_predicate_leafContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_event_session_predicate_leaf);
		int _la;
		try {
			setState(3161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3133);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					setState(3105);
					((Event_session_predicate_leafContext)_localctx).event_field_name = id();
					}
					break;
				case 2:
					{
					setState(3116);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
					case 1:
						{
						setState(3106);
						((Event_session_predicate_leafContext)_localctx).event_field_name = id();
						}
						break;
					case 2:
						{
						{
						setState(3110);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
						case 1:
							{
							setState(3107);
							((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
							setState(3108);
							match(DOT);
							}
							break;
						}
						setState(3112);
						((Event_session_predicate_leafContext)_localctx).event_package_name = id();
						setState(3113);
						match(DOT);
						setState(3114);
						((Event_session_predicate_leafContext)_localctx).predicate_source_name = id();
						}
						}
						break;
					}
					setState(3129);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
					case 1:
						{
						setState(3118);
						match(EQUAL);
						}
						break;
					case 2:
						{
						{
						setState(3119);
						match(LESS);
						setState(3120);
						match(GREATER);
						}
						}
						break;
					case 3:
						{
						{
						setState(3121);
						match(EXCLAMATION);
						setState(3122);
						match(EQUAL);
						}
						}
						break;
					case 4:
						{
						setState(3123);
						match(GREATER);
						}
						break;
					case 5:
						{
						{
						setState(3124);
						match(GREATER);
						setState(3125);
						match(EQUAL);
						}
						}
						break;
					case 6:
						{
						setState(3126);
						match(LESS);
						}
						break;
					case 7:
						{
						setState(3127);
						match(LESS);
						setState(3128);
						match(EQUAL);
						}
						break;
					}
					setState(3131);
					_la = _input.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3138);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
				case 1:
					{
					setState(3135);
					((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
					setState(3136);
					match(DOT);
					}
					break;
				}
				setState(3140);
				((Event_session_predicate_leafContext)_localctx).event_package_name = id();
				setState(3141);
				match(DOT);
				setState(3142);
				((Event_session_predicate_leafContext)_localctx).predicate_compare_name = id();
				setState(3143);
				match(LR_BRACKET);
				setState(3157);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
				case 1:
					{
					setState(3144);
					((Event_session_predicate_leafContext)_localctx).event_field_name = id();
					}
					break;
				case 2:
					{
					{
					setState(3148);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
					case 1:
						{
						setState(3145);
						((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
						setState(3146);
						match(DOT);
						}
						break;
					}
					setState(3150);
					((Event_session_predicate_leafContext)_localctx).event_package_name = id();
					setState(3151);
					match(DOT);
					setState(3152);
					((Event_session_predicate_leafContext)_localctx).predicate_source_name = id();
					}
					setState(3154);
					match(COMMA);
					setState(3155);
					_la = _input.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3159);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_data_sourceContext extends ParserRuleContext {
		public IdContext data_source_name;
		public Token location;
		public Token resource_manager_location;
		public IdContext credential_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode DATA() { return getToken(TSqlParser.DATA, 0); }
		public TerminalNode SOURCE() { return getToken(TSqlParser.SOURCE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> LOCATION() { return getTokens(TSqlParser.LOCATION); }
		public TerminalNode LOCATION(int i) {
			return getToken(TSqlParser.LOCATION, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> RESOURCE_MANAGER_LOCATION() { return getTokens(TSqlParser.RESOURCE_MANAGER_LOCATION); }
		public TerminalNode RESOURCE_MANAGER_LOCATION(int i) {
			return getToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSqlParser.CREDENTIAL, i);
		}
		public List<TerminalNode> QUOTED_URL() { return getTokens(TSqlParser.QUOTED_URL); }
		public TerminalNode QUOTED_URL(int i) {
			return getToken(TSqlParser.QUOTED_URL, i);
		}
		public List<TerminalNode> QUOTED_HOST_AND_PORT() { return getTokens(TSqlParser.QUOTED_HOST_AND_PORT); }
		public TerminalNode QUOTED_HOST_AND_PORT(int i) {
			return getToken(TSqlParser.QUOTED_HOST_AND_PORT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode BLOB_STORAGE() { return getToken(TSqlParser.BLOB_STORAGE, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Alter_external_data_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_data_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_external_data_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_external_data_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_external_data_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_external_data_sourceContext alter_external_data_source() throws RecognitionException {
		Alter_external_data_sourceContext _localctx = new Alter_external_data_sourceContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_alter_external_data_source);
		int _la;
		try {
			int _alt;
			setState(3210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3163);
				match(ALTER);
				setState(3164);
				match(EXTERNAL);
				setState(3165);
				match(DATA);
				setState(3166);
				match(SOURCE);
				setState(3167);
				((Alter_external_data_sourceContext)_localctx).data_source_name = id();
				setState(3168);
				match(SET);
				setState(3184); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3184);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case LOCATION:
							{
							setState(3169);
							match(LOCATION);
							setState(3170);
							match(EQUAL);
							setState(3171);
							((Alter_external_data_sourceContext)_localctx).location = _input.LT(1);
							_la = _input.LA(1);
							if ( !(_la==QUOTED_URL || _la==QUOTED_HOST_AND_PORT) ) {
								((Alter_external_data_sourceContext)_localctx).location = (Token)_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(3173);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3172);
								match(COMMA);
								}
							}

							}
							break;
						case RESOURCE_MANAGER_LOCATION:
							{
							setState(3175);
							match(RESOURCE_MANAGER_LOCATION);
							setState(3176);
							match(EQUAL);
							setState(3177);
							((Alter_external_data_sourceContext)_localctx).resource_manager_location = _input.LT(1);
							_la = _input.LA(1);
							if ( !(_la==QUOTED_URL || _la==QUOTED_HOST_AND_PORT) ) {
								((Alter_external_data_sourceContext)_localctx).resource_manager_location = (Token)_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(3179);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3178);
								match(COMMA);
								}
							}

							}
							break;
						case CREDENTIAL:
							{
							setState(3181);
							match(CREDENTIAL);
							setState(3182);
							match(EQUAL);
							setState(3183);
							((Alter_external_data_sourceContext)_localctx).credential_name = id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3186); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,282,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3188);
				match(ALTER);
				setState(3189);
				match(EXTERNAL);
				setState(3190);
				match(DATA);
				setState(3191);
				match(SOURCE);
				setState(3192);
				((Alter_external_data_sourceContext)_localctx).data_source_name = id();
				setState(3193);
				match(WITH);
				setState(3194);
				match(LR_BRACKET);
				setState(3195);
				match(TYPE);
				setState(3196);
				match(EQUAL);
				setState(3197);
				match(BLOB_STORAGE);
				setState(3198);
				match(COMMA);
				setState(3199);
				match(LOCATION);
				setState(3200);
				match(EQUAL);
				setState(3201);
				((Alter_external_data_sourceContext)_localctx).location = match(STRING);
				setState(3206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3202);
					match(COMMA);
					setState(3203);
					match(CREDENTIAL);
					setState(3204);
					match(EQUAL);
					setState(3205);
					((Alter_external_data_sourceContext)_localctx).credential_name = id();
					}
				}

				setState(3208);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_libraryContext extends ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public Token client_library;
		public IdContext external_data_source_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSqlParser.LIBRARY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode PLATFORM() { return getToken(TSqlParser.PLATFORM, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> LANGUAGE() { return getTokens(TSqlParser.LANGUAGE); }
		public TerminalNode LANGUAGE(int i) {
			return getToken(TSqlParser.LANGUAGE, i);
		}
		public List<TerminalNode> DATA_SOURCE() { return getTokens(TSqlParser.DATA_SOURCE); }
		public TerminalNode DATA_SOURCE(int i) {
			return getToken(TSqlParser.DATA_SOURCE, i);
		}
		public List<TerminalNode> R() { return getTokens(TSqlParser.R); }
		public TerminalNode R(int i) {
			return getToken(TSqlParser.R, i);
		}
		public List<TerminalNode> PYTHON() { return getTokens(TSqlParser.PYTHON); }
		public TerminalNode PYTHON(int i) {
			return getToken(TSqlParser.PYTHON, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode LINUX() { return getToken(TSqlParser.LINUX, 0); }
		public Alter_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_external_library(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_external_library(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_external_libraryContext alter_external_library() throws RecognitionException {
		Alter_external_libraryContext _localctx = new Alter_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_alter_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3212);
			match(ALTER);
			setState(3213);
			match(EXTERNAL);
			setState(3214);
			match(LIBRARY);
			setState(3215);
			((Alter_external_libraryContext)_localctx).library_name = id();
			setState(3218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3216);
				match(AUTHORIZATION);
				setState(3217);
				((Alter_external_libraryContext)_localctx).owner_name = id();
				}
			}

			setState(3220);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==SET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			{
			setState(3221);
			match(LR_BRACKET);
			setState(3222);
			match(CONTENT);
			setState(3223);
			match(EQUAL);
			setState(3227);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(3224);
				((Alter_external_libraryContext)_localctx).client_library = match(STRING);
				}
				break;
			case BINARY:
				{
				setState(3225);
				match(BINARY);
				}
				break;
			case NONE:
				{
				setState(3226);
				match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			{
			setState(3229);
			match(COMMA);
			setState(3230);
			match(PLATFORM);
			setState(3231);
			match(EQUAL);
			setState(3233);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINUX || _la==WINDOWS) {
				{
				setState(3232);
				_la = _input.LA(1);
				if ( !(_la==LINUX || _la==WINDOWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3235);
			match(RR_BRACKET);
			}
			setState(3237);
			match(WITH);
			setState(3247); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(3247);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LANGUAGE:
				case COMMA:
					{
					setState(3239);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3238);
						match(COMMA);
						}
					}

					setState(3241);
					match(LANGUAGE);
					setState(3242);
					match(EQUAL);
					setState(3243);
					_la = _input.LA(1);
					if ( !(_la==PYTHON || _la==R) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case DATA_SOURCE:
					{
					setState(3244);
					match(DATA_SOURCE);
					setState(3245);
					match(EQUAL);
					setState(3246);
					((Alter_external_libraryContext)_localctx).external_data_source_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3249); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
			setState(3251);
			match(RR_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_libraryContext extends ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public Token client_library;
		public IdContext external_data_source_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSqlParser.LIBRARY, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode PLATFORM() { return getToken(TSqlParser.PLATFORM, 0); }
		public List<TerminalNode> LANGUAGE() { return getTokens(TSqlParser.LANGUAGE); }
		public TerminalNode LANGUAGE(int i) {
			return getToken(TSqlParser.LANGUAGE, i);
		}
		public List<TerminalNode> DATA_SOURCE() { return getTokens(TSqlParser.DATA_SOURCE); }
		public TerminalNode DATA_SOURCE(int i) {
			return getToken(TSqlParser.DATA_SOURCE, i);
		}
		public List<TerminalNode> R() { return getTokens(TSqlParser.R); }
		public TerminalNode R(int i) {
			return getToken(TSqlParser.R, i);
		}
		public List<TerminalNode> PYTHON() { return getTokens(TSqlParser.PYTHON); }
		public TerminalNode PYTHON(int i) {
			return getToken(TSqlParser.PYTHON, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode LINUX() { return getToken(TSqlParser.LINUX, 0); }
		public Create_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_external_library(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_external_library(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_external_libraryContext create_external_library() throws RecognitionException {
		Create_external_libraryContext _localctx = new Create_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_create_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3253);
			match(CREATE);
			setState(3254);
			match(EXTERNAL);
			setState(3255);
			match(LIBRARY);
			setState(3256);
			((Create_external_libraryContext)_localctx).library_name = id();
			setState(3259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3257);
				match(AUTHORIZATION);
				setState(3258);
				((Create_external_libraryContext)_localctx).owner_name = id();
				}
			}

			setState(3261);
			match(FROM);
			{
			setState(3263);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3262);
				match(COMMA);
				}
			}

			setState(3266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(3265);
				match(LR_BRACKET);
				}
			}

			setState(3270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTENT) {
				{
				setState(3268);
				match(CONTENT);
				setState(3269);
				match(EQUAL);
				}
			}

			setState(3275);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(3272);
				((Create_external_libraryContext)_localctx).client_library = match(STRING);
				}
				break;
			case BINARY:
				{
				setState(3273);
				match(BINARY);
				}
				break;
			case NONE:
				{
				setState(3274);
				match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3284);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3277);
				match(COMMA);
				setState(3278);
				match(PLATFORM);
				setState(3279);
				match(EQUAL);
				setState(3281);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINUX || _la==WINDOWS) {
					{
					setState(3280);
					_la = _input.LA(1);
					if ( !(_la==LINUX || _la==WINDOWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3283);
				match(RR_BRACKET);
				}
			}

			}
			setState(3301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				{
				setState(3286);
				match(WITH);
				setState(3296); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3296);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LANGUAGE:
					case COMMA:
						{
						setState(3288);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3287);
							match(COMMA);
							}
						}

						setState(3290);
						match(LANGUAGE);
						setState(3291);
						match(EQUAL);
						setState(3292);
						_la = _input.LA(1);
						if ( !(_la==PYTHON || _la==R) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case DATA_SOURCE:
						{
						setState(3293);
						match(DATA_SOURCE);
						setState(3294);
						match(EQUAL);
						setState(3295);
						((Create_external_libraryContext)_localctx).external_data_source_name = id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3298); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
				setState(3300);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public Token max_cpu_percent;
		public Token max_memory_percent;
		public Token max_processes;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode DEFAULT_DOUBLE_QUOTE() { return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(TSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Alter_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_external_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_external_resource_pool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_external_resource_pool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_external_resource_poolContext alter_external_resource_pool() throws RecognitionException {
		Alter_external_resource_poolContext _localctx = new Alter_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_alter_external_resource_pool);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3303);
			match(ALTER);
			setState(3304);
			match(EXTERNAL);
			setState(3305);
			match(RESOURCE);
			setState(3306);
			match(POOL);
			setState(3309);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(3307);
				((Alter_external_resource_poolContext)_localctx).pool_name = id();
				}
				break;
			case DEFAULT_DOUBLE_QUOTE:
				{
				setState(3308);
				match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3311);
			match(WITH);
			setState(3312);
			match(LR_BRACKET);
			setState(3313);
			match(MAX_CPU_PERCENT);
			setState(3314);
			match(EQUAL);
			setState(3315);
			((Alter_external_resource_poolContext)_localctx).max_cpu_percent = match(DECIMAL);
			setState(3353);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				setState(3317);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3316);
					match(COMMA);
					}
				}

				setState(3319);
				match(AFFINITY);
				setState(3320);
				match(CPU);
				setState(3321);
				match(EQUAL);
				setState(3335);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO:
					{
					setState(3322);
					match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					setState(3331); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(3331);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
							case 1:
								{
								setState(3324);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3323);
									match(COMMA);
									}
								}

								setState(3326);
								match(DECIMAL);
								setState(3327);
								match(TO);
								setState(3328);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(3329);
								match(COMMA);
								setState(3330);
								match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3333); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,306,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				setState(3337);
				match(NUMANODE);
				setState(3338);
				match(EQUAL);
				setState(3349); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3349);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
						case 1:
							{
							setState(3340);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3339);
								match(COMMA);
								}
							}

							setState(3342);
							match(DECIMAL);
							setState(3343);
							match(TO);
							setState(3344);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(3346);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3345);
								match(COMMA);
								}
							}

							setState(3348);
							match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3351); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,311,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3361);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				setState(3356);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3355);
					match(COMMA);
					}
				}

				setState(3358);
				match(MAX_MEMORY_PERCENT);
				setState(3359);
				match(EQUAL);
				setState(3360);
				((Alter_external_resource_poolContext)_localctx).max_memory_percent = match(DECIMAL);
				}
				break;
			}
			setState(3369);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				setState(3364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3363);
					match(COMMA);
					}
				}

				setState(3366);
				match(MAX_PROCESSES);
				setState(3367);
				match(EQUAL);
				setState(3368);
				((Alter_external_resource_poolContext)_localctx).max_processes = match(DECIMAL);
				}
			}

			setState(3371);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public Token max_cpu_percent;
		public Token max_memory_percent;
		public Token max_processes;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(TSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Create_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_external_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_external_resource_pool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_external_resource_pool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_external_resource_poolContext create_external_resource_pool() throws RecognitionException {
		Create_external_resource_poolContext _localctx = new Create_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_create_external_resource_pool);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3373);
			match(CREATE);
			setState(3374);
			match(EXTERNAL);
			setState(3375);
			match(RESOURCE);
			setState(3376);
			match(POOL);
			setState(3377);
			((Create_external_resource_poolContext)_localctx).pool_name = id();
			setState(3378);
			match(WITH);
			setState(3379);
			match(LR_BRACKET);
			setState(3380);
			match(MAX_CPU_PERCENT);
			setState(3381);
			match(EQUAL);
			setState(3382);
			((Create_external_resource_poolContext)_localctx).max_cpu_percent = match(DECIMAL);
			setState(3420);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				setState(3384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3383);
					match(COMMA);
					}
				}

				setState(3386);
				match(AFFINITY);
				setState(3387);
				match(CPU);
				setState(3388);
				match(EQUAL);
				setState(3402);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO:
					{
					setState(3389);
					match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					setState(3398); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(3398);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
							case 1:
								{
								setState(3391);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3390);
									match(COMMA);
									}
								}

								setState(3393);
								match(DECIMAL);
								setState(3394);
								match(TO);
								setState(3395);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(3396);
								match(COMMA);
								setState(3397);
								match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3400); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,320,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				setState(3404);
				match(NUMANODE);
				setState(3405);
				match(EQUAL);
				setState(3416); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3416);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
						case 1:
							{
							setState(3407);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3406);
								match(COMMA);
								}
							}

							setState(3409);
							match(DECIMAL);
							setState(3410);
							match(TO);
							setState(3411);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(3413);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3412);
								match(COMMA);
								}
							}

							setState(3415);
							match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3418); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,325,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3428);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				{
				setState(3423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3422);
					match(COMMA);
					}
				}

				setState(3425);
				match(MAX_MEMORY_PERCENT);
				setState(3426);
				match(EQUAL);
				setState(3427);
				((Create_external_resource_poolContext)_localctx).max_memory_percent = match(DECIMAL);
				}
				break;
			}
			setState(3436);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				setState(3431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3430);
					match(COMMA);
					}
				}

				setState(3433);
				match(MAX_PROCESSES);
				setState(3434);
				match(EQUAL);
				setState(3435);
				((Create_external_resource_poolContext)_localctx).max_processes = match(DECIMAL);
				}
			}

			setState(3438);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fulltext_catalogContext extends ParserRuleContext {
		public IdContext catalog_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public TerminalNode REORGANIZE() { return getToken(TSqlParser.REORGANIZE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Alter_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fulltext_catalog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_fulltext_catalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_fulltext_catalog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_fulltext_catalog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_fulltext_catalogContext alter_fulltext_catalog() throws RecognitionException {
		Alter_fulltext_catalogContext _localctx = new Alter_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_alter_fulltext_catalog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3440);
			match(ALTER);
			setState(3441);
			match(FULLTEXT);
			setState(3442);
			match(CATALOG);
			setState(3443);
			((Alter_fulltext_catalogContext)_localctx).catalog_name = id();
			setState(3454);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REBUILD:
				{
				setState(3444);
				match(REBUILD);
				setState(3449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
				case 1:
					{
					setState(3445);
					match(WITH);
					setState(3446);
					match(ACCENT_SENSITIVITY);
					setState(3447);
					match(EQUAL);
					setState(3448);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				{
				setState(3451);
				match(REORGANIZE);
				}
				break;
			case AS:
				{
				setState(3452);
				match(AS);
				setState(3453);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fulltext_catalogContext extends ParserRuleContext {
		public IdContext catalog_name;
		public IdContext filegroup;
		public Token rootpath;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode FILEGROUP() { return getToken(TSqlParser.FILEGROUP, 0); }
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fulltext_catalog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_fulltext_catalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_fulltext_catalog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_fulltext_catalog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_fulltext_catalogContext create_fulltext_catalog() throws RecognitionException {
		Create_fulltext_catalogContext _localctx = new Create_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_create_fulltext_catalog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3456);
			match(CREATE);
			setState(3457);
			match(FULLTEXT);
			setState(3458);
			match(CATALOG);
			setState(3459);
			((Create_fulltext_catalogContext)_localctx).catalog_name = id();
			setState(3463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3460);
				match(ON);
				setState(3461);
				match(FILEGROUP);
				setState(3462);
				((Create_fulltext_catalogContext)_localctx).filegroup = id();
				}
			}

			setState(3468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(3465);
				match(IN);
				setState(3466);
				match(PATH);
				setState(3467);
				((Create_fulltext_catalogContext)_localctx).rootpath = match(STRING);
				}
			}

			setState(3474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				setState(3470);
				match(WITH);
				setState(3471);
				match(ACCENT_SENSITIVITY);
				setState(3472);
				match(EQUAL);
				setState(3473);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3476);
				match(AS);
				setState(3477);
				match(DEFAULT);
				}
			}

			setState(3482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3480);
				match(AUTHORIZATION);
				setState(3481);
				((Create_fulltext_catalogContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fulltext_stoplistContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public Token stopword;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode LANGUAGE() { return getToken(TSqlParser.LANGUAGE, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Alter_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fulltext_stoplist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_fulltext_stoplist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_fulltext_stoplist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_fulltext_stoplist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_fulltext_stoplistContext alter_fulltext_stoplist() throws RecognitionException {
		Alter_fulltext_stoplistContext _localctx = new Alter_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_alter_fulltext_stoplist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3484);
			match(ALTER);
			setState(3485);
			match(FULLTEXT);
			setState(3486);
			match(STOPLIST);
			setState(3487);
			((Alter_fulltext_stoplistContext)_localctx).stoplist_name = id();
			setState(3501);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				setState(3488);
				match(ADD);
				setState(3489);
				((Alter_fulltext_stoplistContext)_localctx).stopword = match(STRING);
				setState(3490);
				match(LANGUAGE);
				setState(3491);
				_la = _input.LA(1);
				if ( !(((((_la - 777)) & ~0x3f) == 0 && ((1L << (_la - 777)) & ((1L << (DECIMAL - 777)) | (1L << (STRING - 777)) | (1L << (BINARY - 777)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DROP:
				{
				setState(3492);
				match(DROP);
				setState(3499);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
				case 1:
					{
					setState(3493);
					((Alter_fulltext_stoplistContext)_localctx).stopword = match(STRING);
					setState(3494);
					match(LANGUAGE);
					setState(3495);
					_la = _input.LA(1);
					if ( !(((((_la - 777)) & ~0x3f) == 0 && ((1L << (_la - 777)) & ((1L << (DECIMAL - 777)) | (1L << (STRING - 777)) | (1L << (BINARY - 777)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case 2:
					{
					setState(3496);
					match(ALL);
					setState(3497);
					_la = _input.LA(1);
					if ( !(((((_la - 777)) & ~0x3f) == 0 && ((1L << (_la - 777)) & ((1L << (DECIMAL - 777)) | (1L << (STRING - 777)) | (1L << (BINARY - 777)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case 3:
					{
					setState(3498);
					match(ALL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fulltext_stoplistContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public IdContext database_name;
		public IdContext source_stoplist_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public List<TerminalNode> STOPLIST() { return getTokens(TSqlParser.STOPLIST); }
		public TerminalNode STOPLIST(int i) {
			return getToken(TSqlParser.STOPLIST, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode SYSTEM() { return getToken(TSqlParser.SYSTEM, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fulltext_stoplist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_fulltext_stoplist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_fulltext_stoplist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_fulltext_stoplist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_fulltext_stoplistContext create_fulltext_stoplist() throws RecognitionException {
		Create_fulltext_stoplistContext _localctx = new Create_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_create_fulltext_stoplist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3503);
			match(CREATE);
			setState(3504);
			match(FULLTEXT);
			setState(3505);
			match(STOPLIST);
			setState(3506);
			((Create_fulltext_stoplistContext)_localctx).stoplist_name = id();
			setState(3518);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3507);
				match(FROM);
				setState(3516);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(3511);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
					case 1:
						{
						setState(3508);
						((Create_fulltext_stoplistContext)_localctx).database_name = id();
						setState(3509);
						match(DOT);
						}
						break;
					}
					setState(3513);
					((Create_fulltext_stoplistContext)_localctx).source_stoplist_name = id();
					}
					break;
				case SYSTEM:
					{
					setState(3514);
					match(SYSTEM);
					setState(3515);
					match(STOPLIST);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3522);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3520);
				match(AUTHORIZATION);
				setState(3521);
				((Create_fulltext_stoplistContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_sql_serverContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token password_hash;
		public Token old_password;
		public IdContext default_database;
		public IdContext default_laguage;
		public IdContext credential_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSqlParser.CREDENTIAL, i);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSqlParser.CHECK_POLICY, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode HASHED() { return getToken(TSqlParser.HASHED, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(TSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(TSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(TSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(TSqlParser.UNLOCK, i);
		}
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public Alter_login_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_login_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_login_sql_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_login_sql_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_login_sql_serverContext alter_login_sql_server() throws RecognitionException {
		Alter_login_sql_serverContext _localctx = new Alter_login_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_alter_login_sql_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3524);
			match(ALTER);
			setState(3525);
			match(LOGIN);
			setState(3526);
			((Alter_login_sql_serverContext)_localctx).login_name = id();
			setState(3594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				setState(3528);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
				case 1:
					{
					setState(3527);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3530);
				match(WITH);
				setState(3544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSWORD) {
					{
					{
					setState(3531);
					match(PASSWORD);
					setState(3532);
					match(EQUAL);
					setState(3536);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(3533);
						((Alter_login_sql_serverContext)_localctx).password = match(STRING);
						}
						break;
					case BINARY:
						{
						setState(3534);
						((Alter_login_sql_serverContext)_localctx).password_hash = match(BINARY);
						setState(3535);
						match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3541);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						setState(3538);
						_la = _input.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						setState(3543);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OLD_PASSWORD) {
					{
					setState(3546);
					match(OLD_PASSWORD);
					setState(3547);
					match(EQUAL);
					setState(3548);
					((Alter_login_sql_serverContext)_localctx).old_password = match(STRING);
					setState(3552);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						setState(3549);
						_la = _input.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						setState(3554);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT_DATABASE) {
					{
					setState(3557);
					match(DEFAULT_DATABASE);
					setState(3558);
					match(EQUAL);
					setState(3559);
					((Alter_login_sql_serverContext)_localctx).default_database = id();
					}
				}

				setState(3565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT_LANGUAGE) {
					{
					setState(3562);
					match(DEFAULT_LANGUAGE);
					setState(3563);
					match(EQUAL);
					setState(3564);
					((Alter_login_sql_serverContext)_localctx).default_laguage = id();
					}
				}

				setState(3570);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(3567);
					match(NAME);
					setState(3568);
					match(EQUAL);
					setState(3569);
					((Alter_login_sql_serverContext)_localctx).login_name = id();
					}
					break;
				}
				setState(3575);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHECK_POLICY) {
					{
					setState(3572);
					match(CHECK_POLICY);
					setState(3573);
					match(EQUAL);
					setState(3574);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3580);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHECK_EXPIRATION) {
					{
					setState(3577);
					match(CHECK_EXPIRATION);
					setState(3578);
					match(EQUAL);
					setState(3579);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CREDENTIAL) {
					{
					setState(3582);
					match(CREDENTIAL);
					setState(3583);
					match(EQUAL);
					setState(3584);
					((Alter_login_sql_serverContext)_localctx).credential_name = id();
					}
				}

				setState(3589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3587);
					match(NO);
					setState(3588);
					match(CREDENTIAL);
					}
				}

				}
				break;
			case 3:
				{
				setState(3591);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3592);
				match(CREDENTIAL);
				setState(3593);
				((Alter_login_sql_serverContext)_localctx).credential_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_sql_serverContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token password_hash;
		public Token sid;
		public IdContext default_database;
		public IdContext default_laguage;
		public IdContext credential_name;
		public Token default_language;
		public IdContext certname;
		public IdContext asym_key_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode SID() { return getToken(TSqlParser.SID, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSqlParser.CHECK_POLICY, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode HASHED() { return getToken(TSqlParser.HASHED, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(TSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(TSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(TSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(TSqlParser.UNLOCK, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_login_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_login_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_login_sql_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_login_sql_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_login_sql_serverContext create_login_sql_server() throws RecognitionException {
		Create_login_sql_serverContext _localctx = new Create_login_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_create_login_sql_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3596);
			match(CREATE);
			setState(3597);
			match(LOGIN);
			setState(3598);
			((Create_login_sql_serverContext)_localctx).login_name = id();
			setState(3689);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(3599);
				match(WITH);
				setState(3613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSWORD) {
					{
					{
					setState(3600);
					match(PASSWORD);
					setState(3601);
					match(EQUAL);
					setState(3605);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(3602);
						((Create_login_sql_serverContext)_localctx).password = match(STRING);
						}
						break;
					case BINARY:
						{
						setState(3603);
						((Create_login_sql_serverContext)_localctx).password_hash = match(BINARY);
						setState(3604);
						match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3610);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						setState(3607);
						_la = _input.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						setState(3612);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3621);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					setState(3616);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3615);
						match(COMMA);
						}
					}

					setState(3618);
					match(SID);
					setState(3619);
					match(EQUAL);
					setState(3620);
					((Create_login_sql_serverContext)_localctx).sid = match(BINARY);
					}
					break;
				}
				setState(3629);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					setState(3624);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3623);
						match(COMMA);
						}
					}

					setState(3626);
					match(DEFAULT_DATABASE);
					setState(3627);
					match(EQUAL);
					setState(3628);
					((Create_login_sql_serverContext)_localctx).default_database = id();
					}
					break;
				}
				setState(3637);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					setState(3632);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3631);
						match(COMMA);
						}
					}

					setState(3634);
					match(DEFAULT_LANGUAGE);
					setState(3635);
					match(EQUAL);
					setState(3636);
					((Create_login_sql_serverContext)_localctx).default_laguage = id();
					}
					break;
				}
				setState(3645);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					setState(3640);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3639);
						match(COMMA);
						}
					}

					setState(3642);
					match(CHECK_EXPIRATION);
					setState(3643);
					match(EQUAL);
					setState(3644);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3653);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(3648);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3647);
						match(COMMA);
						}
					}

					setState(3650);
					match(CHECK_POLICY);
					setState(3651);
					match(EQUAL);
					setState(3652);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CREDENTIAL || _la==COMMA) {
					{
					setState(3656);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3655);
						match(COMMA);
						}
					}

					setState(3658);
					match(CREDENTIAL);
					setState(3659);
					match(EQUAL);
					setState(3660);
					((Create_login_sql_serverContext)_localctx).credential_name = id();
					}
				}

				}
				break;
			case FROM:
				{
				{
				setState(3663);
				match(FROM);
				setState(3687);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(3664);
					match(WINDOWS);
					{
					setState(3665);
					match(WITH);
					setState(3672);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
					case 1:
						{
						setState(3667);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3666);
							match(COMMA);
							}
						}

						setState(3669);
						match(DEFAULT_DATABASE);
						setState(3670);
						match(EQUAL);
						setState(3671);
						((Create_login_sql_serverContext)_localctx).default_database = id();
						}
						break;
					}
					setState(3680);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DEFAULT_LANGUAGE || _la==COMMA) {
						{
						setState(3675);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3674);
							match(COMMA);
							}
						}

						setState(3677);
						match(DEFAULT_LANGUAGE);
						setState(3678);
						match(EQUAL);
						setState(3679);
						((Create_login_sql_serverContext)_localctx).default_language = match(STRING);
						}
					}

					}
					}
					break;
				case CERTIFICATE:
					{
					setState(3682);
					match(CERTIFICATE);
					setState(3683);
					((Create_login_sql_serverContext)_localctx).certname = id();
					}
					break;
				case ASYMMETRIC:
					{
					setState(3684);
					match(ASYMMETRIC);
					setState(3685);
					match(KEY);
					setState(3686);
					((Create_login_sql_serverContext)_localctx).asym_key_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_azure_sqlContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token old_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public Alter_login_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_login_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_login_azure_sql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_login_azure_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_login_azure_sqlContext alter_login_azure_sql() throws RecognitionException {
		Alter_login_azure_sqlContext _localctx = new Alter_login_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_alter_login_azure_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3691);
			match(ALTER);
			setState(3692);
			match(LOGIN);
			setState(3693);
			((Alter_login_azure_sqlContext)_localctx).login_name = id();
			setState(3711);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(3695);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
				case 1:
					{
					setState(3694);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3697);
				match(WITH);
				setState(3709);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PASSWORD:
					{
					setState(3698);
					match(PASSWORD);
					setState(3699);
					match(EQUAL);
					setState(3700);
					((Alter_login_azure_sqlContext)_localctx).password = match(STRING);
					setState(3704);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OLD_PASSWORD) {
						{
						setState(3701);
						match(OLD_PASSWORD);
						setState(3702);
						match(EQUAL);
						setState(3703);
						((Alter_login_azure_sqlContext)_localctx).old_password = match(STRING);
						}
					}

					}
					break;
				case NAME:
					{
					setState(3706);
					match(NAME);
					setState(3707);
					match(EQUAL);
					setState(3708);
					((Alter_login_azure_sqlContext)_localctx).login_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_azure_sqlContext extends ParserRuleContext {
		public IdContext login_name;
		public Token sid;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SID() { return getToken(TSqlParser.SID, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public Create_login_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_login_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_login_azure_sql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_login_azure_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_login_azure_sqlContext create_login_azure_sql() throws RecognitionException {
		Create_login_azure_sqlContext _localctx = new Create_login_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_create_login_azure_sql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3713);
			match(CREATE);
			setState(3714);
			match(LOGIN);
			setState(3715);
			((Create_login_azure_sqlContext)_localctx).login_name = id();
			setState(3716);
			match(WITH);
			setState(3717);
			match(PASSWORD);
			setState(3718);
			match(EQUAL);
			setState(3719);
			match(STRING);
			setState(3723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				setState(3720);
				match(SID);
				setState(3721);
				match(EQUAL);
				setState(3722);
				((Create_login_azure_sqlContext)_localctx).sid = match(BINARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token old_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(TSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(TSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(TSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(TSqlParser.UNLOCK, i);
		}
		public Alter_login_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_azure_sql_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_login_azure_sql_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_login_azure_sql_dw_and_pdw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_login_azure_sql_dw_and_pdw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() throws RecognitionException {
		Alter_login_azure_sql_dw_and_pdwContext _localctx = new Alter_login_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_alter_login_azure_sql_dw_and_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3725);
			match(ALTER);
			setState(3726);
			match(LOGIN);
			setState(3727);
			((Alter_login_azure_sql_dw_and_pdwContext)_localctx).login_name = id();
			setState(3751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				setState(3729);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
				case 1:
					{
					setState(3728);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3731);
				match(WITH);
				setState(3749);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PASSWORD:
					{
					setState(3732);
					match(PASSWORD);
					setState(3733);
					match(EQUAL);
					setState(3734);
					((Alter_login_azure_sql_dw_and_pdwContext)_localctx).password = match(STRING);
					setState(3744);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OLD_PASSWORD) {
						{
						setState(3735);
						match(OLD_PASSWORD);
						setState(3736);
						match(EQUAL);
						setState(3737);
						((Alter_login_azure_sql_dw_and_pdwContext)_localctx).old_password = match(STRING);
						setState(3741);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==MUST_CHANGE || _la==UNLOCK) {
							{
							{
							setState(3738);
							_la = _input.LA(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							}
							setState(3743);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					}
					break;
				case NAME:
					{
					setState(3746);
					match(NAME);
					setState(3747);
					match(EQUAL);
					setState(3748);
					((Alter_login_azure_sql_dw_and_pdwContext)_localctx).login_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_pdwContext extends ParserRuleContext {
		public IdContext loginName;
		public Token password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode MUST_CHANGE() { return getToken(TSqlParser.MUST_CHANGE, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSqlParser.CHECK_POLICY, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_login_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_login_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_login_pdw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_login_pdw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_login_pdwContext create_login_pdw() throws RecognitionException {
		Create_login_pdwContext _localctx = new Create_login_pdwContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_create_login_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3753);
			match(CREATE);
			setState(3754);
			match(LOGIN);
			setState(3755);
			((Create_login_pdwContext)_localctx).loginName = id();
			setState(3772);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(3756);
				match(WITH);
				{
				setState(3757);
				match(PASSWORD);
				setState(3758);
				match(EQUAL);
				setState(3759);
				((Create_login_pdwContext)_localctx).password = match(STRING);
				setState(3761);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MUST_CHANGE) {
					{
					setState(3760);
					match(MUST_CHANGE);
					}
				}

				setState(3768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHECK_POLICY) {
					{
					setState(3763);
					match(CHECK_POLICY);
					setState(3764);
					match(EQUAL);
					setState(3766);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OFF || _la==ON) {
						{
						setState(3765);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
				}

				}
				}
				break;
			case FROM:
				{
				setState(3770);
				match(FROM);
				setState(3771);
				match(WINDOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_master_key_sql_serverContext extends ParserRuleContext {
		public Token password;
		public Token encryption_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> MASTER() { return getTokens(TSqlParser.MASTER); }
		public TerminalNode MASTER(int i) {
			return getToken(TSqlParser.MASTER, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public TerminalNode REGENERATE() { return getToken(TSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_master_key_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_master_key_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_master_key_sql_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_master_key_sql_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_master_key_sql_serverContext alter_master_key_sql_server() throws RecognitionException {
		Alter_master_key_sql_serverContext _localctx = new Alter_master_key_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_alter_master_key_sql_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3774);
			match(ALTER);
			setState(3775);
			match(MASTER);
			setState(3776);
			match(KEY);
			setState(3798);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGENERATE:
			case FORCE:
				{
				setState(3778);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(3777);
					match(FORCE);
					}
				}

				setState(3780);
				match(REGENERATE);
				setState(3781);
				match(WITH);
				setState(3782);
				match(ENCRYPTION);
				setState(3783);
				match(BY);
				setState(3784);
				match(PASSWORD);
				setState(3785);
				match(EQUAL);
				setState(3786);
				((Alter_master_key_sql_serverContext)_localctx).password = match(STRING);
				}
				break;
			case ADD:
			case DROP:
				{
				setState(3787);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3788);
				match(ENCRYPTION);
				setState(3789);
				match(BY);
				setState(3796);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERVICE:
					{
					setState(3790);
					match(SERVICE);
					setState(3791);
					match(MASTER);
					setState(3792);
					match(KEY);
					}
					break;
				case PASSWORD:
					{
					setState(3793);
					match(PASSWORD);
					setState(3794);
					match(EQUAL);
					setState(3795);
					((Alter_master_key_sql_serverContext)_localctx).encryption_password = match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_master_key_sql_serverContext extends ParserRuleContext {
		public Token password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_master_key_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_master_key_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_master_key_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_master_key_sql_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_master_key_sql_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_master_key_sql_serverContext create_master_key_sql_server() throws RecognitionException {
		Create_master_key_sql_serverContext _localctx = new Create_master_key_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_create_master_key_sql_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3800);
			match(CREATE);
			setState(3801);
			match(MASTER);
			setState(3802);
			match(KEY);
			setState(3803);
			match(ENCRYPTION);
			setState(3804);
			match(BY);
			setState(3805);
			match(PASSWORD);
			setState(3806);
			match(EQUAL);
			setState(3807);
			((Create_master_key_sql_serverContext)_localctx).password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_master_key_azure_sqlContext extends ParserRuleContext {
		public Token password;
		public Token encryption_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> MASTER() { return getTokens(TSqlParser.MASTER); }
		public TerminalNode MASTER(int i) {
			return getToken(TSqlParser.MASTER, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public TerminalNode REGENERATE() { return getToken(TSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_master_key_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_master_key_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_master_key_azure_sql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_master_key_azure_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_master_key_azure_sqlContext alter_master_key_azure_sql() throws RecognitionException {
		Alter_master_key_azure_sqlContext _localctx = new Alter_master_key_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_alter_master_key_azure_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3809);
			match(ALTER);
			setState(3810);
			match(MASTER);
			setState(3811);
			match(KEY);
			setState(3839);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGENERATE:
			case FORCE:
				{
				setState(3813);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(3812);
					match(FORCE);
					}
				}

				setState(3815);
				match(REGENERATE);
				setState(3816);
				match(WITH);
				setState(3817);
				match(ENCRYPTION);
				setState(3818);
				match(BY);
				setState(3819);
				match(PASSWORD);
				setState(3820);
				match(EQUAL);
				setState(3821);
				((Alter_master_key_azure_sqlContext)_localctx).password = match(STRING);
				}
				break;
			case ADD:
				{
				setState(3822);
				match(ADD);
				setState(3823);
				match(ENCRYPTION);
				setState(3824);
				match(BY);
				setState(3831);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERVICE:
					{
					setState(3825);
					match(SERVICE);
					setState(3826);
					match(MASTER);
					setState(3827);
					match(KEY);
					}
					break;
				case PASSWORD:
					{
					setState(3828);
					match(PASSWORD);
					setState(3829);
					match(EQUAL);
					setState(3830);
					((Alter_master_key_azure_sqlContext)_localctx).encryption_password = match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DROP:
				{
				setState(3833);
				match(DROP);
				setState(3834);
				match(ENCRYPTION);
				setState(3835);
				match(BY);
				setState(3836);
				match(PASSWORD);
				setState(3837);
				match(EQUAL);
				setState(3838);
				((Alter_master_key_azure_sqlContext)_localctx).encryption_password = match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_master_key_azure_sqlContext extends ParserRuleContext {
		public Token password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_master_key_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_master_key_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_master_key_azure_sql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_master_key_azure_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_master_key_azure_sqlContext create_master_key_azure_sql() throws RecognitionException {
		Create_master_key_azure_sqlContext _localctx = new Create_master_key_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_create_master_key_azure_sql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3841);
			match(CREATE);
			setState(3842);
			match(MASTER);
			setState(3843);
			match(KEY);
			setState(3849);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				setState(3844);
				match(ENCRYPTION);
				setState(3845);
				match(BY);
				setState(3846);
				match(PASSWORD);
				setState(3847);
				match(EQUAL);
				setState(3848);
				((Create_master_key_azure_sqlContext)_localctx).password = match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_message_typeContext extends ParserRuleContext {
		public IdContext message_type_name;
		public IdContext schema_collection_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode VALIDATION() { return getToken(TSqlParser.VALIDATION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode EMPTY() { return getToken(TSqlParser.EMPTY, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(TSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode VALID_XML() { return getToken(TSqlParser.VALID_XML, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Alter_message_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_message_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_message_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_message_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_message_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_message_typeContext alter_message_type() throws RecognitionException {
		Alter_message_typeContext _localctx = new Alter_message_typeContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_alter_message_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3851);
			match(ALTER);
			setState(3852);
			match(MESSAGE);
			setState(3853);
			match(TYPE);
			setState(3854);
			((Alter_message_typeContext)_localctx).message_type_name = id();
			setState(3855);
			match(VALIDATION);
			setState(3856);
			match(EQUAL);
			setState(3865);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(3857);
				match(NONE);
				}
				break;
			case EMPTY:
				{
				setState(3858);
				match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				setState(3859);
				match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				setState(3860);
				match(VALID_XML);
				setState(3861);
				match(WITH);
				setState(3862);
				match(SCHEMA);
				setState(3863);
				match(COLLECTION);
				setState(3864);
				((Alter_message_typeContext)_localctx).schema_collection_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_partition_functionContext extends ParserRuleContext {
		public IdContext partition_function_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode RANGE() { return getToken(TSqlParser.RANGE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SPLIT() { return getToken(TSqlParser.SPLIT, 0); }
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public Alter_partition_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_partition_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_partition_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_partition_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_partition_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_partition_functionContext alter_partition_function() throws RecognitionException {
		Alter_partition_functionContext _localctx = new Alter_partition_functionContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_alter_partition_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3867);
			match(ALTER);
			setState(3868);
			match(PARTITION);
			setState(3869);
			match(FUNCTION);
			setState(3870);
			((Alter_partition_functionContext)_localctx).partition_function_name = id();
			setState(3871);
			match(LR_BRACKET);
			setState(3872);
			match(RR_BRACKET);
			setState(3873);
			_la = _input.LA(1);
			if ( !(_la==MERGE || _la==SPLIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3874);
			match(RANGE);
			setState(3875);
			match(LR_BRACKET);
			setState(3876);
			match(DECIMAL);
			setState(3877);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_partition_schemeContext extends ParserRuleContext {
		public IdContext partition_scheme_name;
		public IdContext file_group_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode SCHEME() { return getToken(TSqlParser.SCHEME, 0); }
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public TerminalNode USED() { return getToken(TSqlParser.USED, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Alter_partition_schemeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_partition_scheme; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_partition_scheme(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_partition_scheme(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_partition_scheme(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_partition_schemeContext alter_partition_scheme() throws RecognitionException {
		Alter_partition_schemeContext _localctx = new Alter_partition_schemeContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_alter_partition_scheme);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3879);
			match(ALTER);
			setState(3880);
			match(PARTITION);
			setState(3881);
			match(SCHEME);
			setState(3882);
			((Alter_partition_schemeContext)_localctx).partition_scheme_name = id();
			setState(3883);
			match(NEXT);
			setState(3884);
			match(USED);
			setState(3886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
			case 1:
				{
				setState(3885);
				((Alter_partition_schemeContext)_localctx).file_group_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_remote_service_bindingContext extends ParserRuleContext {
		public IdContext binding_name;
		public IdContext user_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode ANONYMOUS() { return getToken(TSqlParser.ANONYMOUS, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Alter_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_remote_service_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_remote_service_binding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_remote_service_binding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_remote_service_binding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_remote_service_bindingContext alter_remote_service_binding() throws RecognitionException {
		Alter_remote_service_bindingContext _localctx = new Alter_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_alter_remote_service_binding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3888);
			match(ALTER);
			setState(3889);
			match(REMOTE);
			setState(3890);
			match(SERVICE);
			setState(3891);
			match(BINDING);
			setState(3892);
			((Alter_remote_service_bindingContext)_localctx).binding_name = id();
			setState(3893);
			match(WITH);
			setState(3897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER) {
				{
				setState(3894);
				match(USER);
				setState(3895);
				match(EQUAL);
				setState(3896);
				((Alter_remote_service_bindingContext)_localctx).user_name = id();
				}
			}

			setState(3903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3899);
				match(COMMA);
				setState(3900);
				match(ANONYMOUS);
				setState(3901);
				match(EQUAL);
				setState(3902);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_remote_service_bindingContext extends ParserRuleContext {
		public IdContext binding_name;
		public IdContext owner_name;
		public Token remote_service_name;
		public IdContext user_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public List<TerminalNode> SERVICE() { return getTokens(TSqlParser.SERVICE); }
		public TerminalNode SERVICE(int i) {
			return getToken(TSqlParser.SERVICE, i);
		}
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode ANONYMOUS() { return getToken(TSqlParser.ANONYMOUS, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_remote_service_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_remote_service_binding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_remote_service_binding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_remote_service_binding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_remote_service_bindingContext create_remote_service_binding() throws RecognitionException {
		Create_remote_service_bindingContext _localctx = new Create_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_create_remote_service_binding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3905);
			match(CREATE);
			setState(3906);
			match(REMOTE);
			setState(3907);
			match(SERVICE);
			setState(3908);
			match(BINDING);
			setState(3909);
			((Create_remote_service_bindingContext)_localctx).binding_name = id();
			setState(3912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3910);
				match(AUTHORIZATION);
				setState(3911);
				((Create_remote_service_bindingContext)_localctx).owner_name = id();
				}
			}

			setState(3914);
			match(TO);
			setState(3915);
			match(SERVICE);
			setState(3916);
			((Create_remote_service_bindingContext)_localctx).remote_service_name = match(STRING);
			setState(3917);
			match(WITH);
			setState(3921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER) {
				{
				setState(3918);
				match(USER);
				setState(3919);
				match(EQUAL);
				setState(3920);
				((Create_remote_service_bindingContext)_localctx).user_name = id();
				}
			}

			setState(3927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3923);
				match(COMMA);
				setState(3924);
				match(ANONYMOUS);
				setState(3925);
				match(EQUAL);
				setState(3926);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode MIN_CPU_PERCENT() { return getToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public TerminalNode CAP_CPU_PERCENT() { return getToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode SCHEDULER() { return getToken(TSqlParser.SCHEDULER, 0); }
		public TerminalNode MIN_MEMORY_PERCENT() { return getToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MIN_IOPS_PER_VOLUME() { return getToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public TerminalNode MAX_IOPS_PER_VOLUME() { return getToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Create_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_resource_pool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_resource_pool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_resource_poolContext create_resource_pool() throws RecognitionException {
		Create_resource_poolContext _localctx = new Create_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_create_resource_pool);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3929);
			match(CREATE);
			setState(3930);
			match(RESOURCE);
			setState(3931);
			match(POOL);
			setState(3932);
			((Create_resource_poolContext)_localctx).pool_name = id();
			setState(4035);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				setState(3933);
				match(WITH);
				setState(3934);
				match(LR_BRACKET);
				setState(3941);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
				case 1:
					{
					setState(3936);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3935);
						match(COMMA);
						}
					}

					setState(3938);
					match(MIN_CPU_PERCENT);
					setState(3939);
					match(EQUAL);
					setState(3940);
					match(DECIMAL);
					}
					break;
				}
				setState(3949);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
				case 1:
					{
					setState(3944);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3943);
						match(COMMA);
						}
					}

					setState(3946);
					match(MAX_CPU_PERCENT);
					setState(3947);
					match(EQUAL);
					setState(3948);
					match(DECIMAL);
					}
					break;
				}
				setState(3957);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
				case 1:
					{
					setState(3952);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3951);
						match(COMMA);
						}
					}

					setState(3954);
					match(CAP_CPU_PERCENT);
					setState(3955);
					match(EQUAL);
					setState(3956);
					match(DECIMAL);
					}
					break;
				}
				setState(4000);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
				case 1:
					{
					setState(3960);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3959);
						match(COMMA);
						}
					}

					setState(3962);
					match(AFFINITY);
					setState(3963);
					match(SCHEDULER);
					setState(3964);
					match(EQUAL);
					setState(3998);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AUTO:
						{
						setState(3965);
						match(AUTO);
						}
						break;
					case LR_BRACKET:
						{
						setState(3966);
						match(LR_BRACKET);
						setState(3976); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3968);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3967);
								match(COMMA);
								}
							}

							setState(3974);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
							case 1:
								{
								setState(3970);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(3971);
								match(DECIMAL);
								setState(3972);
								match(TO);
								setState(3973);
								match(DECIMAL);
								}
								break;
							}
							}
							}
							setState(3978); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						setState(3980);
						match(RR_BRACKET);
						}
						break;
					case NUMANODE:
						{
						setState(3981);
						match(NUMANODE);
						setState(3982);
						match(EQUAL);
						setState(3983);
						match(LR_BRACKET);
						setState(3993); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3985);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3984);
								match(COMMA);
								}
							}

							setState(3991);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
							case 1:
								{
								setState(3987);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(3988);
								match(DECIMAL);
								setState(3989);
								match(TO);
								setState(3990);
								match(DECIMAL);
								}
								break;
							}
							}
							}
							setState(3995); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						setState(3997);
						match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(4008);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					setState(4003);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4002);
						match(COMMA);
						}
					}

					setState(4005);
					match(MIN_MEMORY_PERCENT);
					setState(4006);
					match(EQUAL);
					setState(4007);
					match(DECIMAL);
					}
					break;
				}
				setState(4016);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
				case 1:
					{
					setState(4011);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4010);
						match(COMMA);
						}
					}

					setState(4013);
					match(MAX_MEMORY_PERCENT);
					setState(4014);
					match(EQUAL);
					setState(4015);
					match(DECIMAL);
					}
					break;
				}
				setState(4024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
				case 1:
					{
					setState(4019);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4018);
						match(COMMA);
						}
					}

					setState(4021);
					match(MIN_IOPS_PER_VOLUME);
					setState(4022);
					match(EQUAL);
					setState(4023);
					match(DECIMAL);
					}
					break;
				}
				setState(4032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MAX_IOPS_PER_VOLUME || _la==COMMA) {
					{
					setState(4027);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4026);
						match(COMMA);
						}
					}

					setState(4029);
					match(MAX_IOPS_PER_VOLUME);
					setState(4030);
					match(EQUAL);
					setState(4031);
					match(DECIMAL);
					}
				}

				setState(4034);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_resource_governorContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext function_name;
		public Token max_outstanding_io_per_volume;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode GOVERNOR() { return getToken(TSqlParser.GOVERNOR, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode CLASSIFIER_FUNCTION() { return getToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode RESET() { return getToken(TSqlParser.RESET, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public TerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return getToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode RECONFIGURE() { return getToken(TSqlParser.RECONFIGURE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Alter_resource_governorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_resource_governor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_resource_governor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_resource_governor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_resource_governor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_resource_governorContext alter_resource_governor() throws RecognitionException {
		Alter_resource_governorContext _localctx = new Alter_resource_governorContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_alter_resource_governor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4037);
			match(ALTER);
			setState(4038);
			match(RESOURCE);
			setState(4039);
			match(GOVERNOR);
			setState(4061);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				setState(4040);
				_la = _input.LA(1);
				if ( !(_la==RECONFIGURE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				{
				setState(4041);
				match(WITH);
				setState(4042);
				match(LR_BRACKET);
				setState(4043);
				match(CLASSIFIER_FUNCTION);
				setState(4044);
				match(EQUAL);
				setState(4050);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(4045);
					((Alter_resource_governorContext)_localctx).schema_name = id();
					setState(4046);
					match(DOT);
					setState(4047);
					((Alter_resource_governorContext)_localctx).function_name = id();
					}
					break;
				case NULL:
					{
					setState(4049);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4052);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(4053);
				match(RESET);
				setState(4054);
				match(STATISTICS);
				}
				break;
			case 4:
				{
				setState(4055);
				match(WITH);
				setState(4056);
				match(LR_BRACKET);
				setState(4057);
				match(MAX_OUTSTANDING_IO_PER_VOLUME);
				setState(4058);
				match(EQUAL);
				setState(4059);
				((Alter_resource_governorContext)_localctx).max_outstanding_io_per_volume = match(DECIMAL);
				setState(4060);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_db_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public IdContext database_principal;
		public IdContext new_role_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(TSqlParser.MEMBER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_db_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_db_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_db_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_db_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_db_roleContext alter_db_role() throws RecognitionException {
		Alter_db_roleContext _localctx = new Alter_db_roleContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_alter_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4063);
			match(ALTER);
			setState(4064);
			match(ROLE);
			setState(4065);
			((Alter_db_roleContext)_localctx).role_name = id();
			setState(4073);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case DROP:
				{
				setState(4066);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4067);
				match(MEMBER);
				setState(4068);
				((Alter_db_roleContext)_localctx).database_principal = id();
				}
				break;
			case WITH:
				{
				setState(4069);
				match(WITH);
				setState(4070);
				match(NAME);
				setState(4071);
				match(EQUAL);
				setState(4072);
				((Alter_db_roleContext)_localctx).new_role_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_db_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_db_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_db_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_db_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_db_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_db_roleContext create_db_role() throws RecognitionException {
		Create_db_roleContext _localctx = new Create_db_roleContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_create_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4075);
			match(CREATE);
			setState(4076);
			match(ROLE);
			setState(4077);
			((Create_db_roleContext)_localctx).role_name = id();
			setState(4080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4078);
				match(AUTHORIZATION);
				setState(4079);
				((Create_db_roleContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_routeContext extends ParserRuleContext {
		public IdContext route_name;
		public IdContext owner_name;
		public Token route_service_name;
		public Token broker_instance_identifier;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ADDRESS() { return getToken(TSqlParser.ADDRESS, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> QUOTED_URL() { return getTokens(TSqlParser.QUOTED_URL); }
		public TerminalNode QUOTED_URL(int i) {
			return getToken(TSqlParser.QUOTED_URL, i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode SERVICE_NAME() { return getToken(TSqlParser.SERVICE_NAME, 0); }
		public TerminalNode BROKER_INSTANCE() { return getToken(TSqlParser.BROKER_INSTANCE, 0); }
		public TerminalNode LIFETIME() { return getToken(TSqlParser.LIFETIME, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode MIRROR_ADDRESS() { return getToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public Create_routeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_route; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_route(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_route(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_route(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_routeContext create_route() throws RecognitionException {
		Create_routeContext _localctx = new Create_routeContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_create_route);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4082);
			match(CREATE);
			setState(4083);
			match(ROUTE);
			setState(4084);
			((Create_routeContext)_localctx).route_name = id();
			setState(4087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4085);
				match(AUTHORIZATION);
				setState(4086);
				((Create_routeContext)_localctx).owner_name = id();
				}
			}

			setState(4089);
			match(WITH);
			setState(4096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				setState(4091);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4090);
					match(COMMA);
					}
				}

				setState(4093);
				match(SERVICE_NAME);
				setState(4094);
				match(EQUAL);
				setState(4095);
				((Create_routeContext)_localctx).route_service_name = match(STRING);
				}
				break;
			}
			setState(4104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(4099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4098);
					match(COMMA);
					}
				}

				setState(4101);
				match(BROKER_INSTANCE);
				setState(4102);
				match(EQUAL);
				setState(4103);
				((Create_routeContext)_localctx).broker_instance_identifier = match(STRING);
				}
				break;
			}
			setState(4112);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(4107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4106);
					match(COMMA);
					}
				}

				setState(4109);
				match(LIFETIME);
				setState(4110);
				match(EQUAL);
				setState(4111);
				match(DECIMAL);
				}
				break;
			}
			setState(4115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4114);
				match(COMMA);
				}
			}

			setState(4117);
			match(ADDRESS);
			setState(4118);
			match(EQUAL);
			setState(4119);
			_la = _input.LA(1);
			if ( !(_la==QUOTED_URL || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4120);
				match(COMMA);
				setState(4121);
				match(MIRROR_ADDRESS);
				setState(4122);
				match(EQUAL);
				setState(4123);
				_la = _input.LA(1);
				if ( !(_la==QUOTED_URL || _la==STRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_ruleContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext rule_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode RULE() { return getToken(TSqlParser.RULE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_rule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_rule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_ruleContext create_rule() throws RecognitionException {
		Create_ruleContext _localctx = new Create_ruleContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_create_rule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4126);
			match(CREATE);
			setState(4127);
			match(RULE);
			setState(4131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				setState(4128);
				((Create_ruleContext)_localctx).schema_name = id();
				setState(4129);
				match(DOT);
				}
				break;
			}
			setState(4133);
			((Create_ruleContext)_localctx).rule_name = id();
			setState(4134);
			match(AS);
			setState(4135);
			search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_sqlContext extends ParserRuleContext {
		public IdContext schema_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SCHEMA() { return getTokens(TSqlParser.SCHEMA); }
		public TerminalNode SCHEMA(int i) {
			return getToken(TSqlParser.SCHEMA, i);
		}
		public TerminalNode TRANSFER() { return getToken(TSqlParser.TRANSFER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Alter_schema_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_schema_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_schema_sql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_schema_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_schema_sqlContext alter_schema_sql() throws RecognitionException {
		Alter_schema_sqlContext _localctx = new Alter_schema_sqlContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_alter_schema_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4137);
			match(ALTER);
			setState(4138);
			match(SCHEMA);
			setState(4139);
			((Alter_schema_sqlContext)_localctx).schema_name = id();
			setState(4140);
			match(TRANSFER);
			setState(4150);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				{
				setState(4146);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OBJECT:
					{
					setState(4141);
					match(OBJECT);
					}
					break;
				case TYPE:
					{
					setState(4142);
					match(TYPE);
					}
					break;
				case XML:
					{
					setState(4143);
					match(XML);
					setState(4144);
					match(SCHEMA);
					setState(4145);
					match(COLLECTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4148);
				match(COLON);
				setState(4149);
				match(COLON);
				}
				break;
			}
			setState(4152);
			id();
			setState(4155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(4153);
				match(DOT);
				setState(4154);
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schemaContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext owner_name;
		public IdContext object_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<TerminalNode> SCHEMA() { return getTokens(TSqlParser.SCHEMA); }
		public TerminalNode SCHEMA(int i) {
			return getToken(TSqlParser.SCHEMA, i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<Create_tableContext> create_table() {
			return getRuleContexts(Create_tableContext.class);
		}
		public Create_tableContext create_table(int i) {
			return getRuleContext(Create_tableContext.class,i);
		}
		public List<Create_viewContext> create_view() {
			return getRuleContexts(Create_viewContext.class);
		}
		public Create_viewContext create_view(int i) {
			return getRuleContext(Create_viewContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public List<TerminalNode> REVOKE() { return getTokens(TSqlParser.REVOKE); }
		public TerminalNode REVOKE(int i) {
			return getToken(TSqlParser.REVOKE, i);
		}
		public List<TerminalNode> FROM() { return getTokens(TSqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(TSqlParser.FROM, i);
		}
		public List<TerminalNode> GRANT() { return getTokens(TSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(TSqlParser.GRANT, i);
		}
		public List<TerminalNode> DENY() { return getTokens(TSqlParser.DENY); }
		public TerminalNode DENY(int i) {
			return getToken(TSqlParser.DENY, i);
		}
		public List<TerminalNode> SELECT() { return getTokens(TSqlParser.SELECT); }
		public TerminalNode SELECT(int i) {
			return getToken(TSqlParser.SELECT, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(TSqlParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(TSqlParser.INSERT, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(TSqlParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(TSqlParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(TSqlParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(TSqlParser.UPDATE, i);
		}
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_schemaContext create_schema() throws RecognitionException {
		Create_schemaContext _localctx = new Create_schemaContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_create_schema);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4157);
			match(CREATE);
			setState(4158);
			match(SCHEMA);
			setState(4166);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(4159);
				((Create_schemaContext)_localctx).schema_name = id();
				}
				break;
			case 2:
				{
				setState(4160);
				match(AUTHORIZATION);
				setState(4161);
				((Create_schemaContext)_localctx).owner_name = id();
				}
				break;
			case 3:
				{
				setState(4162);
				((Create_schemaContext)_localctx).schema_name = id();
				setState(4163);
				match(AUTHORIZATION);
				setState(4164);
				((Create_schemaContext)_localctx).owner_name = id();
				}
				break;
			}
			setState(4196);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,452,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4194);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
					case 1:
						{
						setState(4168);
						create_table();
						}
						break;
					case 2:
						{
						setState(4169);
						create_view();
						}
						break;
					case 3:
						{
						setState(4170);
						_la = _input.LA(1);
						if ( !(_la==DENY || _la==GRANT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4171);
						_la = _input.LA(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4172);
						match(ON);
						setState(4176);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==SCHEMA) {
							{
							setState(4173);
							match(SCHEMA);
							setState(4174);
							match(COLON);
							setState(4175);
							match(COLON);
							}
						}

						setState(4178);
						((Create_schemaContext)_localctx).object_name = id();
						setState(4179);
						match(TO);
						setState(4180);
						((Create_schemaContext)_localctx).owner_name = id();
						}
						break;
					case 4:
						{
						setState(4182);
						match(REVOKE);
						setState(4183);
						_la = _input.LA(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4184);
						match(ON);
						setState(4188);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==SCHEMA) {
							{
							setState(4185);
							match(SCHEMA);
							setState(4186);
							match(COLON);
							setState(4187);
							match(COLON);
							}
						}

						setState(4190);
						((Create_schemaContext)_localctx).object_name = id();
						setState(4191);
						match(FROM);
						setState(4192);
						((Create_schemaContext)_localctx).owner_name = id();
						}
						break;
					}
					} 
				}
				setState(4198);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,452,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schema_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema_azure_sql_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_schema_azure_sql_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_schema_azure_sql_dw_and_pdw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_schema_azure_sql_dw_and_pdw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() throws RecognitionException {
		Create_schema_azure_sql_dw_and_pdwContext _localctx = new Create_schema_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_create_schema_azure_sql_dw_and_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4199);
			match(CREATE);
			setState(4200);
			match(SCHEMA);
			setState(4201);
			((Create_schema_azure_sql_dw_and_pdwContext)_localctx).schema_name = id();
			setState(4204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4202);
				match(AUTHORIZATION);
				setState(4203);
				((Create_schema_azure_sql_dw_and_pdwContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public IdContext schema_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode TRANSFER() { return getToken(TSqlParser.TRANSFER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public Alter_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_azure_sql_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_schema_azure_sql_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_schema_azure_sql_dw_and_pdw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_schema_azure_sql_dw_and_pdw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() throws RecognitionException {
		Alter_schema_azure_sql_dw_and_pdwContext _localctx = new Alter_schema_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_alter_schema_azure_sql_dw_and_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4206);
			match(ALTER);
			setState(4207);
			match(SCHEMA);
			setState(4208);
			((Alter_schema_azure_sql_dw_and_pdwContext)_localctx).schema_name = id();
			setState(4209);
			match(TRANSFER);
			setState(4213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OBJECT) {
				{
				setState(4210);
				match(OBJECT);
				setState(4211);
				match(COLON);
				setState(4212);
				match(COLON);
				}
			}

			setState(4215);
			id();
			setState(4218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(4216);
				match(DOT);
				setState(4217);
				match(ID);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_search_property_listContext extends ParserRuleContext {
		public IdContext new_list_name;
		public IdContext database_name;
		public IdContext source_list_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_search_property_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_search_property_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_search_property_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_search_property_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_search_property_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_search_property_listContext create_search_property_list() throws RecognitionException {
		Create_search_property_listContext _localctx = new Create_search_property_listContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_create_search_property_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4220);
			match(CREATE);
			setState(4221);
			match(SEARCH);
			setState(4222);
			match(PROPERTY);
			setState(4223);
			match(LIST);
			setState(4224);
			((Create_search_property_listContext)_localctx).new_list_name = id();
			setState(4232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4225);
				match(FROM);
				setState(4229);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
				case 1:
					{
					setState(4226);
					((Create_search_property_listContext)_localctx).database_name = id();
					setState(4227);
					match(DOT);
					}
					break;
				}
				setState(4231);
				((Create_search_property_listContext)_localctx).source_list_name = id();
				}
			}

			setState(4236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4234);
				match(AUTHORIZATION);
				setState(4235);
				((Create_search_property_listContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_security_policyContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext security_policy_name;
		public IdContext tvf_schema_name;
		public IdContext security_predicate_function_name;
		public IdContext column_name_or_arguments;
		public IdContext table_schema_name;
		public IdContext name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SECURITY() { return getToken(TSqlParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(TSqlParser.POLICY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> PREDICATE() { return getTokens(TSqlParser.PREDICATE); }
		public TerminalNode PREDICATE(int i) {
			return getToken(TSqlParser.PREDICATE, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(TSqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(TSqlParser.AFTER, i);
		}
		public List<TerminalNode> BEFORE() { return getTokens(TSqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(TSqlParser.BEFORE, i);
		}
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public List<TerminalNode> FILTER() { return getTokens(TSqlParser.FILTER); }
		public TerminalNode FILTER(int i) {
			return getToken(TSqlParser.FILTER, i);
		}
		public List<TerminalNode> BLOCK() { return getTokens(TSqlParser.BLOCK); }
		public TerminalNode BLOCK(int i) {
			return getToken(TSqlParser.BLOCK, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(TSqlParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(TSqlParser.INSERT, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(TSqlParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(TSqlParser.UPDATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(TSqlParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(TSqlParser.DELETE, i);
		}
		public Create_security_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_security_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_security_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_security_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_security_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_security_policyContext create_security_policy() throws RecognitionException {
		Create_security_policyContext _localctx = new Create_security_policyContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_create_security_policy);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4238);
			match(CREATE);
			setState(4239);
			match(SECURITY);
			setState(4240);
			match(POLICY);
			setState(4244);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				setState(4241);
				((Create_security_policyContext)_localctx).schema_name = id();
				setState(4242);
				match(DOT);
				}
				break;
			}
			setState(4246);
			((Create_security_policyContext)_localctx).security_policy_name = id();
			setState(4287); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4248);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4247);
					match(COMMA);
					}
				}

				setState(4250);
				match(ADD);
				setState(4252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BLOCK || _la==FILTER) {
					{
					setState(4251);
					_la = _input.LA(1);
					if ( !(_la==BLOCK || _la==FILTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4254);
				match(PREDICATE);
				setState(4255);
				((Create_security_policyContext)_localctx).tvf_schema_name = id();
				setState(4256);
				match(DOT);
				setState(4257);
				((Create_security_policyContext)_localctx).security_predicate_function_name = id();
				setState(4258);
				match(LR_BRACKET);
				setState(4263); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4260);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4259);
						match(COMMA);
						}
					}

					setState(4262);
					((Create_security_policyContext)_localctx).column_name_or_arguments = id();
					}
					}
					setState(4265); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (DATA_COMPRESSION - 80)) | (1L << (EVENTDATA - 80)) | (1L << (FILENAME - 80)) | (1L << (FILLFACTOR - 80)) | (1L << (FORCESEEK - 80)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KEY - 169)) | (1L << (MASTER - 169)) | (1L << (MAX_MEMORY - 169)) | (1L << (OFFSETS - 169)))) != 0) || ((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (PAGE - 238)) | (1L << (PUBLIC - 238)) | (1L << (RAW - 238)) | (1L << (RETURN - 238)) | (1L << (RETURNS - 238)) | (1L << (ROWCOUNT - 238)) | (1L << (SAFETY - 238)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (SERVER - 308)) | (1L << (SID - 308)) | (1L << (SOURCE - 308)) | (1L << (STATE - 308)) | (1L << (TARGET - 308)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (ABSOLUTE - 382)) | (1L << (ACTIVE - 382)) | (1L << (ADDRESS - 382)) | (1L << (APPLY - 382)) | (1L << (AUTO - 382)) | (1L << (AVAILABILITY - 382)) | (1L << (AVG - 382)) | (1L << (CALLER - 382)) | (1L << (CAST - 382)) | (1L << (CATCH - 382)) | (1L << (CHECKSUM_AGG - 382)) | (1L << (COMMITTED - 382)) | (1L << (CONCAT - 382)) | (1L << (CONCAT_NULL_YIELDS_NULL - 382)) | (1L << (CONTROL - 382)) | (1L << (COOKIE - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (COUNT - 446)) | (1L << (COUNTER - 446)) | (1L << (COUNT_BIG - 446)) | (1L << (DELAY - 446)) | (1L << (DELETED - 446)) | (1L << (DENSE_RANK - 446)) | (1L << (DISABLE - 446)) | (1L << (DYNAMIC - 446)) | (1L << (ENCRYPTION - 446)) | (1L << (EXPAND - 446)) | (1L << (FAST - 446)) | (1L << (FAST_FORWARD - 446)) | (1L << (FIRST - 446)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCED - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (GLOBAL - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HASH - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (ISOLATION - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEYSET - 511)) | (1L << (LAST - 511)) | (1L << (LEVEL - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (MARK - 511)) | (1L << (MAX - 511)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MIN - 579)) | (1L << (MODIFY - 579)) | (1L << (NAME - 579)) | (1L << (NEXT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NTILE - 579)) | (1L << (NUMBER - 579)) | (1L << (OFFSET - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)) | (1L << (OUTPUT - 579)) | (1L << (OWNER - 579)) | (1L << (PARAMETERIZATION - 579)) | (1L << (PARTITION - 579)) | (1L << (PATH - 579)) | (1L << (PRECEDING - 579)) | (1L << (PRIOR - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PRIVILEGES - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (READONLY - 643)) | (1L << (READ_ONLY - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROW - 643)) | (1L << (ROWGUID - 643)) | (1L << (ROWS - 643)) | (1L << (ROW_NUMBER - 643)) | (1L << (SAMPLE - 643)) | (1L << (SCHEMABINDING - 643)) | (1L << (SCROLL - 643)) | (1L << (SCROLL_LOCKS - 643)) | (1L << (SELF - 643)) | (1L << (SERIALIZABLE - 643)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (SIMPLE - 711)) | (1L << (SIZE - 711)) | (1L << (SNAPSHOT - 711)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 711)) | (1L << (STATIC - 711)) | (1L << (STATS_STREAM - 711)) | (1L << (STDEV - 711)) | (1L << (STDEVP - 711)) | (1L << (SUM - 711)) | (1L << (TEXTIMAGE_ON - 711)) | (1L << (THROW - 711)) | (1L << (TIES - 711)) | (1L << (TIME - 711)) | (1L << (TRY - 711)) | (1L << (TYPE - 711)) | (1L << (TYPE_WARNING - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNKNOWN - 711)) | (1L << (USING - 711)) | (1L << (VALUE - 711)) | (1L << (VAR - 711)) | (1L << (VARP - 711)) | (1L << (VIEWS - 711)) | (1L << (VIEW_METADATA - 711)) | (1L << (WORK - 711)) | (1L << (XML - 711)) | (1L << (XMLNAMESPACES - 711)) | (1L << (DOUBLE_QUOTE_ID - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (SQUARE_BRACKET_ID - 775)) | (1L << (ID - 775)) | (1L << (COMMA - 775)))) != 0) );
				setState(4267);
				match(RR_BRACKET);
				setState(4268);
				match(ON);
				setState(4269);
				((Create_security_policyContext)_localctx).table_schema_name = id();
				setState(4270);
				match(DOT);
				setState(4271);
				((Create_security_policyContext)_localctx).name = id();
				setState(4284);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,467,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(4282);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
						case 1:
							{
							setState(4273);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4272);
								match(COMMA);
								}
							}

							setState(4275);
							match(AFTER);
							setState(4276);
							_la = _input.LA(1);
							if ( !(_la==INSERT || _la==UPDATE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 2:
							{
							setState(4278);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4277);
								match(COMMA);
								}
							}

							setState(4280);
							match(BEFORE);
							setState(4281);
							_la = _input.LA(1);
							if ( !(_la==DELETE || _la==UPDATE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						} 
					}
					setState(4286);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,467,_ctx);
				}
				}
				}
				setState(4289); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ADD || _la==COMMA );
			setState(4301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				setState(4291);
				match(WITH);
				setState(4292);
				match(LR_BRACKET);
				setState(4293);
				match(STATE);
				setState(4294);
				match(EQUAL);
				setState(4295);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCHEMABINDING) {
					{
					setState(4296);
					match(SCHEMABINDING);
					setState(4297);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4300);
				match(RR_BRACKET);
				}
				break;
			}
			setState(4306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4303);
				match(NOT);
				setState(4304);
				match(FOR);
				setState(4305);
				match(REPLICATION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext sequence_name;
		public Token sequnce_increment;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSqlParser.SEQUENCE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode RESTART() { return getToken(TSqlParser.RESTART, 0); }
		public TerminalNode INCREMENT() { return getToken(TSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(TSqlParser.MINVALUE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> NO() { return getTokens(TSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(TSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(TSqlParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(TSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(TSqlParser.CACHE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4308);
			match(ALTER);
			setState(4309);
			match(SEQUENCE);
			setState(4313);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
			case 1:
				{
				setState(4310);
				((Alter_sequenceContext)_localctx).schema_name = id();
				setState(4311);
				match(DOT);
				}
				break;
			}
			setState(4315);
			((Alter_sequenceContext)_localctx).sequence_name = id();
			setState(4321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTART) {
				{
				setState(4316);
				match(RESTART);
				setState(4319);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
				case 1:
					{
					setState(4317);
					match(WITH);
					setState(4318);
					match(DECIMAL);
					}
					break;
				}
				}
			}

			setState(4326);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCREMENT) {
				{
				setState(4323);
				match(INCREMENT);
				setState(4324);
				match(BY);
				setState(4325);
				((Alter_sequenceContext)_localctx).sequnce_increment = match(DECIMAL);
				}
			}

			setState(4332);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				{
				setState(4328);
				match(MINVALUE);
				setState(4329);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(4330);
				match(NO);
				setState(4331);
				match(MINVALUE);
				}
				break;
			}
			setState(4338);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				{
				setState(4334);
				match(MAXVALUE);
				setState(4335);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(4336);
				match(NO);
				setState(4337);
				match(MAXVALUE);
				}
				break;
			}
			setState(4343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				setState(4340);
				match(CYCLE);
				}
				break;
			case 2:
				{
				setState(4341);
				match(NO);
				setState(4342);
				match(CYCLE);
				}
				break;
			}
			setState(4349);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CACHE:
				{
				setState(4345);
				match(CACHE);
				setState(4346);
				match(DECIMAL);
				}
				break;
			case NO:
				{
				setState(4347);
				match(NO);
				setState(4348);
				match(CACHE);
				}
				break;
			case EOF:
			case ALTER:
			case BEGIN:
			case BREAK:
			case CALLED:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DATA_COMPRESSION:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DROP:
			case ELSE:
			case END:
			case EVENTDATA:
			case EXECUTE:
			case FETCH:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case GET:
			case GOTO:
			case GRANT:
			case IF:
			case INSERT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case MERGE:
			case OFFSETS:
			case OPEN:
			case PAGE:
			case PRINT:
			case PUBLIC:
			case RAISERROR:
			case RAW:
			case RETURN:
			case RETURNS:
			case REVERT:
			case ROLLBACK:
			case ROWCOUNT:
			case SAFETY:
			case SAVE:
			case SELECT:
			case SERVER:
			case SET:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case TRUNCATE:
			case UPDATE:
			case USE:
			case WAITFOR:
			case WHILE:
			case WITH:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SEND:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext sequence_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSqlParser.SEQUENCE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode START() { return getToken(TSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode INCREMENT() { return getToken(TSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(TSqlParser.MINVALUE, 0); }
		public List<TerminalNode> NO() { return getTokens(TSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(TSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(TSqlParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(TSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(TSqlParser.CACHE, 0); }
		public TerminalNode MINUS() { return getToken(TSqlParser.MINUS, 0); }
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4351);
			match(CREATE);
			setState(4352);
			match(SEQUENCE);
			setState(4356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				{
				setState(4353);
				((Create_sequenceContext)_localctx).schema_name = id();
				setState(4354);
				match(DOT);
				}
				break;
			}
			setState(4358);
			((Create_sequenceContext)_localctx).sequence_name = id();
			setState(4361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4359);
				match(AS);
				setState(4360);
				data_type();
				}
			}

			setState(4366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==START) {
				{
				setState(4363);
				match(START);
				setState(4364);
				match(WITH);
				setState(4365);
				match(DECIMAL);
				}
			}

			setState(4374);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCREMENT) {
				{
				setState(4368);
				match(INCREMENT);
				setState(4369);
				match(BY);
				setState(4371);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4370);
					match(MINUS);
					}
				}

				setState(4373);
				match(DECIMAL);
				}
			}

			setState(4382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				setState(4376);
				match(MINVALUE);
				setState(4378);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(4377);
					match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				setState(4380);
				match(NO);
				setState(4381);
				match(MINVALUE);
				}
				break;
			}
			setState(4390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(4384);
				match(MAXVALUE);
				setState(4386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(4385);
					match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				setState(4388);
				match(NO);
				setState(4389);
				match(MAXVALUE);
				}
				break;
			}
			setState(4395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				{
				setState(4392);
				match(CYCLE);
				}
				break;
			case 2:
				{
				setState(4393);
				match(NO);
				setState(4394);
				match(CYCLE);
				}
				break;
			}
			setState(4403);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CACHE:
				{
				setState(4397);
				match(CACHE);
				setState(4399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(4398);
					match(DECIMAL);
					}
				}

				}
				break;
			case NO:
				{
				setState(4401);
				match(NO);
				setState(4402);
				match(CACHE);
				}
				break;
			case EOF:
			case ALTER:
			case BEGIN:
			case BREAK:
			case CALLED:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DATA_COMPRESSION:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DROP:
			case ELSE:
			case END:
			case EVENTDATA:
			case EXECUTE:
			case FETCH:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case GET:
			case GOTO:
			case GRANT:
			case IF:
			case INSERT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case MERGE:
			case OFFSETS:
			case OPEN:
			case PAGE:
			case PRINT:
			case PUBLIC:
			case RAISERROR:
			case RAW:
			case RETURN:
			case RETURNS:
			case REVERT:
			case ROLLBACK:
			case ROWCOUNT:
			case SAFETY:
			case SAVE:
			case SELECT:
			case SERVER:
			case SET:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case TRUNCATE:
			case UPDATE:
			case USE:
			case WAITFOR:
			case WHILE:
			case WITH:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SEND:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_auditContext extends ParserRuleContext {
		public IdContext audit_name;
		public Token filepath;
		public Token max_rollover_files;
		public Token max_files;
		public Token queue_delay;
		public IdContext event_field_name;
		public IdContext new_audit_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(TSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(TSqlParser.SECURITY_LOG, 0); }
		public List<TerminalNode> QUEUE_DELAY() { return getTokens(TSqlParser.QUEUE_DELAY); }
		public TerminalNode QUEUE_DELAY(int i) {
			return getToken(TSqlParser.QUEUE_DELAY, i);
		}
		public List<TerminalNode> ON_FAILURE() { return getTokens(TSqlParser.ON_FAILURE); }
		public TerminalNode ON_FAILURE(int i) {
			return getToken(TSqlParser.ON_FAILURE, i);
		}
		public List<TerminalNode> STATE() { return getTokens(TSqlParser.STATE); }
		public TerminalNode STATE(int i) {
			return getToken(TSqlParser.STATE, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public List<TerminalNode> CONTINUE() { return getTokens(TSqlParser.CONTINUE); }
		public TerminalNode CONTINUE(int i) {
			return getToken(TSqlParser.CONTINUE, i);
		}
		public List<TerminalNode> SHUTDOWN() { return getTokens(TSqlParser.SHUTDOWN); }
		public TerminalNode SHUTDOWN(int i) {
			return getToken(TSqlParser.SHUTDOWN, i);
		}
		public List<TerminalNode> FAIL_OPERATION() { return getTokens(TSqlParser.FAIL_OPERATION); }
		public TerminalNode FAIL_OPERATION(int i) {
			return getToken(TSqlParser.FAIL_OPERATION, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode GREATER() { return getToken(TSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSqlParser.LESS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION() { return getToken(TSqlParser.EXCLAMATION, 0); }
		public List<TerminalNode> FILEPATH() { return getTokens(TSqlParser.FILEPATH); }
		public TerminalNode FILEPATH(int i) {
			return getToken(TSqlParser.FILEPATH, i);
		}
		public List<TerminalNode> MAXSIZE() { return getTokens(TSqlParser.MAXSIZE); }
		public TerminalNode MAXSIZE(int i) {
			return getToken(TSqlParser.MAXSIZE, i);
		}
		public List<TerminalNode> MAX_ROLLOVER_FILES() { return getTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public TerminalNode MAX_ROLLOVER_FILES(int i) {
			return getToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public List<TerminalNode> MAX_FILES() { return getTokens(TSqlParser.MAX_FILES); }
		public TerminalNode MAX_FILES(int i) {
			return getToken(TSqlParser.MAX_FILES, i);
		}
		public List<TerminalNode> RESERVE_DISK_SPACE() { return getTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public TerminalNode RESERVE_DISK_SPACE(int i) {
			return getToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(TSqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(TSqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSqlParser.MB, i);
		}
		public List<TerminalNode> GB() { return getTokens(TSqlParser.GB); }
		public TerminalNode GB(int i) {
			return getToken(TSqlParser.GB, i);
		}
		public List<TerminalNode> TB() { return getTokens(TSqlParser.TB); }
		public TerminalNode TB(int i) {
			return getToken(TSqlParser.TB, i);
		}
		public Alter_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_audit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_server_audit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_auditContext alter_server_audit() throws RecognitionException {
		Alter_server_auditContext _localctx = new Alter_server_auditContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_alter_server_audit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4405);
			match(ALTER);
			setState(4406);
			match(SERVER);
			setState(4407);
			match(AUDIT);
			setState(4408);
			((Alter_server_auditContext)_localctx).audit_name = id();
			setState(4540);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
			case 1:
				{
				setState(4456);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4409);
					match(TO);
					setState(4454);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(4410);
						match(FILE);
						{
						setState(4411);
						match(LR_BRACKET);
						setState(4448);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==FILEPATH || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (MAX_FILES - 572)) | (1L << (MAX_ROLLOVER_FILES - 572)) | (1L << (MAXSIZE - 572)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							setState(4446);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
							case 1:
								{
								setState(4413);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4412);
									match(COMMA);
									}
								}

								setState(4415);
								match(FILEPATH);
								setState(4416);
								match(EQUAL);
								setState(4417);
								((Alter_server_auditContext)_localctx).filepath = match(STRING);
								}
								break;
							case 2:
								{
								setState(4419);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4418);
									match(COMMA);
									}
								}

								setState(4421);
								match(MAXSIZE);
								setState(4422);
								match(EQUAL);
								setState(4426);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(4423);
									match(DECIMAL);
									setState(4424);
									_la = _input.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									break;
								case UNLIMITED:
									{
									setState(4425);
									match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(4429);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4428);
									match(COMMA);
									}
								}

								setState(4431);
								match(MAX_ROLLOVER_FILES);
								setState(4432);
								match(EQUAL);
								setState(4433);
								((Alter_server_auditContext)_localctx).max_rollover_files = _input.LT(1);
								_la = _input.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									((Alter_server_auditContext)_localctx).max_rollover_files = (Token)_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							case 4:
								{
								setState(4435);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4434);
									match(COMMA);
									}
								}

								setState(4437);
								match(MAX_FILES);
								setState(4438);
								match(EQUAL);
								setState(4439);
								((Alter_server_auditContext)_localctx).max_files = match(DECIMAL);
								}
								break;
							case 5:
								{
								setState(4441);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4440);
									match(COMMA);
									}
								}

								setState(4443);
								match(RESERVE_DISK_SPACE);
								setState(4444);
								match(EQUAL);
								setState(4445);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							}
							setState(4450);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4451);
						match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						setState(4452);
						match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						setState(4453);
						match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4484);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
				case 1:
					{
					setState(4458);
					match(WITH);
					setState(4459);
					match(LR_BRACKET);
					setState(4480);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==ON_FAILURE || _la==STATE || _la==QUEUE_DELAY || _la==COMMA) {
						{
						setState(4478);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
						case 1:
							{
							setState(4461);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4460);
								match(COMMA);
								}
							}

							setState(4463);
							match(QUEUE_DELAY);
							setState(4464);
							match(EQUAL);
							setState(4465);
							((Alter_server_auditContext)_localctx).queue_delay = match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(4467);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4466);
								match(COMMA);
								}
							}

							setState(4469);
							match(ON_FAILURE);
							setState(4470);
							match(EQUAL);
							setState(4471);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 3:
							{
							setState(4473);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4472);
								match(COMMA);
								}
							}

							setState(4475);
							match(STATE);
							setState(4476);
							match(EQUAL);
							setState(4477);
							_la = _input.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						}
						setState(4482);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4483);
					match(RR_BRACKET);
					}
					break;
				}
				setState(4532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4486);
					match(WHERE);
					setState(4530);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
					case 1:
						{
						setState(4488);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4487);
							match(COMMA);
							}
						}

						{
						setState(4491);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4490);
							match(NOT);
							}
						}

						}
						setState(4493);
						((Alter_server_auditContext)_localctx).event_field_name = id();
						setState(4505);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
						case 1:
							{
							setState(4494);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4495);
							match(LESS);
							setState(4496);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4497);
							match(EXCLAMATION);
							setState(4498);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4499);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4500);
							match(GREATER);
							setState(4501);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4502);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4503);
							match(LESS);
							setState(4504);
							match(EQUAL);
							}
							break;
						}
						setState(4507);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(4510);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4509);
							match(COMMA);
							}
						}

						setState(4512);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4514);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4513);
							match(NOT);
							}
						}

						setState(4527);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
						case 1:
							{
							setState(4516);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4517);
							match(LESS);
							setState(4518);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4519);
							match(EXCLAMATION);
							setState(4520);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4521);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4522);
							match(GREATER);
							setState(4523);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4524);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4525);
							match(LESS);
							setState(4526);
							match(EQUAL);
							}
							break;
						}
						setState(4529);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 2:
				{
				setState(4534);
				match(REMOVE);
				setState(4535);
				match(WHERE);
				}
				break;
			case 3:
				{
				setState(4536);
				match(MODIFY);
				setState(4537);
				match(NAME);
				setState(4538);
				match(EQUAL);
				setState(4539);
				((Alter_server_auditContext)_localctx).new_audit_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_auditContext extends ParserRuleContext {
		public IdContext audit_name;
		public Token filepath;
		public Token max_rollover_files;
		public Token max_files;
		public Token queue_delay;
		public IdContext audit_guid;
		public IdContext event_field_name;
		public IdContext new_audit_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(TSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(TSqlParser.SECURITY_LOG, 0); }
		public List<TerminalNode> QUEUE_DELAY() { return getTokens(TSqlParser.QUEUE_DELAY); }
		public TerminalNode QUEUE_DELAY(int i) {
			return getToken(TSqlParser.QUEUE_DELAY, i);
		}
		public List<TerminalNode> ON_FAILURE() { return getTokens(TSqlParser.ON_FAILURE); }
		public TerminalNode ON_FAILURE(int i) {
			return getToken(TSqlParser.ON_FAILURE, i);
		}
		public List<TerminalNode> STATE() { return getTokens(TSqlParser.STATE); }
		public TerminalNode STATE(int i) {
			return getToken(TSqlParser.STATE, i);
		}
		public List<TerminalNode> AUDIT_GUID() { return getTokens(TSqlParser.AUDIT_GUID); }
		public TerminalNode AUDIT_GUID(int i) {
			return getToken(TSqlParser.AUDIT_GUID, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public List<TerminalNode> CONTINUE() { return getTokens(TSqlParser.CONTINUE); }
		public TerminalNode CONTINUE(int i) {
			return getToken(TSqlParser.CONTINUE, i);
		}
		public List<TerminalNode> SHUTDOWN() { return getTokens(TSqlParser.SHUTDOWN); }
		public TerminalNode SHUTDOWN(int i) {
			return getToken(TSqlParser.SHUTDOWN, i);
		}
		public List<TerminalNode> FAIL_OPERATION() { return getTokens(TSqlParser.FAIL_OPERATION); }
		public TerminalNode FAIL_OPERATION(int i) {
			return getToken(TSqlParser.FAIL_OPERATION, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode GREATER() { return getToken(TSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSqlParser.LESS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION() { return getToken(TSqlParser.EXCLAMATION, 0); }
		public List<TerminalNode> FILEPATH() { return getTokens(TSqlParser.FILEPATH); }
		public TerminalNode FILEPATH(int i) {
			return getToken(TSqlParser.FILEPATH, i);
		}
		public List<TerminalNode> MAXSIZE() { return getTokens(TSqlParser.MAXSIZE); }
		public TerminalNode MAXSIZE(int i) {
			return getToken(TSqlParser.MAXSIZE, i);
		}
		public List<TerminalNode> MAX_ROLLOVER_FILES() { return getTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public TerminalNode MAX_ROLLOVER_FILES(int i) {
			return getToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public List<TerminalNode> MAX_FILES() { return getTokens(TSqlParser.MAX_FILES); }
		public TerminalNode MAX_FILES(int i) {
			return getToken(TSqlParser.MAX_FILES, i);
		}
		public List<TerminalNode> RESERVE_DISK_SPACE() { return getTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public TerminalNode RESERVE_DISK_SPACE(int i) {
			return getToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(TSqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(TSqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSqlParser.MB, i);
		}
		public List<TerminalNode> GB() { return getTokens(TSqlParser.GB); }
		public TerminalNode GB(int i) {
			return getToken(TSqlParser.GB, i);
		}
		public List<TerminalNode> TB() { return getTokens(TSqlParser.TB); }
		public TerminalNode TB(int i) {
			return getToken(TSqlParser.TB, i);
		}
		public Create_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_server_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_server_audit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_server_audit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_server_auditContext create_server_audit() throws RecognitionException {
		Create_server_auditContext _localctx = new Create_server_auditContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_create_server_audit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4542);
			match(CREATE);
			setState(4543);
			match(SERVER);
			setState(4544);
			match(AUDIT);
			setState(4545);
			((Create_server_auditContext)_localctx).audit_name = id();
			setState(4683);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				{
				setState(4593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4546);
					match(TO);
					setState(4591);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(4547);
						match(FILE);
						{
						setState(4548);
						match(LR_BRACKET);
						setState(4585);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==FILEPATH || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (MAX_FILES - 572)) | (1L << (MAX_ROLLOVER_FILES - 572)) | (1L << (MAXSIZE - 572)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							setState(4583);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
							case 1:
								{
								setState(4550);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4549);
									match(COMMA);
									}
								}

								setState(4552);
								match(FILEPATH);
								setState(4553);
								match(EQUAL);
								setState(4554);
								((Create_server_auditContext)_localctx).filepath = match(STRING);
								}
								break;
							case 2:
								{
								setState(4556);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4555);
									match(COMMA);
									}
								}

								setState(4558);
								match(MAXSIZE);
								setState(4559);
								match(EQUAL);
								setState(4563);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(4560);
									match(DECIMAL);
									setState(4561);
									_la = _input.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									break;
								case UNLIMITED:
									{
									setState(4562);
									match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(4566);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4565);
									match(COMMA);
									}
								}

								setState(4568);
								match(MAX_ROLLOVER_FILES);
								setState(4569);
								match(EQUAL);
								setState(4570);
								((Create_server_auditContext)_localctx).max_rollover_files = _input.LT(1);
								_la = _input.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									((Create_server_auditContext)_localctx).max_rollover_files = (Token)_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							case 4:
								{
								setState(4572);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4571);
									match(COMMA);
									}
								}

								setState(4574);
								match(MAX_FILES);
								setState(4575);
								match(EQUAL);
								setState(4576);
								((Create_server_auditContext)_localctx).max_files = match(DECIMAL);
								}
								break;
							case 5:
								{
								setState(4578);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4577);
									match(COMMA);
									}
								}

								setState(4580);
								match(RESERVE_DISK_SPACE);
								setState(4581);
								match(EQUAL);
								setState(4582);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							}
							setState(4587);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4588);
						match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						setState(4589);
						match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						setState(4590);
						match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4627);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
				case 1:
					{
					setState(4595);
					match(WITH);
					setState(4596);
					match(LR_BRACKET);
					setState(4623);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==ON_FAILURE || _la==STATE || _la==AUDIT_GUID || _la==QUEUE_DELAY || _la==COMMA) {
						{
						setState(4621);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
						case 1:
							{
							setState(4598);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4597);
								match(COMMA);
								}
							}

							setState(4600);
							match(QUEUE_DELAY);
							setState(4601);
							match(EQUAL);
							setState(4602);
							((Create_server_auditContext)_localctx).queue_delay = match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(4604);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4603);
								match(COMMA);
								}
							}

							setState(4606);
							match(ON_FAILURE);
							setState(4607);
							match(EQUAL);
							setState(4608);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 3:
							{
							setState(4610);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4609);
								match(COMMA);
								}
							}

							setState(4612);
							match(STATE);
							setState(4613);
							match(EQUAL);
							setState(4614);
							_la = _input.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 4:
							{
							setState(4616);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4615);
								match(COMMA);
								}
							}

							setState(4618);
							match(AUDIT_GUID);
							setState(4619);
							match(EQUAL);
							setState(4620);
							((Create_server_auditContext)_localctx).audit_guid = id();
							}
							break;
						}
						}
						setState(4625);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4626);
					match(RR_BRACKET);
					}
					break;
				}
				setState(4675);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4629);
					match(WHERE);
					setState(4673);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
					case 1:
						{
						setState(4631);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4630);
							match(COMMA);
							}
						}

						{
						setState(4634);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4633);
							match(NOT);
							}
						}

						}
						setState(4636);
						((Create_server_auditContext)_localctx).event_field_name = id();
						setState(4648);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
						case 1:
							{
							setState(4637);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4638);
							match(LESS);
							setState(4639);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4640);
							match(EXCLAMATION);
							setState(4641);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4642);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4643);
							match(GREATER);
							setState(4644);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4645);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4646);
							match(LESS);
							setState(4647);
							match(EQUAL);
							}
							break;
						}
						setState(4650);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(4653);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4652);
							match(COMMA);
							}
						}

						setState(4655);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4657);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4656);
							match(NOT);
							}
						}

						setState(4670);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
						case 1:
							{
							setState(4659);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4660);
							match(LESS);
							setState(4661);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4662);
							match(EXCLAMATION);
							setState(4663);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4664);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4665);
							match(GREATER);
							setState(4666);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4667);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4668);
							match(LESS);
							setState(4669);
							match(EQUAL);
							}
							break;
						}
						setState(4672);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 2:
				{
				setState(4677);
				match(REMOVE);
				setState(4678);
				match(WHERE);
				}
				break;
			case 3:
				{
				setState(4679);
				match(MODIFY);
				setState(4680);
				match(NAME);
				setState(4681);
				match(EQUAL);
				setState(4682);
				((Create_server_auditContext)_localctx).new_audit_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public IdContext audit_name;
		public IdContext audit_action_group_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SERVER() { return getTokens(TSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSqlParser.SERVER, i);
		}
		public List<TerminalNode> AUDIT() { return getTokens(TSqlParser.AUDIT); }
		public TerminalNode AUDIT(int i) {
			return getToken(TSqlParser.AUDIT, i);
		}
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(TSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(TSqlParser.DROP, i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Alter_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_audit_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_server_audit_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_audit_specificationContext alter_server_audit_specification() throws RecognitionException {
		Alter_server_audit_specificationContext _localctx = new Alter_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_alter_server_audit_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4685);
			match(ALTER);
			setState(4686);
			match(SERVER);
			setState(4687);
			match(AUDIT);
			setState(4688);
			match(SPECIFICATION);
			setState(4689);
			((Alter_server_audit_specificationContext)_localctx).audit_specification_name = id();
			setState(4694);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4690);
				match(FOR);
				setState(4691);
				match(SERVER);
				setState(4692);
				match(AUDIT);
				setState(4693);
				((Alter_server_audit_specificationContext)_localctx).audit_name = id();
				}
			}

			setState(4703);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,544,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4696);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4697);
					match(LR_BRACKET);
					setState(4698);
					((Alter_server_audit_specificationContext)_localctx).audit_action_group_name = id();
					setState(4699);
					match(RR_BRACKET);
					}
					} 
				}
				setState(4705);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,544,_ctx);
			}
			setState(4712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
			case 1:
				{
				setState(4706);
				match(WITH);
				setState(4707);
				match(LR_BRACKET);
				setState(4708);
				match(STATE);
				setState(4709);
				match(EQUAL);
				setState(4710);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4711);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public IdContext audit_name;
		public IdContext audit_action_group_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<TerminalNode> SERVER() { return getTokens(TSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSqlParser.SERVER, i);
		}
		public List<TerminalNode> AUDIT() { return getTokens(TSqlParser.AUDIT); }
		public TerminalNode AUDIT(int i) {
			return getToken(TSqlParser.AUDIT, i);
		}
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_server_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_server_audit_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_server_audit_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_server_audit_specificationContext create_server_audit_specification() throws RecognitionException {
		Create_server_audit_specificationContext _localctx = new Create_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_create_server_audit_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4714);
			match(CREATE);
			setState(4715);
			match(SERVER);
			setState(4716);
			match(AUDIT);
			setState(4717);
			match(SPECIFICATION);
			setState(4718);
			((Create_server_audit_specificationContext)_localctx).audit_specification_name = id();
			setState(4723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4719);
				match(FOR);
				setState(4720);
				match(SERVER);
				setState(4721);
				match(AUDIT);
				setState(4722);
				((Create_server_audit_specificationContext)_localctx).audit_name = id();
				}
			}

			setState(4732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ADD) {
				{
				{
				setState(4725);
				match(ADD);
				setState(4726);
				match(LR_BRACKET);
				setState(4727);
				((Create_server_audit_specificationContext)_localctx).audit_action_group_name = id();
				setState(4728);
				match(RR_BRACKET);
				}
				}
				setState(4734);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4741);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				{
				setState(4735);
				match(WITH);
				setState(4736);
				match(LR_BRACKET);
				setState(4737);
				match(STATE);
				setState(4738);
				match(EQUAL);
				setState(4739);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4740);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_configurationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode CONFIGURATION() { return getToken(TSqlParser.CONFIGURATION, 0); }
		public List<TerminalNode> SET() { return getTokens(TSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(TSqlParser.SET, i);
		}
		public TerminalNode PROCESS() { return getToken(TSqlParser.PROCESS, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(TSqlParser.DIAGNOSTICS, 0); }
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode FAILOVER() { return getToken(TSqlParser.FAILOVER, 0); }
		public TerminalNode CLUSTER() { return getToken(TSqlParser.CLUSTER, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode HADR() { return getToken(TSqlParser.HADR, 0); }
		public TerminalNode CONTEXT() { return getToken(TSqlParser.CONTEXT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode BUFFER() { return getToken(TSqlParser.BUFFER, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode EXTENSION() { return getToken(TSqlParser.EXTENSION, 0); }
		public TerminalNode SOFTNUMA() { return getToken(TSqlParser.SOFTNUMA, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode MAX_SIZE() { return getToken(TSqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_FILES() { return getToken(TSqlParser.MAX_FILES, 0); }
		public TerminalNode VERBOSELOGGING() { return getToken(TSqlParser.VERBOSELOGGING, 0); }
		public TerminalNode SQLDUMPERFLAGS() { return getToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public TerminalNode SQLDUMPERPATH() { return getToken(TSqlParser.SQLDUMPERPATH, 0); }
		public TerminalNode SQLDUMPERTIMEOUT() { return getToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public TerminalNode FAILURECONDITIONLEVEL() { return getToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public TerminalNode HEALTHCHECKTIMEOUT() { return getToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode FILENAME() { return getToken(TSqlParser.FILENAME, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode KB() { return getToken(TSqlParser.KB, 0); }
		public TerminalNode MB() { return getToken(TSqlParser.MB, 0); }
		public TerminalNode GB() { return getToken(TSqlParser.GB, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Alter_server_configurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_configuration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_configuration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_configuration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_server_configuration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_configurationContext alter_server_configuration() throws RecognitionException {
		Alter_server_configurationContext _localctx = new Alter_server_configurationContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_alter_server_configuration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4743);
			match(ALTER);
			setState(4744);
			match(SERVER);
			setState(4745);
			match(CONFIGURATION);
			setState(4746);
			match(SET);
			{
			setState(4852);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCESS:
				{
				setState(4747);
				match(PROCESS);
				setState(4748);
				match(AFFINITY);
				setState(4784);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CPU:
					{
					setState(4749);
					match(CPU);
					setState(4750);
					match(EQUAL);
					setState(4766);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AUTO:
						{
						setState(4751);
						match(AUTO);
						}
						break;
					case DECIMAL:
					case COMMA:
						{
						setState(4762); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							setState(4762);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
							case 1:
								{
								setState(4753);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4752);
									match(COMMA);
									}
								}

								setState(4755);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(4757);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4756);
									match(COMMA);
									}
								}

								setState(4759);
								match(DECIMAL);
								setState(4760);
								match(TO);
								setState(4761);
								match(DECIMAL);
								}
								break;
							}
							}
							setState(4764); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case NUMANODE:
					{
					setState(4768);
					match(NUMANODE);
					setState(4769);
					match(EQUAL);
					setState(4780); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(4780);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
						case 1:
							{
							setState(4771);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4770);
								match(COMMA);
								}
							}

							setState(4773);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(4775);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4774);
								match(COMMA);
								}
							}

							setState(4777);
							match(DECIMAL);
							setState(4778);
							match(TO);
							setState(4779);
							match(DECIMAL);
							}
							break;
						}
						}
						setState(4782); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==DECIMAL || _la==COMMA );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DIAGNOSTICS:
				{
				setState(4786);
				match(DIAGNOSTICS);
				setState(4787);
				match(LOG);
				setState(4803);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(4788);
					match(ON);
					}
					break;
				case OFF:
					{
					setState(4789);
					match(OFF);
					}
					break;
				case PATH:
					{
					setState(4790);
					match(PATH);
					setState(4791);
					match(EQUAL);
					setState(4792);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case MAX_SIZE:
					{
					setState(4793);
					match(MAX_SIZE);
					setState(4794);
					match(EQUAL);
					setState(4798);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DECIMAL:
						{
						setState(4795);
						match(DECIMAL);
						setState(4796);
						match(MB);
						}
						break;
					case DEFAULT:
						{
						setState(4797);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case MAX_FILES:
					{
					setState(4800);
					match(MAX_FILES);
					setState(4801);
					match(EQUAL);
					setState(4802);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FAILOVER:
				{
				setState(4805);
				match(FAILOVER);
				setState(4806);
				match(CLUSTER);
				setState(4807);
				match(PROPERTY);
				setState(4825);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VERBOSELOGGING:
					{
					setState(4808);
					match(VERBOSELOGGING);
					setState(4809);
					match(EQUAL);
					setState(4810);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERFLAGS:
					{
					setState(4811);
					match(SQLDUMPERFLAGS);
					setState(4812);
					match(EQUAL);
					setState(4813);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERPATH:
					{
					setState(4814);
					match(SQLDUMPERPATH);
					setState(4815);
					match(EQUAL);
					setState(4816);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERTIMEOUT:
					{
					setState(4817);
					match(SQLDUMPERTIMEOUT);
					setState(4818);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FAILURECONDITIONLEVEL:
					{
					setState(4819);
					match(FAILURECONDITIONLEVEL);
					setState(4820);
					match(EQUAL);
					setState(4821);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case HEALTHCHECKTIMEOUT:
					{
					setState(4822);
					match(HEALTHCHECKTIMEOUT);
					setState(4823);
					match(EQUAL);
					setState(4824);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case HADR:
				{
				setState(4827);
				match(HADR);
				setState(4828);
				match(CLUSTER);
				setState(4829);
				match(CONTEXT);
				setState(4830);
				match(EQUAL);
				setState(4831);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==STRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case BUFFER:
				{
				setState(4832);
				match(BUFFER);
				setState(4833);
				match(POOL);
				setState(4834);
				match(EXTENSION);
				setState(4847);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(4835);
					match(ON);
					setState(4836);
					match(LR_BRACKET);
					setState(4837);
					match(FILENAME);
					setState(4838);
					match(EQUAL);
					setState(4839);
					match(STRING);
					setState(4840);
					match(COMMA);
					setState(4841);
					match(SIZE);
					setState(4842);
					match(EQUAL);
					setState(4843);
					match(DECIMAL);
					setState(4844);
					_la = _input.LA(1);
					if ( !(_la==GB || _la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4845);
					match(RR_BRACKET);
					}
					break;
				case OFF:
					{
					setState(4846);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SET:
				{
				setState(4849);
				match(SET);
				setState(4850);
				match(SOFTNUMA);
				setState(4851);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_roleContext extends ParserRuleContext {
		public IdContext server_role_name;
		public IdContext server_principal;
		public IdContext new_server_role_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(TSqlParser.MEMBER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_server_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_roleContext alter_server_role() throws RecognitionException {
		Alter_server_roleContext _localctx = new Alter_server_roleContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_alter_server_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4854);
			match(ALTER);
			setState(4855);
			match(SERVER);
			setState(4856);
			match(ROLE);
			setState(4857);
			((Alter_server_roleContext)_localctx).server_role_name = id();
			setState(4865);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case DROP:
				{
				setState(4858);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4859);
				match(MEMBER);
				setState(4860);
				((Alter_server_roleContext)_localctx).server_principal = id();
				}
				break;
			case WITH:
				{
				setState(4861);
				match(WITH);
				setState(4862);
				match(NAME);
				setState(4863);
				match(EQUAL);
				setState(4864);
				((Alter_server_roleContext)_localctx).new_server_role_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_roleContext extends ParserRuleContext {
		public IdContext server_role;
		public IdContext server_principal;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_server_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_server_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_server_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_server_roleContext create_server_role() throws RecognitionException {
		Create_server_roleContext _localctx = new Create_server_roleContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_create_server_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4867);
			match(CREATE);
			setState(4868);
			match(SERVER);
			setState(4869);
			match(ROLE);
			setState(4870);
			((Create_server_roleContext)_localctx).server_role = id();
			setState(4873);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4871);
				match(AUTHORIZATION);
				setState(4872);
				((Create_server_roleContext)_localctx).server_principal = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_role_pdwContext extends ParserRuleContext {
		public IdContext server_role_name;
		public IdContext login;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode MEMBER() { return getToken(TSqlParser.MEMBER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_server_role_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_role_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_role_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_role_pdw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_server_role_pdw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_role_pdwContext alter_server_role_pdw() throws RecognitionException {
		Alter_server_role_pdwContext _localctx = new Alter_server_role_pdwContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alter_server_role_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4875);
			match(ALTER);
			setState(4876);
			match(SERVER);
			setState(4877);
			match(ROLE);
			setState(4878);
			((Alter_server_role_pdwContext)_localctx).server_role_name = id();
			setState(4879);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4880);
			match(MEMBER);
			setState(4881);
			((Alter_server_role_pdwContext)_localctx).login = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_serviceContext extends ParserRuleContext {
		public IdContext modified_service_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public IdContext modified_contract_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(TSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(TSqlParser.DROP, i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_service(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_service(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_service(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_serviceContext alter_service() throws RecognitionException {
		Alter_serviceContext _localctx = new Alter_serviceContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_alter_service);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4883);
			match(ALTER);
			setState(4884);
			match(SERVICE);
			setState(4885);
			((Alter_serviceContext)_localctx).modified_service_name = id();
			setState(4893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(4886);
				match(ON);
				setState(4887);
				match(QUEUE);
				{
				setState(4888);
				((Alter_serviceContext)_localctx).schema_name = id();
				setState(4889);
				match(DOT);
				}
				setState(4891);
				((Alter_serviceContext)_localctx).queue_name = id();
				}
			}

			setState(4902);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,568,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4896);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4895);
						match(COMMA);
						}
					}

					setState(4898);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4899);
					((Alter_serviceContext)_localctx).modified_contract_name = id();
					}
					} 
				}
				setState(4904);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,568,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_serviceContext extends ParserRuleContext {
		public IdContext create_service_name;
		public IdContext owner_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(TSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(TSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_service(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_service(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_service(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_serviceContext create_service() throws RecognitionException {
		Create_serviceContext _localctx = new Create_serviceContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_create_service);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4905);
			match(CREATE);
			setState(4906);
			match(SERVICE);
			setState(4907);
			((Create_serviceContext)_localctx).create_service_name = id();
			setState(4910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4908);
				match(AUTHORIZATION);
				setState(4909);
				((Create_serviceContext)_localctx).owner_name = id();
				}
			}

			setState(4912);
			match(ON);
			setState(4913);
			match(QUEUE);
			setState(4917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
			case 1:
				{
				setState(4914);
				((Create_serviceContext)_localctx).schema_name = id();
				setState(4915);
				match(DOT);
				}
				break;
			}
			setState(4919);
			((Create_serviceContext)_localctx).queue_name = id();
			setState(4933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
			case 1:
				{
				setState(4920);
				match(LR_BRACKET);
				setState(4928); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4922);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4921);
						match(COMMA);
						}
					}

					setState(4926);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case TARGET:
					case ABSOLUTE:
					case ACTIVE:
					case ADDRESS:
					case APPLY:
					case AUTO:
					case AVAILABILITY:
					case AVG:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNTER:
					case COUNT_BIG:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCATION:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NAME:
					case NEXT:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SIZE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VALUE:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(4924);
						id();
						}
						break;
					case DEFAULT:
						{
						setState(4925);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(4930); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (DATA_COMPRESSION - 80)) | (1L << (DEFAULT - 80)) | (1L << (EVENTDATA - 80)) | (1L << (FILENAME - 80)) | (1L << (FILLFACTOR - 80)) | (1L << (FORCESEEK - 80)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KEY - 169)) | (1L << (MASTER - 169)) | (1L << (MAX_MEMORY - 169)) | (1L << (OFFSETS - 169)))) != 0) || ((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (PAGE - 238)) | (1L << (PUBLIC - 238)) | (1L << (RAW - 238)) | (1L << (RETURN - 238)) | (1L << (RETURNS - 238)) | (1L << (ROWCOUNT - 238)) | (1L << (SAFETY - 238)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (SERVER - 308)) | (1L << (SID - 308)) | (1L << (SOURCE - 308)) | (1L << (STATE - 308)) | (1L << (TARGET - 308)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (ABSOLUTE - 382)) | (1L << (ACTIVE - 382)) | (1L << (ADDRESS - 382)) | (1L << (APPLY - 382)) | (1L << (AUTO - 382)) | (1L << (AVAILABILITY - 382)) | (1L << (AVG - 382)) | (1L << (CALLER - 382)) | (1L << (CAST - 382)) | (1L << (CATCH - 382)) | (1L << (CHECKSUM_AGG - 382)) | (1L << (COMMITTED - 382)) | (1L << (CONCAT - 382)) | (1L << (CONCAT_NULL_YIELDS_NULL - 382)) | (1L << (CONTROL - 382)) | (1L << (COOKIE - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (COUNT - 446)) | (1L << (COUNTER - 446)) | (1L << (COUNT_BIG - 446)) | (1L << (DELAY - 446)) | (1L << (DELETED - 446)) | (1L << (DENSE_RANK - 446)) | (1L << (DISABLE - 446)) | (1L << (DYNAMIC - 446)) | (1L << (ENCRYPTION - 446)) | (1L << (EXPAND - 446)) | (1L << (FAST - 446)) | (1L << (FAST_FORWARD - 446)) | (1L << (FIRST - 446)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCED - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (GLOBAL - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HASH - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (ISOLATION - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEYSET - 511)) | (1L << (LAST - 511)) | (1L << (LEVEL - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (MARK - 511)) | (1L << (MAX - 511)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MIN - 579)) | (1L << (MODIFY - 579)) | (1L << (NAME - 579)) | (1L << (NEXT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NTILE - 579)) | (1L << (NUMBER - 579)) | (1L << (OFFSET - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)) | (1L << (OUTPUT - 579)) | (1L << (OWNER - 579)) | (1L << (PARAMETERIZATION - 579)) | (1L << (PARTITION - 579)) | (1L << (PATH - 579)) | (1L << (PRECEDING - 579)) | (1L << (PRIOR - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PRIVILEGES - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (READONLY - 643)) | (1L << (READ_ONLY - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROW - 643)) | (1L << (ROWGUID - 643)) | (1L << (ROWS - 643)) | (1L << (ROW_NUMBER - 643)) | (1L << (SAMPLE - 643)) | (1L << (SCHEMABINDING - 643)) | (1L << (SCROLL - 643)) | (1L << (SCROLL_LOCKS - 643)) | (1L << (SELF - 643)) | (1L << (SERIALIZABLE - 643)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (SIMPLE - 711)) | (1L << (SIZE - 711)) | (1L << (SNAPSHOT - 711)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 711)) | (1L << (STATIC - 711)) | (1L << (STATS_STREAM - 711)) | (1L << (STDEV - 711)) | (1L << (STDEVP - 711)) | (1L << (SUM - 711)) | (1L << (TEXTIMAGE_ON - 711)) | (1L << (THROW - 711)) | (1L << (TIES - 711)) | (1L << (TIME - 711)) | (1L << (TRY - 711)) | (1L << (TYPE - 711)) | (1L << (TYPE_WARNING - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNKNOWN - 711)) | (1L << (USING - 711)) | (1L << (VALUE - 711)) | (1L << (VAR - 711)) | (1L << (VARP - 711)) | (1L << (VIEWS - 711)) | (1L << (VIEW_METADATA - 711)) | (1L << (WORK - 711)) | (1L << (XML - 711)) | (1L << (XMLNAMESPACES - 711)) | (1L << (DOUBLE_QUOTE_ID - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (SQUARE_BRACKET_ID - 775)) | (1L << (ID - 775)) | (1L << (COMMA - 775)))) != 0) );
				setState(4932);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_service_master_keyContext extends ParserRuleContext {
		public Token acold_account_name;
		public Token old_password;
		public Token new_account_name;
		public Token new_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode REGENERATE() { return getToken(TSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public TerminalNode OLD_ACCOUNT() { return getToken(TSqlParser.OLD_ACCOUNT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public TerminalNode NEW_ACCOUNT() { return getToken(TSqlParser.NEW_ACCOUNT, 0); }
		public TerminalNode NEW_PASSWORD() { return getToken(TSqlParser.NEW_PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Alter_service_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_service_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_service_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_service_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_service_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_service_master_keyContext alter_service_master_key() throws RecognitionException {
		Alter_service_master_keyContext _localctx = new Alter_service_master_keyContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_alter_service_master_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4935);
			match(ALTER);
			setState(4936);
			match(SERVICE);
			setState(4937);
			match(MASTER);
			setState(4938);
			match(KEY);
			setState(4960);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGENERATE:
			case FORCE:
				{
				setState(4940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(4939);
					match(FORCE);
					}
				}

				setState(4942);
				match(REGENERATE);
				}
				break;
			case WITH:
				{
				{
				setState(4943);
				match(WITH);
				setState(4958);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OLD_ACCOUNT:
					{
					setState(4944);
					match(OLD_ACCOUNT);
					setState(4945);
					match(EQUAL);
					setState(4946);
					((Alter_service_master_keyContext)_localctx).acold_account_name = match(STRING);
					setState(4947);
					match(COMMA);
					setState(4948);
					match(OLD_PASSWORD);
					setState(4949);
					match(EQUAL);
					setState(4950);
					((Alter_service_master_keyContext)_localctx).old_password = match(STRING);
					}
					break;
				case NEW_ACCOUNT:
					{
					setState(4951);
					match(NEW_ACCOUNT);
					setState(4952);
					match(EQUAL);
					setState(4953);
					((Alter_service_master_keyContext)_localctx).new_account_name = match(STRING);
					setState(4954);
					match(COMMA);
					setState(4955);
					match(NEW_PASSWORD);
					setState(4956);
					match(EQUAL);
					setState(4957);
					((Alter_service_master_keyContext)_localctx).new_password = match(STRING);
					}
					break;
				case EOF:
				case ALTER:
				case BEGIN:
				case BREAK:
				case CALLED:
				case CLOSE:
				case COMMIT:
				case CONTINUE:
				case CREATE:
				case DATA_COMPRESSION:
				case DBCC:
				case DEALLOCATE:
				case DECLARE:
				case DELETE:
				case DROP:
				case ELSE:
				case END:
				case EVENTDATA:
				case EXECUTE:
				case FETCH:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case GET:
				case GOTO:
				case GRANT:
				case IF:
				case INSERT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case MERGE:
				case OFFSETS:
				case OPEN:
				case PAGE:
				case PRINT:
				case PUBLIC:
				case RAISERROR:
				case RAW:
				case RETURN:
				case RETURNS:
				case REVERT:
				case ROLLBACK:
				case ROWCOUNT:
				case SAFETY:
				case SAVE:
				case SELECT:
				case SERVER:
				case SET:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case TRUNCATE:
				case UPDATE:
				case USE:
				case WAITFOR:
				case WHILE:
				case WITH:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SEND:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case LR_BRACKET:
				case SEMI:
					break;
				default:
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_symmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public IdContext certificate_name;
		public Token password;
		public IdContext symmetric_key_name;
		public IdContext Asym_key_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SYMMETRIC() { return getTokens(TSqlParser.SYMMETRIC); }
		public TerminalNode SYMMETRIC(int i) {
			return getToken(TSqlParser.SYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Alter_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_symmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_symmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_symmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_symmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_symmetric_keyContext alter_symmetric_key() throws RecognitionException {
		Alter_symmetric_keyContext _localctx = new Alter_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_alter_symmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4962);
			match(ALTER);
			setState(4963);
			match(SYMMETRIC);
			setState(4964);
			match(KEY);
			setState(4965);
			((Alter_symmetric_keyContext)_localctx).key_name = id();
			{
			setState(4966);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4967);
			match(ENCRYPTION);
			setState(4968);
			match(BY);
			setState(4980);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				{
				setState(4969);
				match(CERTIFICATE);
				setState(4970);
				((Alter_symmetric_keyContext)_localctx).certificate_name = id();
				}
				break;
			case PASSWORD:
				{
				setState(4971);
				match(PASSWORD);
				setState(4972);
				match(EQUAL);
				setState(4973);
				((Alter_symmetric_keyContext)_localctx).password = match(STRING);
				}
				break;
			case SYMMETRIC:
				{
				setState(4974);
				match(SYMMETRIC);
				setState(4975);
				match(KEY);
				setState(4976);
				((Alter_symmetric_keyContext)_localctx).symmetric_key_name = id();
				}
				break;
			case ASYMMETRIC:
				{
				setState(4977);
				match(ASYMMETRIC);
				setState(4978);
				match(KEY);
				setState(4979);
				((Alter_symmetric_keyContext)_localctx).Asym_key_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_symmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public IdContext owner_name;
		public IdContext provider_name;
		public Token key_pass_phrase;
		public Token identity_phrase;
		public Token provider_key_name;
		public IdContext certificate_name;
		public Token password;
		public IdContext symmetric_key_name;
		public IdContext asym_key_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SYMMETRIC() { return getTokens(TSqlParser.SYMMETRIC); }
		public TerminalNode SYMMETRIC(int i) {
			return getToken(TSqlParser.SYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode KEY_SOURCE() { return getToken(TSqlParser.KEY_SOURCE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode IDENTITY_VALUE() { return getToken(TSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DES() { return getToken(TSqlParser.DES, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(TSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode RC2() { return getToken(TSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(TSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(TSqlParser.RC4_128, 0); }
		public TerminalNode DESX() { return getToken(TSqlParser.DESX, 0); }
		public TerminalNode AES_128() { return getToken(TSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSqlParser.AES_256, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_symmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_symmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_symmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_symmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_symmetric_keyContext create_symmetric_key() throws RecognitionException {
		Create_symmetric_keyContext _localctx = new Create_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_create_symmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4982);
			match(ALTER);
			setState(4983);
			match(SYMMETRIC);
			setState(4984);
			match(KEY);
			setState(4985);
			((Create_symmetric_keyContext)_localctx).key_name = id();
			setState(4988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4986);
				match(AUTHORIZATION);
				setState(4987);
				((Create_symmetric_keyContext)_localctx).owner_name = id();
				}
			}

			setState(4993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4990);
				match(FROM);
				setState(4991);
				match(PROVIDER);
				setState(4992);
				((Create_symmetric_keyContext)_localctx).provider_name = id();
				}
			}

			{
			setState(4995);
			match(WITH);
			setState(5028);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALGORITHM:
			case CREATION_DISPOSITION:
			case IDENTITY_VALUE:
			case KEY_SOURCE:
			case PROVIDER_KEY_NAME:
				{
				setState(5011);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KEY_SOURCE:
					{
					setState(4996);
					match(KEY_SOURCE);
					setState(4997);
					match(EQUAL);
					setState(4998);
					((Create_symmetric_keyContext)_localctx).key_pass_phrase = match(STRING);
					}
					break;
				case ALGORITHM:
					{
					setState(4999);
					match(ALGORITHM);
					setState(5000);
					match(EQUAL);
					setState(5001);
					_la = _input.LA(1);
					if ( !(((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (AES_128 - 388)) | (1L << (AES_192 - 388)) | (1L << (AES_256 - 388)))) != 0) || _la==DES || _la==DESX || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (RC2 - 654)) | (1L << (RC4 - 654)) | (1L << (RC4_128 - 654)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case IDENTITY_VALUE:
					{
					setState(5002);
					match(IDENTITY_VALUE);
					setState(5003);
					match(EQUAL);
					setState(5004);
					((Create_symmetric_keyContext)_localctx).identity_phrase = match(STRING);
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					setState(5005);
					match(PROVIDER_KEY_NAME);
					setState(5006);
					match(EQUAL);
					setState(5007);
					((Create_symmetric_keyContext)_localctx).provider_key_name = match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					setState(5008);
					match(CREATION_DISPOSITION);
					setState(5009);
					match(EQUAL);
					setState(5010);
					_la = _input.LA(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ENCRYPTION:
				{
				setState(5013);
				match(ENCRYPTION);
				setState(5014);
				match(BY);
				setState(5026);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CERTIFICATE:
					{
					setState(5015);
					match(CERTIFICATE);
					setState(5016);
					((Create_symmetric_keyContext)_localctx).certificate_name = id();
					}
					break;
				case PASSWORD:
					{
					setState(5017);
					match(PASSWORD);
					setState(5018);
					match(EQUAL);
					setState(5019);
					((Create_symmetric_keyContext)_localctx).password = match(STRING);
					}
					break;
				case SYMMETRIC:
					{
					setState(5020);
					match(SYMMETRIC);
					setState(5021);
					match(KEY);
					setState(5022);
					((Create_symmetric_keyContext)_localctx).symmetric_key_name = id();
					}
					break;
				case ASYMMETRIC:
					{
					setState(5023);
					match(ASYMMETRIC);
					setState(5024);
					match(KEY);
					setState(5025);
					((Create_symmetric_keyContext)_localctx).asym_key_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_synonymContext extends ParserRuleContext {
		public IdContext schema_name_1;
		public IdContext synonym_name;
		public IdContext server_name;
		public IdContext database_name;
		public IdContext schema_name_2;
		public IdContext object_name;
		public IdContext database_or_schema2;
		public IdContext schema_id_2_or_object_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SYNONYM() { return getToken(TSqlParser.SYNONYM, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_synonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_synonym(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_synonym(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_synonymContext create_synonym() throws RecognitionException {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_create_synonym);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5030);
			match(CREATE);
			setState(5031);
			match(SYNONYM);
			setState(5035);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
			case 1:
				{
				setState(5032);
				((Create_synonymContext)_localctx).schema_name_1 = id();
				setState(5033);
				match(DOT);
				}
				break;
			}
			setState(5037);
			((Create_synonymContext)_localctx).synonym_name = id();
			setState(5038);
			match(FOR);
			setState(5065);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				{
				setState(5042);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
				case 1:
					{
					setState(5039);
					((Create_synonymContext)_localctx).server_name = id();
					setState(5040);
					match(DOT);
					}
					break;
				}
				setState(5047);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
				case 1:
					{
					setState(5044);
					((Create_synonymContext)_localctx).database_name = id();
					setState(5045);
					match(DOT);
					}
					break;
				}
				setState(5052);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
				case 1:
					{
					setState(5049);
					((Create_synonymContext)_localctx).schema_name_2 = id();
					setState(5050);
					match(DOT);
					}
					break;
				}
				setState(5054);
				((Create_synonymContext)_localctx).object_name = id();
				}
				break;
			case 2:
				{
				setState(5058);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
				case 1:
					{
					setState(5055);
					((Create_synonymContext)_localctx).database_or_schema2 = id();
					setState(5056);
					match(DOT);
					}
					break;
				}
				setState(5063);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
				case 1:
					{
					setState(5060);
					((Create_synonymContext)_localctx).schema_id_2_or_object_name = id();
					setState(5061);
					match(DOT);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_userContext extends ParserRuleContext {
		public IdContext username;
		public IdContext newusername;
		public IdContext schema_name;
		public IdContext loginame;
		public Token lcid;
		public IdContext language_name_or_alias;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSqlParser.NAME, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(TSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(TSqlParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(TSqlParser.LOGIN, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(TSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(TSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> DEFAULT_LANGUAGE() { return getTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public TerminalNode DEFAULT_LANGUAGE(int i) {
			return getToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> NULL() { return getTokens(TSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(TSqlParser.NULL, i);
		}
		public List<TerminalNode> NONE() { return getTokens(TSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(TSqlParser.NONE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> OLD_PASSWORD() { return getTokens(TSqlParser.OLD_PASSWORD); }
		public TerminalNode OLD_PASSWORD(int i) {
			return getToken(TSqlParser.OLD_PASSWORD, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_user(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_user(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_userContext alter_user() throws RecognitionException {
		Alter_userContext _localctx = new Alter_userContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_alter_user);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5067);
			match(ALTER);
			setState(5068);
			match(USER);
			setState(5069);
			((Alter_userContext)_localctx).username = id();
			setState(5070);
			match(WITH);
			setState(5121); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(5121);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,600,_ctx) ) {
					case 1:
						{
						setState(5072);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5071);
							match(COMMA);
							}
						}

						setState(5074);
						match(NAME);
						setState(5075);
						match(EQUAL);
						setState(5076);
						((Alter_userContext)_localctx).newusername = id();
						}
						break;
					case 2:
						{
						setState(5078);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5077);
							match(COMMA);
							}
						}

						setState(5080);
						match(DEFAULT_SCHEMA);
						setState(5081);
						match(EQUAL);
						setState(5084);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case CALLED:
						case DATA_COMPRESSION:
						case EVENTDATA:
						case FILENAME:
						case FILLFACTOR:
						case FORCESEEK:
						case KEY:
						case MASTER:
						case MAX_MEMORY:
						case OFFSETS:
						case PAGE:
						case PUBLIC:
						case RAW:
						case RETURN:
						case RETURNS:
						case ROWCOUNT:
						case SAFETY:
						case SERVER:
						case SID:
						case SOURCE:
						case STATE:
						case TARGET:
						case ABSOLUTE:
						case ACTIVE:
						case ADDRESS:
						case APPLY:
						case AUTO:
						case AVAILABILITY:
						case AVG:
						case CALLER:
						case CAST:
						case CATCH:
						case CHECKSUM_AGG:
						case COMMITTED:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNTER:
						case COUNT_BIG:
						case DELAY:
						case DELETED:
						case DENSE_RANK:
						case DISABLE:
						case DYNAMIC:
						case ENCRYPTION:
						case EXPAND:
						case FAST:
						case FAST_FORWARD:
						case FIRST:
						case FOLLOWING:
						case FORCE:
						case FORCED:
						case FORWARD_ONLY:
						case FULLSCAN:
						case GLOBAL:
						case GROUPING:
						case GROUPING_ID:
						case HASH:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMPERSONATE:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case ISOLATION:
						case KEEP:
						case KEEPFIXED:
						case KEYSET:
						case LAST:
						case LEVEL:
						case LOCAL:
						case LOCATION:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case MARK:
						case MAX:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MIN:
						case MODIFY:
						case NAME:
						case NEXT:
						case NOCOUNT:
						case NOEXPAND:
						case NORECOMPUTE:
						case NTILE:
						case NUMBER:
						case OFFSET:
						case ONLINE:
						case ONLY:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PARAMETERIZATION:
						case PARTITION:
						case PATH:
						case PRECEDING:
						case PRIOR:
						case PRIVILEGES:
						case RANGE:
						case RANK:
						case READONLY:
						case READ_ONLY:
						case RECOMPILE:
						case RELATIVE:
						case REMOTE:
						case REPEATABLE:
						case ROBUST:
						case ROOT:
						case ROW:
						case ROWGUID:
						case ROWS:
						case ROW_NUMBER:
						case SAMPLE:
						case SCHEMABINDING:
						case SCROLL:
						case SCROLL_LOCKS:
						case SELF:
						case SERIALIZABLE:
						case SIMPLE:
						case SIZE:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STATIC:
						case STATS_STREAM:
						case STDEV:
						case STDEVP:
						case SUM:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TRY:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case USING:
						case VALUE:
						case VAR:
						case VARP:
						case VIEWS:
						case VIEW_METADATA:
						case WORK:
						case XML:
						case XMLNAMESPACES:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(5082);
							((Alter_userContext)_localctx).schema_name = id();
							}
							break;
						case NULL:
							{
							setState(5083);
							match(NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 3:
						{
						setState(5087);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5086);
							match(COMMA);
							}
						}

						setState(5089);
						match(LOGIN);
						setState(5090);
						match(EQUAL);
						setState(5091);
						((Alter_userContext)_localctx).loginame = id();
						}
						break;
					case 4:
						{
						setState(5093);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5092);
							match(COMMA);
							}
						}

						setState(5095);
						match(PASSWORD);
						setState(5096);
						match(EQUAL);
						setState(5097);
						match(STRING);
						setState(5101); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(5098);
							match(OLD_PASSWORD);
							setState(5099);
							match(EQUAL);
							setState(5100);
							match(STRING);
							}
							}
							setState(5103); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==OLD_PASSWORD );
						}
						break;
					case 5:
						{
						setState(5106);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5105);
							match(COMMA);
							}
						}

						setState(5108);
						match(DEFAULT_LANGUAGE);
						setState(5109);
						match(EQUAL);
						setState(5113);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case NONE:
							{
							setState(5110);
							match(NONE);
							}
							break;
						case DECIMAL:
							{
							setState(5111);
							((Alter_userContext)_localctx).lcid = match(DECIMAL);
							}
							break;
						case CALLED:
						case DATA_COMPRESSION:
						case EVENTDATA:
						case FILENAME:
						case FILLFACTOR:
						case FORCESEEK:
						case KEY:
						case MASTER:
						case MAX_MEMORY:
						case OFFSETS:
						case PAGE:
						case PUBLIC:
						case RAW:
						case RETURN:
						case RETURNS:
						case ROWCOUNT:
						case SAFETY:
						case SERVER:
						case SID:
						case SOURCE:
						case STATE:
						case TARGET:
						case ABSOLUTE:
						case ACTIVE:
						case ADDRESS:
						case APPLY:
						case AUTO:
						case AVAILABILITY:
						case AVG:
						case CALLER:
						case CAST:
						case CATCH:
						case CHECKSUM_AGG:
						case COMMITTED:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNTER:
						case COUNT_BIG:
						case DELAY:
						case DELETED:
						case DENSE_RANK:
						case DISABLE:
						case DYNAMIC:
						case ENCRYPTION:
						case EXPAND:
						case FAST:
						case FAST_FORWARD:
						case FIRST:
						case FOLLOWING:
						case FORCE:
						case FORCED:
						case FORWARD_ONLY:
						case FULLSCAN:
						case GLOBAL:
						case GROUPING:
						case GROUPING_ID:
						case HASH:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMPERSONATE:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case ISOLATION:
						case KEEP:
						case KEEPFIXED:
						case KEYSET:
						case LAST:
						case LEVEL:
						case LOCAL:
						case LOCATION:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case MARK:
						case MAX:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MIN:
						case MODIFY:
						case NAME:
						case NEXT:
						case NOCOUNT:
						case NOEXPAND:
						case NORECOMPUTE:
						case NTILE:
						case NUMBER:
						case OFFSET:
						case ONLINE:
						case ONLY:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PARAMETERIZATION:
						case PARTITION:
						case PATH:
						case PRECEDING:
						case PRIOR:
						case PRIVILEGES:
						case RANGE:
						case RANK:
						case READONLY:
						case READ_ONLY:
						case RECOMPILE:
						case RELATIVE:
						case REMOTE:
						case REPEATABLE:
						case ROBUST:
						case ROOT:
						case ROW:
						case ROWGUID:
						case ROWS:
						case ROW_NUMBER:
						case SAMPLE:
						case SCHEMABINDING:
						case SCROLL:
						case SCROLL_LOCKS:
						case SELF:
						case SERIALIZABLE:
						case SIMPLE:
						case SIZE:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STATIC:
						case STATS_STREAM:
						case STDEV:
						case STDEVP:
						case SUM:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TRY:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case USING:
						case VALUE:
						case VAR:
						case VARP:
						case VIEWS:
						case VIEW_METADATA:
						case WORK:
						case XML:
						case XMLNAMESPACES:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(5112);
							((Alter_userContext)_localctx).language_name_or_alias = id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 6:
						{
						setState(5116);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5115);
							match(COMMA);
							}
						}

						setState(5118);
						match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						setState(5119);
						match(EQUAL);
						setState(5120);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5123); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,601,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_userContext extends ParserRuleContext {
		public IdContext user_name;
		public IdContext login_name;
		public IdContext schema_name;
		public IdContext windows_principal;
		public IdContext language_name_or_alias;
		public Token password;
		public IdContext Azure_Active_Directory_principal;
		public IdContext cert_name;
		public IdContext asym_key_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(TSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> DEFAULT_LANGUAGE() { return getTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public TerminalNode DEFAULT_LANGUAGE(int i) {
			return getToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public List<TerminalNode> SID() { return getTokens(TSqlParser.SID); }
		public TerminalNode SID(int i) {
			return getToken(TSqlParser.SID, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(TSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(TSqlParser.NONE, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode WITHOUT() { return getToken(TSqlParser.WITHOUT, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Create_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_user(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_user(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_userContext create_user() throws RecognitionException {
		Create_userContext _localctx = new Create_userContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_create_user);
		int _la;
		try {
			int _alt;
			setState(5271);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5125);
				match(CREATE);
				setState(5126);
				match(USER);
				setState(5127);
				((Create_userContext)_localctx).user_name = id();
				setState(5131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==FROM) {
					{
					setState(5128);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5129);
					match(LOGIN);
					setState(5130);
					((Create_userContext)_localctx).login_name = id();
					}
				}

				setState(5151);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
				case 1:
					{
					setState(5133);
					match(WITH);
					setState(5148);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==DEFAULT_SCHEMA || _la==ALLOW_ENCRYPTED_VALUE_MODIFICATIONS || _la==COMMA) {
						{
						setState(5146);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
						case 1:
							{
							setState(5135);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(5134);
								match(COMMA);
								}
							}

							setState(5137);
							match(DEFAULT_SCHEMA);
							setState(5138);
							match(EQUAL);
							setState(5139);
							((Create_userContext)_localctx).schema_name = id();
							}
							break;
						case 2:
							{
							setState(5141);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(5140);
								match(COMMA);
								}
							}

							setState(5143);
							match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
							setState(5144);
							match(EQUAL);
							setState(5145);
							_la = _input.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						}
						setState(5150);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5153);
				match(CREATE);
				setState(5154);
				match(USER);
				setState(5235);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
				case 1:
					{
					setState(5155);
					((Create_userContext)_localctx).windows_principal = id();
					setState(5190);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
					case 1:
						{
						setState(5156);
						match(WITH);
						setState(5187);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,614,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								setState(5185);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
								case 1:
									{
									setState(5158);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5157);
										match(COMMA);
										}
									}

									setState(5160);
									match(DEFAULT_SCHEMA);
									setState(5161);
									match(EQUAL);
									setState(5162);
									((Create_userContext)_localctx).schema_name = id();
									}
									break;
								case 2:
									{
									setState(5164);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5163);
										match(COMMA);
										}
									}

									setState(5166);
									match(DEFAULT_LANGUAGE);
									setState(5167);
									match(EQUAL);
									setState(5171);
									_errHandler.sync(this);
									switch (_input.LA(1)) {
									case NONE:
										{
										setState(5168);
										match(NONE);
										}
										break;
									case DECIMAL:
										{
										setState(5169);
										match(DECIMAL);
										}
										break;
									case CALLED:
									case DATA_COMPRESSION:
									case EVENTDATA:
									case FILENAME:
									case FILLFACTOR:
									case FORCESEEK:
									case KEY:
									case MASTER:
									case MAX_MEMORY:
									case OFFSETS:
									case PAGE:
									case PUBLIC:
									case RAW:
									case RETURN:
									case RETURNS:
									case ROWCOUNT:
									case SAFETY:
									case SERVER:
									case SID:
									case SOURCE:
									case STATE:
									case TARGET:
									case ABSOLUTE:
									case ACTIVE:
									case ADDRESS:
									case APPLY:
									case AUTO:
									case AVAILABILITY:
									case AVG:
									case CALLER:
									case CAST:
									case CATCH:
									case CHECKSUM_AGG:
									case COMMITTED:
									case CONCAT:
									case CONCAT_NULL_YIELDS_NULL:
									case CONTROL:
									case COOKIE:
									case COUNT:
									case COUNTER:
									case COUNT_BIG:
									case DELAY:
									case DELETED:
									case DENSE_RANK:
									case DISABLE:
									case DYNAMIC:
									case ENCRYPTION:
									case EXPAND:
									case FAST:
									case FAST_FORWARD:
									case FIRST:
									case FOLLOWING:
									case FORCE:
									case FORCED:
									case FORWARD_ONLY:
									case FULLSCAN:
									case GLOBAL:
									case GROUPING:
									case GROUPING_ID:
									case HASH:
									case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
									case IMPERSONATE:
									case INPUT:
									case INSENSITIVE:
									case INSERTED:
									case ISOLATION:
									case KEEP:
									case KEEPFIXED:
									case KEYSET:
									case LAST:
									case LEVEL:
									case LOCAL:
									case LOCATION:
									case LOCK_ESCALATION:
									case LOGIN:
									case LOOP:
									case MARK:
									case MAX:
									case MAX_ROLLOVER_FILES:
									case MAXDOP:
									case MAXRECURSION:
									case MIN:
									case MODIFY:
									case NAME:
									case NEXT:
									case NOCOUNT:
									case NOEXPAND:
									case NORECOMPUTE:
									case NTILE:
									case NUMBER:
									case OFFSET:
									case ONLINE:
									case ONLY:
									case OPTIMISTIC:
									case OPTIMIZE:
									case OUT:
									case OUTPUT:
									case OWNER:
									case PARAMETERIZATION:
									case PARTITION:
									case PATH:
									case PRECEDING:
									case PRIOR:
									case PRIVILEGES:
									case RANGE:
									case RANK:
									case READONLY:
									case READ_ONLY:
									case RECOMPILE:
									case RELATIVE:
									case REMOTE:
									case REPEATABLE:
									case ROBUST:
									case ROOT:
									case ROW:
									case ROWGUID:
									case ROWS:
									case ROW_NUMBER:
									case SAMPLE:
									case SCHEMABINDING:
									case SCROLL:
									case SCROLL_LOCKS:
									case SELF:
									case SERIALIZABLE:
									case SIMPLE:
									case SIZE:
									case SNAPSHOT:
									case SPATIAL_WINDOW_MAX_CELLS:
									case STATIC:
									case STATS_STREAM:
									case STDEV:
									case STDEVP:
									case SUM:
									case TEXTIMAGE_ON:
									case THROW:
									case TIES:
									case TIME:
									case TRY:
									case TYPE:
									case TYPE_WARNING:
									case UNBOUNDED:
									case UNCOMMITTED:
									case UNKNOWN:
									case USING:
									case VALUE:
									case VAR:
									case VARP:
									case VIEWS:
									case VIEW_METADATA:
									case WORK:
									case XML:
									case XMLNAMESPACES:
									case DOUBLE_QUOTE_ID:
									case SQUARE_BRACKET_ID:
									case ID:
										{
										setState(5170);
										((Create_userContext)_localctx).language_name_or_alias = id();
										}
										break;
									default:
										throw new NoViableAltException(this);
									}
									}
									break;
								case 3:
									{
									setState(5174);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5173);
										match(COMMA);
										}
									}

									setState(5176);
									match(SID);
									setState(5177);
									match(EQUAL);
									setState(5178);
									match(BINARY);
									}
									break;
								case 4:
									{
									setState(5180);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5179);
										match(COMMA);
										}
									}

									setState(5182);
									match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
									setState(5183);
									match(EQUAL);
									setState(5184);
									_la = _input.LA(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									break;
								}
								} 
							}
							setState(5189);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,614,_ctx);
						}
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(5192);
					((Create_userContext)_localctx).user_name = id();
					setState(5193);
					match(WITH);
					setState(5194);
					match(PASSWORD);
					setState(5195);
					match(EQUAL);
					setState(5196);
					((Create_userContext)_localctx).password = match(STRING);
					setState(5227);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,622,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5225);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
							case 1:
								{
								setState(5198);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5197);
									match(COMMA);
									}
								}

								setState(5200);
								match(DEFAULT_SCHEMA);
								setState(5201);
								match(EQUAL);
								setState(5202);
								((Create_userContext)_localctx).schema_name = id();
								}
								break;
							case 2:
								{
								setState(5204);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5203);
									match(COMMA);
									}
								}

								setState(5206);
								match(DEFAULT_LANGUAGE);
								setState(5207);
								match(EQUAL);
								setState(5211);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case NONE:
									{
									setState(5208);
									match(NONE);
									}
									break;
								case DECIMAL:
									{
									setState(5209);
									match(DECIMAL);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case PUBLIC:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROWCOUNT:
								case SAFETY:
								case SERVER:
								case SID:
								case SOURCE:
								case STATE:
								case TARGET:
								case ABSOLUTE:
								case ACTIVE:
								case ADDRESS:
								case APPLY:
								case AUTO:
								case AVAILABILITY:
								case AVG:
								case CALLER:
								case CAST:
								case CATCH:
								case CHECKSUM_AGG:
								case COMMITTED:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNTER:
								case COUNT_BIG:
								case DELAY:
								case DELETED:
								case DENSE_RANK:
								case DISABLE:
								case DYNAMIC:
								case ENCRYPTION:
								case EXPAND:
								case FAST:
								case FAST_FORWARD:
								case FIRST:
								case FOLLOWING:
								case FORCE:
								case FORCED:
								case FORWARD_ONLY:
								case FULLSCAN:
								case GLOBAL:
								case GROUPING:
								case GROUPING_ID:
								case HASH:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMPERSONATE:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case ISOLATION:
								case KEEP:
								case KEEPFIXED:
								case KEYSET:
								case LAST:
								case LEVEL:
								case LOCAL:
								case LOCATION:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case MARK:
								case MAX:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MIN:
								case MODIFY:
								case NAME:
								case NEXT:
								case NOCOUNT:
								case NOEXPAND:
								case NORECOMPUTE:
								case NTILE:
								case NUMBER:
								case OFFSET:
								case ONLINE:
								case ONLY:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PARAMETERIZATION:
								case PARTITION:
								case PATH:
								case PRECEDING:
								case PRIOR:
								case PRIVILEGES:
								case RANGE:
								case RANK:
								case READONLY:
								case READ_ONLY:
								case RECOMPILE:
								case RELATIVE:
								case REMOTE:
								case REPEATABLE:
								case ROBUST:
								case ROOT:
								case ROW:
								case ROWGUID:
								case ROWS:
								case ROW_NUMBER:
								case SAMPLE:
								case SCHEMABINDING:
								case SCROLL:
								case SCROLL_LOCKS:
								case SELF:
								case SERIALIZABLE:
								case SIMPLE:
								case SIZE:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STATIC:
								case STATS_STREAM:
								case STDEV:
								case STDEVP:
								case SUM:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TRY:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case USING:
								case VALUE:
								case VAR:
								case VARP:
								case VIEWS:
								case VIEW_METADATA:
								case WORK:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(5210);
									((Create_userContext)_localctx).language_name_or_alias = id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(5214);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5213);
									match(COMMA);
									}
								}

								setState(5216);
								match(SID);
								setState(5217);
								match(EQUAL);
								setState(5218);
								match(BINARY);
								}
								break;
							case 4:
								{
								setState(5220);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5219);
									match(COMMA);
									}
								}

								setState(5222);
								match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								setState(5223);
								match(EQUAL);
								setState(5224);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							} 
						}
						setState(5229);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,622,_ctx);
					}
					}
					break;
				case 3:
					{
					setState(5230);
					((Create_userContext)_localctx).Azure_Active_Directory_principal = id();
					setState(5231);
					match(FROM);
					setState(5232);
					match(EXTERNAL);
					setState(5233);
					match(PROVIDER);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5237);
				match(CREATE);
				setState(5238);
				match(USER);
				setState(5239);
				((Create_userContext)_localctx).user_name = id();
				setState(5266);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
				case 1:
					{
					setState(5240);
					match(WITHOUT);
					setState(5241);
					match(LOGIN);
					setState(5256);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==DEFAULT_SCHEMA || _la==ALLOW_ENCRYPTED_VALUE_MODIFICATIONS || _la==COMMA) {
						{
						setState(5254);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,626,_ctx) ) {
						case 1:
							{
							setState(5243);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(5242);
								match(COMMA);
								}
							}

							setState(5245);
							match(DEFAULT_SCHEMA);
							setState(5246);
							match(EQUAL);
							setState(5247);
							((Create_userContext)_localctx).schema_name = id();
							}
							break;
						case 2:
							{
							setState(5249);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(5248);
								match(COMMA);
								}
							}

							setState(5251);
							match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
							setState(5252);
							match(EQUAL);
							setState(5253);
							_la = _input.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						}
						setState(5258);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(5259);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5260);
					match(CERTIFICATE);
					setState(5261);
					((Create_userContext)_localctx).cert_name = id();
					}
					break;
				case 3:
					{
					setState(5262);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5263);
					match(ASYMMETRIC);
					setState(5264);
					match(KEY);
					setState(5265);
					((Create_userContext)_localctx).asym_key_name = id();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5268);
				match(CREATE);
				setState(5269);
				match(USER);
				setState(5270);
				((Create_userContext)_localctx).user_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_user_azure_sql_dwContext extends ParserRuleContext {
		public IdContext user_name;
		public IdContext login_name;
		public IdContext schema_name;
		public IdContext Azure_Active_Directory_principal;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode WITHOUT() { return getToken(TSqlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Create_user_azure_sql_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_azure_sql_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_user_azure_sql_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_user_azure_sql_dw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_user_azure_sql_dw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_user_azure_sql_dwContext create_user_azure_sql_dw() throws RecognitionException {
		Create_user_azure_sql_dwContext _localctx = new Create_user_azure_sql_dwContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_create_user_azure_sql_dw);
		int _la;
		try {
			setState(5301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5273);
				match(CREATE);
				setState(5274);
				match(USER);
				setState(5275);
				((Create_user_azure_sql_dwContext)_localctx).user_name = id();
				setState(5281);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
				case FROM:
					{
					setState(5276);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5277);
					match(LOGIN);
					setState(5278);
					((Create_user_azure_sql_dwContext)_localctx).login_name = id();
					}
					break;
				case WITHOUT:
					{
					setState(5279);
					match(WITHOUT);
					setState(5280);
					match(LOGIN);
					}
					break;
				case EOF:
				case ALTER:
				case BEGIN:
				case BREAK:
				case CALLED:
				case CLOSE:
				case COMMIT:
				case CONTINUE:
				case CREATE:
				case DATA_COMPRESSION:
				case DBCC:
				case DEALLOCATE:
				case DECLARE:
				case DELETE:
				case DROP:
				case ELSE:
				case END:
				case EVENTDATA:
				case EXECUTE:
				case FETCH:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case GET:
				case GOTO:
				case GRANT:
				case IF:
				case INSERT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case MERGE:
				case OFFSETS:
				case OPEN:
				case PAGE:
				case PRINT:
				case PUBLIC:
				case RAISERROR:
				case RAW:
				case RETURN:
				case RETURNS:
				case REVERT:
				case ROLLBACK:
				case ROWCOUNT:
				case SAFETY:
				case SAVE:
				case SELECT:
				case SERVER:
				case SET:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case TRUNCATE:
				case UPDATE:
				case USE:
				case WAITFOR:
				case WHILE:
				case WITH:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SEND:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case LR_BRACKET:
				case SEMI:
					break;
				default:
					break;
				}
				setState(5287);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
				case 1:
					{
					setState(5283);
					match(WITH);
					setState(5284);
					match(DEFAULT_SCHEMA);
					setState(5285);
					match(EQUAL);
					setState(5286);
					((Create_user_azure_sql_dwContext)_localctx).schema_name = id();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5289);
				match(CREATE);
				setState(5290);
				match(USER);
				setState(5291);
				((Create_user_azure_sql_dwContext)_localctx).Azure_Active_Directory_principal = id();
				setState(5292);
				match(FROM);
				setState(5293);
				match(EXTERNAL);
				setState(5294);
				match(PROVIDER);
				setState(5299);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
				case 1:
					{
					setState(5295);
					match(WITH);
					setState(5296);
					match(DEFAULT_SCHEMA);
					setState(5297);
					match(EQUAL);
					setState(5298);
					((Create_user_azure_sql_dwContext)_localctx).schema_name = id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_user_azure_sqlContext extends ParserRuleContext {
		public IdContext username;
		public IdContext newusername;
		public IdContext schema_name;
		public IdContext loginame;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSqlParser.NAME, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(TSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(TSqlParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(TSqlParser.LOGIN, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_user_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_user_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_user_azure_sql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_user_azure_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_user_azure_sqlContext alter_user_azure_sql() throws RecognitionException {
		Alter_user_azure_sqlContext _localctx = new Alter_user_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_alter_user_azure_sql);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5303);
			match(ALTER);
			setState(5304);
			match(USER);
			setState(5305);
			((Alter_user_azure_sqlContext)_localctx).username = id();
			setState(5306);
			match(WITH);
			setState(5331); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(5331);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
					case 1:
						{
						setState(5308);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5307);
							match(COMMA);
							}
						}

						setState(5310);
						match(NAME);
						setState(5311);
						match(EQUAL);
						setState(5312);
						((Alter_user_azure_sqlContext)_localctx).newusername = id();
						}
						break;
					case 2:
						{
						setState(5314);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5313);
							match(COMMA);
							}
						}

						setState(5316);
						match(DEFAULT_SCHEMA);
						setState(5317);
						match(EQUAL);
						setState(5318);
						((Alter_user_azure_sqlContext)_localctx).schema_name = id();
						}
						break;
					case 3:
						{
						setState(5320);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5319);
							match(COMMA);
							}
						}

						setState(5322);
						match(LOGIN);
						setState(5323);
						match(EQUAL);
						setState(5324);
						((Alter_user_azure_sqlContext)_localctx).loginame = id();
						}
						break;
					case 4:
						{
						setState(5326);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5325);
							match(COMMA);
							}
						}

						setState(5328);
						match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						setState(5329);
						match(EQUAL);
						setState(5330);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5333); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,639,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_workload_groupContext extends ParserRuleContext {
		public IdContext workload_group_group_name;
		public Token request_max_memory_grant;
		public Token request_max_cpu_time_sec;
		public Token request_memory_grant_timeout_sec;
		public Token max_dop;
		public Token group_max_requests;
		public IdContext workload_group_pool_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public List<TerminalNode> DEFAULT_DOUBLE_QUOTE() { return getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public List<TerminalNode> IMPORTANCE() { return getTokens(TSqlParser.IMPORTANCE); }
		public TerminalNode IMPORTANCE(int i) {
			return getToken(TSqlParser.IMPORTANCE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public List<TerminalNode> REQUEST_MAX_CPU_TIME_SEC() { return getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public List<TerminalNode> REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public List<TerminalNode> MAX_DOP() { return getTokens(TSqlParser.MAX_DOP); }
		public TerminalNode MAX_DOP(int i) {
			return getToken(TSqlParser.MAX_DOP, i);
		}
		public List<TerminalNode> GROUP_MAX_REQUESTS() { return getTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public TerminalNode GROUP_MAX_REQUESTS(int i) {
			return getToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public List<TerminalNode> LOW() { return getTokens(TSqlParser.LOW); }
		public TerminalNode LOW(int i) {
			return getToken(TSqlParser.LOW, i);
		}
		public List<TerminalNode> MEDIUM() { return getTokens(TSqlParser.MEDIUM); }
		public TerminalNode MEDIUM(int i) {
			return getToken(TSqlParser.MEDIUM, i);
		}
		public List<TerminalNode> HIGH() { return getTokens(TSqlParser.HIGH); }
		public TerminalNode HIGH(int i) {
			return getToken(TSqlParser.HIGH, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_workload_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_workload_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_workload_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_workload_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_workload_groupContext alter_workload_group() throws RecognitionException {
		Alter_workload_groupContext _localctx = new Alter_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_alter_workload_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5335);
			match(ALTER);
			setState(5336);
			match(WORKLOAD);
			setState(5337);
			match(GROUP);
			setState(5340);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(5338);
				((Alter_workload_groupContext)_localctx).workload_group_group_name = id();
				}
				break;
			case DEFAULT_DOUBLE_QUOTE:
				{
				setState(5339);
				match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,645,_ctx) ) {
			case 1:
				{
				setState(5342);
				match(WITH);
				setState(5343);
				match(LR_BRACKET);
				setState(5368); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(5368);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
					case 1:
						{
						setState(5344);
						match(IMPORTANCE);
						setState(5345);
						match(EQUAL);
						setState(5346);
						_la = _input.LA(1);
						if ( !(((((_la - 530)) & ~0x3f) == 0 && ((1L << (_la - 530)) & ((1L << (HIGH - 530)) | (1L << (LOW - 530)) | (1L << (MEDIUM - 530)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(5348);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5347);
							match(COMMA);
							}
						}

						setState(5350);
						match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						setState(5351);
						match(EQUAL);
						setState(5352);
						((Alter_workload_groupContext)_localctx).request_max_memory_grant = match(DECIMAL);
						}
						break;
					case 3:
						{
						setState(5354);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5353);
							match(COMMA);
							}
						}

						setState(5356);
						match(REQUEST_MAX_CPU_TIME_SEC);
						setState(5357);
						match(EQUAL);
						setState(5358);
						((Alter_workload_groupContext)_localctx).request_max_cpu_time_sec = match(DECIMAL);
						}
						break;
					case 4:
						{
						setState(5359);
						match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						setState(5360);
						match(EQUAL);
						setState(5361);
						((Alter_workload_groupContext)_localctx).request_memory_grant_timeout_sec = match(DECIMAL);
						}
						break;
					case 5:
						{
						setState(5362);
						match(MAX_DOP);
						setState(5363);
						match(EQUAL);
						setState(5364);
						((Alter_workload_groupContext)_localctx).max_dop = match(DECIMAL);
						}
						break;
					case 6:
						{
						setState(5365);
						match(GROUP_MAX_REQUESTS);
						setState(5366);
						match(EQUAL);
						setState(5367);
						((Alter_workload_groupContext)_localctx).group_max_requests = match(DECIMAL);
						}
						break;
					}
					}
					setState(5370); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (GROUP_MAX_REQUESTS - 526)) | (1L << (IMPORTANCE - 526)) | (1L << (MAX_DOP - 526)))) != 0) || ((((_la - 675)) & ~0x3f) == 0 && ((1L << (_la - 675)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 675)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 675)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 675)))) != 0) || _la==COMMA );
				setState(5372);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
			case 1:
				{
				setState(5375);
				match(USING);
				setState(5378);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(5376);
					((Alter_workload_groupContext)_localctx).workload_group_pool_name = id();
					}
					break;
				case DEFAULT_DOUBLE_QUOTE:
					{
					setState(5377);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_workload_groupContext extends ParserRuleContext {
		public IdContext workload_group_group_name;
		public Token request_max_memory_grant;
		public Token request_max_cpu_time_sec;
		public Token request_memory_grant_timeout_sec;
		public Token max_dop;
		public Token group_max_requests;
		public IdContext workload_group_pool_name;
		public IdContext external_pool_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public List<TerminalNode> IMPORTANCE() { return getTokens(TSqlParser.IMPORTANCE); }
		public TerminalNode IMPORTANCE(int i) {
			return getToken(TSqlParser.IMPORTANCE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public List<TerminalNode> REQUEST_MAX_CPU_TIME_SEC() { return getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public List<TerminalNode> REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public List<TerminalNode> MAX_DOP() { return getTokens(TSqlParser.MAX_DOP); }
		public TerminalNode MAX_DOP(int i) {
			return getToken(TSqlParser.MAX_DOP, i);
		}
		public List<TerminalNode> GROUP_MAX_REQUESTS() { return getTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public TerminalNode GROUP_MAX_REQUESTS(int i) {
			return getToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public List<TerminalNode> DEFAULT_DOUBLE_QUOTE() { return getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public List<TerminalNode> LOW() { return getTokens(TSqlParser.LOW); }
		public TerminalNode LOW(int i) {
			return getToken(TSqlParser.LOW, i);
		}
		public List<TerminalNode> MEDIUM() { return getTokens(TSqlParser.MEDIUM); }
		public TerminalNode MEDIUM(int i) {
			return getToken(TSqlParser.MEDIUM, i);
		}
		public List<TerminalNode> HIGH() { return getTokens(TSqlParser.HIGH); }
		public TerminalNode HIGH(int i) {
			return getToken(TSqlParser.HIGH, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_workload_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_workload_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_workload_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_workload_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_workload_groupContext create_workload_group() throws RecognitionException {
		Create_workload_groupContext _localctx = new Create_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_create_workload_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5382);
			match(CREATE);
			setState(5383);
			match(WORKLOAD);
			setState(5384);
			match(GROUP);
			setState(5385);
			((Create_workload_groupContext)_localctx).workload_group_group_name = id();
			setState(5417);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				{
				setState(5386);
				match(WITH);
				setState(5387);
				match(LR_BRACKET);
				setState(5412); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(5412);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,650,_ctx) ) {
					case 1:
						{
						setState(5388);
						match(IMPORTANCE);
						setState(5389);
						match(EQUAL);
						setState(5390);
						_la = _input.LA(1);
						if ( !(((((_la - 530)) & ~0x3f) == 0 && ((1L << (_la - 530)) & ((1L << (HIGH - 530)) | (1L << (LOW - 530)) | (1L << (MEDIUM - 530)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(5392);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5391);
							match(COMMA);
							}
						}

						setState(5394);
						match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						setState(5395);
						match(EQUAL);
						setState(5396);
						((Create_workload_groupContext)_localctx).request_max_memory_grant = match(DECIMAL);
						}
						break;
					case 3:
						{
						setState(5398);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5397);
							match(COMMA);
							}
						}

						setState(5400);
						match(REQUEST_MAX_CPU_TIME_SEC);
						setState(5401);
						match(EQUAL);
						setState(5402);
						((Create_workload_groupContext)_localctx).request_max_cpu_time_sec = match(DECIMAL);
						}
						break;
					case 4:
						{
						setState(5403);
						match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						setState(5404);
						match(EQUAL);
						setState(5405);
						((Create_workload_groupContext)_localctx).request_memory_grant_timeout_sec = match(DECIMAL);
						}
						break;
					case 5:
						{
						setState(5406);
						match(MAX_DOP);
						setState(5407);
						match(EQUAL);
						setState(5408);
						((Create_workload_groupContext)_localctx).max_dop = match(DECIMAL);
						}
						break;
					case 6:
						{
						setState(5409);
						match(GROUP_MAX_REQUESTS);
						setState(5410);
						match(EQUAL);
						setState(5411);
						((Create_workload_groupContext)_localctx).group_max_requests = match(DECIMAL);
						}
						break;
					}
					}
					setState(5414); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (GROUP_MAX_REQUESTS - 526)) | (1L << (IMPORTANCE - 526)) | (1L << (MAX_DOP - 526)))) != 0) || ((((_la - 675)) & ~0x3f) == 0 && ((1L << (_la - 675)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 675)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 675)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 675)))) != 0) || _la==COMMA );
				setState(5416);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
			case 1:
				{
				setState(5419);
				match(USING);
				setState(5422);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
				case 1:
					{
					setState(5420);
					((Create_workload_groupContext)_localctx).workload_group_pool_name = id();
					}
					break;
				case 2:
					{
					setState(5421);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				setState(5430);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EXTERNAL:
				case COMMA:
					{
					setState(5425);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5424);
						match(COMMA);
						}
					}

					setState(5427);
					match(EXTERNAL);
					setState(5428);
					((Create_workload_groupContext)_localctx).external_pool_name = id();
					}
					break;
				case DEFAULT_DOUBLE_QUOTE:
					{
					setState(5429);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				case EOF:
				case ALTER:
				case BEGIN:
				case BREAK:
				case CALLED:
				case CLOSE:
				case COMMIT:
				case CONTINUE:
				case CREATE:
				case DATA_COMPRESSION:
				case DBCC:
				case DEALLOCATE:
				case DECLARE:
				case DELETE:
				case DROP:
				case ELSE:
				case END:
				case EVENTDATA:
				case EXECUTE:
				case FETCH:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case GET:
				case GOTO:
				case GRANT:
				case IF:
				case INSERT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case MERGE:
				case OFFSETS:
				case OPEN:
				case PAGE:
				case PRINT:
				case PUBLIC:
				case RAISERROR:
				case RAW:
				case RETURN:
				case RETURNS:
				case REVERT:
				case ROLLBACK:
				case ROWCOUNT:
				case SAFETY:
				case SAVE:
				case SELECT:
				case SERVER:
				case SET:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case TRUNCATE:
				case UPDATE:
				case USE:
				case WAITFOR:
				case WHILE:
				case WITH:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SEND:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case LR_BRACKET:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_xml_schema_collectionContext extends ParserRuleContext {
		public IdContext relational_schema;
		public IdContext sql_identifier;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_xml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_xml_schema_collection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_xml_schema_collection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_xml_schema_collectionContext create_xml_schema_collection() throws RecognitionException {
		Create_xml_schema_collectionContext _localctx = new Create_xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_create_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5434);
			match(CREATE);
			setState(5435);
			match(XML);
			setState(5436);
			match(SCHEMA);
			setState(5437);
			match(COLLECTION);
			setState(5441);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
			case 1:
				{
				setState(5438);
				((Create_xml_schema_collectionContext)_localctx).relational_schema = id();
				setState(5439);
				match(DOT);
				}
				break;
			}
			setState(5443);
			((Create_xml_schema_collectionContext)_localctx).sql_identifier = id();
			setState(5444);
			match(AS);
			setState(5448);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(5445);
				match(STRING);
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(5446);
				id();
				}
				break;
			case LOCAL_ID:
				{
				setState(5447);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_queueContext extends ParserRuleContext {
		public IdContext queue_name;
		public IdContext filegroup;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Queue_settingsContext queue_settings() {
			return getRuleContext(Queue_settingsContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Create_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_queue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_queue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_queueContext create_queue() throws RecognitionException {
		Create_queueContext _localctx = new Create_queueContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_create_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5450);
			match(CREATE);
			setState(5451);
			match(QUEUE);
			setState(5454);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,659,_ctx) ) {
			case 1:
				{
				setState(5452);
				full_table_name();
				}
				break;
			case 2:
				{
				setState(5453);
				((Create_queueContext)_localctx).queue_name = id();
				}
				break;
			}
			setState(5457);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				{
				setState(5456);
				queue_settings();
				}
				break;
			}
			setState(5462);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(5459);
				match(ON);
				setState(5460);
				((Create_queueContext)_localctx).filegroup = id();
				}
				break;
			case DEFAULT:
				{
				setState(5461);
				match(DEFAULT);
				}
				break;
			case EOF:
			case ALTER:
			case BEGIN:
			case BREAK:
			case CALLED:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DATA_COMPRESSION:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DROP:
			case ELSE:
			case END:
			case EVENTDATA:
			case EXECUTE:
			case FETCH:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case GET:
			case GOTO:
			case GRANT:
			case IF:
			case INSERT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case MERGE:
			case OFFSETS:
			case OPEN:
			case PAGE:
			case PRINT:
			case PUBLIC:
			case RAISERROR:
			case RAW:
			case RETURN:
			case RETURNS:
			case REVERT:
			case ROLLBACK:
			case ROWCOUNT:
			case SAFETY:
			case SAVE:
			case SELECT:
			case SERVER:
			case SET:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case TRUNCATE:
			case UPDATE:
			case USE:
			case WAITFOR:
			case WHILE:
			case WITH:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SEND:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_settingsContext extends ParserRuleContext {
		public Token max_readers;
		public Token user_name;
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> STATUS() { return getTokens(TSqlParser.STATUS); }
		public TerminalNode STATUS(int i) {
			return getToken(TSqlParser.STATUS, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RETENTION() { return getToken(TSqlParser.RETENTION, 0); }
		public TerminalNode ACTIVATION() { return getToken(TSqlParser.ACTIVATION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode PROCEDURE_NAME() { return getToken(TSqlParser.PROCEDURE_NAME, 0); }
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode MAX_QUEUE_READERS() { return getToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode POISON_MESSAGE_HANDLING() { return getToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode SELF() { return getToken(TSqlParser.SELF, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Queue_settingsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_settings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQueue_settings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQueue_settings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitQueue_settings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_settingsContext queue_settings() throws RecognitionException {
		Queue_settingsContext _localctx = new Queue_settingsContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_queue_settings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5464);
			match(WITH);
			setState(5471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATUS) {
				{
				setState(5465);
				match(STATUS);
				setState(5466);
				match(EQUAL);
				setState(5467);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5468);
					match(COMMA);
					}
				}

				}
			}

			setState(5479);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETENTION) {
				{
				setState(5473);
				match(RETENTION);
				setState(5474);
				match(EQUAL);
				setState(5475);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5476);
					match(COMMA);
					}
				}

				}
			}

			setState(5535);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ACTIVATION) {
				{
				setState(5481);
				match(ACTIVATION);
				setState(5482);
				match(LR_BRACKET);
				setState(5489);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
				case 1:
					{
					setState(5484);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5483);
						match(COMMA);
						}
					}

					setState(5486);
					match(STATUS);
					setState(5487);
					match(EQUAL);
					setState(5488);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5497);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
				case 1:
					{
					setState(5492);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5491);
						match(COMMA);
						}
					}

					setState(5494);
					match(PROCEDURE_NAME);
					setState(5495);
					match(EQUAL);
					setState(5496);
					func_proc_name();
					}
					break;
				}
				setState(5505);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
				case 1:
					{
					setState(5500);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5499);
						match(COMMA);
						}
					}

					setState(5502);
					match(MAX_QUEUE_READERS);
					setState(5503);
					match(EQUAL);
					setState(5504);
					((Queue_settingsContext)_localctx).max_readers = match(DECIMAL);
					}
					break;
				}
				setState(5517);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
				case 1:
					{
					setState(5508);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5507);
						match(COMMA);
						}
					}

					setState(5510);
					match(EXECUTE);
					setState(5511);
					match(AS);
					setState(5515);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELF:
						{
						setState(5512);
						match(SELF);
						}
						break;
					case STRING:
						{
						setState(5513);
						((Queue_settingsContext)_localctx).user_name = match(STRING);
						}
						break;
					case OWNER:
						{
						setState(5514);
						match(OWNER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(5526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
				case 1:
					{
					setState(5520);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5519);
						match(COMMA);
						}
					}

					setState(5522);
					match(POISON_MESSAGE_HANDLING);
					setState(5523);
					match(STATUS);
					setState(5524);
					match(EQUAL);
					setState(5525);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DROP || _la==COMMA) {
					{
					setState(5529);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5528);
						match(COMMA);
						}
					}

					setState(5531);
					match(DROP);
					}
				}

				setState(5534);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_queueContext extends ParserRuleContext {
		public IdContext queue_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Queue_settingsContext queue_settings() {
			return getRuleContext(Queue_settingsContext.class,0);
		}
		public Queue_actionContext queue_action() {
			return getRuleContext(Queue_actionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_queue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_queue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_queueContext alter_queue() throws RecognitionException {
		Alter_queueContext _localctx = new Alter_queueContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_alter_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5537);
			match(ALTER);
			setState(5538);
			match(QUEUE);
			setState(5541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
			case 1:
				{
				setState(5539);
				full_table_name();
				}
				break;
			case 2:
				{
				setState(5540);
				((Alter_queueContext)_localctx).queue_name = id();
				}
				break;
			}
			setState(5545);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(5543);
				queue_settings();
				}
				break;
			case MOVE:
			case REBUILD:
			case REORGANIZE:
				{
				setState(5544);
				queue_action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_actionContext extends ParserRuleContext {
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Queue_rebuild_optionsContext queue_rebuild_options() {
			return getRuleContext(Queue_rebuild_optionsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode REORGANIZE() { return getToken(TSqlParser.REORGANIZE, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(TSqlParser.LOB_COMPACTION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode MOVE() { return getToken(TSqlParser.MOVE, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Queue_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQueue_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQueue_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitQueue_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_actionContext queue_action() throws RecognitionException {
		Queue_actionContext _localctx = new Queue_actionContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_queue_action);
		int _la;
		try {
			setState(5568);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REBUILD:
				enterOuterAlt(_localctx, 1);
				{
				setState(5547);
				match(REBUILD);
				setState(5553);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
				case 1:
					{
					setState(5548);
					match(WITH);
					setState(5549);
					match(LR_BRACKET);
					setState(5550);
					queue_rebuild_options();
					setState(5551);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5555);
				match(REORGANIZE);
				setState(5560);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,683,_ctx) ) {
				case 1:
					{
					setState(5556);
					match(WITH);
					setState(5557);
					match(LOB_COMPACTION);
					setState(5558);
					match(EQUAL);
					setState(5559);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5562);
				match(MOVE);
				setState(5563);
				match(TO);
				setState(5566);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(5564);
					id();
					}
					break;
				case DEFAULT:
					{
					setState(5565);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_rebuild_optionsContext extends ParserRuleContext {
		public TerminalNode MAXDOP() { return getToken(TSqlParser.MAXDOP, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Queue_rebuild_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_rebuild_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQueue_rebuild_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQueue_rebuild_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitQueue_rebuild_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_rebuild_optionsContext queue_rebuild_options() throws RecognitionException {
		Queue_rebuild_optionsContext _localctx = new Queue_rebuild_optionsContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_queue_rebuild_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5570);
			match(MAXDOP);
			setState(5571);
			match(EQUAL);
			setState(5572);
			match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_contractContext extends ParserRuleContext {
		public IdContext owner_name;
		public IdContext message_type_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return getRuleContext(Contract_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public List<TerminalNode> SENT() { return getTokens(TSqlParser.SENT); }
		public TerminalNode SENT(int i) {
			return getToken(TSqlParser.SENT, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> INITIATOR() { return getTokens(TSqlParser.INITIATOR); }
		public TerminalNode INITIATOR(int i) {
			return getToken(TSqlParser.INITIATOR, i);
		}
		public List<TerminalNode> TARGET() { return getTokens(TSqlParser.TARGET); }
		public TerminalNode TARGET(int i) {
			return getToken(TSqlParser.TARGET, i);
		}
		public List<TerminalNode> ANY() { return getTokens(TSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(TSqlParser.ANY, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(TSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(TSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_contractContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_contract; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_contract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_contract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_contract(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_contractContext create_contract() throws RecognitionException {
		Create_contractContext _localctx = new Create_contractContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_create_contract);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5574);
			match(CREATE);
			setState(5575);
			match(CONTRACT);
			setState(5576);
			contract_name();
			setState(5579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5577);
				match(AUTHORIZATION);
				setState(5578);
				((Create_contractContext)_localctx).owner_name = id();
				}
			}

			setState(5581);
			match(LR_BRACKET);
			setState(5592); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5584);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(5582);
					((Create_contractContext)_localctx).message_type_name = id();
					}
					break;
				case DEFAULT:
					{
					setState(5583);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5586);
				match(SENT);
				setState(5587);
				match(BY);
				setState(5588);
				_la = _input.LA(1);
				if ( !(_la==ANY || _la==TARGET || _la==INITIATOR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5589);
					match(COMMA);
					}
				}

				}
				}
				setState(5594); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & ((1L << (CALLED - 37)) | (1L << (DATA_COMPRESSION - 37)) | (1L << (DEFAULT - 37)))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0) );
			setState(5596);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conversation_statementContext extends ParserRuleContext {
		public Begin_conversation_timerContext begin_conversation_timer() {
			return getRuleContext(Begin_conversation_timerContext.class,0);
		}
		public Begin_conversation_dialogContext begin_conversation_dialog() {
			return getRuleContext(Begin_conversation_dialogContext.class,0);
		}
		public End_conversationContext end_conversation() {
			return getRuleContext(End_conversationContext.class,0);
		}
		public Get_conversationContext get_conversation() {
			return getRuleContext(Get_conversationContext.class,0);
		}
		public Send_conversationContext send_conversation() {
			return getRuleContext(Send_conversationContext.class,0);
		}
		public Waitfor_conversationContext waitfor_conversation() {
			return getRuleContext(Waitfor_conversationContext.class,0);
		}
		public Conversation_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conversation_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterConversation_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitConversation_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitConversation_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conversation_statementContext conversation_statement() throws RecognitionException {
		Conversation_statementContext _localctx = new Conversation_statementContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_conversation_statement);
		try {
			setState(5604);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,690,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5598);
				begin_conversation_timer();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5599);
				begin_conversation_dialog();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5600);
				end_conversation();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5601);
				get_conversation();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5602);
				send_conversation();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5603);
				waitfor_conversation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Message_statementContext extends ParserRuleContext {
		public IdContext message_type_name;
		public IdContext owner_name;
		public IdContext schema_collection_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode VALIDATION() { return getToken(TSqlParser.VALIDATION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode EMPTY() { return getToken(TSqlParser.EMPTY, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(TSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode VALID_XML() { return getToken(TSqlParser.VALID_XML, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_message_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMessage_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMessage_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitMessage_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Message_statementContext message_statement() throws RecognitionException {
		Message_statementContext _localctx = new Message_statementContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_message_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5606);
			match(CREATE);
			setState(5607);
			match(MESSAGE);
			setState(5608);
			match(TYPE);
			setState(5609);
			((Message_statementContext)_localctx).message_type_name = id();
			setState(5612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5610);
				match(AUTHORIZATION);
				setState(5611);
				((Message_statementContext)_localctx).owner_name = id();
				}
			}

			{
			setState(5614);
			match(VALIDATION);
			setState(5615);
			match(EQUAL);
			setState(5624);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(5616);
				match(NONE);
				}
				break;
			case EMPTY:
				{
				setState(5617);
				match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				setState(5618);
				match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				setState(5619);
				match(VALID_XML);
				setState(5620);
				match(WITH);
				setState(5621);
				match(SCHEMA);
				setState(5622);
				match(COLLECTION);
				setState(5623);
				((Message_statementContext)_localctx).schema_collection_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public List<TerminalNode> WHEN() { return getTokens(TSqlParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(TSqlParser.WHEN, i);
		}
		public List<TerminalNode> MATCHED() { return getTokens(TSqlParser.MATCHED); }
		public TerminalNode MATCHED(int i) {
			return getToken(TSqlParser.MATCHED, i);
		}
		public List<TerminalNode> THEN() { return getTokens(TSqlParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(TSqlParser.THEN, i);
		}
		public List<Merge_matchedContext> merge_matched() {
			return getRuleContexts(Merge_matchedContext.class);
		}
		public Merge_matchedContext merge_matched(int i) {
			return getRuleContext(Merge_matchedContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(TSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(TSqlParser.NOT, i);
		}
		public Merge_not_matchedContext merge_not_matched() {
			return getRuleContext(Merge_not_matchedContext.class,0);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public List<TerminalNode> SOURCE() { return getTokens(TSqlParser.SOURCE); }
		public TerminalNode SOURCE(int i) {
			return getToken(TSqlParser.SOURCE, i);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public List<TerminalNode> AND() { return getTokens(TSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(TSqlParser.AND, i);
		}
		public TerminalNode TARGET() { return getToken(TSqlParser.TARGET, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_merge_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5626);
				with_expression();
				}
			}

			setState(5629);
			match(MERGE);
			setState(5637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(5630);
				match(TOP);
				setState(5631);
				match(LR_BRACKET);
				setState(5632);
				expression(0);
				setState(5633);
				match(RR_BRACKET);
				setState(5635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5634);
					match(PERCENT);
					}
				}

				}
			}

			setState(5640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5639);
				match(INTO);
				}
			}

			setState(5642);
			ddl_object();
			setState(5644);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5643);
				insert_with_table_hints();
				}
			}

			setState(5647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,698,_ctx) ) {
			case 1:
				{
				setState(5646);
				as_table_alias();
				}
				break;
			}
			setState(5649);
			match(USING);
			setState(5650);
			table_sources();
			setState(5651);
			match(ON);
			setState(5652);
			search_condition();
			setState(5663);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,700,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5653);
					match(WHEN);
					setState(5654);
					match(MATCHED);
					setState(5657);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND) {
						{
						setState(5655);
						match(AND);
						setState(5656);
						search_condition();
						}
					}

					setState(5659);
					match(THEN);
					setState(5660);
					merge_matched();
					}
					} 
				}
				setState(5665);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,700,_ctx);
			}
			setState(5679);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
			case 1:
				{
				setState(5666);
				match(WHEN);
				setState(5667);
				match(NOT);
				setState(5668);
				match(MATCHED);
				setState(5671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(5669);
					match(BY);
					setState(5670);
					match(TARGET);
					}
				}

				setState(5675);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(5673);
					match(AND);
					setState(5674);
					search_condition();
					}
				}

				setState(5677);
				match(THEN);
				setState(5678);
				merge_not_matched();
				}
				break;
			}
			setState(5694);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WHEN) {
				{
				{
				setState(5681);
				match(WHEN);
				setState(5682);
				match(NOT);
				setState(5683);
				match(MATCHED);
				setState(5684);
				match(BY);
				setState(5685);
				match(SOURCE);
				setState(5688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(5686);
					match(AND);
					setState(5687);
					search_condition();
					}
				}

				setState(5690);
				match(THEN);
				setState(5691);
				merge_matched();
				}
				}
				setState(5696);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5698);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5697);
				output_clause();
				}
			}

			setState(5701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5700);
				option_clause();
				}
			}

			setState(5703);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_matchedContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMerge_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMerge_matched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitMerge_matched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_matchedContext merge_matched() throws RecognitionException {
		Merge_matchedContext _localctx = new Merge_matchedContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_merge_matched);
		int _la;
		try {
			setState(5716);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5705);
				match(UPDATE);
				setState(5706);
				match(SET);
				setState(5707);
				update_elem();
				setState(5712);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5708);
					match(COMMA);
					setState(5709);
					update_elem();
					}
					}
					setState(5714);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5715);
				match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_not_matchedContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_not_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMerge_not_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMerge_not_matched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitMerge_not_matched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_not_matchedContext merge_not_matched() throws RecognitionException {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_merge_not_matched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5718);
			match(INSERT);
			setState(5723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5719);
				match(LR_BRACKET);
				setState(5720);
				column_name_list();
				setState(5721);
				match(RR_BRACKET);
				}
			}

			setState(5728);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(5725);
				table_value_constructor();
				}
				break;
			case DEFAULT:
				{
				setState(5726);
				match(DEFAULT);
				setState(5727);
				match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return getRuleContext(Delete_statement_fromContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> FROM() { return getTokens(TSqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(TSqlParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5730);
				with_expression();
				}
			}

			setState(5733);
			match(DELETE);
			setState(5741);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(5734);
				match(TOP);
				setState(5735);
				match(LR_BRACKET);
				setState(5736);
				expression(0);
				setState(5737);
				match(RR_BRACKET);
				setState(5739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5738);
					match(PERCENT);
					}
				}

				}
			}

			setState(5744);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5743);
				match(FROM);
				}
			}

			setState(5746);
			delete_statement_from();
			setState(5748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
			case 1:
				{
				setState(5747);
				insert_with_table_hints();
				}
				break;
			}
			setState(5751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,717,_ctx) ) {
			case 1:
				{
				setState(5750);
				output_clause();
				}
				break;
			}
			setState(5755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5753);
				match(FROM);
				setState(5754);
				table_sources();
				}
			}

			setState(5770);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5757);
				match(WHERE);
				setState(5768);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case EVENTDATA:
				case EXISTS:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NOT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case STATE:
				case SYSTEM_USER:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLY:
				case ARITHABORT:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STUFF:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(5758);
					search_condition();
					}
					break;
				case CURRENT:
					{
					setState(5759);
					match(CURRENT);
					setState(5760);
					match(OF);
					setState(5766);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
					case 1:
						{
						setState(5762);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
						case 1:
							{
							setState(5761);
							match(GLOBAL);
							}
							break;
						}
						setState(5764);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(5765);
						((Delete_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(5773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5772);
				for_clause();
				}
			}

			setState(5776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5775);
				option_clause();
				}
			}

			setState(5779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
			case 1:
				{
				setState(5778);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statement_fromContext extends ParserRuleContext {
		public Token table_var;
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDelete_statement_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDelete_statement_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDelete_statement_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statement_fromContext delete_statement_from() throws RecognitionException {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_delete_statement_from);
		try {
			setState(5785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5781);
				ddl_object();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5782);
				table_alias();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5783);
				rowset_function_limited();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5784);
				((Delete_statement_fromContext)_localctx).table_var = match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return getRuleContext(Insert_statement_valueContext.class,0);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5787);
				with_expression();
				}
			}

			setState(5790);
			match(INSERT);
			setState(5798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(5791);
				match(TOP);
				setState(5792);
				match(LR_BRACKET);
				setState(5793);
				expression(0);
				setState(5794);
				match(RR_BRACKET);
				setState(5796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5795);
					match(PERCENT);
					}
				}

				}
			}

			setState(5801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5800);
				match(INTO);
				}
			}

			setState(5805);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(5803);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(5804);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5808);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				{
				setState(5807);
				insert_with_table_hints();
				}
				break;
			}
			setState(5814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
			case 1:
				{
				setState(5810);
				match(LR_BRACKET);
				setState(5811);
				column_name_list();
				setState(5812);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5816);
				output_clause();
				}
			}

			setState(5819);
			insert_statement_value();
			setState(5821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5820);
				for_clause();
				}
			}

			setState(5824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5823);
				option_clause();
				}
			}

			setState(5827);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
			case 1:
				{
				setState(5826);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statement_valueContext extends ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterInsert_statement_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitInsert_statement_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitInsert_statement_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statement_valueContext insert_statement_value() throws RecognitionException {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_insert_statement_value);
		try {
			setState(5834);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5829);
				table_value_constructor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5830);
				derived_table();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5831);
				execute_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5832);
				match(DEFAULT);
				setState(5833);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Receive_statementContext extends ParserRuleContext {
		public IdContext table_variable;
		public Search_conditionContext where;
		public TerminalNode RECEIVE() { return getToken(TSqlParser.RECEIVE, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(TSqlParser.DISTINCT, 0); }
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Receive_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_receive_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterReceive_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitReceive_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitReceive_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Receive_statementContext receive_statement() throws RecognitionException {
		Receive_statementContext _localctx = new Receive_statementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_receive_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5836);
				match(LR_BRACKET);
				}
			}

			setState(5839);
			match(RECEIVE);
			setState(5844);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(5840);
				match(ALL);
				}
				break;
			case DISTINCT:
				{
				setState(5841);
				match(DISTINCT);
				}
				break;
			case TOP:
				{
				setState(5842);
				top_clause();
				}
				break;
			case STAR:
				{
				setState(5843);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LOCAL_ID) {
				{
				{
				setState(5846);
				match(LOCAL_ID);
				setState(5847);
				match(EQUAL);
				setState(5848);
				expression(0);
				setState(5850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5849);
					match(COMMA);
					}
				}

				}
				}
				setState(5856);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5857);
			match(FROM);
			setState(5858);
			full_table_name();
			setState(5864);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5859);
				match(INTO);
				setState(5860);
				((Receive_statementContext)_localctx).table_variable = id();
				{
				setState(5861);
				match(WHERE);
				setState(5862);
				((Receive_statementContext)_localctx).where = search_condition();
				}
				}
			}

			setState(5867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RR_BRACKET) {
				{
				setState(5866);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5870);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5869);
				with_expression();
				}
			}

			setState(5872);
			query_expression();
			setState(5874);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
			case 1:
				{
				setState(5873);
				order_by_clause();
				}
				break;
			}
			setState(5877);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
			case 1:
				{
				setState(5876);
				for_clause();
				}
				break;
			}
			setState(5880);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
			case 1:
				{
				setState(5879);
				option_clause();
				}
				break;
			}
			setState(5883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,749,_ctx) ) {
			case 1:
				{
				setState(5882);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeContext time() throws RecognitionException {
		TimeContext _localctx = new TimeContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_time);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5887);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				{
				setState(5885);
				match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				setState(5886);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Search_condition_listContext search_condition_list() {
			return getRuleContext(Search_condition_listContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5889);
				with_expression();
				}
			}

			setState(5892);
			match(UPDATE);
			setState(5900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(5893);
				match(TOP);
				setState(5894);
				match(LR_BRACKET);
				setState(5895);
				expression(0);
				setState(5896);
				match(RR_BRACKET);
				setState(5898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5897);
					match(PERCENT);
					}
				}

				}
			}

			setState(5904);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(5902);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(5903);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5907);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				setState(5906);
				with_table_hints();
				}
			}

			setState(5909);
			match(SET);
			setState(5910);
			update_elem();
			setState(5915);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5911);
				match(COMMA);
				setState(5912);
				update_elem();
				}
				}
				setState(5917);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5919);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,757,_ctx) ) {
			case 1:
				{
				setState(5918);
				output_clause();
				}
				break;
			}
			setState(5923);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5921);
				match(FROM);
				setState(5922);
				table_sources();
				}
			}

			setState(5938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5925);
				match(WHERE);
				setState(5936);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case EVENTDATA:
				case EXISTS:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NOT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case STATE:
				case SYSTEM_USER:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLY:
				case ARITHABORT:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STUFF:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(5926);
					search_condition_list();
					}
					break;
				case CURRENT:
					{
					setState(5927);
					match(CURRENT);
					setState(5928);
					match(OF);
					setState(5934);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
					case 1:
						{
						setState(5930);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
						case 1:
							{
							setState(5929);
							match(GLOBAL);
							}
							break;
						}
						setState(5932);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(5933);
						((Update_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(5941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5940);
				for_clause();
				}
			}

			setState(5944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5943);
				option_clause();
				}
			}

			setState(5947);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
			case 1:
				{
				setState(5946);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_clauseContext extends ParserRuleContext {
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public List<Output_dml_list_elemContext> output_dml_list_elem() {
			return getRuleContexts(Output_dml_list_elemContext.class);
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return getRuleContext(Output_dml_list_elemContext.class,i);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Output_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOutput_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOutput_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOutput_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_clauseContext output_clause() throws RecognitionException {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_output_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5949);
			match(OUTPUT);
			setState(5950);
			output_dml_list_elem();
			setState(5955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5951);
				match(COMMA);
				setState(5952);
				output_dml_list_elem();
				}
				}
				setState(5957);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5958);
				match(INTO);
				setState(5961);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL_ID:
					{
					setState(5959);
					match(LOCAL_ID);
					}
					break;
				case BLOCKING_HIERARCHY:
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(5960);
					table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5967);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
				case 1:
					{
					setState(5963);
					match(LR_BRACKET);
					setState(5964);
					column_name_list();
					setState(5965);
					match(RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_dml_list_elemContext extends ParserRuleContext {
		public Output_column_nameContext output_column_name() {
			return getRuleContext(Output_column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_dml_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOutput_dml_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOutput_dml_list_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOutput_dml_list_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_dml_list_elemContext output_dml_list_elem() throws RecognitionException {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_output_dml_list_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
			case 1:
				{
				setState(5971);
				output_column_name();
				}
				break;
			case 2:
				{
				setState(5972);
				expression(0);
				}
				break;
			}
			setState(5976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,771,_ctx) ) {
			case 1:
				{
				setState(5975);
				as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_column_nameContext extends ParserRuleContext {
		public TerminalNode DELETED() { return getToken(TSqlParser.DELETED, 0); }
		public TerminalNode INSERTED() { return getToken(TSqlParser.INSERTED, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DOLLAR_ACTION() { return getToken(TSqlParser.DOLLAR_ACTION, 0); }
		public Output_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOutput_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOutput_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOutput_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_column_nameContext output_column_name() throws RecognitionException {
		Output_column_nameContext _localctx = new Output_column_nameContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_output_column_name);
		try {
			setState(5989);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BLOCKING_HIERARCHY:
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5981);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
				case 1:
					{
					setState(5978);
					match(DELETED);
					}
					break;
				case 2:
					{
					setState(5979);
					match(INSERTED);
					}
					break;
				case 3:
					{
					setState(5980);
					table_name();
					}
					break;
				}
				setState(5983);
				match(DOT);
				setState(5986);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(5984);
					match(STAR);
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(5985);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DOLLAR_ACTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5988);
				match(DOLLAR_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_databaseContext extends ParserRuleContext {
		public IdContext database;
		public IdContext collation_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode CONTAINMENT() { return getToken(TSqlParser.CONTAINMENT, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<Database_file_specContext> database_file_spec() {
			return getRuleContexts(Database_file_specContext.class);
		}
		public Database_file_specContext database_file_spec(int i) {
			return getRuleContext(Database_file_specContext.class,i);
		}
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Create_database_optionContext> create_database_option() {
			return getRuleContexts(Create_database_optionContext.class);
		}
		public Create_database_optionContext create_database_option(int i) {
			return getRuleContext(Create_database_optionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(TSqlParser.PARTIAL, 0); }
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public Create_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_databaseContext create_database() throws RecognitionException {
		Create_databaseContext _localctx = new Create_databaseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_create_database);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5991);
			match(CREATE);
			setState(5992);
			match(DATABASE);
			{
			setState(5993);
			((Create_databaseContext)_localctx).database = id();
			}
			setState(5997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINMENT) {
				{
				setState(5994);
				match(CONTAINMENT);
				setState(5995);
				match(EQUAL);
				setState(5996);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(5999);
				match(ON);
				setState(6001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(6000);
					match(PRIMARY);
					}
				}

				setState(6003);
				database_file_spec();
				setState(6008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6004);
					match(COMMA);
					setState(6005);
					database_file_spec();
					}
					}
					setState(6010);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(6013);
				match(LOG);
				setState(6014);
				match(ON);
				setState(6015);
				database_file_spec();
				setState(6020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6016);
					match(COMMA);
					setState(6017);
					database_file_spec();
					}
					}
					setState(6022);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6027);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(6025);
				match(COLLATE);
				setState(6026);
				((Create_databaseContext)_localctx).collation_name = id();
				}
			}

			setState(6038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
			case 1:
				{
				setState(6029);
				match(WITH);
				setState(6030);
				create_database_option();
				setState(6035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6031);
					match(COMMA);
					setState(6032);
					create_database_option();
					}
					}
					setState(6037);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public Search_conditionContext where;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public TerminalNode INCLUDE() { return getToken(TSqlParser.INCLUDE, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6040);
			match(CREATE);
			setState(6042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(6041);
				match(UNIQUE);
				}
			}

			setState(6045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				setState(6044);
				clustered();
				}
			}

			setState(6047);
			match(INDEX);
			setState(6048);
			id();
			setState(6049);
			match(ON);
			setState(6050);
			table_name_with_hint();
			setState(6051);
			match(LR_BRACKET);
			setState(6052);
			column_name_list_with_order();
			setState(6053);
			match(RR_BRACKET);
			setState(6059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(6054);
				match(INCLUDE);
				setState(6055);
				match(LR_BRACKET);
				setState(6056);
				column_name_list();
				setState(6057);
				match(RR_BRACKET);
				}
			}

			setState(6063);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6061);
				match(WHERE);
				setState(6062);
				((Create_indexContext)_localctx).where = search_condition();
				}
			}

			setState(6066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
			case 1:
				{
				setState(6065);
				index_options();
				}
				break;
			}
			setState(6070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6068);
				match(ON);
				setState(6069);
				id();
				}
			}

			setState(6073);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
			case 1:
				{
				setState(6072);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_procedureContext extends ParserRuleContext {
		public Token proc;
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode PROC() { return getToken(TSqlParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(TSqlParser.PROCEDURE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Procedure_optionContext> procedure_option() {
			return getRuleContexts(Procedure_optionContext.class);
		}
		public Procedure_optionContext procedure_option(int i) {
			return getRuleContext(Procedure_optionContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_or_alter_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_procedureContext create_or_alter_procedure() throws RecognitionException {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_create_or_alter_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6081);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6075);
				match(CREATE);
				setState(6078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6076);
					match(OR);
					setState(6077);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6080);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6083);
			((Create_or_alter_procedureContext)_localctx).proc = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				((Create_or_alter_procedureContext)_localctx).proc = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6084);
			func_proc_name();
			setState(6087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(6085);
				match(SEMI);
				setState(6086);
				match(DECIMAL);
				}
			}

			setState(6103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_ID || _la==LR_BRACKET) {
				{
				setState(6090);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6089);
					match(LR_BRACKET);
					}
				}

				setState(6092);
				procedure_param();
				setState(6097);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6093);
					match(COMMA);
					setState(6094);
					procedure_param();
					}
					}
					setState(6099);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(6100);
					match(RR_BRACKET);
					}
				}

				}
			}

			setState(6114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6105);
				match(WITH);
				setState(6106);
				procedure_option();
				setState(6111);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6107);
					match(COMMA);
					setState(6108);
					procedure_option();
					}
					}
					setState(6113);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6116);
				match(FOR);
				setState(6117);
				match(REPLICATION);
				}
			}

			setState(6120);
			match(AS);
			setState(6121);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_triggerContext extends ParserRuleContext {
		public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
			return getRuleContext(Create_or_alter_dml_triggerContext.class,0);
		}
		public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
			return getRuleContext(Create_or_alter_ddl_triggerContext.class,0);
		}
		public Create_or_alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_or_alter_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_triggerContext create_or_alter_trigger() throws RecognitionException {
		Create_or_alter_triggerContext _localctx = new Create_or_alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_create_or_alter_trigger);
		try {
			setState(6125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6123);
				create_or_alter_dml_trigger();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6124);
				create_or_alter_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_dml_triggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public List<Dml_trigger_operationContext> dml_trigger_operation() {
			return getRuleContexts(Dml_trigger_operationContext.class);
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return getRuleContext(Dml_trigger_operationContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> FOR() { return getTokens(TSqlParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(TSqlParser.FOR, i);
		}
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(TSqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public List<TerminalNode> WITH() { return getTokens(TSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(TSqlParser.WITH, i);
		}
		public List<Dml_trigger_optionContext> dml_trigger_option() {
			return getRuleContexts(Dml_trigger_optionContext.class);
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return getRuleContext(Dml_trigger_optionContext.class,i);
		}
		public TerminalNode APPEND() { return getToken(TSqlParser.APPEND, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_or_alter_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() throws RecognitionException {
		Create_or_alter_dml_triggerContext _localctx = new Create_or_alter_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_create_or_alter_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6133);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6127);
				match(CREATE);
				setState(6130);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6128);
					match(OR);
					setState(6129);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6132);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6135);
			match(TRIGGER);
			setState(6136);
			simple_name();
			setState(6137);
			match(ON);
			setState(6138);
			table_name();
			setState(6148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6139);
				match(WITH);
				setState(6140);
				dml_trigger_option();
				setState(6145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6141);
					match(COMMA);
					setState(6142);
					dml_trigger_option();
					}
					}
					setState(6147);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6154);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(6150);
				match(FOR);
				}
				break;
			case AFTER:
				{
				setState(6151);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(6152);
				match(INSTEAD);
				setState(6153);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6156);
			dml_trigger_operation();
			setState(6161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6157);
				match(COMMA);
				setState(6158);
				dml_trigger_operation();
				}
				}
				setState(6163);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6164);
				match(WITH);
				setState(6165);
				match(APPEND);
				}
			}

			setState(6171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(6168);
				match(NOT);
				setState(6169);
				match(FOR);
				setState(6170);
				match(REPLICATION);
				}
			}

			setState(6173);
			match(AS);
			setState(6174);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_trigger_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Dml_trigger_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_trigger_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDml_trigger_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDml_trigger_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDml_trigger_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_trigger_optionContext dml_trigger_option() throws RecognitionException {
		Dml_trigger_optionContext _localctx = new Dml_trigger_optionContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_dml_trigger_option);
		try {
			setState(6178);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6176);
				match(ENCRYPTION);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6177);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_trigger_operationContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public Dml_trigger_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_trigger_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDml_trigger_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDml_trigger_operation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDml_trigger_operation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_trigger_operationContext dml_trigger_operation() throws RecognitionException {
		Dml_trigger_operationContext _localctx = new Dml_trigger_operationContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_dml_trigger_operation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6180);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_ddl_triggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Ddl_trigger_operationContext ddl_trigger_operation() {
			return getRuleContext(Ddl_trigger_operationContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Dml_trigger_optionContext> dml_trigger_option() {
			return getRuleContexts(Dml_trigger_optionContext.class);
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return getRuleContext(Dml_trigger_optionContext.class,i);
		}
		public List<Dml_trigger_operationContext> dml_trigger_operation() {
			return getRuleContexts(Dml_trigger_operationContext.class);
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return getRuleContext(Dml_trigger_operationContext.class,i);
		}
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_ddl_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_ddl_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_ddl_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_ddl_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_or_alter_ddl_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() throws RecognitionException {
		Create_or_alter_ddl_triggerContext _localctx = new Create_or_alter_ddl_triggerContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_create_or_alter_ddl_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6188);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6182);
				match(CREATE);
				setState(6185);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6183);
					match(OR);
					setState(6184);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6187);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6190);
			match(TRIGGER);
			setState(6191);
			simple_name();
			setState(6192);
			match(ON);
			setState(6196);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(6193);
				match(ALL);
				setState(6194);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(6195);
				match(DATABASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6198);
				match(WITH);
				setState(6199);
				dml_trigger_option();
				setState(6204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6200);
					match(COMMA);
					setState(6201);
					dml_trigger_option();
					}
					}
					setState(6206);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6209);
			_la = _input.LA(1);
			if ( !(_la==FOR || _la==AFTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6210);
			ddl_trigger_operation();
			setState(6215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6211);
				match(COMMA);
				setState(6212);
				dml_trigger_operation();
				}
				}
				setState(6217);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6218);
			match(AS);
			setState(6219);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_trigger_operationContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Ddl_trigger_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_trigger_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDdl_trigger_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDdl_trigger_operation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDdl_trigger_operation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_trigger_operationContext ddl_trigger_operation() throws RecognitionException {
		Ddl_trigger_operationContext _localctx = new Ddl_trigger_operationContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_ddl_trigger_operation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6221);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_functionContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public Func_body_returns_selectContext func_body_returns_select() {
			return getRuleContext(Func_body_returns_selectContext.class,0);
		}
		public Func_body_returns_tableContext func_body_returns_table() {
			return getRuleContext(Func_body_returns_tableContext.class,0);
		}
		public Func_body_returns_scalarContext func_body_returns_scalar() {
			return getRuleContext(Func_body_returns_scalarContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_or_alter_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_functionContext create_or_alter_function() throws RecognitionException {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_create_or_alter_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6229);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6223);
				match(CREATE);
				setState(6226);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6224);
					match(OR);
					setState(6225);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6228);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6231);
			match(FUNCTION);
			setState(6232);
			func_proc_name();
			setState(6246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
			case 1:
				{
				{
				setState(6233);
				match(LR_BRACKET);
				setState(6234);
				procedure_param();
				setState(6239);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6235);
					match(COMMA);
					setState(6236);
					procedure_param();
					}
					}
					setState(6241);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6242);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				{
				setState(6244);
				match(LR_BRACKET);
				setState(6245);
				match(RR_BRACKET);
				}
				break;
			}
			setState(6251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
			case 1:
				{
				setState(6248);
				func_body_returns_select();
				}
				break;
			case 2:
				{
				setState(6249);
				func_body_returns_table();
				}
				break;
			case 3:
				{
				setState(6250);
				func_body_returns_scalar();
				}
				break;
			}
			setState(6254);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,822,_ctx) ) {
			case 1:
				{
				setState(6253);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_selectContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Func_body_returns_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunc_body_returns_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunc_body_returns_select(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFunc_body_returns_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_body_returns_selectContext func_body_returns_select() throws RecognitionException {
		Func_body_returns_selectContext _localctx = new Func_body_returns_selectContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_func_body_returns_select);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6256);
			match(RETURNS);
			setState(6257);
			match(TABLE);
			setState(6267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6258);
				match(WITH);
				setState(6259);
				function_option();
				setState(6264);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6260);
					match(COMMA);
					setState(6261);
					function_option();
					}
					}
					setState(6266);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6269);
				match(AS);
				}
			}

			setState(6272);
			match(RETURN);
			setState(6273);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_tableContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public Func_body_returns_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunc_body_returns_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunc_body_returns_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFunc_body_returns_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_body_returns_tableContext func_body_returns_table() throws RecognitionException {
		Func_body_returns_tableContext _localctx = new Func_body_returns_tableContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_func_body_returns_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6275);
			match(RETURNS);
			setState(6276);
			match(LOCAL_ID);
			setState(6277);
			table_type_definition();
			setState(6287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6278);
				match(WITH);
				setState(6279);
				function_option();
				setState(6284);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6280);
					match(COMMA);
					setState(6281);
					function_option();
					}
					}
					setState(6286);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6289);
				match(AS);
				}
			}

			setState(6292);
			match(BEGIN);
			setState(6296);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,829,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6293);
					sql_clause();
					}
					} 
				}
				setState(6298);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,829,_ctx);
			}
			setState(6299);
			match(RETURN);
			setState(6300);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_scalarContext extends ParserRuleContext {
		public ExpressionContext ret;
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public Func_body_returns_scalarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_scalar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunc_body_returns_scalar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunc_body_returns_scalar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFunc_body_returns_scalar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_body_returns_scalarContext func_body_returns_scalar() throws RecognitionException {
		Func_body_returns_scalarContext _localctx = new Func_body_returns_scalarContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_func_body_returns_scalar);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6302);
			match(RETURNS);
			setState(6303);
			data_type();
			setState(6313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6304);
				match(WITH);
				setState(6305);
				function_option();
				setState(6310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6306);
					match(COMMA);
					setState(6307);
					function_option();
					}
					}
					setState(6312);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6315);
				match(AS);
				}
			}

			setState(6318);
			match(BEGIN);
			setState(6322);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,833,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6319);
					sql_clause();
					}
					} 
				}
				setState(6324);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,833,_ctx);
			}
			setState(6325);
			match(RETURN);
			setState(6326);
			((Func_body_returns_scalarContext)_localctx).ret = expression(0);
			setState(6328);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(6327);
				match(SEMI);
				}
			}

			setState(6330);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_paramContext extends ParserRuleContext {
		public Default_valueContext default_val;
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode VARYING() { return getToken(TSqlParser.VARYING, 0); }
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public TerminalNode OUT() { return getToken(TSqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public TerminalNode READONLY() { return getToken(TSqlParser.READONLY, 0); }
		public Procedure_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterProcedure_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitProcedure_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitProcedure_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_paramContext procedure_param() throws RecognitionException {
		Procedure_paramContext _localctx = new Procedure_paramContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_procedure_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6332);
			match(LOCAL_ID);
			setState(6336);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,835,_ctx) ) {
			case 1:
				{
				setState(6333);
				id();
				setState(6334);
				match(DOT);
				}
				break;
			}
			setState(6339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6338);
				match(AS);
				}
			}

			setState(6341);
			data_type();
			setState(6343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VARYING) {
				{
				setState(6342);
				match(VARYING);
				}
			}

			setState(6347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(6345);
				match(EQUAL);
				setState(6346);
				((Procedure_paramContext)_localctx).default_val = default_value();
				}
			}

			setState(6350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 624)) & ~0x3f) == 0 && ((1L << (_la - 624)) & ((1L << (OUT - 624)) | (1L << (OUTPUT - 624)) | (1L << (READONLY - 624)))) != 0)) {
				{
				setState(6349);
				_la = _input.LA(1);
				if ( !(((((_la - 624)) & ~0x3f) == 0 && ((1L << (_la - 624)) & ((1L << (OUT - 624)) | (1L << (OUTPUT - 624)) | (1L << (READONLY - 624)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSqlParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterProcedure_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitProcedure_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitProcedure_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_optionContext procedure_option() throws RecognitionException {
		Procedure_optionContext _localctx = new Procedure_optionContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_procedure_option);
		try {
			setState(6355);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6352);
				match(ENCRYPTION);
				}
				break;
			case RECOMPILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6353);
				match(RECOMPILE);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6354);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public List<TerminalNode> NULL() { return getTokens(TSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(TSqlParser.NULL, i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode INPUT() { return getToken(TSqlParser.INPUT, 0); }
		public TerminalNode CALLED() { return getToken(TSqlParser.CALLED, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunction_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunction_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFunction_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_optionContext function_option() throws RecognitionException {
		Function_optionContext _localctx = new Function_optionContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_function_option);
		try {
			setState(6369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6357);
				match(ENCRYPTION);
				}
				break;
			case SCHEMABINDING:
				enterOuterAlt(_localctx, 2);
				{
				setState(6358);
				match(SCHEMABINDING);
				}
				break;
			case RETURNS:
				enterOuterAlt(_localctx, 3);
				{
				setState(6359);
				match(RETURNS);
				setState(6360);
				match(NULL);
				setState(6361);
				match(ON);
				setState(6362);
				match(NULL);
				setState(6363);
				match(INPUT);
				}
				break;
			case CALLED:
				enterOuterAlt(_localctx, 4);
				{
				setState(6364);
				match(CALLED);
				setState(6365);
				match(ON);
				setState(6366);
				match(NULL);
				setState(6367);
				match(INPUT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(6368);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_statisticsContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FULLSCAN() { return getToken(TSqlParser.FULLSCAN, 0); }
		public TerminalNode SAMPLE() { return getToken(TSqlParser.SAMPLE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STATS_STREAM() { return getToken(TSqlParser.STATS_STREAM, 0); }
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public TerminalNode ROWS() { return getToken(TSqlParser.ROWS, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(TSqlParser.NORECOMPUTE, 0); }
		public TerminalNode INCREMENTAL() { return getToken(TSqlParser.INCREMENTAL, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_statistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_statistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_statisticsContext create_statistics() throws RecognitionException {
		Create_statisticsContext _localctx = new Create_statisticsContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_create_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6371);
			match(CREATE);
			setState(6372);
			match(STATISTICS);
			setState(6373);
			id();
			setState(6374);
			match(ON);
			setState(6375);
			table_name_with_hint();
			setState(6376);
			match(LR_BRACKET);
			setState(6377);
			column_name_list();
			setState(6378);
			match(RR_BRACKET);
			setState(6397);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
			case 1:
				{
				setState(6379);
				match(WITH);
				setState(6385);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FULLSCAN:
					{
					setState(6380);
					match(FULLSCAN);
					}
					break;
				case SAMPLE:
					{
					setState(6381);
					match(SAMPLE);
					setState(6382);
					match(DECIMAL);
					setState(6383);
					_la = _input.LA(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case STATS_STREAM:
					{
					setState(6384);
					match(STATS_STREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6389);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
				case 1:
					{
					setState(6387);
					match(COMMA);
					setState(6388);
					match(NORECOMPUTE);
					}
					break;
				}
				setState(6395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6391);
					match(COMMA);
					setState(6392);
					match(INCREMENTAL);
					setState(6393);
					match(EQUAL);
					setState(6394);
					on_off();
					}
				}

				}
				break;
			}
			setState(6400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
			case 1:
				{
				setState(6399);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public List<Table_optionsContext> table_options() {
			return getRuleContexts(Table_optionsContext.class);
		}
		public Table_optionsContext table_options(int i) {
			return getRuleContext(Table_optionsContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(TSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(TSqlParser.DEFAULT, i);
		}
		public TerminalNode TEXTIMAGE_ON() { return getToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_create_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6402);
			match(CREATE);
			setState(6403);
			match(TABLE);
			setState(6404);
			table_name();
			setState(6405);
			match(LR_BRACKET);
			setState(6406);
			column_def_table_constraints();
			setState(6408);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6407);
				match(COMMA);
				}
			}

			setState(6410);
			match(RR_BRACKET);
			setState(6414);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,848,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6411);
					table_options();
					}
					} 
				}
				setState(6416);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,848,_ctx);
			}
			setState(6420);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
			case 1:
				{
				setState(6417);
				match(ON);
				setState(6418);
				id();
				}
				break;
			case 2:
				{
				setState(6419);
				match(DEFAULT);
				}
				break;
			}
			setState(6425);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
			case 1:
				{
				setState(6422);
				match(TEXTIMAGE_ON);
				setState(6423);
				id();
				}
				break;
			case 2:
				{
				setState(6424);
				match(DEFAULT);
				}
				break;
			}
			setState(6428);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
			case 1:
				{
				setState(6427);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTable_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_optionsContext table_options() throws RecognitionException {
		Table_optionsContext _localctx = new Table_optionsContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_table_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6430);
			match(WITH);
			setState(6431);
			match(LR_BRACKET);
			setState(6432);
			index_option();
			setState(6437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6433);
				match(COMMA);
				setState(6434);
				index_option();
				}
				}
				setState(6439);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6440);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(TSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(TSqlParser.WITH, i);
		}
		public List<View_attributeContext> view_attribute() {
			return getRuleContexts(View_attributeContext.class);
		}
		public View_attributeContext view_attribute(int i) {
			return getRuleContext(View_attributeContext.class,i);
		}
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(TSqlParser.OPTION, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6442);
			match(CREATE);
			setState(6443);
			match(VIEW);
			setState(6444);
			simple_name();
			setState(6449);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(6445);
				match(LR_BRACKET);
				setState(6446);
				column_name_list();
				setState(6447);
				match(RR_BRACKET);
				}
			}

			setState(6460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6451);
				match(WITH);
				setState(6452);
				view_attribute();
				setState(6457);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6453);
					match(COMMA);
					setState(6454);
					view_attribute();
					}
					}
					setState(6459);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6462);
			match(AS);
			setState(6463);
			select_statement();
			setState(6467);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
			case 1:
				{
				setState(6464);
				match(WITH);
				setState(6465);
				match(CHECK);
				setState(6466);
				match(OPTION);
				}
				break;
			}
			setState(6470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,857,_ctx) ) {
			case 1:
				{
				setState(6469);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_attributeContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(TSqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterView_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitView_attribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitView_attribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_attributeContext view_attribute() throws RecognitionException {
		View_attributeContext _localctx = new View_attributeContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_view_attribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6472);
			_la = _input.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public List<TerminalNode> ALTER() { return getTokens(TSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(TSqlParser.ALTER, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(TSqlParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(TSqlParser.TABLE, i);
		}
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(TSqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public Column_def_table_constraintContext column_def_table_constraint() {
			return getRuleContext(Column_def_table_constraintContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public TerminalNode FOREIGN() { return getToken(TSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return getRuleContext(Table_optionsContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_alter_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6474);
			match(ALTER);
			setState(6475);
			match(TABLE);
			setState(6476);
			table_name();
			setState(6515);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
			case 1:
				{
				setState(6477);
				match(SET);
				setState(6478);
				match(LR_BRACKET);
				setState(6479);
				match(LOCK_ESCALATION);
				setState(6480);
				match(EQUAL);
				setState(6481);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6482);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(6483);
				match(ADD);
				setState(6484);
				column_def_table_constraint();
				}
				break;
			case 3:
				{
				setState(6485);
				match(ALTER);
				setState(6486);
				match(COLUMN);
				setState(6487);
				column_definition();
				}
				break;
			case 4:
				{
				setState(6488);
				match(DROP);
				setState(6489);
				match(COLUMN);
				setState(6490);
				id();
				}
				break;
			case 5:
				{
				setState(6491);
				match(DROP);
				setState(6492);
				match(CONSTRAINT);
				setState(6493);
				((Alter_tableContext)_localctx).constraint = id();
				}
				break;
			case 6:
				{
				setState(6494);
				match(WITH);
				setState(6495);
				match(CHECK);
				setState(6496);
				match(ADD);
				setState(6497);
				match(CONSTRAINT);
				setState(6498);
				((Alter_tableContext)_localctx).constraint = id();
				setState(6499);
				match(FOREIGN);
				setState(6500);
				match(KEY);
				setState(6501);
				match(LR_BRACKET);
				setState(6502);
				((Alter_tableContext)_localctx).fk = column_name_list();
				setState(6503);
				match(RR_BRACKET);
				setState(6504);
				match(REFERENCES);
				setState(6505);
				table_name();
				setState(6506);
				match(LR_BRACKET);
				setState(6507);
				((Alter_tableContext)_localctx).pk = column_name_list();
				setState(6508);
				match(RR_BRACKET);
				}
				break;
			case 7:
				{
				setState(6510);
				match(CHECK);
				setState(6511);
				match(CONSTRAINT);
				setState(6512);
				((Alter_tableContext)_localctx).constraint = id();
				}
				break;
			case 8:
				{
				setState(6513);
				match(REBUILD);
				setState(6514);
				table_options();
				}
				break;
			}
			setState(6518);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,859,_ctx) ) {
			case 1:
				{
				setState(6517);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_databaseContext extends ParserRuleContext {
		public IdContext database;
		public IdContext new_name;
		public IdContext collation;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public Database_optionspecContext database_optionspec() {
			return getRuleContext(Database_optionspecContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_databaseContext alter_database() throws RecognitionException {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_alter_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6520);
			match(ALTER);
			setState(6521);
			match(DATABASE);
			setState(6524);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(6522);
				((Alter_databaseContext)_localctx).database = id();
				}
				break;
			case CURRENT:
				{
				setState(6523);
				match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6538);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODIFY:
				{
				setState(6526);
				match(MODIFY);
				setState(6527);
				match(NAME);
				setState(6528);
				match(EQUAL);
				setState(6529);
				((Alter_databaseContext)_localctx).new_name = id();
				}
				break;
			case COLLATE:
				{
				setState(6530);
				match(COLLATE);
				setState(6531);
				((Alter_databaseContext)_localctx).collation = id();
				}
				break;
			case SET:
				{
				setState(6532);
				match(SET);
				setState(6533);
				database_optionspec();
				setState(6536);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
				case 1:
					{
					setState(6534);
					match(WITH);
					setState(6535);
					termination();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,863,_ctx) ) {
			case 1:
				{
				setState(6540);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_optionspecContext extends ParserRuleContext {
		public Auto_optionContext auto_option() {
			return getRuleContext(Auto_optionContext.class,0);
		}
		public Change_tracking_optionContext change_tracking_option() {
			return getRuleContext(Change_tracking_optionContext.class,0);
		}
		public Containment_optionContext containment_option() {
			return getRuleContext(Containment_optionContext.class,0);
		}
		public Cursor_optionContext cursor_option() {
			return getRuleContext(Cursor_optionContext.class,0);
		}
		public Database_mirroring_optionContext database_mirroring_option() {
			return getRuleContext(Database_mirroring_optionContext.class,0);
		}
		public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return getRuleContext(Date_correlation_optimization_optionContext.class,0);
		}
		public Db_encryption_optionContext db_encryption_option() {
			return getRuleContext(Db_encryption_optionContext.class,0);
		}
		public Db_state_optionContext db_state_option() {
			return getRuleContext(Db_state_optionContext.class,0);
		}
		public Db_update_optionContext db_update_option() {
			return getRuleContext(Db_update_optionContext.class,0);
		}
		public Db_user_access_optionContext db_user_access_option() {
			return getRuleContext(Db_user_access_optionContext.class,0);
		}
		public Delayed_durability_optionContext delayed_durability_option() {
			return getRuleContext(Delayed_durability_optionContext.class,0);
		}
		public External_access_optionContext external_access_option() {
			return getRuleContext(External_access_optionContext.class,0);
		}
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext database_filestream_option() {
			return getRuleContext(Database_filestream_optionContext.class,0);
		}
		public Hadr_optionsContext hadr_options() {
			return getRuleContext(Hadr_optionsContext.class,0);
		}
		public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return getRuleContext(Mixed_page_allocation_optionContext.class,0);
		}
		public Parameterization_optionContext parameterization_option() {
			return getRuleContext(Parameterization_optionContext.class,0);
		}
		public Recovery_optionContext recovery_option() {
			return getRuleContext(Recovery_optionContext.class,0);
		}
		public Service_broker_optionContext service_broker_option() {
			return getRuleContext(Service_broker_optionContext.class,0);
		}
		public Snapshot_optionContext snapshot_option() {
			return getRuleContext(Snapshot_optionContext.class,0);
		}
		public Sql_optionContext sql_option() {
			return getRuleContext(Sql_optionContext.class,0);
		}
		public Target_recovery_time_optionContext target_recovery_time_option() {
			return getRuleContext(Target_recovery_time_optionContext.class,0);
		}
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_optionspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDatabase_optionspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDatabase_optionspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDatabase_optionspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_optionspecContext database_optionspec() throws RecognitionException {
		Database_optionspecContext _localctx = new Database_optionspecContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_database_optionspec);
		try {
			setState(6566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6543);
				auto_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6544);
				change_tracking_option();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6545);
				containment_option();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6546);
				cursor_option();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6547);
				database_mirroring_option();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6548);
				date_correlation_optimization_option();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6549);
				db_encryption_option();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6550);
				db_state_option();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6551);
				db_update_option();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6552);
				db_user_access_option();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6553);
				delayed_durability_option();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6554);
				external_access_option();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6555);
				match(FILESTREAM);
				setState(6556);
				database_filestream_option();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6557);
				hadr_options();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6558);
				mixed_page_allocation_option();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6559);
				parameterization_option();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6560);
				recovery_option();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6561);
				service_broker_option();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6562);
				snapshot_option();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6563);
				sql_option();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6564);
				target_recovery_time_option();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6565);
				termination();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auto_optionContext extends ParserRuleContext {
		public TerminalNode AUTO_CLOSE() { return getToken(TSqlParser.AUTO_CLOSE, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode INCREMENTAL() { return getToken(TSqlParser.INCREMENTAL, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(TSqlParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auto_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAuto_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAuto_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAuto_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auto_optionContext auto_option() throws RecognitionException {
		Auto_optionContext _localctx = new Auto_optionContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_auto_option);
		int _la;
		try {
			setState(6585);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6568);
				match(AUTO_CLOSE);
				setState(6569);
				on_off();
				}
				break;
			case AUTO_CREATE_STATISTICS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6570);
				match(AUTO_CREATE_STATISTICS);
				setState(6571);
				match(OFF);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(6572);
				match(ON);
				setState(6577);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INCREMENTAL:
					{
					setState(6573);
					match(INCREMENTAL);
					setState(6574);
					match(EQUAL);
					setState(6575);
					match(ON);
					}
					break;
				case OFF:
					{
					setState(6576);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case AUTO_SHRINK:
				enterOuterAlt(_localctx, 4);
				{
				setState(6579);
				match(AUTO_SHRINK);
				setState(6580);
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS:
				enterOuterAlt(_localctx, 5);
				{
				setState(6581);
				match(AUTO_UPDATE_STATISTICS);
				setState(6582);
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS_ASYNC:
				enterOuterAlt(_localctx, 6);
				{
				setState(6583);
				match(AUTO_UPDATE_STATISTICS_ASYNC);
				setState(6584);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tracking_optionContext extends ParserRuleContext {
		public TerminalNode CHANGE_TRACKING() { return getToken(TSqlParser.CHANGE_TRACKING, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<Change_tracking_option_listContext> change_tracking_option_list() {
			return getRuleContexts(Change_tracking_option_listContext.class);
		}
		public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return getRuleContext(Change_tracking_option_listContext.class,i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterChange_tracking_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitChange_tracking_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitChange_tracking_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_tracking_optionContext change_tracking_option() throws RecognitionException {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_change_tracking_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6587);
			match(CHANGE_TRACKING);
			setState(6588);
			match(EQUAL);
			setState(6604);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OFF:
				{
				setState(6589);
				match(OFF);
				}
				break;
			case ON:
				{
				setState(6590);
				match(ON);
				setState(6601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==AUTO_CLEANUP || _la==CHANGE_RETENTION) {
					{
					{
					setState(6591);
					change_tracking_option_list();
					setState(6596);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6592);
						match(COMMA);
						setState(6593);
						change_tracking_option_list();
						}
						}
						setState(6598);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					setState(6603);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tracking_option_listContext extends ParserRuleContext {
		public TerminalNode AUTO_CLEANUP() { return getToken(TSqlParser.AUTO_CLEANUP, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CHANGE_RETENTION() { return getToken(TSqlParser.CHANGE_RETENTION, 0); }
		public TerminalNode DAYS() { return getToken(TSqlParser.DAYS, 0); }
		public TerminalNode HOURS() { return getToken(TSqlParser.HOURS, 0); }
		public TerminalNode MINUTES() { return getToken(TSqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterChange_tracking_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitChange_tracking_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitChange_tracking_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_tracking_option_listContext change_tracking_option_list() throws RecognitionException {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_change_tracking_option_list);
		int _la;
		try {
			setState(6612);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_CLEANUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(6606);
				match(AUTO_CLEANUP);
				setState(6607);
				match(EQUAL);
				setState(6608);
				on_off();
				}
				break;
			case CHANGE_RETENTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(6609);
				match(CHANGE_RETENTION);
				setState(6610);
				match(EQUAL);
				setState(6611);
				_la = _input.LA(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Containment_optionContext extends ParserRuleContext {
		public TerminalNode CONTAINMENT() { return getToken(TSqlParser.CONTAINMENT, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(TSqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_containment_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterContainment_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitContainment_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitContainment_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Containment_optionContext containment_option() throws RecognitionException {
		Containment_optionContext _localctx = new Containment_optionContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_containment_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6614);
			match(CONTAINMENT);
			setState(6615);
			match(EQUAL);
			setState(6616);
			_la = _input.LA(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_optionContext extends ParserRuleContext {
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CURSOR_DEFAULT() { return getToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCursor_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCursor_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCursor_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_optionContext cursor_option() throws RecognitionException {
		Cursor_optionContext _localctx = new Cursor_optionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_cursor_option);
		int _la;
		try {
			setState(6622);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURSOR_CLOSE_ON_COMMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6618);
				match(CURSOR_CLOSE_ON_COMMIT);
				setState(6619);
				on_off();
				}
				break;
			case CURSOR_DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6620);
				match(CURSOR_DEFAULT);
				setState(6621);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_endpointContext extends ParserRuleContext {
		public IdContext endpointname;
		public IdContext login;
		public Token state;
		public Token port;
		public IdContext cert_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSqlParser.ENDPOINT, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode TCP() { return getToken(TSqlParser.TCP, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public TerminalNode LISTENER_PORT() { return getToken(TSqlParser.LISTENER_PORT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode TSQL() { return getToken(TSqlParser.TSQL, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode SERVICE_BROKER() { return getToken(TSqlParser.SERVICE_BROKER, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(TSqlParser.AUTHENTICATION, 0); }
		public TerminalNode DATABASE_MIRRORING() { return getToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode LISTENER_IP() { return getToken(TSqlParser.LISTENER_IP, 0); }
		public TerminalNode WITNESS() { return getToken(TSqlParser.WITNESS, 0); }
		public TerminalNode PARTNER() { return getToken(TSqlParser.PARTNER, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode IPV4_ADDR() { return getToken(TSqlParser.IPV4_ADDR, 0); }
		public TerminalNode IPV6_ADDR() { return getToken(TSqlParser.IPV6_ADDR, 0); }
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode MESSAGE_FORWARDING() { return getToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public TerminalNode MESSAGE_FORWARD_SIZE() { return getToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public TerminalNode STARTED() { return getToken(TSqlParser.STARTED, 0); }
		public TerminalNode STOPPED() { return getToken(TSqlParser.STOPPED, 0); }
		public List<TerminalNode> DISABLED() { return getTokens(TSqlParser.DISABLED); }
		public TerminalNode DISABLED(int i) {
			return getToken(TSqlParser.DISABLED, i);
		}
		public TerminalNode SUPPORTED() { return getToken(TSqlParser.SUPPORTED, 0); }
		public TerminalNode REQUIRED() { return getToken(TSqlParser.REQUIRED, 0); }
		public TerminalNode ENABLED() { return getToken(TSqlParser.ENABLED, 0); }
		public TerminalNode NTLM() { return getToken(TSqlParser.NTLM, 0); }
		public TerminalNode KERBEROS() { return getToken(TSqlParser.KERBEROS, 0); }
		public TerminalNode NEGOTIATE() { return getToken(TSqlParser.NEGOTIATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode AES() { return getToken(TSqlParser.AES, 0); }
		public TerminalNode RC4() { return getToken(TSqlParser.RC4, 0); }
		public Alter_endpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_endpoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_endpoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_endpoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlter_endpoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_endpointContext alter_endpoint() throws RecognitionException {
		Alter_endpointContext _localctx = new Alter_endpointContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_alter_endpoint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6624);
			match(ALTER);
			setState(6625);
			match(ENDPOINT);
			setState(6626);
			((Alter_endpointContext)_localctx).endpointname = id();
			setState(6629);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(6627);
				match(AUTHORIZATION);
				setState(6628);
				((Alter_endpointContext)_localctx).login = id();
				}
			}

			setState(6638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATE) {
				{
				setState(6631);
				match(STATE);
				setState(6632);
				match(EQUAL);
				setState(6636);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STARTED:
					{
					setState(6633);
					((Alter_endpointContext)_localctx).state = match(STARTED);
					}
					break;
				case STOPPED:
					{
					setState(6634);
					((Alter_endpointContext)_localctx).state = match(STOPPED);
					}
					break;
				case DISABLED:
					{
					setState(6635);
					((Alter_endpointContext)_localctx).state = match(DISABLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(6640);
			match(AS);
			setState(6641);
			match(TCP);
			setState(6642);
			match(LR_BRACKET);
			setState(6643);
			match(LISTENER_PORT);
			setState(6644);
			match(EQUAL);
			setState(6645);
			((Alter_endpointContext)_localctx).port = match(DECIMAL);
			setState(6650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6646);
				match(COMMA);
				setState(6647);
				match(LISTENER_IP);
				setState(6648);
				match(EQUAL);
				setState(6649);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==IPV4_ADDR || _la==IPV6_ADDR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6652);
			match(RR_BRACKET);
			setState(6762);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
			case 1:
				{
				setState(6653);
				match(TSQL);
				}
				break;
			case 2:
				{
				setState(6654);
				match(FOR);
				setState(6655);
				match(SERVICE_BROKER);
				setState(6656);
				match(LR_BRACKET);
				setState(6657);
				match(AUTHENTICATION);
				setState(6658);
				match(EQUAL);
				setState(6675);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(6659);
					match(WINDOWS);
					setState(6661);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (KERBEROS - 168)) | (1L << (NEGOTIATE - 168)) | (1L << (NTLM - 168)))) != 0)) {
						{
						setState(6660);
						_la = _input.LA(1);
						if ( !(((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (KERBEROS - 168)) | (1L << (NEGOTIATE - 168)) | (1L << (NTLM - 168)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(6665);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CERTIFICATE) {
						{
						setState(6663);
						match(CERTIFICATE);
						setState(6664);
						((Alter_endpointContext)_localctx).cert_name = id();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					setState(6667);
					match(CERTIFICATE);
					setState(6668);
					((Alter_endpointContext)_localctx).cert_name = id();
					setState(6670);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WINDOWS) {
						{
						setState(6669);
						match(WINDOWS);
						}
					}

					setState(6673);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (KERBEROS - 168)) | (1L << (NEGOTIATE - 168)) | (1L << (NTLM - 168)))) != 0)) {
						{
						setState(6672);
						_la = _input.LA(1);
						if ( !(((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (KERBEROS - 168)) | (1L << (NEGOTIATE - 168)) | (1L << (NTLM - 168)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6694);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,884,_ctx) ) {
				case 1:
					{
					setState(6678);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6677);
						match(COMMA);
						}
					}

					setState(6680);
					match(ENCRYPTION);
					setState(6681);
					match(EQUAL);
					setState(6682);
					_la = _input.LA(1);
					if ( !(_la==REQUIRED || _la==SUPPORTED || _la==DISABLED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6692);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALGORITHM) {
						{
						setState(6683);
						match(ALGORITHM);
						setState(6690);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,882,_ctx) ) {
						case 1:
							{
							setState(6684);
							match(AES);
							}
							break;
						case 2:
							{
							setState(6685);
							match(RC4);
							}
							break;
						case 3:
							{
							setState(6686);
							match(AES);
							setState(6687);
							match(RC4);
							}
							break;
						case 4:
							{
							setState(6688);
							match(RC4);
							setState(6689);
							match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				setState(6702);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,886,_ctx) ) {
				case 1:
					{
					setState(6697);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6696);
						match(COMMA);
						}
					}

					setState(6699);
					match(MESSAGE_FORWARDING);
					setState(6700);
					match(EQUAL);
					setState(6701);
					_la = _input.LA(1);
					if ( !(_la==ENABLED || _la==DISABLED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MESSAGE_FORWARD_SIZE || _la==COMMA) {
					{
					setState(6705);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6704);
						match(COMMA);
						}
					}

					setState(6707);
					match(MESSAGE_FORWARD_SIZE);
					setState(6708);
					match(EQUAL);
					setState(6709);
					match(DECIMAL);
					}
				}

				setState(6712);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(6713);
				match(FOR);
				setState(6714);
				match(DATABASE_MIRRORING);
				setState(6715);
				match(LR_BRACKET);
				setState(6716);
				match(AUTHENTICATION);
				setState(6717);
				match(EQUAL);
				setState(6734);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(6718);
					match(WINDOWS);
					setState(6720);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (KERBEROS - 168)) | (1L << (NEGOTIATE - 168)) | (1L << (NTLM - 168)))) != 0)) {
						{
						setState(6719);
						_la = _input.LA(1);
						if ( !(((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (KERBEROS - 168)) | (1L << (NEGOTIATE - 168)) | (1L << (NTLM - 168)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(6724);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CERTIFICATE) {
						{
						setState(6722);
						match(CERTIFICATE);
						setState(6723);
						((Alter_endpointContext)_localctx).cert_name = id();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					setState(6726);
					match(CERTIFICATE);
					setState(6727);
					((Alter_endpointContext)_localctx).cert_name = id();
					setState(6729);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WINDOWS) {
						{
						setState(6728);
						match(WINDOWS);
						}
					}

					setState(6732);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (KERBEROS - 168)) | (1L << (NEGOTIATE - 168)) | (1L << (NTLM - 168)))) != 0)) {
						{
						setState(6731);
						_la = _input.LA(1);
						if ( !(((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (KERBEROS - 168)) | (1L << (NEGOTIATE - 168)) | (1L << (NTLM - 168)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6753);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,897,_ctx) ) {
				case 1:
					{
					setState(6737);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6736);
						match(COMMA);
						}
					}

					setState(6739);
					match(ENCRYPTION);
					setState(6740);
					match(EQUAL);
					setState(6741);
					_la = _input.LA(1);
					if ( !(_la==REQUIRED || _la==SUPPORTED || _la==DISABLED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6751);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALGORITHM) {
						{
						setState(6742);
						match(ALGORITHM);
						setState(6749);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,895,_ctx) ) {
						case 1:
							{
							setState(6743);
							match(AES);
							}
							break;
						case 2:
							{
							setState(6744);
							match(RC4);
							}
							break;
						case 3:
							{
							setState(6745);
							match(AES);
							setState(6746);
							match(RC4);
							}
							break;
						case 4:
							{
							setState(6747);
							match(RC4);
							setState(6748);
							match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				setState(6756);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6755);
					match(COMMA);
					}
				}

				setState(6758);
				match(ROLE);
				setState(6759);
				match(EQUAL);
				setState(6760);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==WITNESS || _la==PARTNER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6761);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_mirroring_optionContext extends ParserRuleContext {
		public Mirroring_set_optionContext mirroring_set_option() {
			return getRuleContext(Mirroring_set_optionContext.class,0);
		}
		public Database_mirroring_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_mirroring_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDatabase_mirroring_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDatabase_mirroring_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDatabase_mirroring_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_mirroring_optionContext database_mirroring_option() throws RecognitionException {
		Database_mirroring_optionContext _localctx = new Database_mirroring_optionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_database_mirroring_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6764);
			mirroring_set_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_set_optionContext extends ParserRuleContext {
		public Mirroring_partnerContext mirroring_partner() {
			return getRuleContext(Mirroring_partnerContext.class,0);
		}
		public Partner_optionContext partner_option() {
			return getRuleContext(Partner_optionContext.class,0);
		}
		public Mirroring_witnessContext mirroring_witness() {
			return getRuleContext(Mirroring_witnessContext.class,0);
		}
		public Witness_optionContext witness_option() {
			return getRuleContext(Witness_optionContext.class,0);
		}
		public Mirroring_set_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_set_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMirroring_set_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMirroring_set_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitMirroring_set_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mirroring_set_optionContext mirroring_set_option() throws RecognitionException {
		Mirroring_set_optionContext _localctx = new Mirroring_set_optionContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_mirroring_set_option);
		try {
			setState(6772);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARTNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6766);
				mirroring_partner();
				setState(6767);
				partner_option();
				}
				break;
			case WITNESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6769);
				mirroring_witness();
				setState(6770);
				witness_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_partnerContext extends ParserRuleContext {
		public TerminalNode PARTNER() { return getToken(TSqlParser.PARTNER, 0); }
		public Mirroring_partnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_partner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMirroring_partner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMirroring_partner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitMirroring_partner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mirroring_partnerContext mirroring_partner() throws RecognitionException {
		Mirroring_partnerContext _localctx = new Mirroring_partnerContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_mirroring_partner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6774);
			match(PARTNER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_witnessContext extends ParserRuleContext {
		public TerminalNode WITNESS() { return getToken(TSqlParser.WITNESS, 0); }
		public Mirroring_witnessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_witness; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMirroring_witness(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMirroring_witness(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitMirroring_witness(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mirroring_witnessContext mirroring_witness() throws RecognitionException {
		Mirroring_witnessContext _localctx = new Mirroring_witnessContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_mirroring_witness);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6776);
			match(WITNESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_partner_equalContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public Witness_partner_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_partner_equal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWitness_partner_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWitness_partner_equal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitWitness_partner_equal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Witness_partner_equalContext witness_partner_equal() throws RecognitionException {
		Witness_partner_equalContext _localctx = new Witness_partner_equalContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_witness_partner_equal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6778);
			match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_optionContext extends ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return getRuleContext(Witness_partner_equalContext.class,0);
		}
		public Partner_serverContext partner_server() {
			return getRuleContext(Partner_serverContext.class,0);
		}
		public TerminalNode FAILOVER() { return getToken(TSqlParser.FAILOVER, 0); }
		public TerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return getToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode RESUME() { return getToken(TSqlParser.RESUME, 0); }
		public TerminalNode SAFETY() { return getToken(TSqlParser.SAFETY, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public TerminalNode SUSPEND() { return getToken(TSqlParser.SUSPEND, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Partner_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPartner_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPartner_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitPartner_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partner_optionContext partner_option() throws RecognitionException {
		Partner_optionContext _localctx = new Partner_optionContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_partner_option);
		int _la;
		try {
			setState(6792);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6780);
				witness_partner_equal();
				setState(6781);
				partner_server();
				}
				break;
			case FAILOVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(6783);
				match(FAILOVER);
				}
				break;
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
				enterOuterAlt(_localctx, 3);
				{
				setState(6784);
				match(FORCE_SERVICE_ALLOW_DATA_LOSS);
				}
				break;
			case OFF:
				enterOuterAlt(_localctx, 4);
				{
				setState(6785);
				match(OFF);
				}
				break;
			case RESUME:
				enterOuterAlt(_localctx, 5);
				{
				setState(6786);
				match(RESUME);
				}
				break;
			case SAFETY:
				enterOuterAlt(_localctx, 6);
				{
				setState(6787);
				match(SAFETY);
				setState(6788);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 7);
				{
				setState(6789);
				match(SUSPEND);
				}
				break;
			case TIMEOUT:
				enterOuterAlt(_localctx, 8);
				{
				setState(6790);
				match(TIMEOUT);
				setState(6791);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_optionContext extends ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return getRuleContext(Witness_partner_equalContext.class,0);
		}
		public Witness_serverContext witness_server() {
			return getRuleContext(Witness_serverContext.class,0);
		}
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Witness_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWitness_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWitness_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitWitness_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Witness_optionContext witness_option() throws RecognitionException {
		Witness_optionContext _localctx = new Witness_optionContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_witness_option);
		try {
			setState(6798);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6794);
				witness_partner_equal();
				setState(6795);
				witness_server();
				}
				break;
			case OFF:
				enterOuterAlt(_localctx, 2);
				{
				setState(6797);
				match(OFF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_serverContext extends ParserRuleContext {
		public Partner_serverContext partner_server() {
			return getRuleContext(Partner_serverContext.class,0);
		}
		public Witness_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWitness_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWitness_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitWitness_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Witness_serverContext witness_server() throws RecognitionException {
		Witness_serverContext _localctx = new Witness_serverContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_witness_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6800);
			partner_server();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_serverContext extends ParserRuleContext {
		public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
			return getRuleContext(Partner_server_tcp_prefixContext.class,0);
		}
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
			return getRuleContext(Mirroring_host_port_seperatorContext.class,0);
		}
		public Port_numberContext port_number() {
			return getRuleContext(Port_numberContext.class,0);
		}
		public Partner_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPartner_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPartner_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitPartner_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partner_serverContext partner_server() throws RecognitionException {
		Partner_serverContext _localctx = new Partner_serverContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_partner_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6802);
			partner_server_tcp_prefix();
			setState(6803);
			host();
			setState(6804);
			mirroring_host_port_seperator();
			setState(6805);
			port_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_host_port_seperatorContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(TSqlParser.COLON, 0); }
		public Mirroring_host_port_seperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_host_port_seperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMirroring_host_port_seperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMirroring_host_port_seperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitMirroring_host_port_seperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mirroring_host_port_seperatorContext mirroring_host_port_seperator() throws RecognitionException {
		Mirroring_host_port_seperatorContext _localctx = new Mirroring_host_port_seperatorContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_mirroring_host_port_seperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6807);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_server_tcp_prefixContext extends ParserRuleContext {
		public TerminalNode TCP() { return getToken(TSqlParser.TCP, 0); }
		public TerminalNode COLON() { return getToken(TSqlParser.COLON, 0); }
		public TerminalNode DOUBLE_FORWARD_SLASH() { return getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Partner_server_tcp_prefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_server_tcp_prefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPartner_server_tcp_prefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPartner_server_tcp_prefix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitPartner_server_tcp_prefix(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partner_server_tcp_prefixContext partner_server_tcp_prefix() throws RecognitionException {
		Partner_server_tcp_prefixContext _localctx = new Partner_server_tcp_prefixContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_partner_server_tcp_prefix);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6809);
			match(TCP);
			setState(6810);
			match(COLON);
			setState(6811);
			match(DOUBLE_FORWARD_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Port_numberContext extends ParserRuleContext {
		public Token port;
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Port_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_port_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPort_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPort_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitPort_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Port_numberContext port_number() throws RecognitionException {
		Port_numberContext _localctx = new Port_numberContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_port_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6813);
			((Port_numberContext)_localctx).port = match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public HostContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterHost(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitHost(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitHost(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostContext host() throws RecognitionException {
		HostContext _localctx = new HostContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_host);
		try {
			setState(6825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,904,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6815);
				id();
				setState(6816);
				match(DOT);
				setState(6817);
				host();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6823);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,903,_ctx) ) {
				case 1:
					{
					setState(6819);
					id();
					setState(6820);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(6822);
					id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_correlation_optimization_optionContext extends ParserRuleContext {
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_correlation_optimization_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDate_correlation_optimization_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDate_correlation_optimization_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDate_correlation_optimization_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Date_correlation_optimization_optionContext date_correlation_optimization_option() throws RecognitionException {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_date_correlation_optimization_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6827);
			match(DATE_CORRELATION_OPTIMIZATION);
			setState(6828);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_encryption_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_encryption_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDb_encryption_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDb_encryption_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDb_encryption_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_encryption_optionContext db_encryption_option() throws RecognitionException {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_db_encryption_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6830);
			match(ENCRYPTION);
			setState(6831);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_state_optionContext extends ParserRuleContext {
		public TerminalNode ONLINE() { return getToken(TSqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(TSqlParser.OFFLINE, 0); }
		public TerminalNode EMERGENCY() { return getToken(TSqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_state_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDb_state_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDb_state_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDb_state_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_state_optionContext db_state_option() throws RecognitionException {
		Db_state_optionContext _localctx = new Db_state_optionContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_db_state_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6833);
			_la = _input.LA(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_update_optionContext extends ParserRuleContext {
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode READ_WRITE() { return getToken(TSqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_update_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDb_update_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDb_update_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDb_update_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_update_optionContext db_update_option() throws RecognitionException {
		Db_update_optionContext _localctx = new Db_update_optionContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_db_update_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6835);
			_la = _input.LA(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_user_access_optionContext extends ParserRuleContext {
		public TerminalNode SINGLE_USER() { return getToken(TSqlParser.SINGLE_USER, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(TSqlParser.RESTRICTED_USER, 0); }
		public TerminalNode MULTI_USER() { return getToken(TSqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_user_access_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDb_user_access_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDb_user_access_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDb_user_access_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_user_access_optionContext db_user_access_option() throws RecognitionException {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_db_user_access_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6837);
			_la = _input.LA(1);
			if ( !(_la==MULTI_USER || _la==RESTRICTED_USER || _la==SINGLE_USER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delayed_durability_optionContext extends ParserRuleContext {
		public TerminalNode DELAYED_DURABILITY() { return getToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DISABLED() { return getToken(TSqlParser.DISABLED, 0); }
		public TerminalNode ALLOWED() { return getToken(TSqlParser.ALLOWED, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delayed_durability_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDelayed_durability_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDelayed_durability_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDelayed_durability_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delayed_durability_optionContext delayed_durability_option() throws RecognitionException {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_delayed_durability_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6839);
			match(DELAYED_DURABILITY);
			setState(6840);
			match(EQUAL);
			setState(6841);
			_la = _input.LA(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_access_optionContext extends ParserRuleContext {
		public TerminalNode DB_CHAINING() { return getToken(TSqlParser.DB_CHAINING, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode TRUSTWORTHY() { return getToken(TSqlParser.TRUSTWORTHY, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_access_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExternal_access_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExternal_access_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitExternal_access_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_access_optionContext external_access_option() throws RecognitionException {
		External_access_optionContext _localctx = new External_access_optionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_external_access_option);
		int _la;
		try {
			setState(6868);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DB_CHAINING:
				enterOuterAlt(_localctx, 1);
				{
				setState(6843);
				match(DB_CHAINING);
				setState(6844);
				on_off();
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 2);
				{
				setState(6845);
				match(TRUSTWORTHY);
				setState(6846);
				on_off();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6847);
				match(DEFAULT_LANGUAGE);
				setState(6848);
				match(EQUAL);
				setState(6851);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(6849);
					id();
					}
					break;
				case STRING:
					{
					setState(6850);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6853);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(6854);
				match(EQUAL);
				setState(6857);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(6855);
					id();
					}
					break;
				case STRING:
					{
					setState(6856);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 5);
				{
				setState(6859);
				match(NESTED_TRIGGERS);
				setState(6860);
				match(EQUAL);
				setState(6861);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 6);
				{
				setState(6862);
				match(TRANSFORM_NOISE_WORDS);
				setState(6863);
				match(EQUAL);
				setState(6864);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 7);
				{
				setState(6865);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(6866);
				match(EQUAL);
				setState(6867);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hadr_optionsContext extends ParserRuleContext {
		public IdContext availability_group_name;
		public TerminalNode HADR() { return getToken(TSqlParser.HADR, 0); }
		public TerminalNode SUSPEND() { return getToken(TSqlParser.SUSPEND, 0); }
		public TerminalNode RESUME() { return getToken(TSqlParser.RESUME, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Hadr_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hadr_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterHadr_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitHadr_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitHadr_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hadr_optionsContext hadr_options() throws RecognitionException {
		Hadr_optionsContext _localctx = new Hadr_optionsContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_hadr_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6870);
			match(HADR);
			setState(6879);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OFF:
			case AVAILABILITY:
				{
				setState(6876);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AVAILABILITY:
					{
					setState(6871);
					match(AVAILABILITY);
					setState(6872);
					match(GROUP);
					setState(6873);
					match(EQUAL);
					setState(6874);
					((Hadr_optionsContext)_localctx).availability_group_name = id();
					}
					break;
				case OFF:
					{
					setState(6875);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RESUME:
			case SUSPEND:
				{
				setState(6878);
				_la = _input.LA(1);
				if ( !(_la==RESUME || _la==SUSPEND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mixed_page_allocation_optionContext extends ParserRuleContext {
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mixed_page_allocation_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMixed_page_allocation_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMixed_page_allocation_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitMixed_page_allocation_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mixed_page_allocation_optionContext mixed_page_allocation_option() throws RecognitionException {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_mixed_page_allocation_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6881);
			match(MIXED_PAGE_ALLOCATION);
			setState(6882);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameterization_optionContext extends ParserRuleContext {
		public TerminalNode PARAMETERIZATION() { return getToken(TSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterization_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterParameterization_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitParameterization_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitParameterization_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameterization_optionContext parameterization_option() throws RecognitionException {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_parameterization_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6884);
			match(PARAMETERIZATION);
			setState(6885);
			_la = _input.LA(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Recovery_optionContext extends ParserRuleContext {
		public TerminalNode RECOVERY() { return getToken(TSqlParser.RECOVERY, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(TSqlParser.BULK_LOGGED, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode PAGE_VERIFY() { return getToken(TSqlParser.PAGE_VERIFY, 0); }
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recovery_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRecovery_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRecovery_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitRecovery_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Recovery_optionContext recovery_option() throws RecognitionException {
		Recovery_optionContext _localctx = new Recovery_optionContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_recovery_option);
		int _la;
		try {
			setState(6893);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECOVERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(6887);
				match(RECOVERY);
				setState(6888);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==BULK_LOGGED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TORN_PAGE_DETECTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(6889);
				match(TORN_PAGE_DETECTION);
				setState(6890);
				on_off();
				}
				break;
			case PAGE_VERIFY:
				enterOuterAlt(_localctx, 3);
				{
				setState(6891);
				match(PAGE_VERIFY);
				setState(6892);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==CHECKSUM || _la==TORN_PAGE_DETECTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_broker_optionContext extends ParserRuleContext {
		public TerminalNode ENABLE_BROKER() { return getToken(TSqlParser.ENABLE_BROKER, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(TSqlParser.DISABLE_BROKER, 0); }
		public TerminalNode NEW_BROKER() { return getToken(TSqlParser.NEW_BROKER, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_broker_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterService_broker_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitService_broker_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitService_broker_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Service_broker_optionContext service_broker_option() throws RecognitionException {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_service_broker_option);
		try {
			setState(6901);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_BROKER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6895);
				match(ENABLE_BROKER);
				}
				break;
			case DISABLE_BROKER:
				enterOuterAlt(_localctx, 2);
				{
				setState(6896);
				match(DISABLE_BROKER);
				}
				break;
			case NEW_BROKER:
				enterOuterAlt(_localctx, 3);
				{
				setState(6897);
				match(NEW_BROKER);
				}
				break;
			case ERROR_BROKER_CONVERSATIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(6898);
				match(ERROR_BROKER_CONVERSATIONS);
				}
				break;
			case HONOR_BROKER_PRIORITY:
				enterOuterAlt(_localctx, 5);
				{
				setState(6899);
				match(HONOR_BROKER_PRIORITY);
				setState(6900);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Snapshot_optionContext extends ParserRuleContext {
		public Token MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT;
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_snapshot_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSnapshot_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSnapshot_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSnapshot_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Snapshot_optionContext snapshot_option() throws RecognitionException {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_snapshot_option);
		int _la;
		try {
			setState(6908);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOW_SNAPSHOT_ISOLATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6903);
				match(ALLOW_SNAPSHOT_ISOLATION);
				setState(6904);
				on_off();
				}
				break;
			case READ_COMMITTED_SNAPSHOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6905);
				match(READ_COMMITTED_SNAPSHOT);
				setState(6906);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OFF:
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(6907);
				((Snapshot_optionContext)_localctx).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
					((Snapshot_optionContext)_localctx).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_optionContext extends ParserRuleContext {
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode ANSI_NULLS() { return getToken(TSqlParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode ARITHABORT() { return getToken(TSqlParser.ARITHABORT, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSql_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSql_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSql_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_optionContext sql_option() throws RecognitionException {
		Sql_optionContext _localctx = new Sql_optionContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_sql_option);
		try {
			setState(6931);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANSI_NULL_DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6910);
				match(ANSI_NULL_DEFAULT);
				setState(6911);
				on_off();
				}
				break;
			case ANSI_NULLS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6912);
				match(ANSI_NULLS);
				setState(6913);
				on_off();
				}
				break;
			case ANSI_PADDING:
				enterOuterAlt(_localctx, 3);
				{
				setState(6914);
				match(ANSI_PADDING);
				setState(6915);
				on_off();
				}
				break;
			case ANSI_WARNINGS:
				enterOuterAlt(_localctx, 4);
				{
				setState(6916);
				match(ANSI_WARNINGS);
				setState(6917);
				on_off();
				}
				break;
			case ARITHABORT:
				enterOuterAlt(_localctx, 5);
				{
				setState(6918);
				match(ARITHABORT);
				setState(6919);
				on_off();
				}
				break;
			case COMPATIBILITY_LEVEL:
				enterOuterAlt(_localctx, 6);
				{
				setState(6920);
				match(COMPATIBILITY_LEVEL);
				setState(6921);
				match(EQUAL);
				setState(6922);
				match(DECIMAL);
				}
				break;
			case CONCAT_NULL_YIELDS_NULL:
				enterOuterAlt(_localctx, 7);
				{
				setState(6923);
				match(CONCAT_NULL_YIELDS_NULL);
				setState(6924);
				on_off();
				}
				break;
			case NUMERIC_ROUNDABORT:
				enterOuterAlt(_localctx, 8);
				{
				setState(6925);
				match(NUMERIC_ROUNDABORT);
				setState(6926);
				on_off();
				}
				break;
			case QUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 9);
				{
				setState(6927);
				match(QUOTED_IDENTIFIER);
				setState(6928);
				on_off();
				}
				break;
			case RECURSIVE_TRIGGERS:
				enterOuterAlt(_localctx, 10);
				{
				setState(6929);
				match(RECURSIVE_TRIGGERS);
				setState(6930);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_recovery_time_optionContext extends ParserRuleContext {
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode SECONDS() { return getToken(TSqlParser.SECONDS, 0); }
		public TerminalNode MINUTES() { return getToken(TSqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_recovery_time_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTarget_recovery_time_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTarget_recovery_time_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTarget_recovery_time_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_recovery_time_optionContext target_recovery_time_option() throws RecognitionException {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_target_recovery_time_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6933);
			match(TARGET_RECOVERY_TIME);
			setState(6934);
			match(EQUAL);
			setState(6935);
			match(DECIMAL);
			setState(6936);
			_la = _input.LA(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TerminationContext extends ParserRuleContext {
		public Token seconds;
		public TerminalNode ROLLBACK() { return getToken(TSqlParser.ROLLBACK, 0); }
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode IMMEDIATE() { return getToken(TSqlParser.IMMEDIATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(TSqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_termination; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTermination(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTermination(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTermination(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TerminationContext termination() throws RecognitionException {
		TerminationContext _localctx = new TerminationContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_termination);
		try {
			setState(6944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6938);
				match(ROLLBACK);
				setState(6939);
				match(AFTER);
				setState(6940);
				((TerminationContext)_localctx).seconds = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6941);
				match(ROLLBACK);
				setState(6942);
				match(IMMEDIATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6943);
				match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_indexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public List<Drop_relational_or_xml_or_spatial_indexContext> drop_relational_or_xml_or_spatial_index() {
			return getRuleContexts(Drop_relational_or_xml_or_spatial_indexContext.class);
		}
		public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return getRuleContext(Drop_relational_or_xml_or_spatial_indexContext.class,i);
		}
		public List<Drop_backward_compatible_indexContext> drop_backward_compatible_index() {
			return getRuleContexts(Drop_backward_compatible_indexContext.class);
		}
		public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return getRuleContext(Drop_backward_compatible_indexContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_indexContext drop_index() throws RecognitionException {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_drop_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6946);
			match(DROP);
			setState(6947);
			match(INDEX);
			setState(6950);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(6948);
				match(IF);
				setState(6949);
				match(EXISTS);
				}
			}

			setState(6968);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,918,_ctx) ) {
			case 1:
				{
				setState(6952);
				drop_relational_or_xml_or_spatial_index();
				setState(6957);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6953);
					match(COMMA);
					setState(6954);
					drop_relational_or_xml_or_spatial_index();
					}
					}
					setState(6959);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(6960);
				drop_backward_compatible_index();
				setState(6965);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6961);
					match(COMMA);
					setState(6962);
					drop_backward_compatible_index();
					}
					}
					setState(6967);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(6971);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,919,_ctx) ) {
			case 1:
				{
				setState(6970);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_relational_or_xml_or_spatial_indexContext extends ParserRuleContext {
		public IdContext index_name;
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_relational_or_xml_or_spatial_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_relational_or_xml_or_spatial_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_relational_or_xml_or_spatial_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_relational_or_xml_or_spatial_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() throws RecognitionException {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6973);
			((Drop_relational_or_xml_or_spatial_indexContext)_localctx).index_name = id();
			setState(6974);
			match(ON);
			setState(6975);
			full_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_backward_compatible_indexContext extends ParserRuleContext {
		public IdContext owner_name;
		public IdContext table_or_view_name;
		public IdContext index_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_backward_compatible_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_backward_compatible_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_backward_compatible_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_backward_compatible_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_backward_compatible_indexContext drop_backward_compatible_index() throws RecognitionException {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_drop_backward_compatible_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6980);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
			case 1:
				{
				setState(6977);
				((Drop_backward_compatible_indexContext)_localctx).owner_name = id();
				setState(6978);
				match(DOT);
				}
				break;
			}
			setState(6982);
			((Drop_backward_compatible_indexContext)_localctx).table_or_view_name = id();
			setState(6983);
			match(DOT);
			setState(6984);
			((Drop_backward_compatible_indexContext)_localctx).index_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public Token proc;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<Func_proc_nameContext> func_proc_name() {
			return getRuleContexts(Func_proc_nameContext.class);
		}
		public Func_proc_nameContext func_proc_name(int i) {
			return getRuleContext(Func_proc_nameContext.class,i);
		}
		public TerminalNode PROC() { return getToken(TSqlParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(TSqlParser.PROCEDURE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_drop_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6986);
			match(DROP);
			setState(6987);
			((Drop_procedureContext)_localctx).proc = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				((Drop_procedureContext)_localctx).proc = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(6988);
				match(IF);
				setState(6989);
				match(EXISTS);
				}
			}

			setState(6992);
			func_proc_name();
			setState(6997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6993);
				match(COMMA);
				setState(6994);
				func_proc_name();
				}
				}
				setState(6999);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,923,_ctx) ) {
			case 1:
				{
				setState(7000);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public Drop_dml_triggerContext drop_dml_trigger() {
			return getRuleContext(Drop_dml_triggerContext.class,0);
		}
		public Drop_ddl_triggerContext drop_ddl_trigger() {
			return getRuleContext(Drop_ddl_triggerContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_drop_trigger);
		try {
			setState(7005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,924,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7003);
				drop_dml_trigger();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7004);
				drop_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_dml_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_dml_triggerContext drop_dml_trigger() throws RecognitionException {
		Drop_dml_triggerContext _localctx = new Drop_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_drop_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7007);
			match(DROP);
			setState(7008);
			match(TRIGGER);
			setState(7011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7009);
				match(IF);
				setState(7010);
				match(EXISTS);
				}
			}

			setState(7013);
			simple_name();
			setState(7018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7014);
				match(COMMA);
				setState(7015);
				simple_name();
				}
				}
				setState(7020);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
			case 1:
				{
				setState(7021);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ddl_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_ddl_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_ddl_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_ddl_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_ddl_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_ddl_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_ddl_triggerContext drop_ddl_trigger() throws RecognitionException {
		Drop_ddl_triggerContext _localctx = new Drop_ddl_triggerContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_drop_ddl_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7024);
			match(DROP);
			setState(7025);
			match(TRIGGER);
			setState(7028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7026);
				match(IF);
				setState(7027);
				match(EXISTS);
				}
			}

			setState(7030);
			simple_name();
			setState(7035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7031);
				match(COMMA);
				setState(7032);
				simple_name();
				}
				}
				setState(7037);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7038);
			match(ON);
			setState(7042);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
				{
				setState(7039);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(7040);
				match(ALL);
				setState(7041);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7045);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,931,_ctx) ) {
			case 1:
				{
				setState(7044);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public List<Func_proc_nameContext> func_proc_name() {
			return getRuleContexts(Func_proc_nameContext.class);
		}
		public Func_proc_nameContext func_proc_name(int i) {
			return getRuleContext(Func_proc_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_drop_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7047);
			match(DROP);
			setState(7048);
			match(FUNCTION);
			setState(7051);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7049);
				match(IF);
				setState(7050);
				match(EXISTS);
				}
			}

			setState(7053);
			func_proc_name();
			setState(7058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7054);
				match(COMMA);
				setState(7055);
				func_proc_name();
				}
				}
				setState(7060);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,934,_ctx) ) {
			case 1:
				{
				setState(7061);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statisticsContext extends ParserRuleContext {
		public IdContext name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_statistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_statistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_statisticsContext drop_statistics() throws RecognitionException {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_drop_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7064);
			match(DROP);
			setState(7065);
			match(STATISTICS);
			setState(7075); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7067);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7066);
					match(COMMA);
					}
				}

				setState(7072);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,936,_ctx) ) {
				case 1:
					{
					setState(7069);
					table_name();
					setState(7070);
					match(DOT);
					}
					break;
				}
				setState(7074);
				((Drop_statisticsContext)_localctx).name = id();
				}
				}
				setState(7077); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BLOCKING_HIERARCHY || _la==CALLED || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (DATA_COMPRESSION - 80)) | (1L << (EVENTDATA - 80)) | (1L << (FILENAME - 80)) | (1L << (FILLFACTOR - 80)) | (1L << (FORCESEEK - 80)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KEY - 169)) | (1L << (MASTER - 169)) | (1L << (MAX_MEMORY - 169)) | (1L << (OFFSETS - 169)))) != 0) || ((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (PAGE - 238)) | (1L << (PUBLIC - 238)) | (1L << (RAW - 238)) | (1L << (RETURN - 238)) | (1L << (RETURNS - 238)) | (1L << (ROWCOUNT - 238)) | (1L << (SAFETY - 238)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (SERVER - 308)) | (1L << (SID - 308)) | (1L << (SOURCE - 308)) | (1L << (STATE - 308)) | (1L << (TARGET - 308)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (ABSOLUTE - 382)) | (1L << (ACTIVE - 382)) | (1L << (ADDRESS - 382)) | (1L << (APPLY - 382)) | (1L << (AUTO - 382)) | (1L << (AVAILABILITY - 382)) | (1L << (AVG - 382)) | (1L << (CALLER - 382)) | (1L << (CAST - 382)) | (1L << (CATCH - 382)) | (1L << (CHECKSUM_AGG - 382)) | (1L << (COMMITTED - 382)) | (1L << (CONCAT - 382)) | (1L << (CONCAT_NULL_YIELDS_NULL - 382)) | (1L << (CONTROL - 382)) | (1L << (COOKIE - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (COUNT - 446)) | (1L << (COUNTER - 446)) | (1L << (COUNT_BIG - 446)) | (1L << (DELAY - 446)) | (1L << (DELETED - 446)) | (1L << (DENSE_RANK - 446)) | (1L << (DISABLE - 446)) | (1L << (DYNAMIC - 446)) | (1L << (ENCRYPTION - 446)) | (1L << (EXPAND - 446)) | (1L << (FAST - 446)) | (1L << (FAST_FORWARD - 446)) | (1L << (FIRST - 446)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCED - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (GLOBAL - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HASH - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (ISOLATION - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEYSET - 511)) | (1L << (LAST - 511)) | (1L << (LEVEL - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (MARK - 511)) | (1L << (MAX - 511)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MIN - 579)) | (1L << (MODIFY - 579)) | (1L << (NAME - 579)) | (1L << (NEXT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NTILE - 579)) | (1L << (NUMBER - 579)) | (1L << (OFFSET - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)) | (1L << (OUTPUT - 579)) | (1L << (OWNER - 579)) | (1L << (PARAMETERIZATION - 579)) | (1L << (PARTITION - 579)) | (1L << (PATH - 579)) | (1L << (PRECEDING - 579)) | (1L << (PRIOR - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PRIVILEGES - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (READONLY - 643)) | (1L << (READ_ONLY - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROW - 643)) | (1L << (ROWGUID - 643)) | (1L << (ROWS - 643)) | (1L << (ROW_NUMBER - 643)) | (1L << (SAMPLE - 643)) | (1L << (SCHEMABINDING - 643)) | (1L << (SCROLL - 643)) | (1L << (SCROLL_LOCKS - 643)) | (1L << (SELF - 643)) | (1L << (SERIALIZABLE - 643)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (SIMPLE - 711)) | (1L << (SIZE - 711)) | (1L << (SNAPSHOT - 711)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 711)) | (1L << (STATIC - 711)) | (1L << (STATS_STREAM - 711)) | (1L << (STDEV - 711)) | (1L << (STDEVP - 711)) | (1L << (SUM - 711)) | (1L << (TEXTIMAGE_ON - 711)) | (1L << (THROW - 711)) | (1L << (TIES - 711)) | (1L << (TIME - 711)) | (1L << (TRY - 711)) | (1L << (TYPE - 711)) | (1L << (TYPE_WARNING - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNKNOWN - 711)) | (1L << (USING - 711)) | (1L << (VALUE - 711)) | (1L << (VAR - 711)) | (1L << (VARP - 711)) | (1L << (VIEWS - 711)) | (1L << (VIEW_METADATA - 711)) | (1L << (WORK - 711)) | (1L << (XML - 711)) | (1L << (XMLNAMESPACES - 711)) | (1L << (DOUBLE_QUOTE_ID - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (SQUARE_BRACKET_ID - 775)) | (1L << (ID - 775)) | (1L << (COMMA - 775)))) != 0) );
			setState(7079);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_drop_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7081);
			match(DROP);
			setState(7082);
			match(TABLE);
			setState(7085);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7083);
				match(IF);
				setState(7084);
				match(EXISTS);
				}
			}

			setState(7087);
			table_name();
			setState(7089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,939,_ctx) ) {
			case 1:
				{
				setState(7088);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_viewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(TSqlParser.VIEW, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_viewContext drop_view() throws RecognitionException {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_drop_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7091);
			match(DROP);
			setState(7092);
			match(VIEW);
			setState(7095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7093);
				match(IF);
				setState(7094);
				match(EXISTS);
				}
			}

			setState(7097);
			simple_name();
			setState(7102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7098);
				match(COMMA);
				setState(7099);
				simple_name();
				}
				}
				setState(7104);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,942,_ctx) ) {
			case 1:
				{
				setState(7105);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public Simple_nameContext name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7108);
			match(CREATE);
			setState(7109);
			match(TYPE);
			setState(7110);
			((Create_typeContext)_localctx).name = simple_name();
			setState(7115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(7111);
				match(FROM);
				setState(7112);
				data_type();
				setState(7113);
				default_value();
				}
			}

			setState(7123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7117);
				match(AS);
				setState(7118);
				match(TABLE);
				setState(7119);
				match(LR_BRACKET);
				setState(7120);
				column_def_table_constraints();
				setState(7121);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public Simple_nameContext name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDrop_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7125);
			match(DROP);
			setState(7126);
			match(TYPE);
			setState(7129);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7127);
				match(IF);
				setState(7128);
				match(EXISTS);
				}
			}

			setState(7131);
			((Drop_typeContext)_localctx).name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_function_limitedContext extends ParserRuleContext {
		public OpenqueryContext openquery() {
			return getRuleContext(OpenqueryContext.class,0);
		}
		public OpendatasourceContext opendatasource() {
			return getRuleContext(OpendatasourceContext.class,0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function_limited; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRowset_function_limited(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRowset_function_limited(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitRowset_function_limited(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowset_function_limitedContext rowset_function_limited() throws RecognitionException {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_rowset_function_limited);
		try {
			setState(7135);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENQUERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7133);
				openquery();
				}
				break;
			case OPENDATASOURCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7134);
				opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpenqueryContext extends ParserRuleContext {
		public IdContext linked_server;
		public Token query;
		public TerminalNode OPENQUERY() { return getToken(TSqlParser.OPENQUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOpenquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOpenquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOpenquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpenqueryContext openquery() throws RecognitionException {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_openquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7137);
			match(OPENQUERY);
			setState(7138);
			match(LR_BRACKET);
			setState(7139);
			((OpenqueryContext)_localctx).linked_server = id();
			setState(7140);
			match(COMMA);
			setState(7141);
			((OpenqueryContext)_localctx).query = match(STRING);
			setState(7142);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpendatasourceContext extends ParserRuleContext {
		public Token provider;
		public Token init;
		public IdContext database;
		public IdContext scheme;
		public IdContext table;
		public TerminalNode OPENDATASOURCE() { return getToken(TSqlParser.OPENDATASOURCE, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opendatasource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOpendatasource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOpendatasource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOpendatasource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpendatasourceContext opendatasource() throws RecognitionException {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_opendatasource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7144);
			match(OPENDATASOURCE);
			setState(7145);
			match(LR_BRACKET);
			setState(7146);
			((OpendatasourceContext)_localctx).provider = match(STRING);
			setState(7147);
			match(COMMA);
			setState(7148);
			((OpendatasourceContext)_localctx).init = match(STRING);
			setState(7149);
			match(RR_BRACKET);
			setState(7150);
			match(DOT);
			setState(7152);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CALLED || _la==DATA_COMPRESSION || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
				{
				setState(7151);
				((OpendatasourceContext)_localctx).database = id();
				}
			}

			setState(7154);
			match(DOT);
			setState(7156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CALLED || _la==DATA_COMPRESSION || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
				{
				setState(7155);
				((OpendatasourceContext)_localctx).scheme = id();
				}
			}

			setState(7158);
			match(DOT);
			{
			setState(7159);
			((OpendatasourceContext)_localctx).table = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_statementContext extends ParserRuleContext {
		public Token xml_namespace_uri;
		public TerminalNode DECLARE() { return getToken(TSqlParser.DECLARE, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<Declare_localContext> declare_local() {
			return getRuleContexts(Declare_localContext.class);
		}
		public Declare_localContext declare_local(int i) {
			return getRuleContext(Declare_localContext.class,i);
		}
		public Xml_type_definitionContext xml_type_definition() {
			return getRuleContext(Xml_type_definitionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(TSqlParser.XMLNAMESPACES, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Declare_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDeclare_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_statementContext declare_statement() throws RecognitionException {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_declare_statement);
		int _la;
		try {
			setState(7204);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,957,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7161);
				match(DECLARE);
				setState(7162);
				match(LOCAL_ID);
				setState(7164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7163);
					match(AS);
					}
				}

				setState(7166);
				table_type_definition();
				setState(7168);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,950,_ctx) ) {
				case 1:
					{
					setState(7167);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7170);
				match(DECLARE);
				setState(7171);
				declare_local();
				setState(7176);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7172);
					match(COMMA);
					setState(7173);
					declare_local();
					}
					}
					setState(7178);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7180);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,952,_ctx) ) {
				case 1:
					{
					setState(7179);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7182);
				match(DECLARE);
				setState(7183);
				match(LOCAL_ID);
				setState(7185);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7184);
					match(AS);
					}
				}

				setState(7187);
				xml_type_definition();
				setState(7189);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,954,_ctx) ) {
				case 1:
					{
					setState(7188);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7191);
				match(WITH);
				setState(7192);
				match(XMLNAMESPACES);
				setState(7193);
				match(LR_BRACKET);
				setState(7194);
				((Declare_statementContext)_localctx).xml_namespace_uri = match(STRING);
				setState(7196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7195);
					match(COMMA);
					}
				}

				setState(7198);
				match(AS);
				setState(7199);
				id();
				setState(7200);
				match(RR_BRACKET);
				setState(7202);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,956,_ctx) ) {
				case 1:
					{
					setState(7201);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(TSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode DEALLOCATE() { return getToken(TSqlParser.DEALLOCATE, 0); }
		public Declare_cursorContext declare_cursor() {
			return getRuleContext(Declare_cursorContext.class,0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return getRuleContext(Fetch_cursorContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(TSqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCursor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCursor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCursor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_statementContext cursor_statement() throws RecognitionException {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_cursor_statement);
		try {
			setState(7232);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7206);
				match(CLOSE);
				setState(7208);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,958,_ctx) ) {
				case 1:
					{
					setState(7207);
					match(GLOBAL);
					}
					break;
				}
				setState(7210);
				cursor_name();
				setState(7212);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,959,_ctx) ) {
				case 1:
					{
					setState(7211);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case DEALLOCATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7214);
				match(DEALLOCATE);
				setState(7216);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,960,_ctx) ) {
				case 1:
					{
					setState(7215);
					match(GLOBAL);
					}
					break;
				}
				setState(7218);
				cursor_name();
				setState(7220);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,961,_ctx) ) {
				case 1:
					{
					setState(7219);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case DECLARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7222);
				declare_cursor();
				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 4);
				{
				setState(7223);
				fetch_cursor();
				}
				break;
			case OPEN:
				enterOuterAlt(_localctx, 5);
				{
				setState(7224);
				match(OPEN);
				setState(7226);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,962,_ctx) ) {
				case 1:
					{
					setState(7225);
					match(GLOBAL);
					}
					break;
				}
				setState(7228);
				cursor_name();
				setState(7230);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,963,_ctx) ) {
				case 1:
					{
					setState(7229);
					match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statementContext extends ParserRuleContext {
		public Token return_status;
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Execute_statement_argContext> execute_statement_arg() {
			return getRuleContexts(Execute_statement_argContext.class);
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return getRuleContext(Execute_statement_argContext.class,i);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Execute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitExecute_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statementContext execute_statement() throws RecognitionException {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_execute_statement);
		int _la;
		try {
			setState(7278);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,974,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7234);
				match(EXECUTE);
				setState(7237);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,965,_ctx) ) {
				case 1:
					{
					setState(7235);
					((Execute_statementContext)_localctx).return_status = match(LOCAL_ID);
					setState(7236);
					match(EQUAL);
					}
					break;
				}
				setState(7241);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,966,_ctx) ) {
				case 1:
					{
					setState(7239);
					func_proc_name();
					}
					break;
				case 2:
					{
					setState(7240);
					expression(0);
					}
					break;
				}
				setState(7251);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,968,_ctx) ) {
				case 1:
					{
					setState(7243);
					execute_statement_arg();
					setState(7248);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7244);
						match(COMMA);
						setState(7245);
						execute_statement_arg();
						}
						}
						setState(7250);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(7254);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,969,_ctx) ) {
				case 1:
					{
					setState(7253);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7256);
				match(EXECUTE);
				setState(7257);
				match(LR_BRACKET);
				setState(7258);
				execute_var_string();
				setState(7263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(7259);
					match(PLUS);
					setState(7260);
					execute_var_string();
					}
					}
					setState(7265);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7266);
				match(RR_BRACKET);
				setState(7273);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,972,_ctx) ) {
				case 1:
					{
					setState(7268);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(7267);
						match(AS);
						}
					}

					setState(7270);
					_la = _input.LA(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7271);
					match(EQUAL);
					setState(7272);
					match(STRING);
					}
					break;
				}
				setState(7276);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
				case 1:
					{
					setState(7275);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statement_argContext extends ParserRuleContext {
		public Token parameter;
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return getRuleContext(Constant_LOCAL_IDContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public TerminalNode OUT() { return getToken(TSqlParser.OUT, 0); }
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_statement_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_statement_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitExecute_statement_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statement_argContext execute_statement_arg() throws RecognitionException {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_execute_statement_arg);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7282);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,975,_ctx) ) {
			case 1:
				{
				setState(7280);
				((Execute_statement_argContext)_localctx).parameter = match(LOCAL_ID);
				setState(7281);
				match(EQUAL);
				}
				break;
			}
			setState(7293);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				setState(7286);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(7284);
					constant_LOCAL_ID();
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(7285);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7289);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
				case 1:
					{
					setState(7288);
					_la = _input.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case DEFAULT:
				{
				setState(7291);
				match(DEFAULT);
				}
				break;
			case NULL:
				{
				setState(7292);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_var_stringContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_var_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_var_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_var_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitExecute_var_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_var_stringContext execute_var_string() throws RecognitionException {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_execute_var_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7295);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_statementContext extends ParserRuleContext {
		public Table_nameContext on_id;
		public IdContext id;
		public List<IdContext> to_principal = new ArrayList<IdContext>();
		public IdContext as_principal;
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public List<TerminalNode> GRANT() { return getTokens(TSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(TSqlParser.GRANT, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Grant_permissionContext grant_permission() {
			return getRuleContext(Grant_permissionContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(TSqlParser.OPTION, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode PRIVILEGES() { return getToken(TSqlParser.PRIVILEGES, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode REVERT() { return getToken(TSqlParser.REVERT, 0); }
		public TerminalNode COOKIE() { return getToken(TSqlParser.COOKIE, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Open_keyContext open_key() {
			return getRuleContext(Open_keyContext.class,0);
		}
		public Close_keyContext close_key() {
			return getRuleContext(Close_keyContext.class,0);
		}
		public Create_keyContext create_key() {
			return getRuleContext(Create_keyContext.class,0);
		}
		public Create_certificateContext create_certificate() {
			return getRuleContext(Create_certificateContext.class,0);
		}
		public Security_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSecurity_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSecurity_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSecurity_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_statementContext security_statement() throws RecognitionException {
		Security_statementContext _localctx = new Security_statementContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_security_statement);
		int _la;
		try {
			setState(7356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,990,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7297);
				execute_clause();
				setState(7299);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,979,_ctx) ) {
				case 1:
					{
					setState(7298);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7301);
				match(GRANT);
				setState(7313);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
					{
					setState(7302);
					match(ALL);
					setState(7304);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(7303);
						match(PRIVILEGES);
						}
					}

					}
					break;
				case ALTER:
				case CREATE:
				case EXECUTE:
				case INSERT:
				case REFERENCES:
				case SELECT:
				case VIEW:
				case CONTROL:
				case IMPERSONATE:
				case SHOWPLAN:
				case TAKE:
					{
					setState(7306);
					grant_permission();
					setState(7311);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LR_BRACKET) {
						{
						setState(7307);
						match(LR_BRACKET);
						setState(7308);
						column_name_list();
						setState(7309);
						match(RR_BRACKET);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7317);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(7315);
					match(ON);
					setState(7316);
					((Security_statementContext)_localctx).on_id = table_name();
					}
				}

				setState(7319);
				match(TO);
				{
				setState(7320);
				((Security_statementContext)_localctx).id = id();
				((Security_statementContext)_localctx).to_principal.add(((Security_statementContext)_localctx).id);
				}
				setState(7325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7321);
					match(COMMA);
					setState(7322);
					((Security_statementContext)_localctx).id = id();
					((Security_statementContext)_localctx).to_principal.add(((Security_statementContext)_localctx).id);
					}
					}
					setState(7327);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7331);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,985,_ctx) ) {
				case 1:
					{
					setState(7328);
					match(WITH);
					setState(7329);
					match(GRANT);
					setState(7330);
					match(OPTION);
					}
					break;
				}
				setState(7335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7333);
					match(AS);
					setState(7334);
					((Security_statementContext)_localctx).as_principal = id();
					}
				}

				setState(7338);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,987,_ctx) ) {
				case 1:
					{
					setState(7337);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7340);
				match(REVERT);
				setState(7347);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,988,_ctx) ) {
				case 1:
					{
					setState(7341);
					match(LR_BRACKET);
					setState(7342);
					match(WITH);
					setState(7343);
					match(COOKIE);
					setState(7344);
					match(EQUAL);
					setState(7345);
					match(LOCAL_ID);
					setState(7346);
					match(RR_BRACKET);
					}
					break;
				}
				setState(7350);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,989,_ctx) ) {
				case 1:
					{
					setState(7349);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7352);
				open_key();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7353);
				close_key();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7354);
				create_key();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7355);
				create_certificate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext user_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Existing_keysContext existing_keys() {
			return getRuleContext(Existing_keysContext.class,0);
		}
		public Generate_new_keysContext generate_new_keys() {
			return getRuleContext(Generate_new_keysContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode ACTIVE() { return getToken(TSqlParser.ACTIVE, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode DIALOG() { return getToken(TSqlParser.DIALOG, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_certificate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_certificate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_certificateContext create_certificate() throws RecognitionException {
		Create_certificateContext _localctx = new Create_certificateContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_create_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7358);
			match(CREATE);
			setState(7359);
			match(CERTIFICATE);
			setState(7360);
			((Create_certificateContext)_localctx).certificate_name = id();
			setState(7363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(7361);
				match(AUTHORIZATION);
				setState(7362);
				((Create_certificateContext)_localctx).user_name = id();
				}
			}

			setState(7368);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				{
				setState(7365);
				match(FROM);
				setState(7366);
				existing_keys();
				}
				break;
			case WITH:
			case ENCRYPTION:
				{
				setState(7367);
				generate_new_keys();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
			case 1:
				{
				setState(7370);
				match(ACTIVE);
				setState(7371);
				match(FOR);
				setState(7372);
				match(BEGIN);
				setState(7373);
				match(DIALOG);
				setState(7374);
				match(EQUAL);
				setState(7375);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Existing_keysContext extends ParserRuleContext {
		public IdContext assembly_name;
		public Token path_to_file;
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode EXECUTABLE() { return getToken(TSqlParser.EXECUTABLE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Private_key_optionsContext private_key_options() {
			return getRuleContext(Private_key_optionsContext.class,0);
		}
		public Existing_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existing_keys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExisting_keys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExisting_keys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitExisting_keys(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Existing_keysContext existing_keys() throws RecognitionException {
		Existing_keysContext _localctx = new Existing_keysContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_existing_keys);
		int _la;
		try {
			setState(7395);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASSEMBLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7378);
				match(ASSEMBLY);
				setState(7379);
				((Existing_keysContext)_localctx).assembly_name = id();
				}
				break;
			case FILE:
			case EXECUTABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXECUTABLE) {
					{
					setState(7380);
					match(EXECUTABLE);
					}
				}

				setState(7383);
				match(FILE);
				setState(7384);
				match(EQUAL);
				setState(7385);
				((Existing_keysContext)_localctx).path_to_file = match(STRING);
				setState(7393);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,995,_ctx) ) {
				case 1:
					{
					setState(7386);
					match(WITH);
					setState(7387);
					match(PRIVATE);
					setState(7388);
					match(KEY);
					setState(7389);
					match(LR_BRACKET);
					setState(7390);
					private_key_options();
					setState(7391);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Private_key_optionsContext extends ParserRuleContext {
		public Token path;
		public Token password;
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public Private_key_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_private_key_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPrivate_key_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPrivate_key_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitPrivate_key_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Private_key_optionsContext private_key_options() throws RecognitionException {
		Private_key_optionsContext _localctx = new Private_key_optionsContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_private_key_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7397);
			_la = _input.LA(1);
			if ( !(_la==FILE || _la==BINARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7398);
			match(EQUAL);
			setState(7399);
			((Private_key_optionsContext)_localctx).path = match(STRING);
			setState(7406);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7400);
				match(COMMA);
				setState(7401);
				_la = _input.LA(1);
				if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7402);
				match(BY);
				setState(7403);
				match(PASSWORD);
				setState(7404);
				match(EQUAL);
				setState(7405);
				((Private_key_optionsContext)_localctx).password = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generate_new_keysContext extends ParserRuleContext {
		public Token password;
		public Token certificate_subject_name;
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SUBJECT() { return getToken(TSqlParser.SUBJECT, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<Date_optionsContext> date_options() {
			return getRuleContexts(Date_optionsContext.class);
		}
		public Date_optionsContext date_options(int i) {
			return getRuleContext(Date_optionsContext.class,i);
		}
		public Generate_new_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generate_new_keys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGenerate_new_keys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGenerate_new_keys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitGenerate_new_keys(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generate_new_keysContext generate_new_keys() throws RecognitionException {
		Generate_new_keysContext _localctx = new Generate_new_keysContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_generate_new_keys);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7413);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCRYPTION) {
				{
				setState(7408);
				match(ENCRYPTION);
				setState(7409);
				match(BY);
				setState(7410);
				match(PASSWORD);
				setState(7411);
				match(EQUAL);
				setState(7412);
				((Generate_new_keysContext)_localctx).password = match(STRING);
				}
			}

			setState(7415);
			match(WITH);
			setState(7416);
			match(SUBJECT);
			setState(7417);
			match(EQUAL);
			setState(7418);
			((Generate_new_keysContext)_localctx).certificate_subject_name = match(STRING);
			setState(7423);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7419);
				match(COMMA);
				setState(7420);
				date_options();
				}
				}
				setState(7425);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_optionsContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode START_DATE() { return getToken(TSqlParser.START_DATE, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(TSqlParser.EXPIRY_DATE, 0); }
		public Date_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDate_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDate_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDate_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Date_optionsContext date_options() throws RecognitionException {
		Date_optionsContext _localctx = new Date_optionsContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_date_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7426);
			_la = _input.LA(1);
			if ( !(_la==EXPIRY_DATE || _la==START_DATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7427);
			match(EQUAL);
			setState(7428);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public Token password;
		public TerminalNode OPEN() { return getToken(TSqlParser.OPEN, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public Decryption_mechanismContext decryption_mechanism() {
			return getRuleContext(Decryption_mechanismContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Open_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOpen_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOpen_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOpen_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_keyContext open_key() throws RecognitionException {
		Open_keyContext _localctx = new Open_keyContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_open_key);
		try {
			setState(7446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1000,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7430);
				match(OPEN);
				setState(7431);
				match(SYMMETRIC);
				setState(7432);
				match(KEY);
				setState(7433);
				((Open_keyContext)_localctx).key_name = id();
				setState(7434);
				match(DECRYPTION);
				setState(7435);
				match(BY);
				setState(7436);
				decryption_mechanism();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7438);
				match(OPEN);
				setState(7439);
				match(MASTER);
				setState(7440);
				match(KEY);
				setState(7441);
				match(DECRYPTION);
				setState(7442);
				match(BY);
				setState(7443);
				match(PASSWORD);
				setState(7444);
				match(EQUAL);
				setState(7445);
				((Open_keyContext)_localctx).password = match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode CLOSE() { return getToken(TSqlParser.CLOSE, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode KEYS() { return getToken(TSqlParser.KEYS, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public Close_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClose_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClose_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitClose_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_keyContext close_key() throws RecognitionException {
		Close_keyContext _localctx = new Close_keyContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_close_key);
		try {
			setState(7459);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1001,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7448);
				match(CLOSE);
				setState(7449);
				match(SYMMETRIC);
				setState(7450);
				match(KEY);
				setState(7451);
				((Close_keyContext)_localctx).key_name = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7452);
				match(CLOSE);
				setState(7453);
				match(ALL);
				setState(7454);
				match(SYMMETRIC);
				setState(7455);
				match(KEYS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7456);
				match(CLOSE);
				setState(7457);
				match(MASTER);
				setState(7458);
				match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_keyContext extends ParserRuleContext {
		public Token password;
		public IdContext key_name;
		public IdContext user_name;
		public IdContext provider_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public List<Key_optionsContext> key_options() {
			return getRuleContexts(Key_optionsContext.class);
		}
		public Key_optionsContext key_options(int i) {
			return getRuleContext(Key_optionsContext.class,i);
		}
		public List<Encryption_mechanismContext> encryption_mechanism() {
			return getRuleContexts(Encryption_mechanismContext.class);
		}
		public Encryption_mechanismContext encryption_mechanism(int i) {
			return getRuleContext(Encryption_mechanismContext.class,i);
		}
		public Create_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_keyContext create_key() throws RecognitionException {
		Create_keyContext _localctx = new Create_keyContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_create_key);
		int _la;
		try {
			int _alt;
			setState(7496);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1007,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7461);
				match(CREATE);
				setState(7462);
				match(MASTER);
				setState(7463);
				match(KEY);
				setState(7464);
				match(ENCRYPTION);
				setState(7465);
				match(BY);
				setState(7466);
				match(PASSWORD);
				setState(7467);
				match(EQUAL);
				setState(7468);
				((Create_keyContext)_localctx).password = match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7469);
				match(CREATE);
				setState(7470);
				match(SYMMETRIC);
				setState(7471);
				match(KEY);
				setState(7472);
				((Create_keyContext)_localctx).key_name = id();
				setState(7475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTHORIZATION) {
					{
					setState(7473);
					match(AUTHORIZATION);
					setState(7474);
					((Create_keyContext)_localctx).user_name = id();
					}
				}

				setState(7480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(7477);
					match(FROM);
					setState(7478);
					match(PROVIDER);
					setState(7479);
					((Create_keyContext)_localctx).provider_name = id();
					}
				}

				setState(7482);
				match(WITH);
				setState(7492); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7487);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case ALGORITHM:
						case CREATION_DISPOSITION:
						case IDENTITY_VALUE:
						case KEY_SOURCE:
						case PROVIDER_KEY_NAME:
							{
							setState(7483);
							key_options();
							}
							break;
						case ENCRYPTION:
							{
							setState(7484);
							match(ENCRYPTION);
							setState(7485);
							match(BY);
							setState(7486);
							encryption_mechanism();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(7490);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7489);
							match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7494); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1006,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_optionsContext extends ParserRuleContext {
		public Token pass_phrase;
		public Token identity_phrase;
		public Token key_name_in_provider;
		public TerminalNode KEY_SOURCE() { return getToken(TSqlParser.KEY_SOURCE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public AlgorithmContext algorithm() {
			return getRuleContext(AlgorithmContext.class,0);
		}
		public TerminalNode IDENTITY_VALUE() { return getToken(TSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSqlParser.OPEN_EXISTING, 0); }
		public Key_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterKey_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitKey_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitKey_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_optionsContext key_options() throws RecognitionException {
		Key_optionsContext _localctx = new Key_optionsContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_key_options);
		int _la;
		try {
			setState(7513);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_SOURCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7498);
				match(KEY_SOURCE);
				setState(7499);
				match(EQUAL);
				setState(7500);
				((Key_optionsContext)_localctx).pass_phrase = match(STRING);
				}
				break;
			case ALGORITHM:
				enterOuterAlt(_localctx, 2);
				{
				setState(7501);
				match(ALGORITHM);
				setState(7502);
				match(EQUAL);
				setState(7503);
				algorithm();
				}
				break;
			case IDENTITY_VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7504);
				match(IDENTITY_VALUE);
				setState(7505);
				match(EQUAL);
				setState(7506);
				((Key_optionsContext)_localctx).identity_phrase = match(STRING);
				}
				break;
			case PROVIDER_KEY_NAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(7507);
				match(PROVIDER_KEY_NAME);
				setState(7508);
				match(EQUAL);
				setState(7509);
				((Key_optionsContext)_localctx).key_name_in_provider = match(STRING);
				}
				break;
			case CREATION_DISPOSITION:
				enterOuterAlt(_localctx, 5);
				{
				setState(7510);
				match(CREATION_DISPOSITION);
				setState(7511);
				match(EQUAL);
				setState(7512);
				_la = _input.LA(1);
				if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlgorithmContext extends ParserRuleContext {
		public TerminalNode DES() { return getToken(TSqlParser.DES, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(TSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode RC2() { return getToken(TSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(TSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(TSqlParser.RC4_128, 0); }
		public TerminalNode DESX() { return getToken(TSqlParser.DESX, 0); }
		public TerminalNode AES_128() { return getToken(TSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSqlParser.AES_256, 0); }
		public AlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_algorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlgorithmContext algorithm() throws RecognitionException {
		AlgorithmContext _localctx = new AlgorithmContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_algorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7515);
			_la = _input.LA(1);
			if ( !(((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (AES_128 - 388)) | (1L << (AES_192 - 388)) | (1L << (AES_256 - 388)))) != 0) || _la==DES || _la==DESX || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (RC2 - 654)) | (1L << (RC4 - 654)) | (1L << (RC4_128 - 654)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Encryption_mechanismContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Encryption_mechanismContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryption_mechanism; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEncryption_mechanism(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEncryption_mechanism(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitEncryption_mechanism(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Encryption_mechanismContext encryption_mechanism() throws RecognitionException {
		Encryption_mechanismContext _localctx = new Encryption_mechanismContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_encryption_mechanism);
		try {
			setState(7528);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7517);
				match(CERTIFICATE);
				setState(7518);
				((Encryption_mechanismContext)_localctx).certificate_name = id();
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(7519);
				match(ASYMMETRIC);
				setState(7520);
				match(KEY);
				setState(7521);
				((Encryption_mechanismContext)_localctx).asym_key_name = id();
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(7522);
				match(SYMMETRIC);
				setState(7523);
				match(KEY);
				setState(7524);
				((Encryption_mechanismContext)_localctx).decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(7525);
				match(PASSWORD);
				setState(7526);
				match(EQUAL);
				setState(7527);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decryption_mechanismContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public Decryption_mechanismContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decryption_mechanism; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDecryption_mechanism(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDecryption_mechanism(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDecryption_mechanism(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decryption_mechanismContext decryption_mechanism() throws RecognitionException {
		Decryption_mechanismContext _localctx = new Decryption_mechanismContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_decryption_mechanism);
		try {
			setState(7553);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7530);
				match(CERTIFICATE);
				setState(7531);
				((Decryption_mechanismContext)_localctx).certificate_name = id();
				setState(7536);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1010,_ctx) ) {
				case 1:
					{
					setState(7532);
					match(WITH);
					setState(7533);
					match(PASSWORD);
					setState(7534);
					match(EQUAL);
					setState(7535);
					match(STRING);
					}
					break;
				}
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(7538);
				match(ASYMMETRIC);
				setState(7539);
				match(KEY);
				setState(7540);
				((Decryption_mechanismContext)_localctx).asym_key_name = id();
				setState(7545);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1011,_ctx) ) {
				case 1:
					{
					setState(7541);
					match(WITH);
					setState(7542);
					match(PASSWORD);
					setState(7543);
					match(EQUAL);
					setState(7544);
					match(STRING);
					}
					break;
				}
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(7547);
				match(SYMMETRIC);
				setState(7548);
				match(KEY);
				setState(7549);
				((Decryption_mechanismContext)_localctx).decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(7550);
				match(PASSWORD);
				setState(7551);
				match(EQUAL);
				setState(7552);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_permissionContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public TerminalNode VIEW() { return getToken(TSqlParser.VIEW, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode TAKE() { return getToken(TSqlParser.TAKE, 0); }
		public TerminalNode CONTROL() { return getToken(TSqlParser.CONTROL, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public TerminalNode SHOWPLAN() { return getToken(TSqlParser.SHOWPLAN, 0); }
		public TerminalNode IMPERSONATE() { return getToken(TSqlParser.IMPERSONATE, 0); }
		public TerminalNode SELECT() { return getToken(TSqlParser.SELECT, 0); }
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode ANY() { return getToken(TSqlParser.ANY, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_permission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGrant_permission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGrant_permission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitGrant_permission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_permissionContext grant_permission() throws RecognitionException {
		Grant_permissionContext _localctx = new Grant_permissionContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_grant_permission);
		int _la;
		try {
			setState(7581);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7555);
				match(EXECUTE);
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 2);
				{
				setState(7556);
				match(VIEW);
				setState(7557);
				id();
				}
				break;
			case TAKE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7558);
				match(TAKE);
				setState(7559);
				id();
				}
				break;
			case CONTROL:
				enterOuterAlt(_localctx, 4);
				{
				setState(7560);
				match(CONTROL);
				setState(7562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CALLED || _la==DATA_COMPRESSION || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
					{
					setState(7561);
					id();
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(7564);
				match(CREATE);
				setState(7565);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHOWPLAN:
				enterOuterAlt(_localctx, 6);
				{
				setState(7566);
				match(SHOWPLAN);
				}
				break;
			case IMPERSONATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(7567);
				match(IMPERSONATE);
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 8);
				{
				setState(7568);
				match(SELECT);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 9);
				{
				setState(7569);
				match(REFERENCES);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 10);
				{
				setState(7570);
				match(INSERT);
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 11);
				{
				setState(7571);
				match(ALTER);
				setState(7579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY || _la==CALLED || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (DATA_COMPRESSION - 80)) | (1L << (DATABASE - 80)) | (1L << (EVENTDATA - 80)) | (1L << (FILENAME - 80)) | (1L << (FILLFACTOR - 80)) | (1L << (FORCESEEK - 80)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KEY - 169)) | (1L << (MASTER - 169)) | (1L << (MAX_MEMORY - 169)) | (1L << (OFFSETS - 169)))) != 0) || ((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (PAGE - 238)) | (1L << (PUBLIC - 238)) | (1L << (RAW - 238)) | (1L << (RETURN - 238)) | (1L << (RETURNS - 238)) | (1L << (ROWCOUNT - 238)) | (1L << (SAFETY - 238)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (SERVER - 308)) | (1L << (SID - 308)) | (1L << (SOURCE - 308)) | (1L << (STATE - 308)) | (1L << (TARGET - 308)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (ABSOLUTE - 382)) | (1L << (ACTIVE - 382)) | (1L << (ADDRESS - 382)) | (1L << (APPLY - 382)) | (1L << (AUTO - 382)) | (1L << (AVAILABILITY - 382)) | (1L << (AVG - 382)) | (1L << (CALLER - 382)) | (1L << (CAST - 382)) | (1L << (CATCH - 382)) | (1L << (CHECKSUM_AGG - 382)) | (1L << (COMMITTED - 382)) | (1L << (CONCAT - 382)) | (1L << (CONCAT_NULL_YIELDS_NULL - 382)) | (1L << (CONTROL - 382)) | (1L << (COOKIE - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (COUNT - 446)) | (1L << (COUNTER - 446)) | (1L << (COUNT_BIG - 446)) | (1L << (DELAY - 446)) | (1L << (DELETED - 446)) | (1L << (DENSE_RANK - 446)) | (1L << (DISABLE - 446)) | (1L << (DYNAMIC - 446)) | (1L << (ENCRYPTION - 446)) | (1L << (EXPAND - 446)) | (1L << (FAST - 446)) | (1L << (FAST_FORWARD - 446)) | (1L << (FIRST - 446)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCED - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (GLOBAL - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HASH - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (ISOLATION - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEYSET - 511)) | (1L << (LAST - 511)) | (1L << (LEVEL - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (MARK - 511)) | (1L << (MAX - 511)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MIN - 579)) | (1L << (MODIFY - 579)) | (1L << (NAME - 579)) | (1L << (NEXT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NTILE - 579)) | (1L << (NUMBER - 579)) | (1L << (OFFSET - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)) | (1L << (OUTPUT - 579)) | (1L << (OWNER - 579)) | (1L << (PARAMETERIZATION - 579)) | (1L << (PARTITION - 579)) | (1L << (PATH - 579)) | (1L << (PRECEDING - 579)) | (1L << (PRIOR - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PRIVILEGES - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (READONLY - 643)) | (1L << (READ_ONLY - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROW - 643)) | (1L << (ROWGUID - 643)) | (1L << (ROWS - 643)) | (1L << (ROW_NUMBER - 643)) | (1L << (SAMPLE - 643)) | (1L << (SCHEMABINDING - 643)) | (1L << (SCROLL - 643)) | (1L << (SCROLL_LOCKS - 643)) | (1L << (SELF - 643)) | (1L << (SERIALIZABLE - 643)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (SIMPLE - 711)) | (1L << (SIZE - 711)) | (1L << (SNAPSHOT - 711)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 711)) | (1L << (STATIC - 711)) | (1L << (STATS_STREAM - 711)) | (1L << (STDEV - 711)) | (1L << (STDEVP - 711)) | (1L << (SUM - 711)) | (1L << (TEXTIMAGE_ON - 711)) | (1L << (THROW - 711)) | (1L << (TIES - 711)) | (1L << (TIME - 711)) | (1L << (TRY - 711)) | (1L << (TYPE - 711)) | (1L << (TYPE_WARNING - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNKNOWN - 711)) | (1L << (USING - 711)) | (1L << (VALUE - 711)) | (1L << (VAR - 711)) | (1L << (VARP - 711)) | (1L << (VIEWS - 711)) | (1L << (VIEW_METADATA - 711)) | (1L << (WORK - 711)) | (1L << (XML - 711)) | (1L << (XMLNAMESPACES - 711)) | (1L << (DOUBLE_QUOTE_ID - 711)))) != 0) || _la==SQUARE_BRACKET_ID || _la==ID) {
					{
					setState(7573);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ANY) {
						{
						setState(7572);
						match(ANY);
						}
					}

					setState(7577);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case TARGET:
					case ABSOLUTE:
					case ACTIVE:
					case ADDRESS:
					case APPLY:
					case AUTO:
					case AVAILABILITY:
					case AVG:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNTER:
					case COUNT_BIG:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCATION:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NAME:
					case NEXT:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SIZE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VALUE:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(7575);
						id();
						}
						break;
					case DATABASE:
						{
						setState(7576);
						match(DATABASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statementContext extends ParserRuleContext {
		public IdContext member_name;
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(TSqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return getRuleContext(Declare_set_cursor_commonContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode READ() { return getToken(TSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Set_specialContext set_special() {
			return getRuleContext(Set_specialContext.class,0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_statementContext set_statement() throws RecognitionException {
		Set_statementContext _localctx = new Set_statementContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_set_statement);
		int _la;
		try {
			setState(7622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1025,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7583);
				match(SET);
				setState(7584);
				match(LOCAL_ID);
				setState(7587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(7585);
					match(DOT);
					setState(7586);
					((Set_statementContext)_localctx).member_name = id();
					}
				}

				setState(7589);
				match(EQUAL);
				setState(7590);
				expression(0);
				setState(7592);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1019,_ctx) ) {
				case 1:
					{
					setState(7591);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7594);
				match(SET);
				setState(7595);
				match(LOCAL_ID);
				setState(7596);
				assignment_operator();
				setState(7597);
				expression(0);
				setState(7599);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1020,_ctx) ) {
				case 1:
					{
					setState(7598);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7601);
				match(SET);
				setState(7602);
				match(LOCAL_ID);
				setState(7603);
				match(EQUAL);
				setState(7604);
				match(CURSOR);
				setState(7605);
				declare_set_cursor_common();
				setState(7616);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(7606);
					match(FOR);
					setState(7614);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case READ:
						{
						setState(7607);
						match(READ);
						setState(7608);
						match(ONLY);
						}
						break;
					case UPDATE:
						{
						setState(7609);
						match(UPDATE);
						setState(7612);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OF) {
							{
							setState(7610);
							match(OF);
							setState(7611);
							column_name_list();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(7619);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1024,_ctx) ) {
				case 1:
					{
					setState(7618);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7621);
				set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_statementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(TSqlParser.DISTRIBUTED, 0); }
		public TerminalNode TRAN() { return getToken(TSqlParser.TRAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(TSqlParser.TRANSACTION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode MARK() { return getToken(TSqlParser.MARK, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode COMMIT() { return getToken(TSqlParser.COMMIT, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode WORK() { return getToken(TSqlParser.WORK, 0); }
		public TerminalNode ROLLBACK() { return getToken(TSqlParser.ROLLBACK, 0); }
		public TerminalNode SAVE() { return getToken(TSqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTransaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTransaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTransaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_statementContext transaction_statement() throws RecognitionException {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_transaction_statement);
		int _la;
		try {
			setState(7701);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1044,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7624);
				match(BEGIN);
				setState(7625);
				match(DISTRIBUTED);
				setState(7626);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7629);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1026,_ctx) ) {
				case 1:
					{
					setState(7627);
					id();
					}
					break;
				case 2:
					{
					setState(7628);
					match(LOCAL_ID);
					}
					break;
				}
				setState(7632);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1027,_ctx) ) {
				case 1:
					{
					setState(7631);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7634);
				match(BEGIN);
				setState(7635);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7645);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1030,_ctx) ) {
				case 1:
					{
					setState(7638);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case TARGET:
					case ABSOLUTE:
					case ACTIVE:
					case ADDRESS:
					case APPLY:
					case AUTO:
					case AVAILABILITY:
					case AVG:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNTER:
					case COUNT_BIG:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCATION:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NAME:
					case NEXT:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SIZE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VALUE:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(7636);
						id();
						}
						break;
					case LOCAL_ID:
						{
						setState(7637);
						match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7643);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1029,_ctx) ) {
					case 1:
						{
						setState(7640);
						match(WITH);
						setState(7641);
						match(MARK);
						setState(7642);
						match(STRING);
						}
						break;
					}
					}
					break;
				}
				setState(7648);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1031,_ctx) ) {
				case 1:
					{
					setState(7647);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7650);
				match(COMMIT);
				setState(7651);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7664);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1034,_ctx) ) {
				case 1:
					{
					setState(7654);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case TARGET:
					case ABSOLUTE:
					case ACTIVE:
					case ADDRESS:
					case APPLY:
					case AUTO:
					case AVAILABILITY:
					case AVG:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNTER:
					case COUNT_BIG:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCATION:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NAME:
					case NEXT:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SIZE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VALUE:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(7652);
						id();
						}
						break;
					case LOCAL_ID:
						{
						setState(7653);
						match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7662);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1033,_ctx) ) {
					case 1:
						{
						setState(7656);
						match(WITH);
						setState(7657);
						match(LR_BRACKET);
						setState(7658);
						match(DELAYED_DURABILITY);
						setState(7659);
						match(EQUAL);
						setState(7660);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7661);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				setState(7667);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1035,_ctx) ) {
				case 1:
					{
					setState(7666);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7669);
				match(COMMIT);
				setState(7671);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1036,_ctx) ) {
				case 1:
					{
					setState(7670);
					match(WORK);
					}
					break;
				}
				setState(7674);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1037,_ctx) ) {
				case 1:
					{
					setState(7673);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7676);
				match(ROLLBACK);
				setState(7677);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7680);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1038,_ctx) ) {
				case 1:
					{
					setState(7678);
					id();
					}
					break;
				case 2:
					{
					setState(7679);
					match(LOCAL_ID);
					}
					break;
				}
				setState(7683);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1039,_ctx) ) {
				case 1:
					{
					setState(7682);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7685);
				match(ROLLBACK);
				setState(7687);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1040,_ctx) ) {
				case 1:
					{
					setState(7686);
					match(WORK);
					}
					break;
				}
				setState(7690);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1041,_ctx) ) {
				case 1:
					{
					setState(7689);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7692);
				match(SAVE);
				setState(7693);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7696);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1042,_ctx) ) {
				case 1:
					{
					setState(7694);
					id();
					}
					break;
				case 2:
					{
					setState(7695);
					match(LOCAL_ID);
					}
					break;
				}
				setState(7699);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1043,_ctx) ) {
				case 1:
					{
					setState(7698);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Go_statementContext extends ParserRuleContext {
		public Token count;
		public TerminalNode GO() { return getToken(TSqlParser.GO, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_go_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGo_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGo_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitGo_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Go_statementContext go_statement() throws RecognitionException {
		Go_statementContext _localctx = new Go_statementContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_go_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7703);
			match(GO);
			setState(7705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECIMAL) {
				{
				setState(7704);
				((Go_statementContext)_localctx).count = match(DECIMAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_statementContext extends ParserRuleContext {
		public IdContext database;
		public TerminalNode USE() { return getToken(TSqlParser.USE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUse_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUse_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitUse_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Use_statementContext use_statement() throws RecognitionException {
		Use_statementContext _localctx = new Use_statementContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_use_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7707);
			match(USE);
			setState(7708);
			((Use_statementContext)_localctx).database = id();
			setState(7710);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1046,_ctx) ) {
			case 1:
				{
				setState(7709);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_clauseContext extends ParserRuleContext {
		public Simple_idContext name;
		public TerminalNode DBCC() { return getToken(TSqlParser.DBCC, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Dbcc_optionsContext dbcc_options() {
			return getRuleContext(Dbcc_optionsContext.class,0);
		}
		public Dbcc_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDbcc_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDbcc_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDbcc_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dbcc_clauseContext dbcc_clause() throws RecognitionException {
		Dbcc_clauseContext _localctx = new Dbcc_clauseContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_dbcc_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7712);
			match(DBCC);
			setState(7713);
			((Dbcc_clauseContext)_localctx).name = simple_id();
			setState(7718);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1047,_ctx) ) {
			case 1:
				{
				setState(7714);
				match(LR_BRACKET);
				setState(7715);
				expression_list();
				setState(7716);
				match(RR_BRACKET);
				}
				break;
			}
			setState(7722);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1048,_ctx) ) {
			case 1:
				{
				setState(7720);
				match(WITH);
				setState(7721);
				dbcc_options();
				}
				break;
			}
			setState(7725);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1049,_ctx) ) {
			case 1:
				{
				setState(7724);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_optionsContext extends ParserRuleContext {
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public Dbcc_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDbcc_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDbcc_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDbcc_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dbcc_optionsContext dbcc_options() throws RecognitionException {
		Dbcc_optionsContext _localctx = new Dbcc_optionsContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_dbcc_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7727);
			simple_id();
			setState(7730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7728);
				match(COMMA);
				setState(7729);
				simple_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_clauseContext extends ParserRuleContext {
		public Token clause;
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode CALLER() { return getToken(TSqlParser.CALLER, 0); }
		public TerminalNode SELF() { return getToken(TSqlParser.SELF, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitExecute_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_clauseContext execute_clause() throws RecognitionException {
		Execute_clauseContext _localctx = new Execute_clauseContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_execute_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7732);
			match(EXECUTE);
			setState(7733);
			match(AS);
			setState(7734);
			((Execute_clauseContext)_localctx).clause = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				((Execute_clauseContext)_localctx).clause = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_localContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_local; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_local(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_local(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDeclare_local(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_localContext declare_local() throws RecognitionException {
		Declare_localContext _localctx = new Declare_localContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_declare_local);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7736);
			match(LOCAL_ID);
			setState(7738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7737);
				match(AS);
				}
			}

			setState(7740);
			data_type();
			setState(7743);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(7741);
				match(EQUAL);
				setState(7742);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_definitionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_type_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_type_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTable_type_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_type_definitionContext table_type_definition() throws RecognitionException {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_table_type_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7745);
			match(TABLE);
			setState(7746);
			match(LR_BRACKET);
			setState(7747);
			column_def_table_constraints();
			setState(7748);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_type_definitionContext extends ParserRuleContext {
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public Xml_schema_collectionContext xml_schema_collection() {
			return getRuleContext(Xml_schema_collectionContext.class,0);
		}
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public TerminalNode DOCUMENT() { return getToken(TSqlParser.DOCUMENT, 0); }
		public Xml_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXml_type_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXml_type_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitXml_type_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_type_definitionContext xml_type_definition() throws RecognitionException {
		Xml_type_definitionContext _localctx = new Xml_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_xml_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7750);
			match(XML);
			setState(7751);
			match(LR_BRACKET);
			setState(7753);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTENT || _la==DOCUMENT) {
				{
				setState(7752);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(7755);
			xml_schema_collection();
			setState(7756);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_schema_collectionContext extends ParserRuleContext {
		public List<TerminalNode> ID() { return getTokens(TSqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(TSqlParser.ID, i);
		}
		public Xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXml_schema_collection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitXml_schema_collection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_schema_collectionContext xml_schema_collection() throws RecognitionException {
		Xml_schema_collectionContext _localctx = new Xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7758);
			match(ID);
			setState(7759);
			match(DOT);
			setState(7760);
			match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintsContext extends ParserRuleContext {
		public List<Column_def_table_constraintContext> column_def_table_constraint() {
			return getRuleContexts(Column_def_table_constraintContext.class);
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return getRuleContext(Column_def_table_constraintContext.class,i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_def_table_constraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_def_table_constraints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitColumn_def_table_constraints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_def_table_constraintsContext column_def_table_constraints() throws RecognitionException {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_column_def_table_constraints);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7762);
			column_def_table_constraint();
			setState(7769);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1055,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7764);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7763);
						match(COMMA);
						}
					}

					setState(7766);
					column_def_table_constraint();
					}
					} 
				}
				setState(7771);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1055,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_def_table_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_def_table_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitColumn_def_table_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_def_table_constraintContext column_def_table_constraint() throws RecognitionException {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_column_def_table_constraint);
		try {
			setState(7774);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(7772);
				column_definition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case DEFAULT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7773);
				table_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public IdContext constraint;
		public Token seed;
		public Token increment;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public List<Null_or_defaultContext> null_or_default() {
			return getRuleContexts(Null_or_defaultContext.class);
		}
		public Null_or_defaultContext null_or_default(int i) {
			return getRuleContext(Null_or_defaultContext.class,i);
		}
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUIDCOL() { return getToken(TSqlParser.ROWGUIDCOL, 0); }
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7776);
			id();
			setState(7780);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case BIGINT:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TINYINT:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(7777);
				data_type();
				}
				break;
			case AS:
				{
				setState(7778);
				match(AS);
				setState(7779);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(7782);
				match(COLLATE);
				setState(7783);
				id();
				}
			}

			setState(7787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1059,_ctx) ) {
			case 1:
				{
				setState(7786);
				null_notnull();
				}
				break;
			}
			setState(7810);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1064,_ctx) ) {
			case 1:
				{
				setState(7791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(7789);
					match(CONSTRAINT);
					setState(7790);
					((Column_definitionContext)_localctx).constraint = id();
					}
				}

				setState(7793);
				null_or_default();
				setState(7795);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1061,_ctx) ) {
				case 1:
					{
					setState(7794);
					null_or_default();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(7797);
				match(IDENTITY);
				setState(7803);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1062,_ctx) ) {
				case 1:
					{
					setState(7798);
					match(LR_BRACKET);
					setState(7799);
					((Column_definitionContext)_localctx).seed = match(DECIMAL);
					setState(7800);
					match(COMMA);
					setState(7801);
					((Column_definitionContext)_localctx).increment = match(DECIMAL);
					setState(7802);
					match(RR_BRACKET);
					}
					break;
				}
				setState(7808);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1063,_ctx) ) {
				case 1:
					{
					setState(7805);
					match(NOT);
					setState(7806);
					match(FOR);
					setState(7807);
					match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			setState(7813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWGUIDCOL) {
				{
				setState(7812);
				match(ROWGUIDCOL);
				}
			}

			setState(7818);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1066,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7815);
					column_constraint();
					}
					} 
				}
				setState(7820);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1066,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext pk;
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public TerminalNode FOREIGN() { return getToken(TSqlParser.FOREIGN, 0); }
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitColumn_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_column_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7823);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(7821);
				match(CONSTRAINT);
				setState(7822);
				((Column_constraintContext)_localctx).constraint = id();
				}
			}

			setState(7862);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(7828);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(7825);
					match(PRIMARY);
					setState(7826);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(7827);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7831);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(7830);
					clustered();
					}
				}

				setState(7834);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1070,_ctx) ) {
				case 1:
					{
					setState(7833);
					index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				setState(7836);
				match(CHECK);
				setState(7840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(7837);
					match(NOT);
					setState(7838);
					match(FOR);
					setState(7839);
					match(REPLICATION);
					}
				}

				setState(7842);
				match(LR_BRACKET);
				setState(7843);
				search_condition();
				setState(7844);
				match(RR_BRACKET);
				}
				break;
			case FOREIGN:
			case REFERENCES:
				{
				setState(7848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(7846);
					match(FOREIGN);
					setState(7847);
					match(KEY);
					}
				}

				setState(7850);
				match(REFERENCES);
				setState(7851);
				table_name();
				setState(7852);
				match(LR_BRACKET);
				setState(7853);
				((Column_constraintContext)_localctx).pk = column_name_list();
				setState(7854);
				match(RR_BRACKET);
				setState(7856);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1073,_ctx) ) {
				case 1:
					{
					setState(7855);
					on_delete();
					}
					break;
				}
				setState(7859);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(7858);
					on_update();
					}
				}

				}
				break;
			case NOT:
			case NULL:
				{
				setState(7861);
				null_notnull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(TSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> PLUS() { return getTokens(TSqlParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(TSqlParser.PLUS, i);
		}
		public List<Function_callContext> function_call() {
			return getRuleContexts(Function_callContext.class);
		}
		public Function_callContext function_call(int i) {
			return getRuleContext(Function_callContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTable_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(7864);
				match(CONSTRAINT);
				setState(7865);
				((Table_constraintContext)_localctx).constraint = id();
				}
			}

			setState(7929);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(7871);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(7868);
					match(PRIMARY);
					setState(7869);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(7870);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7874);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(7873);
					clustered();
					}
				}

				setState(7876);
				match(LR_BRACKET);
				setState(7877);
				column_name_list_with_order();
				setState(7878);
				match(RR_BRACKET);
				setState(7880);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1079,_ctx) ) {
				case 1:
					{
					setState(7879);
					index_options();
					}
					break;
				}
				setState(7884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(7882);
					match(ON);
					setState(7883);
					id();
					}
				}

				}
				break;
			case CHECK:
				{
				setState(7886);
				match(CHECK);
				setState(7890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(7887);
					match(NOT);
					setState(7888);
					match(FOR);
					setState(7889);
					match(REPLICATION);
					}
				}

				setState(7892);
				match(LR_BRACKET);
				setState(7893);
				search_condition();
				setState(7894);
				match(RR_BRACKET);
				}
				break;
			case DEFAULT:
				{
				setState(7896);
				match(DEFAULT);
				setState(7898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(7897);
					match(LR_BRACKET);
					}
				}

				setState(7904); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(7904);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(7900);
						match(STRING);
						}
						break;
					case PLUS:
						{
						setState(7901);
						match(PLUS);
						}
						break;
					case CALLED:
					case COALESCE:
					case CONVERT:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case IDENTITY:
					case ISNULL:
					case KEY:
					case LEFT:
					case MASTER:
					case MAX_MEMORY:
					case NULLIF:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case RAW:
					case RETURN:
					case RETURNS:
					case RIGHT:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SESSION_USER:
					case SID:
					case SOURCE:
					case STATE:
					case SYSTEM_USER:
					case TARGET:
					case ABSOLUTE:
					case ACTIVE:
					case ADDRESS:
					case APPLY:
					case AUTO:
					case AVAILABILITY:
					case AVG:
					case BINARY_CHECKSUM:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNTER:
					case COUNT_BIG:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LOCAL:
					case LOCATION:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MODIFY:
					case NAME:
					case NEXT:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SIZE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case STUFF:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VALUE:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case LOCAL_ID:
					case ID:
						{
						setState(7902);
						function_call();
						}
						break;
					case DECIMAL:
						{
						setState(7903);
						match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(7906); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || _la==COALESCE || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (CONVERT - 68)) | (1L << (CURRENT_TIMESTAMP - 68)) | (1L << (CURRENT_USER - 68)) | (1L << (DATA_COMPRESSION - 68)) | (1L << (EVENTDATA - 68)) | (1L << (FILENAME - 68)) | (1L << (FILLFACTOR - 68)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (FORCESEEK - 132)) | (1L << (IDENTITY - 132)) | (1L << (ISNULL - 132)) | (1L << (KEY - 132)) | (1L << (LEFT - 132)) | (1L << (MASTER - 132)) | (1L << (MAX_MEMORY - 132)))) != 0) || ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (NULLIF - 221)) | (1L << (OFFSETS - 221)) | (1L << (PAGE - 221)) | (1L << (PUBLIC - 221)) | (1L << (RAW - 221)) | (1L << (RETURN - 221)) | (1L << (RETURNS - 221)) | (1L << (RIGHT - 221)))) != 0) || ((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & ((1L << (ROWCOUNT - 287)) | (1L << (SAFETY - 287)) | (1L << (SERVER - 287)) | (1L << (SESSION_USER - 287)) | (1L << (SID - 287)) | (1L << (SOURCE - 287)) | (1L << (STATE - 287)) | (1L << (SYSTEM_USER - 287)) | (1L << (TARGET - 287)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (ABSOLUTE - 382)) | (1L << (ACTIVE - 382)) | (1L << (ADDRESS - 382)) | (1L << (APPLY - 382)) | (1L << (AUTO - 382)) | (1L << (AVAILABILITY - 382)) | (1L << (AVG - 382)) | (1L << (BINARY_CHECKSUM - 382)) | (1L << (CALLER - 382)) | (1L << (CAST - 382)) | (1L << (CATCH - 382)) | (1L << (CHECKSUM - 382)) | (1L << (CHECKSUM_AGG - 382)) | (1L << (COMMITTED - 382)) | (1L << (CONCAT - 382)) | (1L << (CONCAT_NULL_YIELDS_NULL - 382)) | (1L << (CONTROL - 382)) | (1L << (COOKIE - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (COUNT - 446)) | (1L << (COUNTER - 446)) | (1L << (COUNT_BIG - 446)) | (1L << (DATEADD - 446)) | (1L << (DATEDIFF - 446)) | (1L << (DATENAME - 446)) | (1L << (DATEPART - 446)) | (1L << (DELAY - 446)) | (1L << (DELETED - 446)) | (1L << (DENSE_RANK - 446)) | (1L << (DISABLE - 446)) | (1L << (DYNAMIC - 446)) | (1L << (ENCRYPTION - 446)) | (1L << (EXPAND - 446)) | (1L << (FAST - 446)) | (1L << (FAST_FORWARD - 446)) | (1L << (FIRST - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (FIRST_VALUE - 510)) | (1L << (FOLLOWING - 510)) | (1L << (FORCE - 510)) | (1L << (FORCED - 510)) | (1L << (FORWARD_ONLY - 510)) | (1L << (FULLSCAN - 510)) | (1L << (GETDATE - 510)) | (1L << (GETUTCDATE - 510)) | (1L << (GLOBAL - 510)) | (1L << (GROUPING - 510)) | (1L << (GROUPING_ID - 510)) | (1L << (HASH - 510)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 510)) | (1L << (IMPERSONATE - 510)) | (1L << (INPUT - 510)) | (1L << (INSENSITIVE - 510)) | (1L << (INSERTED - 510)) | (1L << (ISOLATION - 510)) | (1L << (KEEP - 510)) | (1L << (KEEPFIXED - 510)) | (1L << (KEYSET - 510)) | (1L << (LAG - 510)) | (1L << (LAST - 510)) | (1L << (LAST_VALUE - 510)) | (1L << (LEAD - 510)) | (1L << (LEVEL - 510)) | (1L << (LOCAL - 510)) | (1L << (LOCATION - 510)) | (1L << (LOCK_ESCALATION - 510)) | (1L << (LOGIN - 510)) | (1L << (LOOP - 510)) | (1L << (MARK - 510)) | (1L << (MAX - 510)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MIN - 579)) | (1L << (MIN_ACTIVE_ROWVERSION - 579)) | (1L << (MODIFY - 579)) | (1L << (NAME - 579)) | (1L << (NEXT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NTILE - 579)) | (1L << (NUMBER - 579)) | (1L << (OFFSET - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)) | (1L << (OUTPUT - 579)) | (1L << (OWNER - 579)) | (1L << (PARAMETERIZATION - 579)) | (1L << (PARTITION - 579)) | (1L << (PATH - 579)) | (1L << (PRECEDING - 579)) | (1L << (PRIOR - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PRIVILEGES - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (READONLY - 643)) | (1L << (READ_ONLY - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROW - 643)) | (1L << (ROWGUID - 643)) | (1L << (ROWS - 643)) | (1L << (ROW_NUMBER - 643)) | (1L << (SAMPLE - 643)) | (1L << (SCHEMABINDING - 643)) | (1L << (SCROLL - 643)) | (1L << (SCROLL_LOCKS - 643)) | (1L << (SELF - 643)) | (1L << (SERIALIZABLE - 643)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (SIMPLE - 711)) | (1L << (SIZE - 711)) | (1L << (SNAPSHOT - 711)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 711)) | (1L << (STATIC - 711)) | (1L << (STATS_STREAM - 711)) | (1L << (STDEV - 711)) | (1L << (STDEVP - 711)) | (1L << (STUFF - 711)) | (1L << (SUM - 711)) | (1L << (TEXTIMAGE_ON - 711)) | (1L << (THROW - 711)) | (1L << (TIES - 711)) | (1L << (TIME - 711)) | (1L << (TRY - 711)) | (1L << (TYPE - 711)) | (1L << (TYPE_WARNING - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNKNOWN - 711)) | (1L << (USING - 711)) | (1L << (VALUE - 711)) | (1L << (VAR - 711)) | (1L << (VARP - 711)) | (1L << (VIEWS - 711)) | (1L << (VIEW_METADATA - 711)) | (1L << (WORK - 711)) | (1L << (XML - 711)) | (1L << (XMLNAMESPACES - 711)) | (1L << (DOUBLE_QUOTE_ID - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (SQUARE_BRACKET_ID - 775)) | (1L << (LOCAL_ID - 775)) | (1L << (DECIMAL - 775)) | (1L << (ID - 775)) | (1L << (STRING - 775)) | (1L << (PLUS - 775)))) != 0) );
				setState(7909);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(7908);
					match(RR_BRACKET);
					}
				}

				setState(7911);
				match(FOR);
				setState(7912);
				id();
				}
				break;
			case FOREIGN:
				{
				setState(7913);
				match(FOREIGN);
				setState(7914);
				match(KEY);
				setState(7915);
				match(LR_BRACKET);
				setState(7916);
				((Table_constraintContext)_localctx).fk = column_name_list();
				setState(7917);
				match(RR_BRACKET);
				setState(7918);
				match(REFERENCES);
				setState(7919);
				table_name();
				setState(7920);
				match(LR_BRACKET);
				setState(7921);
				((Table_constraintContext)_localctx).pk = column_name_list();
				setState(7922);
				match(RR_BRACKET);
				setState(7924);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1086,_ctx) ) {
				case 1:
					{
					setState(7923);
					on_delete();
					}
					break;
				}
				setState(7927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(7926);
					on_update();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(TSqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(TSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOn_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOn_delete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOn_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_deleteContext on_delete() throws RecognitionException {
		On_deleteContext _localctx = new On_deleteContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_on_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7931);
			match(ON);
			setState(7932);
			match(DELETE);
			setState(7940);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1089,_ctx) ) {
			case 1:
				{
				setState(7933);
				match(NO);
				setState(7934);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(7935);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(7936);
				match(SET);
				setState(7937);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(7938);
				match(SET);
				setState(7939);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(TSqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(TSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOn_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOn_update(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOn_update(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_updateContext on_update() throws RecognitionException {
		On_updateContext _localctx = new On_updateContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_on_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7942);
			match(ON);
			setState(7943);
			match(UPDATE);
			setState(7951);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1090,_ctx) ) {
			case 1:
				{
				setState(7944);
				match(NO);
				setState(7945);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(7946);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(7947);
				match(SET);
				setState(7948);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(7949);
				match(SET);
				setState(7950);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIndex_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIndex_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitIndex_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_optionsContext index_options() throws RecognitionException {
		Index_optionsContext _localctx = new Index_optionsContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_index_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7953);
			match(WITH);
			setState(7954);
			match(LR_BRACKET);
			setState(7955);
			index_option();
			setState(7960);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7956);
				match(COMMA);
				setState(7957);
				index_option();
				}
				}
				setState(7962);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7963);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionContext extends ParserRuleContext {
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIndex_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIndex_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitIndex_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_optionContext index_option() throws RecognitionException {
		Index_optionContext _localctx = new Index_optionContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_index_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7965);
			simple_id();
			setState(7966);
			match(EQUAL);
			setState(7970);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ID:
				{
				setState(7967);
				simple_id();
				}
				break;
			case OFF:
			case ON:
				{
				setState(7968);
				on_off();
				}
				break;
			case DECIMAL:
				{
				setState(7969);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_cursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(TSqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(TSqlParser.CURSOR, 0); }
		public List<TerminalNode> FOR() { return getTokens(TSqlParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(TSqlParser.FOR, i);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return getRuleContext(Declare_set_cursor_commonContext.class,0);
		}
		public TerminalNode INSENSITIVE() { return getToken(TSqlParser.INSENSITIVE, 0); }
		public TerminalNode SCROLL() { return getToken(TSqlParser.SCROLL, 0); }
		public TerminalNode READ() { return getToken(TSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_cursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDeclare_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_cursorContext declare_cursor() throws RecognitionException {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_declare_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7972);
			match(DECLARE);
			setState(7973);
			cursor_name();
			setState(8005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1100,_ctx) ) {
			case 1:
				{
				setState(7974);
				match(CURSOR);
				setState(7984);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1095,_ctx) ) {
				case 1:
					{
					setState(7975);
					declare_set_cursor_common();
					setState(7982);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FOR) {
						{
						setState(7976);
						match(FOR);
						setState(7977);
						match(UPDATE);
						setState(7980);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OF) {
							{
							setState(7978);
							match(OF);
							setState(7979);
							column_name_list();
							}
						}

						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(7987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INSENSITIVE) {
					{
					setState(7986);
					match(INSENSITIVE);
					}
				}

				setState(7990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCROLL) {
					{
					setState(7989);
					match(SCROLL);
					}
				}

				setState(7992);
				match(CURSOR);
				setState(7993);
				match(FOR);
				setState(7994);
				select_statement();
				setState(8003);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(7995);
					match(FOR);
					setState(8001);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case READ:
						{
						setState(7996);
						match(READ);
						setState(7997);
						match(ONLY);
						}
						break;
					case UPDATE:
						{
						setState(7998);
						match(UPDATE);
						}
						break;
					case OF:
						{
						{
						setState(7999);
						match(OF);
						setState(8000);
						column_name_list();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			}
			setState(8008);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1101,_ctx) ) {
			case 1:
				{
				setState(8007);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_set_cursor_commonContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<Declare_set_cursor_common_partialContext> declare_set_cursor_common_partial() {
			return getRuleContexts(Declare_set_cursor_common_partialContext.class);
		}
		public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial(int i) {
			return getRuleContext(Declare_set_cursor_common_partialContext.class,i);
		}
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_set_cursor_common; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_set_cursor_common(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_set_cursor_common(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDeclare_set_cursor_common(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_set_cursor_commonContext declare_set_cursor_common() throws RecognitionException {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_declare_set_cursor_common);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & ((1L << (DYNAMIC - 484)) | (1L << (FAST_FORWARD - 484)) | (1L << (FORWARD_ONLY - 484)) | (1L << (GLOBAL - 484)))) != 0) || _la==KEYSET || _la==LOCAL || _la==OPTIMISTIC || _la==READ_ONLY || ((((_la - 693)) & ~0x3f) == 0 && ((1L << (_la - 693)) & ((1L << (SCROLL - 693)) | (1L << (SCROLL_LOCKS - 693)) | (1L << (STATIC - 693)) | (1L << (TYPE_WARNING - 693)))) != 0)) {
				{
				{
				setState(8010);
				declare_set_cursor_common_partial();
				}
				}
				setState(8015);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8016);
			match(FOR);
			setState(8017);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_set_cursor_common_partialContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(TSqlParser.FORWARD_ONLY, 0); }
		public TerminalNode SCROLL() { return getToken(TSqlParser.SCROLL, 0); }
		public TerminalNode STATIC() { return getToken(TSqlParser.STATIC, 0); }
		public TerminalNode KEYSET() { return getToken(TSqlParser.KEYSET, 0); }
		public TerminalNode DYNAMIC() { return getToken(TSqlParser.DYNAMIC, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(TSqlParser.FAST_FORWARD, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(TSqlParser.SCROLL_LOCKS, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(TSqlParser.OPTIMISTIC, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(TSqlParser.TYPE_WARNING, 0); }
		public Declare_set_cursor_common_partialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_set_cursor_common_partial; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_set_cursor_common_partial(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_set_cursor_common_partial(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDeclare_set_cursor_common_partial(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_set_cursor_common_partialContext declare_set_cursor_common_partial() throws RecognitionException {
		Declare_set_cursor_common_partialContext _localctx = new Declare_set_cursor_common_partialContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_declare_set_cursor_common_partial);
		int _la;
		try {
			setState(8024);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8019);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case FORWARD_ONLY:
			case SCROLL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8020);
				_la = _input.LA(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DYNAMIC:
			case FAST_FORWARD:
			case KEYSET:
			case STATIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(8021);
				_la = _input.LA(1);
				if ( !(_la==DYNAMIC || _la==FAST_FORWARD || _la==KEYSET || _la==STATIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OPTIMISTIC:
			case READ_ONLY:
			case SCROLL_LOCKS:
				enterOuterAlt(_localctx, 4);
				{
				setState(8022);
				_la = _input.LA(1);
				if ( !(_la==OPTIMISTIC || _la==READ_ONLY || _la==SCROLL_LOCKS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TYPE_WARNING:
				enterOuterAlt(_localctx, 5);
				{
				setState(8023);
				match(TYPE_WARNING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_cursorContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(TSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(TSqlParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(TSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(TSqlParser.LAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ABSOLUTE() { return getToken(TSqlParser.ABSOLUTE, 0); }
		public TerminalNode RELATIVE() { return getToken(TSqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFetch_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFetch_cursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFetch_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_cursorContext fetch_cursor() throws RecognitionException {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_fetch_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8026);
			match(FETCH);
			setState(8036);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1105,_ctx) ) {
			case 1:
				{
				setState(8033);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NEXT:
					{
					setState(8027);
					match(NEXT);
					}
					break;
				case PRIOR:
					{
					setState(8028);
					match(PRIOR);
					}
					break;
				case FIRST:
					{
					setState(8029);
					match(FIRST);
					}
					break;
				case LAST:
					{
					setState(8030);
					match(LAST);
					}
					break;
				case ABSOLUTE:
				case RELATIVE:
					{
					setState(8031);
					_la = _input.LA(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8032);
					expression(0);
					}
					break;
				case FROM:
					break;
				default:
					break;
				}
				setState(8035);
				match(FROM);
				}
				break;
			}
			setState(8039);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1106,_ctx) ) {
			case 1:
				{
				setState(8038);
				match(GLOBAL);
				}
				break;
			}
			setState(8041);
			cursor_name();
			setState(8051);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(8042);
				match(INTO);
				setState(8043);
				match(LOCAL_ID);
				setState(8048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8044);
					match(COMMA);
					setState(8045);
					match(LOCAL_ID);
					}
					}
					setState(8050);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(8054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1109,_ctx) ) {
			case 1:
				{
				setState(8053);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_specialContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return getRuleContext(Constant_LOCAL_IDContext.class,0);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(TSqlParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(TSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(TSqlParser.LEVEL, 0); }
		public TerminalNode READ() { return getToken(TSqlParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(TSqlParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(TSqlParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(TSqlParser.REPEATABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSqlParser.SNAPSHOT, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSqlParser.SERIALIZABLE, 0); }
		public TerminalNode IDENTITY_INSERT() { return getToken(TSqlParser.IDENTITY_INSERT, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode ANSI_NULLS() { return getToken(TSqlParser.ANSI_NULLS, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSqlParser.ANSI_WARNINGS, 0); }
		public Modify_methodContext modify_method() {
			return getRuleContext(Modify_methodContext.class,0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_special; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSet_special(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSet_special(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSet_special(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_specialContext set_special() throws RecognitionException {
		Set_specialContext _localctx = new Set_specialContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_set_special);
		try {
			setState(8104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8056);
				match(SET);
				setState(8057);
				id();
				setState(8061);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(8058);
					id();
					}
					break;
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(8059);
					constant_LOCAL_ID();
					}
					break;
				case OFF:
				case ON:
					{
					setState(8060);
					on_off();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8064);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1111,_ctx) ) {
				case 1:
					{
					setState(8063);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8066);
				match(SET);
				setState(8067);
				match(TRANSACTION);
				setState(8068);
				match(ISOLATION);
				setState(8069);
				match(LEVEL);
				setState(8078);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1112,_ctx) ) {
				case 1:
					{
					setState(8070);
					match(READ);
					setState(8071);
					match(UNCOMMITTED);
					}
					break;
				case 2:
					{
					setState(8072);
					match(READ);
					setState(8073);
					match(COMMITTED);
					}
					break;
				case 3:
					{
					setState(8074);
					match(REPEATABLE);
					setState(8075);
					match(READ);
					}
					break;
				case 4:
					{
					setState(8076);
					match(SNAPSHOT);
					}
					break;
				case 5:
					{
					setState(8077);
					match(SERIALIZABLE);
					}
					break;
				}
				setState(8081);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1113,_ctx) ) {
				case 1:
					{
					setState(8080);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8083);
				match(SET);
				setState(8084);
				match(IDENTITY_INSERT);
				setState(8085);
				table_name();
				setState(8086);
				on_off();
				setState(8088);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1114,_ctx) ) {
				case 1:
					{
					setState(8087);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8090);
				match(SET);
				setState(8091);
				match(ANSI_NULLS);
				setState(8092);
				on_off();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8093);
				match(SET);
				setState(8094);
				match(QUOTED_IDENTIFIER);
				setState(8095);
				on_off();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8096);
				match(SET);
				setState(8097);
				match(ANSI_PADDING);
				setState(8098);
				on_off();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8099);
				match(SET);
				setState(8100);
				match(ANSI_WARNINGS);
				setState(8101);
				on_off();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8102);
				match(SET);
				setState(8103);
				modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_LOCAL_IDContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_LOCAL_ID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterConstant_LOCAL_ID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitConstant_LOCAL_ID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitConstant_LOCAL_ID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_LOCAL_IDContext constant_LOCAL_ID() throws RecognitionException {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_constant_LOCAL_ID);
		try {
			setState(8108);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(8106);
				constant();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(8107);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Token op;
		public Primitive_expressionContext primitive_expression() {
			return getRuleContext(Primitive_expressionContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public Bracket_expressionContext bracket_expression() {
			return getRuleContext(Bracket_expressionContext.class,0);
		}
		public Unary_operator_expressionContext unary_operator_expression() {
			return getRuleContext(Unary_operator_expressionContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 692;
		enterRecursionRule(_localctx, 692, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1117,_ctx) ) {
			case 1:
				{
				setState(8111);
				primitive_expression();
				}
				break;
			case 2:
				{
				setState(8112);
				function_call();
				}
				break;
			case 3:
				{
				setState(8113);
				case_expression();
				}
				break;
			case 4:
				{
				setState(8114);
				full_column_name();
				}
				break;
			case 5:
				{
				setState(8115);
				bracket_expression();
				}
				break;
			case 6:
				{
				setState(8116);
				unary_operator_expression();
				}
				break;
			case 7:
				{
				setState(8117);
				over_clause();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(8139);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1119,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(8137);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1118,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8120);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(8121);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 807)) & ~0x3f) == 0 && ((1L << (_la - 807)) & ((1L << (STAR - 807)) | (1L << (DIVIDE - 807)) | (1L << (MODULE - 807)))) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8122);
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8123);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(8124);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 810)) & ~0x3f) == 0 && ((1L << (_la - 810)) & ((1L << (PLUS - 810)) | (1L << (MINUS - 810)) | (1L << (BIT_OR - 810)) | (1L << (BIT_AND - 810)) | (1L << (BIT_XOR - 810)))) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8125);
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8126);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(8127);
						comparison_operator();
						setState(8128);
						expression(4);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8130);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(8131);
						assignment_operator();
						setState(8132);
						expression(3);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8134);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(8135);
						match(COLLATE);
						setState(8136);
						id();
						}
						break;
					}
					} 
				}
				setState(8141);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1119,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Primitive_expressionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPrimitive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPrimitive_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitPrimitive_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Primitive_expressionContext primitive_expression() throws RecognitionException {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_primitive_expression);
		try {
			setState(8146);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8142);
				match(DEFAULT);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8143);
				match(NULL);
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(8144);
				match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 4);
				{
				setState(8145);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expressionContext extends ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public TerminalNode CASE() { return getToken(TSqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Switch_sectionContext> switch_section() {
			return getRuleContexts(Switch_sectionContext.class);
		}
		public Switch_sectionContext switch_section(int i) {
			return getRuleContext(Switch_sectionContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(TSqlParser.ELSE, 0); }
		public List<Switch_search_condition_sectionContext> switch_search_condition_section() {
			return getRuleContexts(Switch_search_condition_sectionContext.class);
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return getRuleContext(Switch_search_condition_sectionContext.class,i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCase_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCase_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCase_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_case_expression);
		int _la;
		try {
			setState(8173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1125,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8148);
				match(CASE);
				setState(8149);
				((Case_expressionContext)_localctx).caseExpr = expression(0);
				setState(8151); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(8150);
					switch_section();
					}
					}
					setState(8153); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(8157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(8155);
					match(ELSE);
					setState(8156);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(8159);
				match(END);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8161);
				match(CASE);
				setState(8163); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(8162);
					switch_search_condition_section();
					}
					}
					setState(8165); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(8169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(8167);
					match(ELSE);
					setState(8168);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(8171);
				match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_operator_expressionContext extends ParserRuleContext {
		public Token op;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Unary_operator_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_operator_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUnary_operator_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUnary_operator_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitUnary_operator_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_operator_expressionContext unary_operator_expression() throws RecognitionException {
		Unary_operator_expressionContext _localctx = new Unary_operator_expressionContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_unary_operator_expression);
		int _la;
		try {
			setState(8179);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BIT_NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8175);
				match(BIT_NOT);
				setState(8176);
				expression(0);
				}
				break;
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(8177);
				((Unary_operator_expressionContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((Unary_operator_expressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8178);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bracket_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bracket_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBracket_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBracket_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitBracket_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bracket_expressionContext bracket_expression() throws RecognitionException {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_bracket_expression);
		try {
			setState(8189);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1127,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8181);
				match(LR_BRACKET);
				setState(8182);
				expression(0);
				setState(8183);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8185);
				match(LR_BRACKET);
				setState(8186);
				subquery();
				setState(8187);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_expressionContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterConstant_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitConstant_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitConstant_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_expressionContext constant_expression() throws RecognitionException {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_constant_expression);
		try {
			setState(8199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1128,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8191);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8192);
				constant();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8193);
				function_call();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8194);
				match(LOCAL_ID);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8195);
				match(LR_BRACKET);
				setState(8196);
				constant_expression();
				setState(8197);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8201);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_expressionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Common_table_expressionContext> common_table_expression() {
			return getRuleContexts(Common_table_expressionContext.class);
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return getRuleContext(Common_table_expressionContext.class,i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(TSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWith_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWith_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitWith_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_expressionContext with_expression() throws RecognitionException {
		With_expressionContext _localctx = new With_expressionContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_with_expression);
		int _la;
		try {
			setState(8229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1132,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8203);
				match(WITH);
				setState(8206);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1129,_ctx) ) {
				case 1:
					{
					setState(8204);
					match(XMLNAMESPACES);
					setState(8205);
					match(COMMA);
					}
					break;
				}
				setState(8208);
				common_table_expression();
				setState(8213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8209);
					match(COMMA);
					setState(8210);
					common_table_expression();
					}
					}
					setState(8215);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8216);
				match(WITH);
				setState(8217);
				match(BLOCKING_HIERARCHY);
				setState(8222);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(8218);
					match(LR_BRACKET);
					setState(8219);
					full_column_name_list();
					setState(8220);
					match(RR_BRACKET);
					}
				}

				setState(8224);
				match(AS);
				setState(8225);
				match(LR_BRACKET);
				setState(8226);
				select_statement();
				setState(8227);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_table_expressionContext extends ParserRuleContext {
		public IdContext expression_name;
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCommon_table_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCommon_table_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCommon_table_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_expressionContext common_table_expression() throws RecognitionException {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_common_table_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8231);
			((Common_table_expressionContext)_localctx).expression_name = id();
			setState(8236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(8232);
				match(LR_BRACKET);
				setState(8233);
				column_name_list();
				setState(8234);
				match(RR_BRACKET);
				}
			}

			setState(8238);
			match(AS);
			setState(8239);
			match(LR_BRACKET);
			setState(8240);
			select_statement();
			setState(8241);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext method_name;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUpdate_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUpdate_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitUpdate_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_elemContext update_elem() throws RecognitionException {
		Update_elemContext _localctx = new Update_elemContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_update_elem);
		try {
			setState(8259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1136,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8245);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BLOCKING_HIERARCHY:
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLY:
				case ARITHABORT:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(8243);
					full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					setState(8244);
					match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8249);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EQUAL:
					{
					setState(8247);
					match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(8248);
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8251);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8252);
				((Update_elemContext)_localctx).udt_column_name = id();
				setState(8253);
				match(DOT);
				setState(8254);
				((Update_elemContext)_localctx).method_name = id();
				setState(8255);
				match(LR_BRACKET);
				setState(8256);
				expression_list();
				setState(8257);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_listContext extends ParserRuleContext {
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public Search_condition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSearch_condition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSearch_condition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSearch_condition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_listContext search_condition_list() throws RecognitionException {
		Search_condition_listContext _localctx = new Search_condition_listContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_search_condition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8261);
			search_condition();
			setState(8266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8262);
				match(COMMA);
				setState(8263);
				search_condition();
				}
				}
				setState(8268);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public List<Search_condition_andContext> search_condition_and() {
			return getRuleContexts(Search_condition_andContext.class);
		}
		public Search_condition_andContext search_condition_and(int i) {
			return getRuleContext(Search_condition_andContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(TSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(TSqlParser.OR, i);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSearch_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSearch_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSearch_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_search_condition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8269);
			search_condition_and();
			setState(8274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(8270);
				match(OR);
				setState(8271);
				search_condition_and();
				}
				}
				setState(8276);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_andContext extends ParserRuleContext {
		public List<Search_condition_notContext> search_condition_not() {
			return getRuleContexts(Search_condition_notContext.class);
		}
		public Search_condition_notContext search_condition_not(int i) {
			return getRuleContext(Search_condition_notContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(TSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(TSqlParser.AND, i);
		}
		public Search_condition_andContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_and; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSearch_condition_and(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSearch_condition_and(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSearch_condition_and(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_andContext search_condition_and() throws RecognitionException {
		Search_condition_andContext _localctx = new Search_condition_andContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_search_condition_and);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8277);
			search_condition_not();
			setState(8282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(8278);
				match(AND);
				setState(8279);
				search_condition_not();
				}
				}
				setState(8284);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_notContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public Search_condition_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSearch_condition_not(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSearch_condition_not(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSearch_condition_not(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_notContext search_condition_not() throws RecognitionException {
		Search_condition_notContext _localctx = new Search_condition_notContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_search_condition_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(8285);
				match(NOT);
				}
			}

			setState(8288);
			predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(TSqlParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(TSqlParser.ANY, 0); }
		public TerminalNode BETWEEN() { return getToken(TSqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(TSqlParser.LIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(TSqlParser.ESCAPE, 0); }
		public TerminalNode IS() { return getToken(TSqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_predicate);
		int _la;
		try {
			setState(8345);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1146,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8290);
				match(EXISTS);
				setState(8291);
				match(LR_BRACKET);
				setState(8292);
				subquery();
				setState(8293);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8295);
				expression(0);
				setState(8296);
				comparison_operator();
				setState(8297);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8299);
				expression(0);
				setState(8300);
				comparison_operator();
				setState(8301);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8302);
				match(LR_BRACKET);
				setState(8303);
				subquery();
				setState(8304);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8306);
				expression(0);
				setState(8308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8307);
					match(NOT);
					}
				}

				setState(8310);
				match(BETWEEN);
				setState(8311);
				expression(0);
				setState(8312);
				match(AND);
				setState(8313);
				expression(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8315);
				expression(0);
				setState(8317);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8316);
					match(NOT);
					}
				}

				setState(8319);
				match(IN);
				setState(8320);
				match(LR_BRACKET);
				setState(8323);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1143,_ctx) ) {
				case 1:
					{
					setState(8321);
					subquery();
					}
					break;
				case 2:
					{
					setState(8322);
					expression_list();
					}
					break;
				}
				setState(8325);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8327);
				expression(0);
				setState(8329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8328);
					match(NOT);
					}
				}

				setState(8331);
				match(LIKE);
				setState(8332);
				expression(0);
				setState(8335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ESCAPE) {
					{
					setState(8333);
					match(ESCAPE);
					setState(8334);
					expression(0);
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8337);
				expression(0);
				setState(8338);
				match(IS);
				setState(8339);
				null_notnull();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8341);
				match(LR_BRACKET);
				setState(8342);
				search_condition();
				setState(8343);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public List<Sql_unionContext> sql_union() {
			return getRuleContexts(Sql_unionContext.class);
		}
		public Sql_unionContext sql_union(int i) {
			return getRuleContext(Sql_unionContext.class,i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQuery_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQuery_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitQuery_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_query_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8352);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(8347);
				query_specification();
				}
				break;
			case LR_BRACKET:
				{
				setState(8348);
				match(LR_BRACKET);
				setState(8349);
				query_expression();
				setState(8350);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8357);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1148,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8354);
					sql_union();
					}
					} 
				}
				setState(8359);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1148,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_unionContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(TSqlParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(TSqlParser.EXCEPT, 0); }
		public TerminalNode INTERSECT() { return getToken(TSqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Sql_unionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_union; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSql_union(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSql_union(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSql_union(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_unionContext sql_union() throws RecognitionException {
		Sql_unionContext _localctx = new Sql_unionContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_sql_union);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8366);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(8360);
				match(UNION);
				setState(8362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(8361);
					match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				setState(8364);
				match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				setState(8365);
				match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8373);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(8368);
				query_specification();
				}
				break;
			case LR_BRACKET:
				{
				{
				setState(8369);
				match(LR_BRACKET);
				setState(8370);
				query_expression();
				setState(8371);
				match(RR_BRACKET);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public Search_conditionContext where;
		public Search_conditionContext having;
		public TerminalNode SELECT() { return getToken(TSqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public List<Group_by_itemContext> group_by_item() {
			return getRuleContexts(Group_by_itemContext.class);
		}
		public Group_by_itemContext group_by_item(int i) {
			return getRuleContext(Group_by_itemContext.class,i);
		}
		public TerminalNode HAVING() { return getToken(TSqlParser.HAVING, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode DISTINCT() { return getToken(TSqlParser.DISTINCT, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQuery_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQuery_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitQuery_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_query_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8375);
			match(SELECT);
			setState(8377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(8376);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(8380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(8379);
				top_clause();
				}
			}

			setState(8382);
			select_list();
			setState(8385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(8383);
				match(INTO);
				setState(8384);
				table_name();
				}
			}

			setState(8389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(8387);
				match(FROM);
				setState(8388);
				table_sources();
				}
			}

			setState(8393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1156,_ctx) ) {
			case 1:
				{
				setState(8391);
				match(WHERE);
				setState(8392);
				((Query_specificationContext)_localctx).where = search_condition();
				}
				break;
			}
			setState(8408);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1159,_ctx) ) {
			case 1:
				{
				setState(8395);
				match(GROUP);
				setState(8396);
				match(BY);
				setState(8398);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(8397);
					match(ALL);
					}
				}

				setState(8400);
				group_by_item();
				setState(8405);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1158,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(8401);
						match(COMMA);
						setState(8402);
						group_by_item();
						}
						} 
					}
					setState(8407);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1158,_ctx);
				}
				}
				break;
			}
			setState(8412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1160,_ctx) ) {
			case 1:
				{
				setState(8410);
				match(HAVING);
				setState(8411);
				((Query_specificationContext)_localctx).having = search_condition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_clauseContext extends ParserRuleContext {
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public Top_percentContext top_percent() {
			return getRuleContext(Top_percentContext.class,0);
		}
		public Top_countContext top_count() {
			return getRuleContext(Top_countContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(TSqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTop_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTop_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTop_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_clauseContext top_clause() throws RecognitionException {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_top_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8414);
			match(TOP);
			setState(8417);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1161,_ctx) ) {
			case 1:
				{
				setState(8415);
				top_percent();
				}
				break;
			case 2:
				{
				setState(8416);
				top_count();
				}
				break;
			}
			setState(8421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8419);
				match(WITH);
				setState(8420);
				match(TIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_percentContext extends ParserRuleContext {
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public TerminalNode REAL() { return getToken(TSqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(TSqlParser.FLOAT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Top_percentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_percent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTop_percent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTop_percent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTop_percent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_percentContext top_percent() throws RecognitionException {
		Top_percentContext _localctx = new Top_percentContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_top_percent);
		int _la;
		try {
			setState(8430);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FLOAT:
			case REAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8423);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8424);
				match(PERCENT);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(8425);
				match(LR_BRACKET);
				setState(8426);
				expression(0);
				setState(8427);
				match(RR_BRACKET);
				setState(8428);
				match(PERCENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_countContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Top_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_count; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTop_count(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTop_count(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTop_count(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_countContext top_count() throws RecognitionException {
		Top_countContext _localctx = new Top_countContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_top_count);
		try {
			setState(8437);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8432);
				match(DECIMAL);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(8433);
				match(LR_BRACKET);
				setState(8434);
				expression(0);
				setState(8435);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(TSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public List<Order_by_expressionContext> order_by_expression() {
			return getRuleContexts(Order_by_expressionContext.class);
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return getRuleContext(Order_by_expressionContext.class,i);
		}
		public TerminalNode OFFSET() { return getToken(TSqlParser.OFFSET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> ROW() { return getTokens(TSqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(TSqlParser.ROW, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(TSqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(TSqlParser.ROWS, i);
		}
		public TerminalNode FETCH() { return getToken(TSqlParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(TSqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8439);
			match(ORDER);
			setState(8440);
			match(BY);
			setState(8441);
			order_by_expression();
			setState(8446);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1165,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8442);
					match(COMMA);
					setState(8443);
					order_by_expression();
					}
					} 
				}
				setState(8448);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1165,_ctx);
			}
			setState(8460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1167,_ctx) ) {
			case 1:
				{
				setState(8449);
				match(OFFSET);
				setState(8450);
				expression(0);
				setState(8451);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8458);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1166,_ctx) ) {
				case 1:
					{
					setState(8452);
					match(FETCH);
					setState(8453);
					_la = _input.LA(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8454);
					expression(0);
					setState(8455);
					_la = _input.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8456);
					match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode BROWSE() { return getToken(TSqlParser.BROWSE, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public List<Xml_common_directivesContext> xml_common_directives() {
			return getRuleContexts(Xml_common_directivesContext.class);
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return getRuleContext(Xml_common_directivesContext.class,i);
		}
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public TerminalNode RAW() { return getToken(TSqlParser.RAW, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode EXPLICIT() { return getToken(TSqlParser.EXPLICIT, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFor_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFor_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFor_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_for_clause);
		int _la;
		try {
			int _alt;
			setState(8486);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1172,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8462);
				match(FOR);
				setState(8463);
				match(BROWSE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8464);
				match(FOR);
				setState(8465);
				match(XML);
				setState(8467);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1168,_ctx) ) {
				case 1:
					{
					setState(8466);
					xml_common_directives();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8469);
				match(FOR);
				setState(8470);
				match(XML);
				setState(8471);
				_la = _input.LA(1);
				if ( !(_la==RAW || _la==AUTO || _la==EXPLICIT || _la==PATH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8473);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1169,_ctx) ) {
				case 1:
					{
					setState(8472);
					match(COMMA);
					}
					break;
				}
				setState(8478);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1170,_ctx) ) {
				case 1:
					{
					setState(8475);
					match(LR_BRACKET);
					setState(8476);
					match(STRING);
					setState(8477);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8483);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1171,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(8480);
						xml_common_directives();
						}
						} 
					}
					setState(8485);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1171,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_common_directivesContext extends ParserRuleContext {
		public TerminalNode BINARY_BASE64() { return getToken(TSqlParser.BINARY_BASE64, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode ROOT() { return getToken(TSqlParser.ROOT, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_common_directives; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXml_common_directives(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXml_common_directives(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitXml_common_directives(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_common_directivesContext xml_common_directives() throws RecognitionException {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_xml_common_directives);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8488);
			match(COMMA);
			setState(8489);
			_la = _input.LA(1);
			if ( !(_la==BINARY_BASE64 || _la==ROOT || _la==TYPE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(TSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(TSqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOrder_by_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOrder_by_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOrder_by_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_expressionContext order_by_expression() throws RecognitionException {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_order_by_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8491);
			expression(0);
			setState(8493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(8492);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_itemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGroup_by_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGroup_by_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitGroup_by_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_group_by_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8495);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Option_clauseContext extends ParserRuleContext {
		public TerminalNode OPTION() { return getToken(TSqlParser.OPTION, 0); }
		public List<OptionContext> option() {
			return getRuleContexts(OptionContext.class);
		}
		public OptionContext option(int i) {
			return getRuleContext(OptionContext.class,i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOption_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOption_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOption_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Option_clauseContext option_clause() throws RecognitionException {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_option_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8497);
			match(OPTION);
			setState(8498);
			match(LR_BRACKET);
			setState(8499);
			option();
			setState(8504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8500);
				match(COMMA);
				setState(8501);
				option();
				}
				}
				setState(8506);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8507);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionContext extends ParserRuleContext {
		public Token number_rows;
		public Token number_of_processors;
		public Token number_recursion;
		public TerminalNode FAST() { return getToken(TSqlParser.FAST, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode HASH() { return getToken(TSqlParser.HASH, 0); }
		public TerminalNode ORDER() { return getToken(TSqlParser.ORDER, 0); }
		public TerminalNode UNION() { return getToken(TSqlParser.UNION, 0); }
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public TerminalNode CONCAT() { return getToken(TSqlParser.CONCAT, 0); }
		public TerminalNode JOIN() { return getToken(TSqlParser.JOIN, 0); }
		public TerminalNode LOOP() { return getToken(TSqlParser.LOOP, 0); }
		public TerminalNode EXPAND() { return getToken(TSqlParser.EXPAND, 0); }
		public TerminalNode VIEWS() { return getToken(TSqlParser.VIEWS, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode KEEP() { return getToken(TSqlParser.KEEP, 0); }
		public TerminalNode PLAN() { return getToken(TSqlParser.PLAN, 0); }
		public TerminalNode KEEPFIXED() { return getToken(TSqlParser.KEEPFIXED, 0); }
		public TerminalNode MAXDOP() { return getToken(TSqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(TSqlParser.MAXRECURSION, 0); }
		public TerminalNode OPTIMIZE() { return getToken(TSqlParser.OPTIMIZE, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<Optimize_for_argContext> optimize_for_arg() {
			return getRuleContexts(Optimize_for_argContext.class);
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return getRuleContext(Optimize_for_argContext.class,i);
		}
		public TerminalNode UNKNOWN() { return getToken(TSqlParser.UNKNOWN, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(TSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSqlParser.RECOMPILE, 0); }
		public TerminalNode ROBUST() { return getToken(TSqlParser.ROBUST, 0); }
		public TerminalNode USE() { return getToken(TSqlParser.USE, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionContext option() throws RecognitionException {
		OptionContext _localctx = new OptionContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_option);
		int _la;
		try {
			setState(8554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1176,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8509);
				match(FAST);
				setState(8510);
				((OptionContext)_localctx).number_rows = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8511);
				_la = _input.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8512);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8513);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8514);
				match(UNION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8515);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8516);
				match(JOIN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8517);
				match(EXPAND);
				setState(8518);
				match(VIEWS);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8519);
				match(FORCE);
				setState(8520);
				match(ORDER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8521);
				match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8522);
				match(KEEP);
				setState(8523);
				match(PLAN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8524);
				match(KEEPFIXED);
				setState(8525);
				match(PLAN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8526);
				match(MAXDOP);
				setState(8527);
				((OptionContext)_localctx).number_of_processors = match(DECIMAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8528);
				match(MAXRECURSION);
				setState(8529);
				((OptionContext)_localctx).number_recursion = match(DECIMAL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8530);
				match(OPTIMIZE);
				setState(8531);
				match(FOR);
				setState(8532);
				match(LR_BRACKET);
				setState(8533);
				optimize_for_arg();
				setState(8538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8534);
					match(COMMA);
					setState(8535);
					optimize_for_arg();
					}
					}
					setState(8540);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8541);
				match(RR_BRACKET);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8543);
				match(OPTIMIZE);
				setState(8544);
				match(FOR);
				setState(8545);
				match(UNKNOWN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(8546);
				match(PARAMETERIZATION);
				setState(8547);
				_la = _input.LA(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(8548);
				match(RECOMPILE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(8549);
				match(ROBUST);
				setState(8550);
				match(PLAN);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(8551);
				match(USE);
				setState(8552);
				match(PLAN);
				setState(8553);
				match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Optimize_for_argContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode UNKNOWN() { return getToken(TSqlParser.UNKNOWN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimize_for_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOptimize_for_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOptimize_for_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOptimize_for_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Optimize_for_argContext optimize_for_arg() throws RecognitionException {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_optimize_for_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8556);
			match(LOCAL_ID);
			setState(8563);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNKNOWN:
				{
				setState(8557);
				match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				setState(8558);
				match(EQUAL);
				setState(8561);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(8559);
					constant();
					}
					break;
				case NULL:
					{
					setState(8560);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public List<Select_list_elemContext> select_list_elem() {
			return getRuleContexts(Select_list_elemContext.class);
		}
		public Select_list_elemContext select_list_elem(int i) {
			return getRuleContext(Select_list_elemContext.class,i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSelect_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSelect_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSelect_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_select_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8565);
			select_list_elem();
			setState(8570);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1179,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8566);
					match(COMMA);
					setState(8567);
					select_list_elem();
					}
					} 
				}
				setState(8572);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1179,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Udt_method_argumentsContext extends ParserRuleContext {
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public Udt_method_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udt_method_arguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUdt_method_arguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUdt_method_arguments(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitUdt_method_arguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Udt_method_argumentsContext udt_method_arguments() throws RecognitionException {
		Udt_method_argumentsContext _localctx = new Udt_method_argumentsContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_udt_method_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8573);
			match(LR_BRACKET);
			setState(8574);
			execute_var_string();
			setState(8579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8575);
				match(COMMA);
				setState(8576);
				execute_var_string();
				}
				}
				setState(8581);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8582);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsteriskContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public AsteriskContext asterisk() {
			return getRuleContext(AsteriskContext.class,0);
		}
		public AsteriskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asterisk; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAsterisk(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAsterisk(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAsterisk(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsteriskContext asterisk() throws RecognitionException {
		AsteriskContext _localctx = new AsteriskContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_asterisk);
		try {
			setState(8589);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8584);
				match(STAR);
				}
				break;
			case BLOCKING_HIERARCHY:
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(8585);
				table_name();
				setState(8586);
				match(DOT);
				setState(8587);
				asterisk();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_elemContext extends ParserRuleContext {
		public IdContext column_name;
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUID() { return getToken(TSqlParser.ROWGUID, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitColumn_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_elemContext column_elem() throws RecognitionException {
		Column_elemContext _localctx = new Column_elemContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_column_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1182,_ctx) ) {
			case 1:
				{
				setState(8591);
				table_name();
				setState(8592);
				match(DOT);
				}
				break;
			}
			setState(8601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1183,_ctx) ) {
			case 1:
				{
				setState(8596);
				((Column_elemContext)_localctx).column_name = id();
				}
				break;
			case 2:
				{
				setState(8597);
				match(DOLLAR);
				setState(8598);
				match(IDENTITY);
				}
				break;
			case 3:
				{
				setState(8599);
				match(DOLLAR);
				setState(8600);
				match(ROWGUID);
				}
				break;
			}
			setState(8604);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1184,_ctx) ) {
			case 1:
				{
				setState(8603);
				as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Udt_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext non_static_attr;
		public IdContext static_attr;
		public Udt_method_argumentsContext udt_method_arguments() {
			return getRuleContext(Udt_method_argumentsContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Udt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udt_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUdt_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUdt_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitUdt_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Udt_elemContext udt_elem() throws RecognitionException {
		Udt_elemContext _localctx = new Udt_elemContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_udt_elem);
		try {
			setState(8623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1188,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8606);
				((Udt_elemContext)_localctx).udt_column_name = id();
				setState(8607);
				match(DOT);
				setState(8608);
				((Udt_elemContext)_localctx).non_static_attr = id();
				setState(8609);
				udt_method_arguments();
				setState(8611);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1185,_ctx) ) {
				case 1:
					{
					setState(8610);
					as_column_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8613);
				((Udt_elemContext)_localctx).udt_column_name = id();
				setState(8614);
				match(COLON);
				setState(8615);
				match(COLON);
				setState(8616);
				((Udt_elemContext)_localctx).static_attr = id();
				setState(8618);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1186,_ctx) ) {
				case 1:
					{
					setState(8617);
					udt_method_arguments();
					}
					break;
				}
				setState(8621);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1187,_ctx) ) {
				case 1:
					{
					setState(8620);
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_elemContext extends ParserRuleContext {
		public Token eq;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExpression_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExpression_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitExpression_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_elemContext expression_elem() throws RecognitionException {
		Expression_elemContext _localctx = new Expression_elemContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_expression_elem);
		try {
			setState(8633);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1190,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8625);
				expression(0);
				setState(8627);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1189,_ctx) ) {
				case 1:
					{
					setState(8626);
					as_column_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8629);
				column_alias();
				setState(8630);
				((Expression_elemContext)_localctx).eq = match(EQUAL);
				setState(8631);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elemContext extends ParserRuleContext {
		public AsteriskContext asterisk() {
			return getRuleContext(AsteriskContext.class,0);
		}
		public Column_elemContext column_elem() {
			return getRuleContext(Column_elemContext.class,0);
		}
		public Udt_elemContext udt_elem() {
			return getRuleContext(Udt_elemContext.class,0);
		}
		public Expression_elemContext expression_elem() {
			return getRuleContext(Expression_elemContext.class,0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSelect_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSelect_list_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSelect_list_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_elemContext select_list_elem() throws RecognitionException {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_select_list_elem);
		try {
			setState(8639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1191,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8635);
				asterisk();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8636);
				column_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8637);
				udt_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8638);
				expression_elem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourcesContext extends ParserRuleContext {
		public List<Table_sourceContext> table_source() {
			return getRuleContexts(Table_sourceContext.class);
		}
		public Table_sourceContext table_source(int i) {
			return getRuleContext(Table_sourceContext.class,i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_sources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_sources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_sources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTable_sources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_sourcesContext table_sources() throws RecognitionException {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_table_sources);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8641);
			table_source();
			setState(8646);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1192,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8642);
					match(COMMA);
					setState(8643);
					table_source();
					}
					} 
				}
				setState(8648);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1192,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourceContext extends ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return getRuleContext(Table_source_item_joinedContext.class,0);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTable_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_sourceContext table_source() throws RecognitionException {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_table_source);
		try {
			setState(8654);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1193,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8649);
				table_source_item_joined();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8650);
				match(LR_BRACKET);
				setState(8651);
				table_source_item_joined();
				setState(8652);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_item_joinedContext extends ParserRuleContext {
		public Table_source_itemContext table_source_item() {
			return getRuleContext(Table_source_itemContext.class,0);
		}
		public List<Join_partContext> join_part() {
			return getRuleContexts(Join_partContext.class);
		}
		public Join_partContext join_part(int i) {
			return getRuleContext(Join_partContext.class,i);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item_joined; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_source_item_joined(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_source_item_joined(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTable_source_item_joined(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_source_item_joinedContext table_source_item_joined() throws RecognitionException {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_table_source_item_joined);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8656);
			table_source_item();
			setState(8660);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1194,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8657);
					join_part();
					}
					} 
				}
				setState(8662);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1194,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_itemContext extends ParserRuleContext {
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Rowset_functionContext rowset_function() {
			return getRuleContext(Rowset_functionContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Change_tableContext change_table() {
			return getRuleContext(Change_tableContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Open_xmlContext open_xml() {
			return getRuleContext(Open_xmlContext.class,0);
		}
		public Table_source_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_source_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_source_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTable_source_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_source_itemContext table_source_item() throws RecognitionException {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_table_source_item);
		try {
			setState(8709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8663);
				table_name_with_hint();
				setState(8665);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1195,_ctx) ) {
				case 1:
					{
					setState(8664);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8667);
				full_table_name();
				setState(8669);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1196,_ctx) ) {
				case 1:
					{
					setState(8668);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8671);
				rowset_function();
				setState(8673);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1197,_ctx) ) {
				case 1:
					{
					setState(8672);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8675);
				derived_table();
				setState(8680);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1199,_ctx) ) {
				case 1:
					{
					setState(8676);
					as_table_alias();
					setState(8678);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1198,_ctx) ) {
					case 1:
						{
						setState(8677);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8682);
				change_table();
				setState(8683);
				as_table_alias();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8685);
				function_call();
				setState(8687);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1200,_ctx) ) {
				case 1:
					{
					setState(8686);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8689);
				match(LOCAL_ID);
				setState(8691);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1201,_ctx) ) {
				case 1:
					{
					setState(8690);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8693);
				match(LOCAL_ID);
				setState(8694);
				match(DOT);
				setState(8695);
				function_call();
				setState(8700);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1203,_ctx) ) {
				case 1:
					{
					setState(8696);
					as_table_alias();
					setState(8698);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1202,_ctx) ) {
					case 1:
						{
						setState(8697);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8702);
				open_xml();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8703);
				match(COLON);
				setState(8704);
				match(COLON);
				setState(8705);
				function_call();
				setState(8707);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1204,_ctx) ) {
				case 1:
					{
					setState(8706);
					as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_xmlContext extends ParserRuleContext {
		public TerminalNode OPENXML() { return getToken(TSqlParser.OPENXML, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return getRuleContext(Schema_declarationContext.class,0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_xml; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOpen_xml(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOpen_xml(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOpen_xml(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_xmlContext open_xml() throws RecognitionException {
		Open_xmlContext _localctx = new Open_xmlContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_open_xml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8711);
			match(OPENXML);
			setState(8712);
			match(LR_BRACKET);
			setState(8713);
			expression(0);
			setState(8714);
			match(COMMA);
			setState(8715);
			expression(0);
			setState(8718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8716);
				match(COMMA);
				setState(8717);
				expression(0);
				}
			}

			setState(8720);
			match(RR_BRACKET);
			setState(8726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1207,_ctx) ) {
			case 1:
				{
				setState(8721);
				match(WITH);
				setState(8722);
				match(LR_BRACKET);
				setState(8723);
				schema_declaration();
				setState(8724);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_declarationContext extends ParserRuleContext {
		public List<Column_declarationContext> column_declaration() {
			return getRuleContexts(Column_declarationContext.class);
		}
		public Column_declarationContext column_declaration(int i) {
			return getRuleContext(Column_declarationContext.class,i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSchema_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSchema_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSchema_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_declarationContext schema_declaration() throws RecognitionException {
		Schema_declarationContext _localctx = new Schema_declarationContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_schema_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8728);
			column_declaration();
			setState(8733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8729);
				match(COMMA);
				setState(8730);
				column_declaration();
				}
				}
				setState(8735);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_declarationContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitColumn_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_declarationContext column_declaration() throws RecognitionException {
		Column_declarationContext _localctx = new Column_declarationContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_column_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8736);
			match(ID);
			setState(8737);
			data_type();
			setState(8739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING) {
				{
				setState(8738);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tableContext extends ParserRuleContext {
		public TerminalNode CHANGETABLE() { return getToken(TSqlParser.CHANGETABLE, 0); }
		public TerminalNode CHANGES() { return getToken(TSqlParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Change_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterChange_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitChange_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitChange_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_tableContext change_table() throws RecognitionException {
		Change_tableContext _localctx = new Change_tableContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_change_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8741);
			match(CHANGETABLE);
			setState(8742);
			match(LR_BRACKET);
			setState(8743);
			match(CHANGES);
			setState(8744);
			table_name();
			setState(8745);
			match(COMMA);
			setState(8746);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8747);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_partContext extends ParserRuleContext {
		public Token join_type;
		public Token join_hint;
		public TerminalNode JOIN() { return getToken(TSqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(TSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(TSqlParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public TerminalNode INNER() { return getToken(TSqlParser.INNER, 0); }
		public TerminalNode OUTER() { return getToken(TSqlParser.OUTER, 0); }
		public TerminalNode LOOP() { return getToken(TSqlParser.LOOP, 0); }
		public TerminalNode HASH() { return getToken(TSqlParser.HASH, 0); }
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode CROSS() { return getToken(TSqlParser.CROSS, 0); }
		public TerminalNode APPLY() { return getToken(TSqlParser.APPLY, 0); }
		public TerminalNode PIVOT() { return getToken(TSqlParser.PIVOT, 0); }
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public TerminalNode UNPIVOT() { return getToken(TSqlParser.UNPIVOT, 0); }
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterJoin_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitJoin_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitJoin_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_partContext join_part() throws RecognitionException {
		Join_partContext _localctx = new Join_partContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_join_part);
		int _la;
		try {
			setState(8783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8756);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INNER:
				case JOIN:
				case MERGE:
				case HASH:
				case LOOP:
				case REMOTE:
					{
					setState(8750);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INNER) {
						{
						setState(8749);
						match(INNER);
						}
					}

					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					setState(8752);
					((Join_partContext)_localctx).join_type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						((Join_partContext)_localctx).join_type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8754);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(8753);
						match(OUTER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8759);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) {
					{
					setState(8758);
					((Join_partContext)_localctx).join_hint = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
						((Join_partContext)_localctx).join_hint = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(8761);
				match(JOIN);
				setState(8762);
				table_source();
				setState(8763);
				match(ON);
				setState(8764);
				search_condition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8766);
				match(CROSS);
				setState(8767);
				match(JOIN);
				setState(8768);
				table_source();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8769);
				match(CROSS);
				setState(8770);
				match(APPLY);
				setState(8771);
				table_source();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8772);
				match(OUTER);
				setState(8773);
				match(APPLY);
				setState(8774);
				table_source();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8775);
				match(PIVOT);
				setState(8776);
				pivot_clause();
				setState(8777);
				as_table_alias();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8779);
				match(UNPIVOT);
				setState(8780);
				unpivot_clause();
				setState(8781);
				as_table_alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitPivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_pivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8785);
			match(LR_BRACKET);
			setState(8786);
			aggregate_windowed_function();
			setState(8787);
			match(FOR);
			setState(8788);
			full_column_name();
			setState(8789);
			match(IN);
			setState(8790);
			column_alias_list();
			setState(8791);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUnpivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitUnpivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_unpivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8793);
			match(LR_BRACKET);
			setState(8794);
			expression(0);
			setState(8795);
			match(FOR);
			setState(8796);
			full_column_name();
			setState(8797);
			match(IN);
			setState(8798);
			match(LR_BRACKET);
			setState(8799);
			full_column_name_list();
			setState(8800);
			match(RR_BRACKET);
			setState(8801);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_name_listContext extends ParserRuleContext {
		public List<Full_column_nameContext> full_column_name() {
			return getRuleContexts(Full_column_nameContext.class);
		}
		public Full_column_nameContext full_column_name(int i) {
			return getRuleContext(Full_column_nameContext.class,i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFull_column_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFull_column_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFull_column_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_column_name_listContext full_column_name_list() throws RecognitionException {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_full_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8803);
			full_column_name();
			setState(8808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8804);
				match(COMMA);
				setState(8805);
				full_column_name();
				}
				}
				setState(8810);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_name_with_hintContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name_with_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_name_with_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_name_with_hint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTable_name_with_hint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_name_with_hintContext table_name_with_hint() throws RecognitionException {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_table_name_with_hint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8811);
			table_name();
			setState(8813);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1216,_ctx) ) {
			case 1:
				{
				setState(8812);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_functionContext extends ParserRuleContext {
		public Token provider_name;
		public Token connectionString;
		public Token sql;
		public Token data_file;
		public TerminalNode OPENROWSET() { return getToken(TSqlParser.OPENROWSET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode BULK() { return getToken(TSqlParser.BULK, 0); }
		public List<Bulk_optionContext> bulk_option() {
			return getRuleContexts(Bulk_optionContext.class);
		}
		public Bulk_optionContext bulk_option(int i) {
			return getRuleContext(Bulk_optionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRowset_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRowset_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitRowset_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowset_functionContext rowset_function() throws RecognitionException {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_rowset_function);
		int _la;
		try {
			setState(8841);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(8815);
				match(OPENROWSET);
				setState(8816);
				match(LR_BRACKET);
				setState(8817);
				((Rowset_functionContext)_localctx).provider_name = match(STRING);
				setState(8818);
				match(COMMA);
				setState(8819);
				((Rowset_functionContext)_localctx).connectionString = match(STRING);
				setState(8820);
				match(COMMA);
				setState(8821);
				((Rowset_functionContext)_localctx).sql = match(STRING);
				setState(8822);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(8823);
				match(OPENROWSET);
				setState(8824);
				match(LR_BRACKET);
				setState(8825);
				match(BULK);
				setState(8826);
				((Rowset_functionContext)_localctx).data_file = match(STRING);
				setState(8827);
				match(COMMA);
				setState(8837);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1218,_ctx) ) {
				case 1:
					{
					setState(8828);
					bulk_option();
					setState(8833);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(8829);
						match(COMMA);
						setState(8830);
						bulk_option();
						}
						}
						setState(8835);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(8836);
					id();
					}
					break;
				}
				setState(8839);
				match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bulk_optionContext extends ParserRuleContext {
		public Token bulk_option_value;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bulk_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBulk_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBulk_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitBulk_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bulk_optionContext bulk_option() throws RecognitionException {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_bulk_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8843);
			id();
			setState(8844);
			match(EQUAL);
			setState(8845);
			((Bulk_optionContext)_localctx).bulk_option_value = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				((Bulk_optionContext)_localctx).bulk_option_value = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_tableContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDerived_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDerived_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDerived_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_derived_table);
		try {
			setState(8857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1220,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8847);
				subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8848);
				match(LR_BRACKET);
				setState(8849);
				subquery();
				setState(8850);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8852);
				table_value_constructor();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8853);
				match(LR_BRACKET);
				setState(8854);
				table_value_constructor();
				setState(8855);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
	 
		public Function_callContext() { }
		public void copyFrom(Function_callContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CURRENT_USERContext extends Function_callContext {
		public TerminalNode CURRENT_USER() { return getToken(TSqlParser.CURRENT_USER, 0); }
		public CURRENT_USERContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCURRENT_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCURRENT_USER(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCURRENT_USER(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DATEADDContext extends Function_callContext {
		public TerminalNode DATEADD() { return getToken(TSqlParser.DATEADD, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DATEADDContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDATEADD(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDATEADD(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDATEADD(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CHECKSUMContext extends Function_callContext {
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public CHECKSUMContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCHECKSUM(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCHECKSUM(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCHECKSUM(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CURRENT_TIMESTAMPContext extends Function_callContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(TSqlParser.CURRENT_TIMESTAMP, 0); }
		public CURRENT_TIMESTAMPContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCURRENT_TIMESTAMP(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCURRENT_TIMESTAMP(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCURRENT_TIMESTAMP(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BINARY_CHECKSUMContext extends Function_callContext {
		public TerminalNode BINARY_CHECKSUM() { return getToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public BINARY_CHECKSUMContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBINARY_CHECKSUM(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBINARY_CHECKSUM(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitBINARY_CHECKSUM(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SYSTEM_USERContext extends Function_callContext {
		public TerminalNode SYSTEM_USER() { return getToken(TSqlParser.SYSTEM_USER, 0); }
		public SYSTEM_USERContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSYSTEM_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSYSTEM_USER(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSYSTEM_USER(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NULLIFContext extends Function_callContext {
		public TerminalNode NULLIF() { return getToken(TSqlParser.NULLIF, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public NULLIFContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNULLIF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNULLIF(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitNULLIF(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SESSION_USERContext extends Function_callContext {
		public TerminalNode SESSION_USER() { return getToken(TSqlParser.SESSION_USER, 0); }
		public SESSION_USERContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSESSION_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSESSION_USER(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSESSION_USER(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CONVERTContext extends Function_callContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		public TerminalNode CONVERT() { return getToken(TSqlParser.CONVERT, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public CONVERTContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCONVERT(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCONVERT(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCONVERT(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class XML_DATA_TYPE_FUNCContext extends Function_callContext {
		public Xml_data_type_methodsContext xml_data_type_methods() {
			return getRuleContext(Xml_data_type_methodsContext.class,0);
		}
		public XML_DATA_TYPE_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXML_DATA_TYPE_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXML_DATA_TYPE_FUNC(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitXML_DATA_TYPE_FUNC(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class COALESCEContext extends Function_callContext {
		public TerminalNode COALESCE() { return getToken(TSqlParser.COALESCE, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public COALESCEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCOALESCE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCOALESCE(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCOALESCE(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CASTContext extends Function_callContext {
		public TerminalNode CAST() { return getToken(TSqlParser.CAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public CASTContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCAST(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCAST(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCAST(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MIN_ACTIVE_ROWVERSIONContext extends Function_callContext {
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public MIN_ACTIVE_ROWVERSIONContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMIN_ACTIVE_ROWVERSION(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMIN_ACTIVE_ROWVERSION(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitMIN_ACTIVE_ROWVERSION(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SCALAR_FUNCTIONContext extends Function_callContext {
		public Scalar_function_nameContext scalar_function_name() {
			return getRuleContext(Scalar_function_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public SCALAR_FUNCTIONContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSCALAR_FUNCTION(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSCALAR_FUNCTION(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSCALAR_FUNCTION(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DATEPARTContext extends Function_callContext {
		public TerminalNode DATEPART() { return getToken(TSqlParser.DATEPART, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DATEPARTContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDATEPART(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDATEPART(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDATEPART(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class STUFFContext extends Function_callContext {
		public TerminalNode STUFF() { return getToken(TSqlParser.STUFF, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public STUFFContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSTUFF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSTUFF(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSTUFF(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AGGREGATE_WINDOWED_FUNCContext extends Function_callContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public AGGREGATE_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAGGREGATE_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAGGREGATE_WINDOWED_FUNC(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAGGREGATE_WINDOWED_FUNC(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IDENTITYContext extends Function_callContext {
		public Token seed;
		public Token increment;
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public IDENTITYContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIDENTITY(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIDENTITY(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitIDENTITY(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RANKING_WINDOWED_FUNCContext extends Function_callContext {
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return getRuleContext(Ranking_windowed_functionContext.class,0);
		}
		public RANKING_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRANKING_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRANKING_WINDOWED_FUNC(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitRANKING_WINDOWED_FUNC(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DATENAMEContext extends Function_callContext {
		public TerminalNode DATENAME() { return getToken(TSqlParser.DATENAME, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DATENAMEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDATENAME(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDATENAME(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDATENAME(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GETUTCDATEContext extends Function_callContext {
		public TerminalNode GETUTCDATE() { return getToken(TSqlParser.GETUTCDATE, 0); }
		public GETUTCDATEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGETUTCDATE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGETUTCDATE(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitGETUTCDATE(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ANALYTIC_WINDOWED_FUNCContext extends Function_callContext {
		public Analytic_windowed_functionContext analytic_windowed_function() {
			return getRuleContext(Analytic_windowed_functionContext.class,0);
		}
		public ANALYTIC_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterANALYTIC_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitANALYTIC_WINDOWED_FUNC(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitANALYTIC_WINDOWED_FUNC(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ISNULLContext extends Function_callContext {
		public TerminalNode ISNULL() { return getToken(TSqlParser.ISNULL, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ISNULLContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterISNULL(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitISNULL(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitISNULL(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DATEDIFFContext extends Function_callContext {
		public TerminalNode DATEDIFF() { return getToken(TSqlParser.DATEDIFF, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DATEDIFFContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDATEDIFF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDATEDIFF(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDATEDIFF(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GETDATEContext extends Function_callContext {
		public TerminalNode GETDATE() { return getToken(TSqlParser.GETDATE, 0); }
		public GETDATEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGETDATE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGETDATE(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitGETDATE(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_function_call);
		int _la;
		try {
			setState(8982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1225,_ctx) ) {
			case 1:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(8859);
				ranking_windowed_function();
				}
				break;
			case 2:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(8860);
				aggregate_windowed_function();
				}
				break;
			case 3:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(8861);
				analytic_windowed_function();
				}
				break;
			case 4:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(8862);
				scalar_function_name();
				setState(8863);
				match(LR_BRACKET);
				setState(8865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BLOCKING_HIERARCHY) | (1L << CALLED) | (1L << CASE) | (1L << COALESCE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (CONVERT - 68)) | (1L << (CURRENT_TIMESTAMP - 68)) | (1L << (CURRENT_USER - 68)) | (1L << (DATA_COMPRESSION - 68)) | (1L << (DEFAULT - 68)) | (1L << (EVENTDATA - 68)) | (1L << (FILENAME - 68)) | (1L << (FILLFACTOR - 68)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (FORCESEEK - 132)) | (1L << (IDENTITY - 132)) | (1L << (ISNULL - 132)) | (1L << (KEY - 132)) | (1L << (LEFT - 132)) | (1L << (MASTER - 132)) | (1L << (MAX_MEMORY - 132)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (NULL - 220)) | (1L << (NULLIF - 220)) | (1L << (OFFSETS - 220)) | (1L << (OVER - 220)) | (1L << (PAGE - 220)) | (1L << (PUBLIC - 220)) | (1L << (RAW - 220)) | (1L << (RETURN - 220)) | (1L << (RETURNS - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (RIGHT - 284)) | (1L << (ROWCOUNT - 284)) | (1L << (SAFETY - 284)) | (1L << (SERVER - 284)) | (1L << (SESSION_USER - 284)) | (1L << (SID - 284)) | (1L << (SOURCE - 284)) | (1L << (STATE - 284)) | (1L << (SYSTEM_USER - 284)) | (1L << (TARGET - 284)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (ABSOLUTE - 382)) | (1L << (ACTIVE - 382)) | (1L << (ADDRESS - 382)) | (1L << (ANSI_NULLS - 382)) | (1L << (ANSI_PADDING - 382)) | (1L << (ANSI_WARNINGS - 382)) | (1L << (APPLY - 382)) | (1L << (ARITHABORT - 382)) | (1L << (AUTO - 382)) | (1L << (AVAILABILITY - 382)) | (1L << (AVG - 382)) | (1L << (BINARY_CHECKSUM - 382)) | (1L << (CALLER - 382)) | (1L << (CAST - 382)) | (1L << (CATCH - 382)) | (1L << (CHECKSUM - 382)) | (1L << (CHECKSUM_AGG - 382)) | (1L << (COMMITTED - 382)) | (1L << (COMPATIBILITY_LEVEL - 382)) | (1L << (CONCAT - 382)) | (1L << (CONCAT_NULL_YIELDS_NULL - 382)) | (1L << (CONTROL - 382)) | (1L << (COOKIE - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (COUNT - 446)) | (1L << (COUNTER - 446)) | (1L << (COUNT_BIG - 446)) | (1L << (DATEADD - 446)) | (1L << (DATEDIFF - 446)) | (1L << (DATENAME - 446)) | (1L << (DATEPART - 446)) | (1L << (DELAY - 446)) | (1L << (DELETED - 446)) | (1L << (DENSE_RANK - 446)) | (1L << (DISABLE - 446)) | (1L << (DYNAMIC - 446)) | (1L << (ENCRYPTION - 446)) | (1L << (EXPAND - 446)) | (1L << (FAST - 446)) | (1L << (FAST_FORWARD - 446)) | (1L << (FIRST - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (FIRST_VALUE - 510)) | (1L << (FOLLOWING - 510)) | (1L << (FORCE - 510)) | (1L << (FORCED - 510)) | (1L << (FORWARD_ONLY - 510)) | (1L << (FULLSCAN - 510)) | (1L << (GETDATE - 510)) | (1L << (GETUTCDATE - 510)) | (1L << (GLOBAL - 510)) | (1L << (GROUPING - 510)) | (1L << (GROUPING_ID - 510)) | (1L << (HASH - 510)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 510)) | (1L << (IMPERSONATE - 510)) | (1L << (INPUT - 510)) | (1L << (INSENSITIVE - 510)) | (1L << (INSERTED - 510)) | (1L << (ISOLATION - 510)) | (1L << (KEEP - 510)) | (1L << (KEEPFIXED - 510)) | (1L << (KEYSET - 510)) | (1L << (LAG - 510)) | (1L << (LAST - 510)) | (1L << (LAST_VALUE - 510)) | (1L << (LEAD - 510)) | (1L << (LEVEL - 510)) | (1L << (LOCAL - 510)) | (1L << (LOCATION - 510)) | (1L << (LOCK_ESCALATION - 510)) | (1L << (LOGIN - 510)) | (1L << (LOOP - 510)) | (1L << (MARK - 510)) | (1L << (MAX - 510)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXDOP - 579)) | (1L << (MAXRECURSION - 579)) | (1L << (MIN - 579)) | (1L << (MIN_ACTIVE_ROWVERSION - 579)) | (1L << (MODIFY - 579)) | (1L << (NAME - 579)) | (1L << (NEXT - 579)) | (1L << (NOCOUNT - 579)) | (1L << (NOEXPAND - 579)) | (1L << (NORECOMPUTE - 579)) | (1L << (NTILE - 579)) | (1L << (NUMBER - 579)) | (1L << (OFFSET - 579)) | (1L << (ONLINE - 579)) | (1L << (ONLY - 579)) | (1L << (OPTIMISTIC - 579)) | (1L << (OPTIMIZE - 579)) | (1L << (OUT - 579)) | (1L << (OUTPUT - 579)) | (1L << (OWNER - 579)) | (1L << (PARAMETERIZATION - 579)) | (1L << (PARTITION - 579)) | (1L << (PATH - 579)) | (1L << (PRECEDING - 579)) | (1L << (PRIOR - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PRIVILEGES - 643)) | (1L << (QUOTED_IDENTIFIER - 643)) | (1L << (RANGE - 643)) | (1L << (RANK - 643)) | (1L << (READONLY - 643)) | (1L << (READ_ONLY - 643)) | (1L << (RECOMPILE - 643)) | (1L << (RELATIVE - 643)) | (1L << (REMOTE - 643)) | (1L << (REPEATABLE - 643)) | (1L << (ROBUST - 643)) | (1L << (ROOT - 643)) | (1L << (ROW - 643)) | (1L << (ROWGUID - 643)) | (1L << (ROWS - 643)) | (1L << (ROW_NUMBER - 643)) | (1L << (SAMPLE - 643)) | (1L << (SCHEMABINDING - 643)) | (1L << (SCROLL - 643)) | (1L << (SCROLL_LOCKS - 643)) | (1L << (SELF - 643)) | (1L << (SERIALIZABLE - 643)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (SIMPLE - 711)) | (1L << (SIZE - 711)) | (1L << (SNAPSHOT - 711)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 711)) | (1L << (STATIC - 711)) | (1L << (STATS_STREAM - 711)) | (1L << (STATUS - 711)) | (1L << (STDEV - 711)) | (1L << (STDEVP - 711)) | (1L << (STUFF - 711)) | (1L << (SUM - 711)) | (1L << (TEXTIMAGE_ON - 711)) | (1L << (THROW - 711)) | (1L << (TIES - 711)) | (1L << (TIME - 711)) | (1L << (TRY - 711)) | (1L << (TYPE - 711)) | (1L << (TYPE_WARNING - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNKNOWN - 711)) | (1L << (USING - 711)) | (1L << (VALUE - 711)) | (1L << (VAR - 711)) | (1L << (VARP - 711)) | (1L << (VIEWS - 711)) | (1L << (VIEW_METADATA - 711)) | (1L << (WORK - 711)) | (1L << (XML - 711)) | (1L << (XMLNAMESPACES - 711)) | (1L << (DOUBLE_QUOTE_ID - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (SQUARE_BRACKET_ID - 775)) | (1L << (LOCAL_ID - 775)) | (1L << (DECIMAL - 775)) | (1L << (ID - 775)) | (1L << (STRING - 775)) | (1L << (BINARY - 775)) | (1L << (FLOAT - 775)) | (1L << (REAL - 775)) | (1L << (DOLLAR - 775)) | (1L << (LR_BRACKET - 775)) | (1L << (PLUS - 775)) | (1L << (MINUS - 775)) | (1L << (BIT_NOT - 775)))) != 0)) {
					{
					setState(8864);
					expression_list();
					}
				}

				setState(8867);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(8869);
				match(BINARY_CHECKSUM);
				setState(8870);
				match(LR_BRACKET);
				setState(8871);
				match(STAR);
				setState(8872);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CASTContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(8873);
				match(CAST);
				setState(8874);
				match(LR_BRACKET);
				setState(8875);
				expression(0);
				setState(8876);
				match(AS);
				setState(8877);
				data_type();
				setState(8878);
				match(RR_BRACKET);
				}
				break;
			case 7:
				_localctx = new CONVERTContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(8880);
				match(CONVERT);
				setState(8881);
				match(LR_BRACKET);
				setState(8882);
				((CONVERTContext)_localctx).convert_data_type = data_type();
				setState(8883);
				match(COMMA);
				setState(8884);
				((CONVERTContext)_localctx).convert_expression = expression(0);
				setState(8887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8885);
					match(COMMA);
					setState(8886);
					((CONVERTContext)_localctx).style = expression(0);
					}
				}

				setState(8889);
				match(RR_BRACKET);
				}
				break;
			case 8:
				_localctx = new CHECKSUMContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(8891);
				match(CHECKSUM);
				setState(8892);
				match(LR_BRACKET);
				setState(8893);
				match(STAR);
				setState(8894);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new COALESCEContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(8895);
				match(COALESCE);
				setState(8896);
				match(LR_BRACKET);
				setState(8897);
				expression_list();
				setState(8898);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(8900);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 11:
				_localctx = new CURRENT_USERContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(8901);
				match(CURRENT_USER);
				}
				break;
			case 12:
				_localctx = new DATEADDContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(8902);
				match(DATEADD);
				setState(8903);
				match(LR_BRACKET);
				setState(8904);
				match(ID);
				setState(8905);
				match(COMMA);
				setState(8906);
				expression(0);
				setState(8907);
				match(COMMA);
				setState(8908);
				expression(0);
				setState(8909);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new DATEDIFFContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(8911);
				match(DATEDIFF);
				setState(8912);
				match(LR_BRACKET);
				setState(8913);
				match(ID);
				setState(8914);
				match(COMMA);
				setState(8915);
				expression(0);
				setState(8916);
				match(COMMA);
				setState(8917);
				expression(0);
				setState(8918);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new DATENAMEContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(8920);
				match(DATENAME);
				setState(8921);
				match(LR_BRACKET);
				setState(8922);
				match(ID);
				setState(8923);
				match(COMMA);
				setState(8924);
				expression(0);
				setState(8925);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new DATEPARTContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(8927);
				match(DATEPART);
				setState(8928);
				match(LR_BRACKET);
				setState(8929);
				match(ID);
				setState(8930);
				match(COMMA);
				setState(8931);
				expression(0);
				setState(8932);
				match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new GETDATEContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(8934);
				match(GETDATE);
				setState(8935);
				match(LR_BRACKET);
				setState(8936);
				match(RR_BRACKET);
				}
				break;
			case 17:
				_localctx = new GETUTCDATEContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(8937);
				match(GETUTCDATE);
				setState(8938);
				match(LR_BRACKET);
				setState(8939);
				match(RR_BRACKET);
				}
				break;
			case 18:
				_localctx = new IDENTITYContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(8940);
				match(IDENTITY);
				setState(8941);
				match(LR_BRACKET);
				setState(8942);
				data_type();
				setState(8945);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1223,_ctx) ) {
				case 1:
					{
					setState(8943);
					match(COMMA);
					setState(8944);
					((IDENTITYContext)_localctx).seed = match(DECIMAL);
					}
					break;
				}
				setState(8949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8947);
					match(COMMA);
					setState(8948);
					((IDENTITYContext)_localctx).increment = match(DECIMAL);
					}
				}

				setState(8951);
				match(RR_BRACKET);
				}
				break;
			case 19:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(8953);
				match(MIN_ACTIVE_ROWVERSION);
				}
				break;
			case 20:
				_localctx = new NULLIFContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(8954);
				match(NULLIF);
				setState(8955);
				match(LR_BRACKET);
				setState(8956);
				expression(0);
				setState(8957);
				match(COMMA);
				setState(8958);
				expression(0);
				setState(8959);
				match(RR_BRACKET);
				}
				break;
			case 21:
				_localctx = new STUFFContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(8961);
				match(STUFF);
				setState(8962);
				match(LR_BRACKET);
				setState(8963);
				expression(0);
				setState(8964);
				match(COMMA);
				setState(8965);
				match(DECIMAL);
				setState(8966);
				match(COMMA);
				setState(8967);
				match(DECIMAL);
				setState(8968);
				match(COMMA);
				setState(8969);
				expression(0);
				setState(8970);
				match(RR_BRACKET);
				}
				break;
			case 22:
				_localctx = new SESSION_USERContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(8972);
				match(SESSION_USER);
				}
				break;
			case 23:
				_localctx = new SYSTEM_USERContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(8973);
				match(SYSTEM_USER);
				}
				break;
			case 24:
				_localctx = new ISNULLContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(8974);
				match(ISNULL);
				setState(8975);
				match(LR_BRACKET);
				setState(8976);
				expression(0);
				setState(8977);
				match(COMMA);
				setState(8978);
				expression(0);
				setState(8979);
				match(RR_BRACKET);
				}
				break;
			case 25:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(8981);
				xml_data_type_methods();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_data_type_methodsContext extends ParserRuleContext {
		public Value_methodContext value_method() {
			return getRuleContext(Value_methodContext.class,0);
		}
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public Exist_methodContext exist_method() {
			return getRuleContext(Exist_methodContext.class,0);
		}
		public Modify_methodContext modify_method() {
			return getRuleContext(Modify_methodContext.class,0);
		}
		public Nodes_methodContext nodes_method() {
			return getRuleContext(Nodes_methodContext.class,0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_data_type_methods; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXml_data_type_methods(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXml_data_type_methods(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitXml_data_type_methods(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_data_type_methodsContext xml_data_type_methods() throws RecognitionException {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_xml_data_type_methods);
		try {
			setState(8989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1226,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8984);
				value_method();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8985);
				query_method();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8986);
				exist_method();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8987);
				modify_method();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8988);
				nodes_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_methodContext extends ParserRuleContext {
		public Token xquery;
		public Token sqltype;
		public TerminalNode VALUE() { return getToken(TSqlParser.VALUE, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public TerminalNode EVENTDATA() { return getToken(TSqlParser.EVENTDATA, 0); }
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public TerminalNode ROW() { return getToken(TSqlParser.ROW, 0); }
		public TerminalNode PARAM_NODE() { return getToken(TSqlParser.PARAM_NODE, 0); }
		public Value_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterValue_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitValue_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitValue_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Value_methodContext value_method() throws RecognitionException {
		Value_methodContext _localctx = new Value_methodContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_value_method);
		try {
			setState(9034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1230,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8995);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1227,_ctx) ) {
				case 1:
					{
					setState(8991);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(8992);
					match(ID);
					}
					break;
				case 3:
					{
					setState(8993);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(8994);
					query_method();
					}
					break;
				}
				setState(8997);
				match(DOT);
				setState(8998);
				match(VALUE);
				setState(8999);
				match(LR_BRACKET);
				setState(9000);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(9001);
				match(COMMA);
				setState(9002);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(9003);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9008);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1228,_ctx) ) {
				case 1:
					{
					setState(9004);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(9005);
					match(ID);
					}
					break;
				case 3:
					{
					setState(9006);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(9007);
					query_method();
					}
					break;
				}
				setState(9010);
				match(DOT);
				setState(9011);
				match(ROW);
				setState(9012);
				match(DOT);
				setState(9013);
				match(VALUE);
				setState(9014);
				match(LR_BRACKET);
				setState(9015);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(9016);
				match(COMMA);
				setState(9017);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(9018);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9023);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1229,_ctx) ) {
				case 1:
					{
					setState(9019);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(9020);
					match(ID);
					}
					break;
				case 3:
					{
					setState(9021);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(9022);
					query_method();
					}
					break;
				}
				setState(9025);
				match(DOT);
				setState(9026);
				match(PARAM_NODE);
				setState(9027);
				match(DOT);
				setState(9028);
				match(VALUE);
				setState(9029);
				match(LR_BRACKET);
				setState(9030);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(9031);
				match(COMMA);
				setState(9032);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(9033);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode QUERY() { return getToken(TSqlParser.QUERY, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode ROW() { return getToken(TSqlParser.ROW, 0); }
		public Query_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQuery_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQuery_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitQuery_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_methodContext query_method() throws RecognitionException {
		Query_methodContext _localctx = new Query_methodContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_query_method);
		try {
			setState(9058);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1233,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9039);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1231,_ctx) ) {
				case 1:
					{
					setState(9036);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(9037);
					match(ID);
					}
					break;
				case 3:
					{
					setState(9038);
					full_table_name();
					}
					break;
				}
				setState(9041);
				match(DOT);
				setState(9042);
				match(QUERY);
				setState(9043);
				match(LR_BRACKET);
				setState(9044);
				((Query_methodContext)_localctx).xquery = match(STRING);
				setState(9045);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9049);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1232,_ctx) ) {
				case 1:
					{
					setState(9046);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(9047);
					match(ID);
					}
					break;
				case 3:
					{
					setState(9048);
					full_table_name();
					}
					break;
				}
				setState(9051);
				match(DOT);
				setState(9052);
				match(ROW);
				setState(9053);
				match(DOT);
				setState(9054);
				match(QUERY);
				setState(9055);
				match(LR_BRACKET);
				setState(9056);
				((Query_methodContext)_localctx).xquery = match(STRING);
				setState(9057);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exist_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode EXIST() { return getToken(TSqlParser.EXIST, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Exist_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exist_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExist_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExist_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitExist_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exist_methodContext exist_method() throws RecognitionException {
		Exist_methodContext _localctx = new Exist_methodContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_exist_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9060);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9061);
			match(DOT);
			setState(9062);
			match(EXIST);
			setState(9063);
			match(LR_BRACKET);
			setState(9064);
			((Exist_methodContext)_localctx).xquery = match(STRING);
			setState(9065);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_methodContext extends ParserRuleContext {
		public Token xml_dml;
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Modify_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterModify_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitModify_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitModify_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_methodContext modify_method() throws RecognitionException {
		Modify_methodContext _localctx = new Modify_methodContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_modify_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9067);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9068);
			match(DOT);
			setState(9069);
			match(MODIFY);
			setState(9070);
			match(LR_BRACKET);
			setState(9071);
			((Modify_methodContext)_localctx).xml_dml = match(STRING);
			setState(9072);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nodes_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode NODES() { return getToken(TSqlParser.NODES, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Nodes_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodes_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNodes_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNodes_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitNodes_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nodes_methodContext nodes_method() throws RecognitionException {
		Nodes_methodContext _localctx = new Nodes_methodContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_nodes_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9074);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9075);
			match(DOT);
			setState(9076);
			match(NODES);
			setState(9077);
			match(LR_BRACKET);
			setState(9078);
			((Nodes_methodContext)_localctx).xquery = match(STRING);
			setState(9079);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(TSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(TSqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSwitch_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSwitch_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSwitch_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_sectionContext switch_section() throws RecognitionException {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_switch_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9081);
			match(WHEN);
			setState(9082);
			expression(0);
			setState(9083);
			match(THEN);
			setState(9084);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_search_condition_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(TSqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(TSqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_search_condition_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSwitch_search_condition_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSwitch_search_condition_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSwitch_search_condition_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_search_condition_sectionContext switch_search_condition_section() throws RecognitionException {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_switch_search_condition_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9086);
			match(WHEN);
			setState(9087);
			search_condition();
			setState(9088);
			match(THEN);
			setState(9089);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_column_aliasContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAs_column_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAs_column_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAs_column_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_column_aliasContext as_column_alias() throws RecognitionException {
		As_column_aliasContext _localctx = new As_column_aliasContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_as_column_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9092);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(9091);
				match(AS);
				}
			}

			setState(9094);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_table_aliasContext extends ParserRuleContext {
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAs_table_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAs_table_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAs_table_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_table_aliasContext as_table_alias() throws RecognitionException {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_as_table_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(9096);
				match(AS);
				}
			}

			setState(9099);
			table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9101);
			id();
			setState(9103);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1236,_ctx) ) {
			case 1:
				{
				setState(9102);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_table_hintsContext extends ParserRuleContext {
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public With_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_table_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWith_table_hints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWith_table_hints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitWith_table_hints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_table_hintsContext with_table_hints() throws RecognitionException {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9105);
				match(WITH);
				}
			}

			setState(9108);
			match(LR_BRACKET);
			setState(9109);
			table_hint();
			setState(9116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (SERIALIZABLE - 706)) | (1L << (SNAPSHOT - 706)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 706)))) != 0) || _la==ID || _la==COMMA) {
				{
				{
				setState(9111);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9110);
					match(COMMA);
					}
				}

				setState(9113);
				table_hint();
				}
				}
				setState(9118);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9119);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_with_table_hintsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_with_table_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterInsert_with_table_hints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitInsert_with_table_hints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitInsert_with_table_hints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_with_table_hintsContext insert_with_table_hints() throws RecognitionException {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_insert_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9121);
			match(WITH);
			setState(9122);
			match(LR_BRACKET);
			setState(9123);
			table_hint();
			setState(9130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (SERIALIZABLE - 706)) | (1L << (SNAPSHOT - 706)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 706)))) != 0) || _la==ID || _la==COMMA) {
				{
				{
				setState(9125);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9124);
					match(COMMA);
					}
				}

				setState(9127);
				table_hint();
				}
				}
				setState(9132);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9133);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_hintContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public List<Index_valueContext> index_value() {
			return getRuleContexts(Index_valueContext.class);
		}
		public Index_valueContext index_value(int i) {
			return getRuleContext(Index_valueContext.class,i);
		}
		public TerminalNode FORCESEEK() { return getToken(TSqlParser.FORCESEEK, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSqlParser.SNAPSHOT, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public List<TerminalNode> ID() { return getTokens(TSqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(TSqlParser.ID, i);
		}
		public TerminalNode NOEXPAND() { return getToken(TSqlParser.NOEXPAND, 0); }
		public Table_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_hint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTable_hint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_hintContext table_hint() throws RecognitionException {
		Table_hintContext _localctx = new Table_hintContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_table_hint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOEXPAND) {
				{
				setState(9135);
				match(NOEXPAND);
				}
			}

			setState(9176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1246,_ctx) ) {
			case 1:
				{
				setState(9138);
				match(INDEX);
				setState(9139);
				match(LR_BRACKET);
				setState(9140);
				index_value();
				setState(9145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9141);
					match(COMMA);
					setState(9142);
					index_value();
					}
					}
					setState(9147);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9148);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(9150);
				match(INDEX);
				setState(9151);
				match(EQUAL);
				setState(9152);
				index_value();
				}
				break;
			case 3:
				{
				setState(9153);
				match(FORCESEEK);
				setState(9168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(9154);
					match(LR_BRACKET);
					setState(9155);
					index_value();
					setState(9156);
					match(LR_BRACKET);
					setState(9157);
					match(ID);
					setState(9162);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(9158);
						match(COMMA);
						setState(9159);
						match(ID);
						}
						}
						setState(9164);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(9165);
					match(RR_BRACKET);
					setState(9166);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				{
				setState(9170);
				match(SERIALIZABLE);
				}
				break;
			case 5:
				{
				setState(9171);
				match(SNAPSHOT);
				}
				break;
			case 6:
				{
				setState(9172);
				match(SPATIAL_WINDOW_MAX_CELLS);
				setState(9173);
				match(EQUAL);
				setState(9174);
				match(DECIMAL);
				}
				break;
			case 7:
				{
				setState(9175);
				match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_valueContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIndex_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIndex_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitIndex_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_valueContext index_value() throws RecognitionException {
		Index_valueContext _localctx = new Index_valueContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_index_value);
		try {
			setState(9180);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(9178);
				id();
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(9179);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_alias_listContext extends ParserRuleContext {
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_alias_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_alias_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitColumn_alias_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_alias_listContext column_alias_list() throws RecognitionException {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_column_alias_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9182);
			match(LR_BRACKET);
			setState(9183);
			column_alias();
			setState(9188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9184);
				match(COMMA);
				setState(9185);
				column_alias();
				}
				}
				setState(9190);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9191);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_column_alias);
		try {
			setState(9195);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(9193);
				id();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(9194);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructorContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_value_constructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_value_constructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTable_value_constructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_value_constructorContext table_value_constructor() throws RecognitionException {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_table_value_constructor);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9197);
			match(VALUES);
			setState(9198);
			match(LR_BRACKET);
			setState(9199);
			expression_list();
			setState(9200);
			match(RR_BRACKET);
			setState(9208);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1250,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9201);
					match(COMMA);
					setState(9202);
					match(LR_BRACKET);
					setState(9203);
					expression_list();
					setState(9204);
					match(RR_BRACKET);
					}
					} 
				}
				setState(9210);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1250,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9211);
			expression(0);
			setState(9216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9212);
				match(COMMA);
				setState(9213);
				expression(0);
				}
				}
				setState(9218);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ranking_windowed_functionContext extends ParserRuleContext {
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode RANK() { return getToken(TSqlParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(TSqlParser.DENSE_RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(TSqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTILE() { return getToken(TSqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ranking_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRanking_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRanking_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitRanking_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ranking_windowed_functionContext ranking_windowed_function() throws RecognitionException {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_ranking_windowed_function);
		int _la;
		try {
			setState(9229);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(9219);
				_la = _input.LA(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9220);
				match(LR_BRACKET);
				setState(9221);
				match(RR_BRACKET);
				setState(9222);
				over_clause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9223);
				match(NTILE);
				setState(9224);
				match(LR_BRACKET);
				setState(9225);
				expression(0);
				setState(9226);
				match(RR_BRACKET);
				setState(9227);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_windowed_functionContext extends ParserRuleContext {
		public All_distinct_expressionContext all_distinct_expression() {
			return getRuleContext(All_distinct_expressionContext.class,0);
		}
		public TerminalNode AVG() { return getToken(TSqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(TSqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(TSqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(TSqlParser.SUM, 0); }
		public TerminalNode STDEV() { return getToken(TSqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(TSqlParser.STDEVP, 0); }
		public TerminalNode VAR() { return getToken(TSqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(TSqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(TSqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(TSqlParser.COUNT_BIG, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(TSqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode GROUPING() { return getToken(TSqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode GROUPING_ID() { return getToken(TSqlParser.GROUPING_ID, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAggregate_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAggregate_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAggregate_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_windowed_functionContext aggregate_windowed_function() throws RecognitionException {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_aggregate_windowed_function);
		int _la;
		try {
			setState(9263);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case STDEV:
			case STDEVP:
			case SUM:
			case VAR:
			case VARP:
				enterOuterAlt(_localctx, 1);
				{
				setState(9231);
				_la = _input.LA(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 721)) & ~0x3f) == 0 && ((1L << (_la - 721)) & ((1L << (STDEV - 721)) | (1L << (STDEVP - 721)) | (1L << (SUM - 721)) | (1L << (VAR - 721)) | (1L << (VARP - 721)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9232);
				match(LR_BRACKET);
				setState(9233);
				all_distinct_expression();
				setState(9234);
				match(RR_BRACKET);
				setState(9236);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1253,_ctx) ) {
				case 1:
					{
					setState(9235);
					over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
			case COUNT_BIG:
				enterOuterAlt(_localctx, 2);
				{
				setState(9238);
				_la = _input.LA(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9239);
				match(LR_BRACKET);
				setState(9242);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(9240);
					match(STAR);
					}
					break;
				case ALL:
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case DISTINCT:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case STATE:
				case SYSTEM_USER:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLY:
				case ARITHABORT:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STUFF:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(9241);
					all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9244);
				match(RR_BRACKET);
				setState(9246);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1255,_ctx) ) {
				case 1:
					{
					setState(9245);
					over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				enterOuterAlt(_localctx, 3);
				{
				setState(9248);
				match(CHECKSUM_AGG);
				setState(9249);
				match(LR_BRACKET);
				setState(9250);
				all_distinct_expression();
				setState(9251);
				match(RR_BRACKET);
				}
				break;
			case GROUPING:
				enterOuterAlt(_localctx, 4);
				{
				setState(9253);
				match(GROUPING);
				setState(9254);
				match(LR_BRACKET);
				setState(9255);
				expression(0);
				setState(9256);
				match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				enterOuterAlt(_localctx, 5);
				{
				setState(9258);
				match(GROUPING_ID);
				setState(9259);
				match(LR_BRACKET);
				setState(9260);
				expression_list();
				setState(9261);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analytic_windowed_functionContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode FIRST_VALUE() { return getToken(TSqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(TSqlParser.LAST_VALUE, 0); }
		public TerminalNode LAG() { return getToken(TSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(TSqlParser.LEAD, 0); }
		public Analytic_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analytic_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAnalytic_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAnalytic_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAnalytic_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analytic_windowed_functionContext analytic_windowed_function() throws RecognitionException {
		Analytic_windowed_functionContext _localctx = new Analytic_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_analytic_windowed_function);
		int _la;
		try {
			setState(9285);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9265);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9266);
				match(LR_BRACKET);
				setState(9267);
				expression(0);
				setState(9268);
				match(RR_BRACKET);
				setState(9269);
				over_clause();
				}
				break;
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 2);
				{
				setState(9271);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9272);
				match(LR_BRACKET);
				setState(9273);
				expression(0);
				setState(9280);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9274);
					match(COMMA);
					setState(9275);
					expression(0);
					setState(9278);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(9276);
						match(COMMA);
						setState(9277);
						expression(0);
						}
					}

					}
				}

				setState(9282);
				match(RR_BRACKET);
				setState(9283);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_distinct_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(TSqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_distinct_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAll_distinct_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAll_distinct_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAll_distinct_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_distinct_expressionContext all_distinct_expression() throws RecognitionException {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_all_distinct_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9288);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(9287);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9290);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(TSqlParser.OVER, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return getRuleContext(Row_or_range_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9292);
			match(OVER);
			setState(9293);
			match(LR_BRACKET);
			setState(9297);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(9294);
				match(PARTITION);
				setState(9295);
				match(BY);
				setState(9296);
				expression_list();
				}
			}

			setState(9300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(9299);
				order_by_clause();
				}
			}

			setState(9303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(9302);
				row_or_range_clause();
				}
			}

			setState(9305);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_range_clauseContext extends ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return getRuleContext(Window_frame_extentContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(TSqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(TSqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_range_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRow_or_range_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRow_or_range_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitRow_or_range_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_or_range_clauseContext row_or_range_clause() throws RecognitionException {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_row_or_range_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9307);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9308);
			window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_extentContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(TSqlParser.BETWEEN, 0); }
		public List<Window_frame_boundContext> window_frame_bound() {
			return getRuleContexts(Window_frame_boundContext.class);
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return getRuleContext(Window_frame_boundContext.class,i);
		}
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_extent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWindow_frame_extent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWindow_frame_extent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitWindow_frame_extent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_extentContext window_frame_extent() throws RecognitionException {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_window_frame_extent);
		try {
			setState(9316);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9310);
				window_frame_preceding();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(9311);
				match(BETWEEN);
				setState(9312);
				window_frame_bound();
				setState(9313);
				match(AND);
				setState(9314);
				window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_boundContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public Window_frame_followingContext window_frame_following() {
			return getRuleContext(Window_frame_followingContext.class,0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWindow_frame_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWindow_frame_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitWindow_frame_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_boundContext window_frame_bound() throws RecognitionException {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_window_frame_bound);
		try {
			setState(9320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1265,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9318);
				window_frame_preceding();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9319);
				window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_precedingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(TSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(TSqlParser.PRECEDING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(TSqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_preceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWindow_frame_preceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWindow_frame_preceding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitWindow_frame_preceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_precedingContext window_frame_preceding() throws RecognitionException {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_window_frame_preceding);
		try {
			setState(9328);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(9322);
				match(UNBOUNDED);
				setState(9323);
				match(PRECEDING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(9324);
				match(DECIMAL);
				setState(9325);
				match(PRECEDING);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(9326);
				match(CURRENT);
				setState(9327);
				match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_followingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(TSqlParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(TSqlParser.FOLLOWING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_following; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWindow_frame_following(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWindow_frame_following(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitWindow_frame_following(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_followingContext window_frame_following() throws RecognitionException {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_window_frame_following);
		try {
			setState(9334);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(9330);
				match(UNBOUNDED);
				setState(9331);
				match(FOLLOWING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(9332);
				match(DECIMAL);
				setState(9333);
				match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_database_optionContext extends ParserRuleContext {
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public List<Database_filestream_optionContext> database_filestream_option() {
			return getRuleContexts(Database_filestream_optionContext.class);
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return getRuleContext(Database_filestream_optionContext.class,i);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode DB_CHAINING() { return getToken(TSqlParser.DB_CHAINING, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(TSqlParser.TRUSTWORTHY, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_database_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_database_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCreate_database_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_database_optionContext create_database_option() throws RecognitionException {
		Create_database_optionContext _localctx = new Create_database_optionContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_create_database_option);
		int _la;
		try {
			int _alt;
			setState(9370);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESTREAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(9336);
				match(FILESTREAM);
				{
				setState(9337);
				database_filestream_option();
				setState(9342);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1268,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9338);
						match(COMMA);
						setState(9339);
						database_filestream_option();
						}
						} 
					}
					setState(9344);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1268,_ctx);
				}
				}
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9345);
				match(DEFAULT_LANGUAGE);
				setState(9346);
				match(EQUAL);
				setState(9349);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(9347);
					id();
					}
					break;
				case STRING:
					{
					setState(9348);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(9351);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(9352);
				match(EQUAL);
				setState(9355);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case TARGET:
				case ABSOLUTE:
				case ACTIVE:
				case ADDRESS:
				case APPLY:
				case AUTO:
				case AVAILABILITY:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNTER:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VALUE:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(9353);
					id();
					}
					break;
				case STRING:
					{
					setState(9354);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(9357);
				match(NESTED_TRIGGERS);
				setState(9358);
				match(EQUAL);
				setState(9359);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 5);
				{
				setState(9360);
				match(TRANSFORM_NOISE_WORDS);
				setState(9361);
				match(EQUAL);
				setState(9362);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 6);
				{
				setState(9363);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(9364);
				match(EQUAL);
				setState(9365);
				match(DECIMAL);
				}
				break;
			case DB_CHAINING:
				enterOuterAlt(_localctx, 7);
				{
				setState(9366);
				match(DB_CHAINING);
				setState(9367);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 8);
				{
				setState(9368);
				match(TRUSTWORTHY);
				setState(9369);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_filestream_optionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(TSqlParser.DIRECTORY_NAME, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_filestream_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDatabase_filestream_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDatabase_filestream_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDatabase_filestream_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_filestream_optionContext database_filestream_option() throws RecognitionException {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_database_filestream_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9372);
			match(LR_BRACKET);
			setState(9379);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NON_TRANSACTED_ACCESS:
				{
				{
				setState(9373);
				match(NON_TRANSACTED_ACCESS);
				setState(9374);
				match(EQUAL);
				setState(9375);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case DIRECTORY_NAME:
				{
				{
				setState(9376);
				match(DIRECTORY_NAME);
				setState(9377);
				match(EQUAL);
				setState(9378);
				match(STRING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9381);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_file_specContext extends ParserRuleContext {
		public File_groupContext file_group() {
			return getRuleContext(File_groupContext.class,0);
		}
		public File_specContext file_spec() {
			return getRuleContext(File_specContext.class,0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_file_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDatabase_file_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDatabase_file_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDatabase_file_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_file_specContext database_file_spec() throws RecognitionException {
		Database_file_specContext _localctx = new Database_file_specContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_database_file_spec);
		try {
			setState(9385);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILEGROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(9383);
				file_group();
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(9384);
				file_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_groupContext extends ParserRuleContext {
		public TerminalNode FILEGROUP() { return getToken(TSqlParser.FILEGROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<File_specContext> file_spec() {
			return getRuleContexts(File_specContext.class);
		}
		public File_specContext file_spec(int i) {
			return getRuleContext(File_specContext.class,i);
		}
		public List<TerminalNode> CONTAINS() { return getTokens(TSqlParser.CONTAINS); }
		public TerminalNode CONTAINS(int i) {
			return getToken(TSqlParser.CONTAINS, i);
		}
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public File_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFile_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_groupContext file_group() throws RecognitionException {
		File_groupContext _localctx = new File_groupContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_file_group);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9387);
			match(FILEGROUP);
			setState(9388);
			id();
			setState(9391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1274,_ctx) ) {
			case 1:
				{
				setState(9389);
				match(CONTAINS);
				setState(9390);
				match(FILESTREAM);
				}
				break;
			}
			setState(9394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(9393);
				match(DEFAULT);
				}
			}

			setState(9398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINS) {
				{
				setState(9396);
				match(CONTAINS);
				setState(9397);
				match(MEMORY_OPTIMIZED_DATA);
				}
			}

			setState(9400);
			file_spec();
			setState(9405);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1277,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9401);
					match(COMMA);
					setState(9402);
					file_spec();
					}
					} 
				}
				setState(9407);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1277,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_specContext extends ParserRuleContext {
		public Token file;
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode FILENAME() { return getToken(TSqlParser.FILENAME, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public List<File_sizeContext> file_size() {
			return getRuleContexts(File_sizeContext.class);
		}
		public File_sizeContext file_size(int i) {
			return getRuleContext(File_sizeContext.class,i);
		}
		public TerminalNode MAXSIZE() { return getToken(TSqlParser.MAXSIZE, 0); }
		public TerminalNode FILEGROWTH() { return getToken(TSqlParser.FILEGROWTH, 0); }
		public TerminalNode UNLIMITED() { return getToken(TSqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFile_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_specContext file_spec() throws RecognitionException {
		File_specContext _localctx = new File_specContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_file_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9408);
			match(LR_BRACKET);
			setState(9409);
			match(NAME);
			setState(9410);
			match(EQUAL);
			setState(9413);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(9411);
				id();
				}
				break;
			case STRING:
				{
				setState(9412);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9416);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(9415);
				match(COMMA);
				}
			}

			setState(9418);
			match(FILENAME);
			setState(9419);
			match(EQUAL);
			setState(9420);
			((File_specContext)_localctx).file = match(STRING);
			setState(9422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(9421);
				match(COMMA);
				}
			}

			setState(9430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIZE) {
				{
				setState(9424);
				match(SIZE);
				setState(9425);
				match(EQUAL);
				setState(9426);
				file_size();
				setState(9428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9427);
					match(COMMA);
					}
				}

				}
			}

			setState(9441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAXSIZE) {
				{
				setState(9432);
				match(MAXSIZE);
				setState(9433);
				match(EQUAL);
				setState(9436);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(9434);
					file_size();
					}
					break;
				case UNLIMITED:
					{
					setState(9435);
					match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9439);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9438);
					match(COMMA);
					}
				}

				}
			}

			setState(9449);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILEGROWTH) {
				{
				setState(9443);
				match(FILEGROWTH);
				setState(9444);
				match(EQUAL);
				setState(9445);
				file_size();
				setState(9447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9446);
					match(COMMA);
					}
				}

				}
			}

			setState(9451);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_nameContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Entity_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEntity_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEntity_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitEntity_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Entity_nameContext entity_name() throws RecognitionException {
		Entity_nameContext _localctx = new Entity_nameContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_entity_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1289,_ctx) ) {
			case 1:
				{
				setState(9453);
				((Entity_nameContext)_localctx).server = id();
				setState(9454);
				match(DOT);
				setState(9455);
				((Entity_nameContext)_localctx).database = id();
				setState(9456);
				match(DOT);
				setState(9457);
				((Entity_nameContext)_localctx).schema = id();
				setState(9458);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(9460);
				((Entity_nameContext)_localctx).database = id();
				setState(9461);
				match(DOT);
				setState(9463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CALLED || _la==DATA_COMPRESSION || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
					{
					setState(9462);
					((Entity_nameContext)_localctx).schema = id();
					}
				}

				setState(9465);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(9467);
				((Entity_nameContext)_localctx).schema = id();
				setState(9468);
				match(DOT);
				}
				break;
			}
			setState(9472);
			((Entity_nameContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_name_for_azure_dwContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext object_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Entity_name_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name_for_azure_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEntity_name_for_azure_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEntity_name_for_azure_dw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitEntity_name_for_azure_dw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Entity_name_for_azure_dwContext entity_name_for_azure_dw() throws RecognitionException {
		Entity_name_for_azure_dwContext _localctx = new Entity_name_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_entity_name_for_azure_dw);
		try {
			setState(9479);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1290,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9474);
				((Entity_name_for_azure_dwContext)_localctx).schema = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9475);
				((Entity_name_for_azure_dwContext)_localctx).schema = id();
				setState(9476);
				match(DOT);
				setState(9477);
				((Entity_name_for_azure_dwContext)_localctx).object_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_name_for_parallel_dwContext extends ParserRuleContext {
		public IdContext schema_database;
		public IdContext schema;
		public IdContext object_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Entity_name_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name_for_parallel_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEntity_name_for_parallel_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEntity_name_for_parallel_dw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitEntity_name_for_parallel_dw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() throws RecognitionException {
		Entity_name_for_parallel_dwContext _localctx = new Entity_name_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_entity_name_for_parallel_dw);
		try {
			setState(9486);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1291,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9481);
				((Entity_name_for_parallel_dwContext)_localctx).schema_database = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9482);
				((Entity_name_for_parallel_dwContext)_localctx).schema = id();
				setState(9483);
				match(DOT);
				setState(9484);
				((Entity_name_for_parallel_dwContext)_localctx).object_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_table_nameContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFull_table_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFull_table_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFull_table_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_table_nameContext full_table_name() throws RecognitionException {
		Full_table_nameContext _localctx = new Full_table_nameContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_full_table_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9505);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1293,_ctx) ) {
			case 1:
				{
				setState(9488);
				((Full_table_nameContext)_localctx).server = id();
				setState(9489);
				match(DOT);
				setState(9490);
				((Full_table_nameContext)_localctx).database = id();
				setState(9491);
				match(DOT);
				setState(9492);
				((Full_table_nameContext)_localctx).schema = id();
				setState(9493);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(9495);
				((Full_table_nameContext)_localctx).database = id();
				setState(9496);
				match(DOT);
				setState(9498);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CALLED || _la==DATA_COMPRESSION || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
					{
					setState(9497);
					((Full_table_nameContext)_localctx).schema = id();
					}
				}

				setState(9500);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(9502);
				((Full_table_nameContext)_localctx).schema = id();
				setState(9503);
				match(DOT);
				}
				break;
			}
			setState(9507);
			((Full_table_nameContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitTable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_table_name);
		int _la;
		try {
			setState(9535);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1298,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9519);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1295,_ctx) ) {
				case 1:
					{
					setState(9509);
					((Table_nameContext)_localctx).database = id();
					setState(9510);
					match(DOT);
					setState(9512);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CALLED || _la==DATA_COMPRESSION || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
						{
						setState(9511);
						((Table_nameContext)_localctx).schema = id();
						}
					}

					setState(9514);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(9516);
					((Table_nameContext)_localctx).schema = id();
					setState(9517);
					match(DOT);
					}
					break;
				}
				setState(9521);
				((Table_nameContext)_localctx).table = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9532);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1297,_ctx) ) {
				case 1:
					{
					setState(9522);
					((Table_nameContext)_localctx).database = id();
					setState(9523);
					match(DOT);
					setState(9525);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CALLED || _la==DATA_COMPRESSION || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
						{
						setState(9524);
						((Table_nameContext)_localctx).schema = id();
						}
					}

					setState(9527);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(9529);
					((Table_nameContext)_localctx).schema = id();
					setState(9530);
					match(DOT);
					}
					break;
				}
				setState(9534);
				match(BLOCKING_HIERARCHY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_nameContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSimple_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSimple_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSimple_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_nameContext simple_name() throws RecognitionException {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_simple_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9540);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1299,_ctx) ) {
			case 1:
				{
				setState(9537);
				((Simple_nameContext)_localctx).schema = id();
				setState(9538);
				match(DOT);
				}
				break;
			}
			setState(9542);
			((Simple_nameContext)_localctx).name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_nameContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Func_proc_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunc_proc_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunc_proc_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFunc_proc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_proc_nameContext func_proc_name() throws RecognitionException {
		Func_proc_nameContext _localctx = new Func_proc_nameContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_func_proc_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1301,_ctx) ) {
			case 1:
				{
				setState(9544);
				((Func_proc_nameContext)_localctx).database = id();
				setState(9545);
				match(DOT);
				setState(9547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CALLED || _la==DATA_COMPRESSION || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
					{
					setState(9546);
					((Func_proc_nameContext)_localctx).schema = id();
					}
				}

				setState(9549);
				match(DOT);
				}
				break;
			case 2:
				{
				{
				setState(9551);
				((Func_proc_nameContext)_localctx).schema = id();
				}
				setState(9552);
				match(DOT);
				}
				break;
			}
			setState(9556);
			((Func_proc_nameContext)_localctx).procedure = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_objectContext extends ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_object; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDdl_object(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDdl_object(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDdl_object(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_objectContext ddl_object() throws RecognitionException {
		Ddl_objectContext _localctx = new Ddl_objectContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_ddl_object);
		try {
			setState(9560);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(9558);
				full_table_name();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(9559);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_nameContext extends ParserRuleContext {
		public IdContext column_name;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode STATUS() { return getToken(TSqlParser.STATUS, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode ARITHABORT() { return getToken(TSqlParser.ARITHABORT, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(TSqlParser.ANSI_NULLS, 0); }
		public Full_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFull_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFull_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFull_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_column_nameContext full_column_name() throws RecognitionException {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_full_column_name);
		int _la;
		try {
			setState(9610);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1311,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9565);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1303,_ctx) ) {
				case 1:
					{
					setState(9562);
					table_name();
					setState(9563);
					match(DOT);
					}
					break;
				}
				setState(9567);
				((Full_column_nameContext)_localctx).column_name = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (BLOCKING_HIERARCHY - 29)) | (1L << (CALLED - 29)) | (1L << (DATA_COMPRESSION - 29)))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
					{
					setState(9568);
					table_name();
					setState(9569);
					match(DOT);
					}
				}

				setState(9573);
				match(COMPATIBILITY_LEVEL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (BLOCKING_HIERARCHY - 29)) | (1L << (CALLED - 29)) | (1L << (DATA_COMPRESSION - 29)))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
					{
					setState(9574);
					table_name();
					setState(9575);
					match(DOT);
					}
				}

				setState(9579);
				match(STATUS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (BLOCKING_HIERARCHY - 29)) | (1L << (CALLED - 29)) | (1L << (DATA_COMPRESSION - 29)))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
					{
					setState(9580);
					table_name();
					setState(9581);
					match(DOT);
					}
				}

				setState(9585);
				match(QUOTED_IDENTIFIER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (BLOCKING_HIERARCHY - 29)) | (1L << (CALLED - 29)) | (1L << (DATA_COMPRESSION - 29)))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
					{
					setState(9586);
					table_name();
					setState(9587);
					match(DOT);
					}
				}

				setState(9591);
				match(ARITHABORT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9595);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (BLOCKING_HIERARCHY - 29)) | (1L << (CALLED - 29)) | (1L << (DATA_COMPRESSION - 29)))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
					{
					setState(9592);
					table_name();
					setState(9593);
					match(DOT);
					}
				}

				setState(9597);
				match(ANSI_WARNINGS);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (BLOCKING_HIERARCHY - 29)) | (1L << (CALLED - 29)) | (1L << (DATA_COMPRESSION - 29)))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
					{
					setState(9598);
					table_name();
					setState(9599);
					match(DOT);
					}
				}

				setState(9603);
				match(ANSI_PADDING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (BLOCKING_HIERARCHY - 29)) | (1L << (CALLED - 29)) | (1L << (DATA_COMPRESSION - 29)))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (DOUBLE_QUOTE_ID - 735)) | (1L << (SQUARE_BRACKET_ID - 735)) | (1L << (ID - 735)))) != 0)) {
					{
					setState(9604);
					table_name();
					setState(9605);
					match(DOT);
					}
				}

				setState(9609);
				match(ANSI_NULLS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_list_with_orderContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ASC() { return getTokens(TSqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(TSqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(TSqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(TSqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list_with_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_name_list_with_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_name_list_with_order(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitColumn_name_list_with_order(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_list_with_orderContext column_name_list_with_order() throws RecognitionException {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_column_name_list_with_order);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9612);
			id();
			setState(9614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(9613);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9616);
				match(COMMA);
				setState(9617);
				id();
				setState(9619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(9618);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				setState(9625);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitColumn_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9626);
			id();
			setState(9631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9627);
				match(COMMA);
				setState(9628);
				id();
				}
				}
				setState(9633);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_cursor_name);
		try {
			setState(9636);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(9634);
				id();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(9635);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_offContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_off; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOn_off(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOn_off(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitOn_off(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_offContext on_off() throws RecognitionException {
		On_offContext _localctx = new On_offContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_on_off);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9638);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusteredContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(TSqlParser.CLUSTERED, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(TSqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustered; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClustered(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClustered(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitClustered(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusteredContext clustered() throws RecognitionException {
		ClusteredContext _localctx = new ClusteredContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_clustered);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9640);
			_la = _input.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_notnullContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_notnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNull_notnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNull_notnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitNull_notnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_notnullContext null_notnull() throws RecognitionException {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_null_notnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9643);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(9642);
				match(NOT);
				}
			}

			setState(9645);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_or_defaultContext extends ParserRuleContext {
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public Null_or_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_or_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNull_or_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNull_or_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitNull_or_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_or_defaultContext null_or_default() throws RecognitionException {
		Null_or_defaultContext _localctx = new Null_or_defaultContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_null_or_default);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9654);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL:
				{
				setState(9647);
				null_notnull();
				}
				break;
			case DEFAULT:
				{
				setState(9648);
				match(DEFAULT);
				setState(9649);
				constant_expression();
				setState(9652);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1318,_ctx) ) {
				case 1:
					{
					setState(9650);
					match(WITH);
					setState(9651);
					match(VALUES);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_function_nameContext extends ParserRuleContext {
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode RIGHT() { return getToken(TSqlParser.RIGHT, 0); }
		public TerminalNode LEFT() { return getToken(TSqlParser.LEFT, 0); }
		public TerminalNode BINARY_CHECKSUM() { return getToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterScalar_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitScalar_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitScalar_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scalar_function_nameContext scalar_function_name() throws RecognitionException {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_scalar_function_name);
		try {
			setState(9661);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(9656);
				func_proc_name();
				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9657);
				match(RIGHT);
				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 3);
				{
				setState(9658);
				match(LEFT);
				}
				break;
			case BINARY_CHECKSUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(9659);
				match(BINARY_CHECKSUM);
				}
				break;
			case CHECKSUM:
				enterOuterAlt(_localctx, 5);
				{
				setState(9660);
				match(CHECKSUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_conversation_timerContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode TIMER() { return getToken(TSqlParser.TIMER, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public Begin_conversation_timerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_conversation_timer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBegin_conversation_timer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBegin_conversation_timer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitBegin_conversation_timer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Begin_conversation_timerContext begin_conversation_timer() throws RecognitionException {
		Begin_conversation_timerContext _localctx = new Begin_conversation_timerContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_begin_conversation_timer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9663);
			match(BEGIN);
			setState(9664);
			match(CONVERSATION);
			setState(9665);
			match(TIMER);
			setState(9666);
			match(LR_BRACKET);
			setState(9667);
			match(LOCAL_ID);
			setState(9668);
			match(RR_BRACKET);
			setState(9669);
			match(TIMEOUT);
			setState(9670);
			match(EQUAL);
			setState(9671);
			time();
			setState(9673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1321,_ctx) ) {
			case 1:
				{
				setState(9672);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_conversation_dialogContext extends ParserRuleContext {
		public Token dialog_handle;
		public Service_nameContext initiator_service_name;
		public Service_nameContext target_service_name;
		public Token service_broker_guid;
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode DIALOG() { return getToken(TSqlParser.DIALOG, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<TerminalNode> SERVICE() { return getTokens(TSqlParser.SERVICE); }
		public TerminalNode SERVICE(int i) {
			return getToken(TSqlParser.SERVICE, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return getRuleContext(Contract_nameContext.class,0);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public List<Service_nameContext> service_name() {
			return getRuleContexts(Service_nameContext.class);
		}
		public Service_nameContext service_name(int i) {
			return getRuleContext(Service_nameContext.class,i);
		}
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LIFETIME() { return getToken(TSqlParser.LIFETIME, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode RELATED_CONVERSATION() { return getToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public TerminalNode RELATED_CONVERSATION_GROUP() { return getToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Begin_conversation_dialogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_conversation_dialog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBegin_conversation_dialog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBegin_conversation_dialog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitBegin_conversation_dialog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Begin_conversation_dialogContext begin_conversation_dialog() throws RecognitionException {
		Begin_conversation_dialogContext _localctx = new Begin_conversation_dialogContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_begin_conversation_dialog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9675);
			match(BEGIN);
			setState(9676);
			match(DIALOG);
			setState(9678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERSATION) {
				{
				setState(9677);
				match(CONVERSATION);
				}
			}

			setState(9680);
			((Begin_conversation_dialogContext)_localctx).dialog_handle = match(LOCAL_ID);
			setState(9681);
			match(FROM);
			setState(9682);
			match(SERVICE);
			setState(9683);
			((Begin_conversation_dialogContext)_localctx).initiator_service_name = service_name();
			setState(9684);
			match(TO);
			setState(9685);
			match(SERVICE);
			setState(9686);
			((Begin_conversation_dialogContext)_localctx).target_service_name = service_name();
			setState(9689);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(9687);
				match(COMMA);
				setState(9688);
				((Begin_conversation_dialogContext)_localctx).service_broker_guid = match(STRING);
				}
			}

			setState(9691);
			match(ON);
			setState(9692);
			match(CONTRACT);
			setState(9693);
			contract_name();
			setState(9716);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1329,_ctx) ) {
			case 1:
				{
				setState(9694);
				match(WITH);
				setState(9701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) {
					{
					setState(9695);
					_la = _input.LA(1);
					if ( !(_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9696);
					match(EQUAL);
					setState(9697);
					match(LOCAL_ID);
					setState(9699);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(9698);
						match(COMMA);
						}
					}

					}
				}

				setState(9709);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIFETIME) {
					{
					setState(9703);
					match(LIFETIME);
					setState(9704);
					match(EQUAL);
					setState(9705);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9707);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(9706);
						match(COMMA);
						}
					}

					}
				}

				setState(9714);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1328,_ctx) ) {
				case 1:
					{
					setState(9711);
					match(ENCRYPTION);
					setState(9712);
					match(EQUAL);
					setState(9713);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			}
			setState(9719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1330,_ctx) ) {
			case 1:
				{
				setState(9718);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Contract_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Contract_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contract_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterContract_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitContract_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitContract_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Contract_nameContext contract_name() throws RecognitionException {
		Contract_nameContext _localctx = new Contract_nameContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_contract_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1331,_ctx) ) {
			case 1:
				{
				setState(9721);
				id();
				}
				break;
			case 2:
				{
				setState(9722);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Service_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterService_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitService_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitService_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Service_nameContext service_name() throws RecognitionException {
		Service_nameContext _localctx = new Service_nameContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_service_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1332,_ctx) ) {
			case 1:
				{
				setState(9725);
				id();
				}
				break;
			case 2:
				{
				setState(9726);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_conversationContext extends ParserRuleContext {
		public Token conversation_handle;
		public Token faliure_code;
		public Token failure_text;
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ERROR() { return getToken(TSqlParser.ERROR, 0); }
		public TerminalNode DESCRIPTION() { return getToken(TSqlParser.DESCRIPTION, 0); }
		public TerminalNode CLEANUP() { return getToken(TSqlParser.CLEANUP, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public End_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEnd_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEnd_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitEnd_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final End_conversationContext end_conversation() throws RecognitionException {
		End_conversationContext _localctx = new End_conversationContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_end_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9729);
			match(END);
			setState(9730);
			match(CONVERSATION);
			setState(9731);
			((End_conversationContext)_localctx).conversation_handle = match(LOCAL_ID);
			setState(9733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1333,_ctx) ) {
			case 1:
				{
				setState(9732);
				match(SEMI);
				}
				break;
			}
			setState(9747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1336,_ctx) ) {
			case 1:
				{
				setState(9735);
				match(WITH);
				setState(9742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ERROR) {
					{
					setState(9736);
					match(ERROR);
					setState(9737);
					match(EQUAL);
					setState(9738);
					((End_conversationContext)_localctx).faliure_code = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((End_conversationContext)_localctx).faliure_code = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9739);
					match(DESCRIPTION);
					setState(9740);
					match(EQUAL);
					setState(9741);
					((End_conversationContext)_localctx).failure_text = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((End_conversationContext)_localctx).failure_text = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLEANUP) {
					{
					setState(9744);
					match(CLEANUP);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Waitfor_conversationContext extends ParserRuleContext {
		public TimeContext timeout;
		public Get_conversationContext get_conversation() {
			return getRuleContext(Get_conversationContext.class,0);
		}
		public TerminalNode WAITFOR() { return getToken(TSqlParser.WAITFOR, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public Waitfor_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitfor_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWaitfor_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWaitfor_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitWaitfor_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Waitfor_conversationContext waitfor_conversation() throws RecognitionException {
		Waitfor_conversationContext _localctx = new Waitfor_conversationContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_waitfor_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9750);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAITFOR) {
				{
				setState(9749);
				match(WAITFOR);
				}
			}

			setState(9752);
			match(LR_BRACKET);
			setState(9753);
			get_conversation();
			setState(9754);
			match(RR_BRACKET);
			setState(9760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TIMEOUT || _la==COMMA) {
				{
				setState(9756);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9755);
					match(COMMA);
					}
				}

				setState(9758);
				match(TIMEOUT);
				setState(9759);
				((Waitfor_conversationContext)_localctx).timeout = time();
				}
			}

			setState(9763);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1340,_ctx) ) {
			case 1:
				{
				setState(9762);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_conversationContext extends ParserRuleContext {
		public Token conversation_group_id;
		public Queue_idContext queue;
		public TerminalNode GET() { return getToken(TSqlParser.GET, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Queue_idContext queue_id() {
			return getRuleContext(Queue_idContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Get_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGet_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGet_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitGet_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_conversationContext get_conversation() throws RecognitionException {
		Get_conversationContext _localctx = new Get_conversationContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_get_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9765);
			match(GET);
			setState(9766);
			match(CONVERSATION);
			setState(9767);
			match(GROUP);
			setState(9768);
			((Get_conversationContext)_localctx).conversation_group_id = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				((Get_conversationContext)_localctx).conversation_group_id = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9769);
			match(FROM);
			setState(9770);
			((Get_conversationContext)_localctx).queue = queue_id();
			setState(9772);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1341,_ctx) ) {
			case 1:
				{
				setState(9771);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_idContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Queue_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQueue_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQueue_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitQueue_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_idContext queue_id() throws RecognitionException {
		Queue_idContext _localctx = new Queue_idContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_queue_id);
		try {
			setState(9781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1342,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(9774);
				((Queue_idContext)_localctx).database_name = id();
				setState(9775);
				match(DOT);
				setState(9776);
				((Queue_idContext)_localctx).schema_name = id();
				setState(9777);
				match(DOT);
				setState(9778);
				((Queue_idContext)_localctx).name = id();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9780);
				id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Send_conversationContext extends ParserRuleContext {
		public Token conversation_handle;
		public ExpressionContext message_type_name;
		public Token message_body_expression;
		public TerminalNode SEND() { return getToken(TSqlParser.SEND, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public Send_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_send_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSend_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSend_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSend_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Send_conversationContext send_conversation() throws RecognitionException {
		Send_conversationContext _localctx = new Send_conversationContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_send_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9783);
			match(SEND);
			setState(9784);
			match(ON);
			setState(9785);
			match(CONVERSATION);
			setState(9786);
			((Send_conversationContext)_localctx).conversation_handle = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				((Send_conversationContext)_localctx).conversation_handle = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9787);
			match(MESSAGE);
			setState(9788);
			match(TYPE);
			setState(9789);
			((Send_conversationContext)_localctx).message_type_name = expression(0);
			setState(9793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1343,_ctx) ) {
			case 1:
				{
				setState(9790);
				match(LR_BRACKET);
				setState(9791);
				((Send_conversationContext)_localctx).message_body_expression = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOCAL_ID || _la==STRING) ) {
					((Send_conversationContext)_localctx).message_body_expression = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9792);
				match(RR_BRACKET);
				}
				break;
			}
			setState(9796);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1344,_ctx) ) {
			case 1:
				{
				setState(9795);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode MAX() { return getToken(TSqlParser.MAX, 0); }
		public TerminalNode INT() { return getToken(TSqlParser.INT, 0); }
		public TerminalNode TINYINT() { return getToken(TSqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(TSqlParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(TSqlParser.BIGINT, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitData_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitData_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_data_type);
		int _la;
		try {
			setState(9815);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(9798);
				id();
				setState(9800);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1345,_ctx) ) {
				case 1:
					{
					setState(9799);
					match(IDENTITY);
					}
					break;
				}
				setState(9809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1347,_ctx) ) {
				case 1:
					{
					setState(9802);
					match(LR_BRACKET);
					setState(9803);
					_la = _input.LA(1);
					if ( !(_la==MAX || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9806);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(9804);
						match(COMMA);
						setState(9805);
						match(DECIMAL);
						}
					}

					setState(9808);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9811);
				match(INT);
				}
				break;
			case TINYINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(9812);
				match(TINYINT);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(9813);
				match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 5);
				{
				setState(9814);
				match(BIGINT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_valueContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDefault_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDefault_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitDefault_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_valueContext default_value() throws RecognitionException {
		Default_valueContext _localctx = new Default_valueContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_default_value);
		try {
			setState(9820);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9817);
				match(NULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9818);
				match(DEFAULT);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(9819);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token dollar;
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode REAL() { return getToken(TSqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(TSqlParser.FLOAT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_constant);
		int _la;
		try {
			setState(9837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1353,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9822);
				match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9823);
				match(BINARY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9825);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(9824);
					sign();
					}
				}

				setState(9827);
				match(DECIMAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(9828);
					sign();
					}
				}

				setState(9831);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(9832);
					sign();
					}
				}

				setState(9835);
				((ConstantContext)_localctx).dollar = match(DOLLAR);
				setState(9836);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9839);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public TerminalNode SQUARE_BRACKET_ID() { return getToken(TSqlParser.SQUARE_BRACKET_ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_id);
		try {
			setState(9844);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case TARGET:
			case ABSOLUTE:
			case ACTIVE:
			case ADDRESS:
			case APPLY:
			case AUTO:
			case AVAILABILITY:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNTER:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VALUE:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(9841);
				simple_id();
				}
				break;
			case DOUBLE_QUOTE_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(9842);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(9843);
				match(SQUARE_BRACKET_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_idContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public TerminalNode ABSOLUTE() { return getToken(TSqlParser.ABSOLUTE, 0); }
		public TerminalNode ACTIVE() { return getToken(TSqlParser.ACTIVE, 0); }
		public TerminalNode ADDRESS() { return getToken(TSqlParser.ADDRESS, 0); }
		public TerminalNode APPLY() { return getToken(TSqlParser.APPLY, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode AVG() { return getToken(TSqlParser.AVG, 0); }
		public TerminalNode CALLED() { return getToken(TSqlParser.CALLED, 0); }
		public TerminalNode CALLER() { return getToken(TSqlParser.CALLER, 0); }
		public TerminalNode CAST() { return getToken(TSqlParser.CAST, 0); }
		public TerminalNode CATCH() { return getToken(TSqlParser.CATCH, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(TSqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode COMMITTED() { return getToken(TSqlParser.COMMITTED, 0); }
		public TerminalNode CONCAT() { return getToken(TSqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode CONTROL() { return getToken(TSqlParser.CONTROL, 0); }
		public TerminalNode COOKIE() { return getToken(TSqlParser.COOKIE, 0); }
		public TerminalNode COUNT() { return getToken(TSqlParser.COUNT, 0); }
		public TerminalNode COUNTER() { return getToken(TSqlParser.COUNTER, 0); }
		public TerminalNode COUNT_BIG() { return getToken(TSqlParser.COUNT_BIG, 0); }
		public TerminalNode DATA_COMPRESSION() { return getToken(TSqlParser.DATA_COMPRESSION, 0); }
		public TerminalNode DELAY() { return getToken(TSqlParser.DELAY, 0); }
		public TerminalNode DELETED() { return getToken(TSqlParser.DELETED, 0); }
		public TerminalNode DENSE_RANK() { return getToken(TSqlParser.DENSE_RANK, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode DYNAMIC() { return getToken(TSqlParser.DYNAMIC, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode EVENTDATA() { return getToken(TSqlParser.EVENTDATA, 0); }
		public TerminalNode EXPAND() { return getToken(TSqlParser.EXPAND, 0); }
		public TerminalNode FAST() { return getToken(TSqlParser.FAST, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(TSqlParser.FAST_FORWARD, 0); }
		public TerminalNode FILENAME() { return getToken(TSqlParser.FILENAME, 0); }
		public TerminalNode FILLFACTOR() { return getToken(TSqlParser.FILLFACTOR, 0); }
		public TerminalNode FIRST() { return getToken(TSqlParser.FIRST, 0); }
		public TerminalNode FOLLOWING() { return getToken(TSqlParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public TerminalNode FORCESEEK() { return getToken(TSqlParser.FORCESEEK, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(TSqlParser.FORWARD_ONLY, 0); }
		public TerminalNode FULLSCAN() { return getToken(TSqlParser.FULLSCAN, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode GROUPING() { return getToken(TSqlParser.GROUPING, 0); }
		public TerminalNode GROUPING_ID() { return getToken(TSqlParser.GROUPING_ID, 0); }
		public TerminalNode HASH() { return getToken(TSqlParser.HASH, 0); }
		public TerminalNode IMPERSONATE() { return getToken(TSqlParser.IMPERSONATE, 0); }
		public TerminalNode INSENSITIVE() { return getToken(TSqlParser.INSENSITIVE, 0); }
		public TerminalNode INSERTED() { return getToken(TSqlParser.INSERTED, 0); }
		public TerminalNode ISOLATION() { return getToken(TSqlParser.ISOLATION, 0); }
		public TerminalNode KEEP() { return getToken(TSqlParser.KEEP, 0); }
		public TerminalNode KEEPFIXED() { return getToken(TSqlParser.KEEPFIXED, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public TerminalNode KEYSET() { return getToken(TSqlParser.KEYSET, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode INPUT() { return getToken(TSqlParser.INPUT, 0); }
		public TerminalNode LAST() { return getToken(TSqlParser.LAST, 0); }
		public TerminalNode LEVEL() { return getToken(TSqlParser.LEVEL, 0); }
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(TSqlParser.LOCATION, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(TSqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode LOOP() { return getToken(TSqlParser.LOOP, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode MARK() { return getToken(TSqlParser.MARK, 0); }
		public TerminalNode MAX() { return getToken(TSqlParser.MAX, 0); }
		public TerminalNode MAXDOP() { return getToken(TSqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(TSqlParser.MAXRECURSION, 0); }
		public TerminalNode MAX_ROLLOVER_FILES() { return getToken(TSqlParser.MAX_ROLLOVER_FILES, 0); }
		public TerminalNode MAX_MEMORY() { return getToken(TSqlParser.MAX_MEMORY, 0); }
		public TerminalNode MIN() { return getToken(TSqlParser.MIN, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public TerminalNode NOCOUNT() { return getToken(TSqlParser.NOCOUNT, 0); }
		public TerminalNode NOEXPAND() { return getToken(TSqlParser.NOEXPAND, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(TSqlParser.NORECOMPUTE, 0); }
		public TerminalNode NTILE() { return getToken(TSqlParser.NTILE, 0); }
		public TerminalNode NUMBER() { return getToken(TSqlParser.NUMBER, 0); }
		public TerminalNode OFFSET() { return getToken(TSqlParser.OFFSET, 0); }
		public TerminalNode OFFSETS() { return getToken(TSqlParser.OFFSETS, 0); }
		public TerminalNode ONLINE() { return getToken(TSqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(TSqlParser.OPTIMISTIC, 0); }
		public TerminalNode OPTIMIZE() { return getToken(TSqlParser.OPTIMIZE, 0); }
		public TerminalNode OUT() { return getToken(TSqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public TerminalNode PAGE() { return getToken(TSqlParser.PAGE, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(TSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode PRECEDING() { return getToken(TSqlParser.PRECEDING, 0); }
		public TerminalNode PRIOR() { return getToken(TSqlParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(TSqlParser.PRIVILEGES, 0); }
		public TerminalNode PUBLIC() { return getToken(TSqlParser.PUBLIC, 0); }
		public TerminalNode RANGE() { return getToken(TSqlParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(TSqlParser.RANK, 0); }
		public TerminalNode RAW() { return getToken(TSqlParser.RAW, 0); }
		public TerminalNode READONLY() { return getToken(TSqlParser.READONLY, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSqlParser.RECOMPILE, 0); }
		public TerminalNode RELATIVE() { return getToken(TSqlParser.RELATIVE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode REPEATABLE() { return getToken(TSqlParser.REPEATABLE, 0); }
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public TerminalNode ROBUST() { return getToken(TSqlParser.ROBUST, 0); }
		public TerminalNode ROOT() { return getToken(TSqlParser.ROOT, 0); }
		public TerminalNode ROW() { return getToken(TSqlParser.ROW, 0); }
		public TerminalNode ROWCOUNT() { return getToken(TSqlParser.ROWCOUNT, 0); }
		public TerminalNode ROWGUID() { return getToken(TSqlParser.ROWGUID, 0); }
		public TerminalNode ROWS() { return getToken(TSqlParser.ROWS, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(TSqlParser.ROW_NUMBER, 0); }
		public TerminalNode SAFETY() { return getToken(TSqlParser.SAFETY, 0); }
		public TerminalNode SAMPLE() { return getToken(TSqlParser.SAMPLE, 0); }
		public TerminalNode SID() { return getToken(TSqlParser.SID, 0); }
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public TerminalNode SCROLL() { return getToken(TSqlParser.SCROLL, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(TSqlParser.SCROLL_LOCKS, 0); }
		public TerminalNode SELF() { return getToken(TSqlParser.SELF, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSqlParser.SNAPSHOT, 0); }
		public TerminalNode SOURCE() { return getToken(TSqlParser.SOURCE, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode STATIC() { return getToken(TSqlParser.STATIC, 0); }
		public TerminalNode STATS_STREAM() { return getToken(TSqlParser.STATS_STREAM, 0); }
		public TerminalNode STDEV() { return getToken(TSqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(TSqlParser.STDEVP, 0); }
		public TerminalNode SUM() { return getToken(TSqlParser.SUM, 0); }
		public TerminalNode TARGET() { return getToken(TSqlParser.TARGET, 0); }
		public TerminalNode TEXTIMAGE_ON() { return getToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public TerminalNode THROW() { return getToken(TSqlParser.THROW, 0); }
		public TerminalNode TIES() { return getToken(TSqlParser.TIES, 0); }
		public TerminalNode TIME() { return getToken(TSqlParser.TIME, 0); }
		public TerminalNode TRY() { return getToken(TSqlParser.TRY, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(TSqlParser.TYPE_WARNING, 0); }
		public TerminalNode UNBOUNDED() { return getToken(TSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(TSqlParser.UNCOMMITTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(TSqlParser.UNKNOWN, 0); }
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public TerminalNode VAR() { return getToken(TSqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(TSqlParser.VARP, 0); }
		public TerminalNode VALUE() { return getToken(TSqlParser.VALUE, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(TSqlParser.VIEW_METADATA, 0); }
		public TerminalNode VIEWS() { return getToken(TSqlParser.VIEWS, 0); }
		public TerminalNode WORK() { return getToken(TSqlParser.WORK, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(TSqlParser.XMLNAMESPACES, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSimple_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSimple_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitSimple_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_idContext simple_id() throws RecognitionException {
		Simple_idContext _localctx = new Simple_idContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_simple_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9846);
			_la = _input.LA(1);
			if ( !(_la==CALLED || _la==DATA_COMPRESSION || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (EVENTDATA - 112)) | (1L << (FILENAME - 112)) | (1L << (FILLFACTOR - 112)) | (1L << (FORCESEEK - 112)) | (1L << (KEY - 112)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (MASTER - 186)) | (1L << (MAX_MEMORY - 186)) | (1L << (OFFSETS - 186)) | (1L << (PAGE - 186)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (PUBLIC - 258)) | (1L << (RAW - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNS - 258)) | (1L << (ROWCOUNT - 258)) | (1L << (SAFETY - 258)) | (1L << (SERVER - 258)) | (1L << (SID - 258)) | (1L << (SOURCE - 258)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (STATE - 328)) | (1L << (TARGET - 328)) | (1L << (ABSOLUTE - 328)) | (1L << (ACTIVE - 328)) | (1L << (ADDRESS - 328)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (APPLY - 403)) | (1L << (AUTO - 403)) | (1L << (AVAILABILITY - 403)) | (1L << (AVG - 403)) | (1L << (CALLER - 403)) | (1L << (CAST - 403)) | (1L << (CATCH - 403)) | (1L << (CHECKSUM_AGG - 403)) | (1L << (COMMITTED - 403)) | (1L << (CONCAT - 403)) | (1L << (CONCAT_NULL_YIELDS_NULL - 403)) | (1L << (CONTROL - 403)) | (1L << (COOKIE - 403)) | (1L << (COUNT - 403)) | (1L << (COUNTER - 403)) | (1L << (COUNT_BIG - 403)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (DELAY - 468)) | (1L << (DELETED - 468)) | (1L << (DENSE_RANK - 468)) | (1L << (DISABLE - 468)) | (1L << (DYNAMIC - 468)) | (1L << (ENCRYPTION - 468)) | (1L << (EXPAND - 468)) | (1L << (FAST - 468)) | (1L << (FAST_FORWARD - 468)) | (1L << (FIRST - 468)) | (1L << (FOLLOWING - 468)) | (1L << (FORCE - 468)) | (1L << (FORCED - 468)) | (1L << (FORWARD_ONLY - 468)) | (1L << (FULLSCAN - 468)) | (1L << (GLOBAL - 468)) | (1L << (GROUPING - 468)) | (1L << (GROUPING_ID - 468)) | (1L << (HASH - 468)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1L << (IMPERSONATE - 534)) | (1L << (INPUT - 534)) | (1L << (INSENSITIVE - 534)) | (1L << (INSERTED - 534)) | (1L << (ISOLATION - 534)) | (1L << (KEEP - 534)) | (1L << (KEEPFIXED - 534)) | (1L << (KEYSET - 534)) | (1L << (LAST - 534)) | (1L << (LEVEL - 534)) | (1L << (LOCAL - 534)) | (1L << (LOCATION - 534)) | (1L << (LOCK_ESCALATION - 534)) | (1L << (LOGIN - 534)) | (1L << (LOOP - 534)) | (1L << (MARK - 534)) | (1L << (MAX - 534)) | (1L << (MAX_ROLLOVER_FILES - 534)) | (1L << (MAXDOP - 534)) | (1L << (MAXRECURSION - 534)) | (1L << (MIN - 534)) | (1L << (MODIFY - 534)) | (1L << (NAME - 534)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (NEXT - 601)) | (1L << (NOCOUNT - 601)) | (1L << (NOEXPAND - 601)) | (1L << (NORECOMPUTE - 601)) | (1L << (NTILE - 601)) | (1L << (NUMBER - 601)) | (1L << (OFFSET - 601)) | (1L << (ONLINE - 601)) | (1L << (ONLY - 601)) | (1L << (OPTIMISTIC - 601)) | (1L << (OPTIMIZE - 601)) | (1L << (OUT - 601)) | (1L << (OUTPUT - 601)) | (1L << (OWNER - 601)) | (1L << (PARAMETERIZATION - 601)) | (1L << (PARTITION - 601)) | (1L << (PATH - 601)) | (1L << (PRECEDING - 601)) | (1L << (PRIOR - 601)) | (1L << (PRIVILEGES - 601)) | (1L << (RANGE - 601)) | (1L << (RANK - 601)) | (1L << (READONLY - 601)) | (1L << (READ_ONLY - 601)) | (1L << (RECOMPILE - 601)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (RELATIVE - 667)) | (1L << (REMOTE - 667)) | (1L << (REPEATABLE - 667)) | (1L << (ROBUST - 667)) | (1L << (ROOT - 667)) | (1L << (ROW - 667)) | (1L << (ROWGUID - 667)) | (1L << (ROWS - 667)) | (1L << (ROW_NUMBER - 667)) | (1L << (SAMPLE - 667)) | (1L << (SCHEMABINDING - 667)) | (1L << (SCROLL - 667)) | (1L << (SCROLL_LOCKS - 667)) | (1L << (SELF - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (SIMPLE - 667)) | (1L << (SIZE - 667)) | (1L << (SNAPSHOT - 667)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 667)) | (1L << (STATIC - 667)) | (1L << (STATS_STREAM - 667)) | (1L << (STDEV - 667)) | (1L << (STDEVP - 667)) | (1L << (SUM - 667)))) != 0) || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & ((1L << (TEXTIMAGE_ON - 735)) | (1L << (THROW - 735)) | (1L << (TIES - 735)) | (1L << (TIME - 735)) | (1L << (TRY - 735)) | (1L << (TYPE - 735)) | (1L << (TYPE_WARNING - 735)) | (1L << (UNBOUNDED - 735)) | (1L << (UNCOMMITTED - 735)) | (1L << (UNKNOWN - 735)) | (1L << (USING - 735)) | (1L << (VALUE - 735)) | (1L << (VAR - 735)) | (1L << (VARP - 735)) | (1L << (VIEWS - 735)) | (1L << (VIEW_METADATA - 735)) | (1L << (WORK - 735)) | (1L << (XML - 735)) | (1L << (XMLNAMESPACES - 735)) | (1L << (ID - 735)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_operatorContext extends ParserRuleContext {
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterComparison_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitComparison_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitComparison_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comparison_operatorContext comparison_operator() throws RecognitionException {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_comparison_operator);
		try {
			setState(9863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1355,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9848);
				match(EQUAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9849);
				match(GREATER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9850);
				match(LESS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9851);
				match(LESS);
				setState(9852);
				match(EQUAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9853);
				match(GREATER);
				setState(9854);
				match(EQUAL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9855);
				match(LESS);
				setState(9856);
				match(GREATER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9857);
				match(EXCLAMATION);
				setState(9858);
				match(EQUAL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9859);
				match(EXCLAMATION);
				setState(9860);
				match(GREATER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9861);
				match(EXCLAMATION);
				setState(9862);
				match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_operatorContext extends ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAssignment_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAssignment_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitAssignment_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_operatorContext assignment_operator() throws RecognitionException {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_assignment_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9865);
			_la = _input.LA(1);
			if ( !(((((_la - 789)) & ~0x3f) == 0 && ((1L << (_la - 789)) & ((1L << (PLUS_ASSIGN - 789)) | (1L << (MINUS_ASSIGN - 789)) | (1L << (MULT_ASSIGN - 789)) | (1L << (DIV_ASSIGN - 789)) | (1L << (MOD_ASSIGN - 789)) | (1L << (AND_ASSIGN - 789)) | (1L << (XOR_ASSIGN - 789)) | (1L << (OR_ASSIGN - 789)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_sizeContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode KB() { return getToken(TSqlParser.KB, 0); }
		public TerminalNode MB() { return getToken(TSqlParser.MB, 0); }
		public TerminalNode GB() { return getToken(TSqlParser.GB, 0); }
		public TerminalNode TB() { return getToken(TSqlParser.TB, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_size(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSqlParserVisitor ) return ((TSqlParserVisitor<? extends T>)visitor).visitFile_size(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_sizeContext file_size() throws RecognitionException {
		File_sizeContext _localctx = new File_sizeContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_file_size);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9867);
			match(DECIMAL);
			setState(9869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) {
				{
				setState(9868);
				_la = _input.LA(1);
				if ( !(_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 45:
			return assembly_option_sempred((Assembly_optionContext)_localctx, predIndex);
		case 346:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean assembly_option_sempred(Assembly_optionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 5);
		case 2:
			return precpred(_ctx, 4);
		case 3:
			return precpred(_ctx, 3);
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return precpred(_ctx, 10);
		}
		return true;
	}

	private static final int _serializedATNSegments = 5;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0332\u2692\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\3\2\7\2\u03ac"+
		"\n\2\f\2\16\2\u03af\13\2\3\2\3\2\3\3\3\3\7\3\u03b5\n\3\f\3\16\3\u03b8"+
		"\13\3\3\4\3\4\5\4\u03bc\n\4\6\4\u03be\n\4\r\4\16\4\u03bf\3\5\3\5\3\5\3"+
		"\5\3\5\3\5\5\5\u03c8\n\5\3\6\3\6\3\6\3\6\3\6\5\6\u03cf\n\6\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u046e\n\7"+
		"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u047c\n\b\3\t\3\t"+
		"\5\t\u0480\n\t\3\t\5\t\u0483\n\t\3\t\3\t\5\t\u0487\n\t\3\n\3\n\5\n\u048b"+
		"\n\n\3\13\3\13\5\13\u048f\n\13\3\f\3\f\3\f\5\f\u0494\n\f\3\f\3\f\3\f\5"+
		"\f\u0499\n\f\5\f\u049b\n\f\3\r\3\r\5\r\u049f\n\r\3\r\5\r\u04a2\n\r\3\16"+
		"\3\16\3\16\3\16\3\16\5\16\u04a9\n\16\3\16\5\16\u04ac\n\16\3\17\3\17\3"+
		"\17\3\17\3\17\3\17\3\17\5\17\u04b5\n\17\3\17\5\17\u04b8\n\17\3\20\3\20"+
		"\3\21\3\21\3\22\3\22\3\23\3\23\3\23\5\23\u04c3\n\23\3\23\5\23\u04c6\n"+
		"\23\3\23\3\23\3\23\5\23\u04cb\n\23\3\23\3\23\3\23\5\23\u04d0\n\23\3\23"+
		"\5\23\u04d3\n\23\3\23\3\23\3\23\5\23\u04d8\n\23\3\24\3\24\5\24\u04dc\n"+
		"\24\3\24\5\24\u04df\n\24\3\24\3\24\5\24\u04e3\n\24\3\24\5\24\u04e6\n\24"+
		"\3\24\5\24\u04e9\n\24\3\25\3\25\3\25\3\25\3\25\5\25\u04f0\n\25\3\25\3"+
		"\25\5\25\u04f4\n\25\5\25\u04f6\n\25\3\26\3\26\3\26\5\26\u04fb\n\26\3\27"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u0506\n\27\f\27\16\27\u0509"+
		"\13\27\3\27\3\27\3\27\5\27\u050e\n\27\3\27\5\27\u0511\n\27\3\30\3\30\3"+
		"\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0521"+
		"\n\31\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0529\n\32\3\32\3\32\3\32\5\32"+
		"\u052e\n\32\3\32\5\32\u0531\n\32\3\32\3\32\3\32\5\32\u0536\n\32\3\32\5"+
		"\32\u0539\n\32\3\32\3\32\3\32\5\32\u053e\n\32\3\33\3\33\3\33\3\33\3\33"+
		"\3\33\5\33\u0546\n\33\3\33\3\33\3\33\5\33\u054b\n\33\3\33\5\33\u054e\n"+
		"\33\3\33\3\33\3\33\5\33\u0553\n\33\3\34\3\34\3\34\3\34\5\34\u0559\n\34"+
		"\3\34\3\34\3\34\5\34\u055e\n\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\36"+
		"\3\36\3\36\3\36\3\37\3\37\3\37\3 \5 \u056f\n \3 \5 \u0572\n \3 \5 \u0575"+
		"\n \3 \5 \u0578\n \3!\3!\3!\5!\u057d\n!\3\"\3\"\3#\3#\3#\3$\3$\5$\u0586"+
		"\n$\3%\3%\3&\3&\3&\3\'\3\'\3\'\3\'\3(\3(\3(\3(\5(\u0595\n(\3)\3)\3*\3"+
		"*\3*\3+\3+\3,\3,\3,\3-\3-\3.\3.\3.\5.\u05a6\n.\3/\3/\3/\3/\3/\3/\3/\3"+
		"/\3/\5/\u05b1\n/\3/\3/\7/\u05b5\n/\f/\16/\u05b8\13/\3\60\3\60\3\60\3\60"+
		"\3\61\3\61\3\62\3\62\3\63\3\63\3\63\3\63\5\63\u05c6\n\63\3\64\3\64\3\65"+
		"\3\65\3\65\3\66\3\66\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u05d5\n\67\38"+
		"\38\39\39\39\39\39\59\u05de\n9\39\39\59\u05e2\n9\39\69\u05e5\n9\r9\16"+
		"9\u05e6\39\39\39\39\59\u05ed\n9\3:\3:\3:\3:\5:\u05f3\n:\3:\5:\u05f6\n"+
		":\3:\6:\u05f9\n:\r:\16:\u05fa\3:\3:\3:\5:\u0600\n:\3;\3;\3;\3;\3;\3;\5"+
		";\u0608\n;\3<\3<\3<\3<\3=\3=\3=\3=\5=\u0612\n=\3=\3=\3>\3>\3>\3>\3>\3"+
		"?\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u0625\n?\3@\3@\3@\3@\3@\3@\5@\u062d\n"+
		"@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u063a\n@\5@\u063c\n@\3@\3@\3@\3"+
		"@\3@\3@\3@\3@\3@\3@\5@\u0648\n@\5@\u064a\n@\3@\3@\3@\3@\3@\5@\u0651\n"+
		"@\3A\3A\3A\3A\3A\3A\3A\5A\u065a\nA\3B\3B\3B\3B\5B\u0660\nB\3B\3B\3B\3"+
		"B\3C\3C\3C\5C\u0669\nC\3D\3D\3E\3E\3E\3F\3F\3F\3F\3G\3G\3G\3G\5G\u0678"+
		"\nG\3G\3G\3G\3G\3H\3H\3H\3H\5H\u0682\nH\3H\3H\3H\3H\3I\3I\3I\3I\5I\u068c"+
		"\nI\3I\3I\3I\3I\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J"+
		"\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u06b4\nJ\3K\3K\3K"+
		"\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u06cb\nK\3L"+
		"\3L\3M\3M\3N\3N\3N\3N\3N\3O\3O\3O\3P\3P\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3Q\3Q"+
		"\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u06ef\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q"+
		"\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0701\nQ\3Q\5Q\u0704\nQ\3Q\3Q\3Q\5Q\u0709\nQ"+
		"\3Q\5Q\u070c\nQ\3Q\3Q\3Q\5Q\u0711\nQ\3Q\5Q\u0714\nQ\3Q\3Q\3Q\5Q\u0719"+
		"\nQ\3Q\5Q\u071c\nQ\3Q\3Q\3Q\5Q\u0721\nQ\3Q\5Q\u0724\nQ\3Q\3Q\3Q\3Q\3Q"+
		"\3Q\5Q\u072c\nQ\3Q\5Q\u072f\nQ\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0737\nQ\3Q\3Q\3Q"+
		"\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0744\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u074f"+
		"\nQ\3Q\7Q\u0752\nQ\fQ\16Q\u0755\13Q\3Q\5Q\u0758\nQ\3Q\3Q\3Q\3Q\5Q\u075e"+
		"\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q"+
		"\u0775\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0781\nQ\3Q\3Q\3Q\3Q\3Q\3Q"+
		"\3Q\3Q\3Q\5Q\u078c\nQ\3Q\7Q\u078f\nQ\fQ\16Q\u0792\13Q\3Q\5Q\u0795\nQ\3"+
		"Q\3Q\3Q\3Q\5Q\u079b\nQ\5Q\u079d\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5"+
		"Q\u07aa\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\6"+
		"Q\u07bf\nQ\rQ\16Q\u07c0\3Q\3Q\3Q\3Q\3Q\5Q\u07c8\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3"+
		"Q\5Q\u07d1\nQ\3Q\3Q\3Q\5Q\u07d6\nQ\3Q\5Q\u07d9\nQ\3Q\3Q\3Q\5Q\u07de\n"+
		"Q\3Q\5Q\u07e1\nQ\3Q\3Q\3Q\5Q\u07e6\nQ\3Q\6Q\u07e9\nQ\rQ\16Q\u07ea\3Q\3"+
		"Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3"+
		"Q\3Q\5Q\u0807\nQ\3Q\3Q\3Q\3Q\3Q\5Q\u080e\nQ\3Q\6Q\u0811\nQ\rQ\16Q\u0812"+
		"\3Q\3Q\3Q\3Q\3Q\5Q\u081a\nQ\5Q\u081c\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q"+
		"\u0827\nQ\3Q\3Q\3Q\3Q\5Q\u082d\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q"+
		"\3Q\5Q\u083c\nQ\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u084a\nR\3R\5R"+
		"\u084d\nR\5R\u084f\nR\3R\3R\3R\5R\u0854\nR\3R\3R\5R\u0858\nR\3R\5R\u085b"+
		"\nR\5R\u085d\nR\3R\3R\3R\3R\5R\u0863\nR\3R\5R\u0866\nR\5R\u0868\nR\3R"+
		"\3R\3R\3R\5R\u086e\nR\5R\u0870\nR\3R\3R\3S\3S\3S\3S\3S\3T\3T\3T\3T\3T"+
		"\3T\3T\3T\3T\3T\3T\3T\3T\5T\u0886\nT\3T\3T\3T\3T\3T\3T\5T\u088e\nT\3T"+
		"\3T\3T\3T\3T\3T\5T\u0896\nT\6T\u0898\nT\rT\16T\u0899\3T\3T\3T\3T\3T\3"+
		"T\3T\5T\u08a3\nT\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3"+
		"U\3U\5U\u08b8\nU\3U\3U\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u08c5\nV\3V\3V\3"+
		"V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u08d4\nV\6V\u08d6\nV\rV\16V\u08d7\3"+
		"W\3W\3W\3W\3X\3X\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3[\3[\3[\3"+
		"[\3\\\3\\\3\\\3\\\3\\\3]\3]\3]\3]\5]\u08fb\n]\3]\5]\u08fe\n]\3]\6]\u0901"+
		"\n]\r]\16]\u0902\3^\3^\3^\3^\3^\3^\3_\3_\3_\3_\3_\3_\3`\3`\3`\3`\5`\u0915"+
		"\n`\3`\5`\u0918\n`\3`\3`\3`\5`\u091d\n`\3`\3`\3a\3a\3a\3a\3b\3b\3b\3b"+
		"\3b\3b\3c\3c\3c\3c\3c\3c\3d\3d\3d\3d\3d\3d\5d\u0937\nd\3e\3e\3e\3e\3e"+
		"\3e\3f\3f\3f\3f\3f\3f\5f\u0945\nf\3f\3f\3f\5f\u094a\nf\3f\3f\3g\3g\3g"+
		"\3g\5g\u0952\ng\3g\6g\u0955\ng\rg\16g\u0956\3g\3g\3g\3g\3g\5g\u095e\n"+
		"g\3h\3h\3h\3h\3h\3h\3h\3i\3i\3i\3i\3i\3j\3j\3j\3j\3j\3j\3j\5j\u0973\n"+
		"j\3j\3j\3k\3k\3k\3k\3k\3l\3l\3l\3l\3m\3m\3m\3m\3n\3n\3n\3n\3n\3o\3o\3"+
		"o\3o\3o\3p\3p\3p\3p\3p\3q\3q\3q\3q\3q\5q\u0998\nq\3q\3q\3q\5q\u099d\n"+
		"q\3q\3q\3r\3r\3r\3r\3r\3r\3s\3s\3s\3s\3s\3t\3t\3t\3t\5t\u09b0\nt\3t\3"+
		"t\3u\3u\3u\3u\3v\3v\3v\3v\5v\u09bc\nv\3v\5v\u09bf\nv\3v\3v\3v\5v\u09c4"+
		"\nv\3v\5v\u09c7\nv\3w\3w\3w\3w\5w\u09cd\nw\3w\3w\3x\3x\3x\3x\3x\3x\3y"+
		"\3y\3y\3y\3y\5y\u09dc\ny\3y\3y\3y\5y\u09e1\ny\3y\3y\3z\3z\3z\3z\5z\u09e9"+
		"\nz\3z\5z\u09ec\nz\3z\3z\3z\5z\u09f1\nz\3z\3z\3z\5z\u09f6\nz\3z\5z\u09f9"+
		"\nz\3{\3{\3{\3{\3{\3|\3|\3|\3|\3|\3|\3}\3}\3}\3}\3}\3~\3~\3~\3~\3\177"+
		"\3\177\5\177\u0a11\n\177\3\177\3\177\3\177\3\177\3\177\5\177\u0a18\n\177"+
		"\3\177\3\177\3\177\5\177\u0a1d\n\177\3\177\3\177\3\177\5\177\u0a22\n\177"+
		"\3\177\3\177\3\177\6\177\u0a27\n\177\r\177\16\177\u0a28\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\5\u0080\u0a30\n\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081"+
		"\u0a3d\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0a43\n\u0082\3"+
		"\u0082\3\u0082\3\u0082\5\u0082\u0a48\n\u0082\3\u0082\3\u0082\3\u0083\3"+
		"\u0083\3\u0083\3\u0083\5\u0083\u0a50\n\u0083\3\u0083\3\u0083\3\u0084\3"+
		"\u0084\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\5\u0085\u0a60\n\u0085\3\u0085\3\u0085\3\u0086\3\u0086"+
		"\3\u0086\5\u0086\u0a67\n\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0a6c\n"+
		"\u0086\3\u0086\6\u0086\u0a6f\n\u0086\r\u0086\16\u0086\u0a70\3\u0086\5"+
		"\u0086\u0a74\n\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0a7a\n\u0086"+
		"\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0a80\n\u0086\3\u0087\3\u0087"+
		"\3\u0087\5\u0087\u0a85\n\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0a8a\n"+
		"\u0087\3\u0087\6\u0087\u0a8d\n\u0087\r\u0087\16\u0087\u0a8e\3\u0087\5"+
		"\u0087\u0a92\n\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0a98\n\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0a9e\n\u0087\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\5\u0088\u0aa5\n\u0088\3\u0088\3\u0088\3\u0088"+
		"\5\u0088\u0aaa\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\5\u0088\u0ab2\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0ab8\n"+
		"\u0088\6\u0088\u0aba\n\u0088\r\u0088\16\u0088\u0abb\3\u0088\3\u0088\5"+
		"\u0088\u0ac0\n\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3"+
		"\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\5\u008a\u0add\n\u008a\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b"+
		"\u0aea\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0af0\n\u008b\3"+
		"\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c"+
		"\u0afa\n\u008c\3\u008c\5\u008c\u0afd\n\u008c\3\u008d\3\u008d\3\u008d\3"+
		"\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0b11\n\u008e"+
		"\3\u008e\3\u008e\5\u008e\u0b15\n\u008e\3\u008e\3\u008e\5\u008e\u0b19\n"+
		"\u008e\3\u008e\6\u008e\u0b1c\n\u008e\r\u008e\16\u008e\u0b1d\3\u008e\3"+
		"\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\3\u008f\3\u008f\5\u008f\u0b2d\n\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\3\u008f\5\u008f\u0b34\n\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\3\u008f\3\u008f\5\u008f\u0b3d\n\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\7\u008f\u0b43\n\u008f\f\u008f\16\u008f\u0b46\13\u008f\5\u008f"+
		"\u0b48\n\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0b4d\n\u008f\3\u008f\3"+
		"\u008f\3\u008f\5\u008f\u0b52\n\u008f\3\u008f\3\u008f\3\u008f\3\u008f\6"+
		"\u008f\u0b58\n\u008f\r\u008f\16\u008f\u0b59\3\u008f\3\u008f\6\u008f\u0b5e"+
		"\n\u008f\r\u008f\16\u008f\u0b5f\3\u008f\3\u008f\5\u008f\u0b64\n\u008f"+
		"\3\u008f\3\u008f\7\u008f\u0b68\n\u008f\f\u008f\16\u008f\u0b6b\13\u008f"+
		"\7\u008f\u0b6d\n\u008f\f\u008f\16\u008f\u0b70\13\u008f\3\u008f\5\u008f"+
		"\u0b73\n\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0b7a\n"+
		"\u008f\3\u008f\3\u008f\3\u008f\3\u008f\7\u008f\u0b80\n\u008f\f\u008f\16"+
		"\u008f\u0b83\13\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f"+
		"\u0b8a\n\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\5\u008f\u0b93\n\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0b98\n\u008f\3"+
		"\u008f\3\u008f\5\u008f\u0b9c\n\u008f\3\u008f\5\u008f\u0b9f\n\u008f\6\u008f"+
		"\u0ba1\n\u008f\r\u008f\16\u008f\u0ba2\3\u008f\3\u008f\7\u008f\u0ba7\n"+
		"\u008f\f\u008f\16\u008f\u0baa\13\u008f\7\u008f\u0bac\n\u008f\f\u008f\16"+
		"\u008f\u0baf\13\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f"+
		"\u0bb6\n\u008f\3\u008f\3\u008f\3\u008f\3\u008f\7\u008f\u0bbc\n\u008f\f"+
		"\u008f\16\u008f\u0bbf\13\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0bc4\n"+
		"\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0bca\n\u008f\3\u008f\5"+
		"\u008f\u0bcd\n\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0bd2\n\u008f\3\u008f"+
		"\5\u008f\u0bd5\n\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f"+
		"\u0bdc\n\u008f\5\u008f\u0bde\n\u008f\3\u008f\5\u008f\u0be1\n\u008f\3\u008f"+
		"\3\u008f\3\u008f\3\u008f\5\u008f\u0be7\n\u008f\3\u008f\5\u008f\u0bea\n"+
		"\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0bef\n\u008f\3\u008f\5\u008f\u0bf2"+
		"\n\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0bf7\n\u008f\3\u008f\5\u008f"+
		"\u0bfa\n\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0bff\n\u008f\3\u008f\5"+
		"\u008f\u0c02\n\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0c07\n\u008f\3\u0090"+
		"\5\u0090\u0c0a\n\u0090\3\u0090\5\u0090\u0c0d\n\u0090\3\u0090\5\u0090\u0c10"+
		"\n\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0c17\n\u0090"+
		"\6\u0090\u0c19\n\u0090\r\u0090\16\u0090\u0c1a\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\5\u0091\u0c22\n\u0091\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\5\u0092\u0c29\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092"+
		"\u0c2f\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u0c3c\n\u0092\3\u0092\3\u0092"+
		"\5\u0092\u0c40\n\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u0c45\n\u0092\3"+
		"\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092"+
		"\u0c4f\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\5\u0092\u0c58\n\u0092\3\u0092\3\u0092\5\u0092\u0c5c\n\u0092\3\u0093\3"+
		"\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\5\u0093\u0c68\n\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0c6e\n"+
		"\u0093\3\u0093\3\u0093\3\u0093\6\u0093\u0c73\n\u0093\r\u0093\16\u0093"+
		"\u0c74\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\5\u0093\u0c89\n\u0093\3\u0093\3\u0093\5\u0093\u0c8d\n\u0093\3"+
		"\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0c95\n\u0094\3"+
		"\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0c9e\n"+
		"\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0ca4\n\u0094\3\u0094\3"+
		"\u0094\3\u0094\3\u0094\5\u0094\u0caa\n\u0094\3\u0094\3\u0094\3\u0094\3"+
		"\u0094\3\u0094\3\u0094\6\u0094\u0cb2\n\u0094\r\u0094\16\u0094\u0cb3\3"+
		"\u0094\3\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095"+
		"\u0cbe\n\u0095\3\u0095\3\u0095\5\u0095\u0cc2\n\u0095\3\u0095\5\u0095\u0cc5"+
		"\n\u0095\3\u0095\3\u0095\5\u0095\u0cc9\n\u0095\3\u0095\3\u0095\3\u0095"+
		"\5\u0095\u0cce\n\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0cd4\n"+
		"\u0095\3\u0095\5\u0095\u0cd7\n\u0095\3\u0095\3\u0095\5\u0095\u0cdb\n\u0095"+
		"\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\6\u0095\u0ce3\n\u0095"+
		"\r\u0095\16\u0095\u0ce4\3\u0095\5\u0095\u0ce8\n\u0095\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0cf0\n\u0096\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0cf8\n\u0096\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\5\u0096\u0cff\n\u0096\3\u0096\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\6\u0096\u0d06\n\u0096\r\u0096\16\u0096\u0d07\5\u0096"+
		"\u0d0a\n\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0d0f\n\u0096\3\u0096\3"+
		"\u0096\3\u0096\3\u0096\5\u0096\u0d15\n\u0096\3\u0096\6\u0096\u0d18\n\u0096"+
		"\r\u0096\16\u0096\u0d19\5\u0096\u0d1c\n\u0096\3\u0096\5\u0096\u0d1f\n"+
		"\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0d24\n\u0096\3\u0096\5\u0096\u0d27"+
		"\n\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0d2c\n\u0096\3\u0096\3\u0096"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\5\u0097\u0d3b\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\5\u0097\u0d42\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\6\u0097\u0d49\n\u0097\r\u0097\16\u0097\u0d4a\5\u0097\u0d4d\n\u0097\3"+
		"\u0097\3\u0097\3\u0097\5\u0097\u0d52\n\u0097\3\u0097\3\u0097\3\u0097\3"+
		"\u0097\5\u0097\u0d58\n\u0097\3\u0097\6\u0097\u0d5b\n\u0097\r\u0097\16"+
		"\u0097\u0d5c\5\u0097\u0d5f\n\u0097\3\u0097\5\u0097\u0d62\n\u0097\3\u0097"+
		"\3\u0097\3\u0097\5\u0097\u0d67\n\u0097\3\u0097\5\u0097\u0d6a\n\u0097\3"+
		"\u0097\3\u0097\3\u0097\5\u0097\u0d6f\n\u0097\3\u0097\3\u0097\3\u0098\3"+
		"\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098"+
		"\u0d7c\n\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d81\n\u0098\3\u0099\3"+
		"\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0d8a\n\u0099\3"+
		"\u0099\3\u0099\3\u0099\5\u0099\u0d8f\n\u0099\3\u0099\3\u0099\3\u0099\3"+
		"\u0099\5\u0099\u0d95\n\u0099\3\u0099\3\u0099\5\u0099\u0d99\n\u0099\3\u0099"+
		"\3\u0099\5\u0099\u0d9d\n\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\5\u009a\u0dae\n\u009a\5\u009a\u0db0\n\u009a\3\u009b\3\u009b\3"+
		"\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0dba\n\u009b\3"+
		"\u009b\3\u009b\3\u009b\5\u009b\u0dbf\n\u009b\5\u009b\u0dc1\n\u009b\3\u009b"+
		"\3\u009b\5\u009b\u0dc5\n\u009b\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c"+
		"\u0dcb\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c"+
		"\u0dd3\n\u009c\3\u009c\7\u009c\u0dd6\n\u009c\f\u009c\16\u009c\u0dd9\13"+
		"\u009c\5\u009c\u0ddb\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c\7\u009c\u0de1"+
		"\n\u009c\f\u009c\16\u009c\u0de4\13\u009c\5\u009c\u0de6\n\u009c\3\u009c"+
		"\3\u009c\3\u009c\5\u009c\u0deb\n\u009c\3\u009c\3\u009c\3\u009c\5\u009c"+
		"\u0df0\n\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0df5\n\u009c\3\u009c\3"+
		"\u009c\3\u009c\5\u009c\u0dfa\n\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0dff"+
		"\n\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0e04\n\u009c\3\u009c\3\u009c"+
		"\5\u009c\u0e08\n\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0e0d\n\u009c\3"+
		"\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\5\u009d\u0e18\n\u009d\3\u009d\7\u009d\u0e1b\n\u009d\f\u009d\16\u009d"+
		"\u0e1e\13\u009d\5\u009d\u0e20\n\u009d\3\u009d\5\u009d\u0e23\n\u009d\3"+
		"\u009d\3\u009d\3\u009d\5\u009d\u0e28\n\u009d\3\u009d\5\u009d\u0e2b\n\u009d"+
		"\3\u009d\3\u009d\3\u009d\5\u009d\u0e30\n\u009d\3\u009d\5\u009d\u0e33\n"+
		"\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0e38\n\u009d\3\u009d\5\u009d\u0e3b"+
		"\n\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0e40\n\u009d\3\u009d\5\u009d"+
		"\u0e43\n\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0e48\n\u009d\3\u009d\5"+
		"\u009d\u0e4b\n\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0e50\n\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\5\u009d\u0e56\n\u009d\3\u009d\3\u009d\3\u009d"+
		"\5\u009d\u0e5b\n\u009d\3\u009d\5\u009d\u0e5e\n\u009d\3\u009d\3\u009d\3"+
		"\u009d\5\u009d\u0e63\n\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5"+
		"\u009d\u0e6a\n\u009d\5\u009d\u0e6c\n\u009d\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\5\u009e\u0e72\n\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\5\u009e\u0e7b\n\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e80\n"+
		"\u009e\5\u009e\u0e82\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3"+
		"\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0e8e\n\u009f\3\u00a0\3"+
		"\u00a0\3\u00a0\3\u00a0\5\u00a0\u0e94\n\u00a0\3\u00a0\3\u00a0\3\u00a0\3"+
		"\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u0e9e\n\u00a0\f\u00a0\16"+
		"\u00a0\u0ea1\13\u00a0\5\u00a0\u0ea3\n\u00a0\3\u00a0\3\u00a0\3\u00a0\5"+
		"\u00a0\u0ea8\n\u00a0\5\u00a0\u0eaa\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0eb4\n\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\5\u00a1\u0eb9\n\u00a1\5\u00a1\u0ebb\n\u00a1\3\u00a1\3\u00a1\5"+
		"\u00a1\u0ebf\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0ec5\n\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0ed7"+
		"\n\u00a2\5\u00a2\u0ed9\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4"+
		"\u0ee8\n\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\5\u00a4\u0efa\n\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\5\u00a4\u0f02\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\3\u00a5\5\u00a5\u0f0c\n\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\5\u00a6\u0f1c\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0f31\n\u00a8\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9"+
		"\u0f3c\n\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0f42\n\u00a9\3"+
		"\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f4b\n"+
		"\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa"+
		"\u0f54\n\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f5a\n\u00aa\3"+
		"\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0f63\n"+
		"\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0f68\n\u00ab\3\u00ab\5\u00ab\u0f6b"+
		"\n\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0f70\n\u00ab\3\u00ab\5\u00ab"+
		"\u0f73\n\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0f78\n\u00ab\3\u00ab\5"+
		"\u00ab\u0f7b\n\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5"+
		"\u00ab\u0f83\n\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0f89\n\u00ab"+
		"\6\u00ab\u0f8b\n\u00ab\r\u00ab\16\u00ab\u0f8c\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\5\u00ab\u0f94\n\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\5\u00ab\u0f9a\n\u00ab\6\u00ab\u0f9c\n\u00ab\r\u00ab\16\u00ab\u0f9d\3"+
		"\u00ab\5\u00ab\u0fa1\n\u00ab\5\u00ab\u0fa3\n\u00ab\3\u00ab\5\u00ab\u0fa6"+
		"\n\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0fab\n\u00ab\3\u00ab\5\u00ab"+
		"\u0fae\n\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0fb3\n\u00ab\3\u00ab\5"+
		"\u00ab\u0fb6\n\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0fbb\n\u00ab\3\u00ab"+
		"\5\u00ab\u0fbe\n\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0fc3\n\u00ab\3"+
		"\u00ab\5\u00ab\u0fc6\n\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3"+
		"\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac"+
		"\u0fd5\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\5\u00ac\u0fe0\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fec\n\u00ad"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0ff3\n\u00ae\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0ffa\n\u00af\3\u00af\3\u00af"+
		"\5\u00af\u0ffe\n\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u1003\n\u00af\3"+
		"\u00af\5\u00af\u1006\n\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u100b\n\u00af"+
		"\3\u00af\5\u00af\u100e\n\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u1013\n"+
		"\u00af\3\u00af\5\u00af\u1016\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3"+
		"\u00af\3\u00af\3\u00af\5\u00af\u101f\n\u00af\3\u00b0\3\u00b0\3\u00b0\3"+
		"\u00b0\3\u00b0\5\u00b0\u1026\n\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3"+
		"\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\5\u00b1\u1035\n\u00b1\3\u00b1\3\u00b1\5\u00b1\u1039\n\u00b1\3\u00b1\3"+
		"\u00b1\3\u00b1\5\u00b1\u103e\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3"+
		"\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u1049\n\u00b2\3\u00b2\3"+
		"\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u1053\n"+
		"\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\5\u00b2\u105f\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\7\u00b2\u1065\n\u00b2\f\u00b2\16\u00b2\u1068\13\u00b2\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u106f\n\u00b3\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1078\n\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\5\u00b4\u107d\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u1088\n\u00b5\3\u00b5\5\u00b5"+
		"\u108b\n\u00b5\3\u00b5\3\u00b5\5\u00b5\u108f\n\u00b5\3\u00b6\3\u00b6\3"+
		"\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u1097\n\u00b6\3\u00b6\3\u00b6\5"+
		"\u00b6\u109b\n\u00b6\3\u00b6\3\u00b6\5\u00b6\u109f\n\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u10a7\n\u00b6\3\u00b6\6\u00b6"+
		"\u10aa\n\u00b6\r\u00b6\16\u00b6\u10ab\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\5\u00b6\u10b4\n\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6"+
		"\u10b9\n\u00b6\3\u00b6\3\u00b6\7\u00b6\u10bd\n\u00b6\f\u00b6\16\u00b6"+
		"\u10c0\13\u00b6\6\u00b6\u10c2\n\u00b6\r\u00b6\16\u00b6\u10c3\3\u00b6\3"+
		"\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u10cd\n\u00b6\3"+
		"\u00b6\5\u00b6\u10d0\n\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u10d5\n\u00b6"+
		"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u10dc\n\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u10e2\n\u00b7\5\u00b7\u10e4\n\u00b7\3"+
		"\u00b7\3\u00b7\3\u00b7\5\u00b7\u10e9\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3"+
		"\u00b7\5\u00b7\u10ef\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u10f5"+
		"\n\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u10fa\n\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\5\u00b7\u1100\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\5\u00b8\u1107\n\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u110c\n"+
		"\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u1111\n\u00b8\3\u00b8\3\u00b8\3"+
		"\u00b8\5\u00b8\u1116\n\u00b8\3\u00b8\5\u00b8\u1119\n\u00b8\3\u00b8\3\u00b8"+
		"\5\u00b8\u111d\n\u00b8\3\u00b8\3\u00b8\5\u00b8\u1121\n\u00b8\3\u00b8\3"+
		"\u00b8\5\u00b8\u1125\n\u00b8\3\u00b8\3\u00b8\5\u00b8\u1129\n\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\5\u00b8\u112e\n\u00b8\3\u00b8\3\u00b8\5\u00b8\u1132\n"+
		"\u00b8\3\u00b8\3\u00b8\5\u00b8\u1136\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3"+
		"\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u1140\n\u00b9\3\u00b9\3"+
		"\u00b9\3\u00b9\3\u00b9\5\u00b9\u1146\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3"+
		"\u00b9\3\u00b9\5\u00b9\u114d\n\u00b9\3\u00b9\5\u00b9\u1150\n\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u1156\n\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\5\u00b9\u115c\n\u00b9\3\u00b9\3\u00b9\3\u00b9\7\u00b9\u1161\n"+
		"\u00b9\f\u00b9\16\u00b9\u1164\13\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9"+
		"\u1169\n\u00b9\5\u00b9\u116b\n\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u1170"+
		"\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u1176\n\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u117c\n\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\7\u00b9\u1181\n\u00b9\f\u00b9\16\u00b9\u1184\13\u00b9\3\u00b9\5\u00b9"+
		"\u1187\n\u00b9\3\u00b9\3\u00b9\5\u00b9\u118b\n\u00b9\3\u00b9\5\u00b9\u118e"+
		"\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u119c\n\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\5\u00b9\u11a1\n\u00b9\3\u00b9\3\u00b9\5\u00b9\u11a5\n\u00b9\3"+
		"\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\5\u00b9\u11b2\n\u00b9\3\u00b9\5\u00b9\u11b5\n\u00b9\5"+
		"\u00b9\u11b7\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5"+
		"\u00b9\u11bf\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3"+
		"\u00ba\3\u00ba\5\u00ba\u11c9\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5"+
		"\u00ba\u11cf\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u11d6"+
		"\n\u00ba\3\u00ba\5\u00ba\u11d9\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\5\u00ba\u11df\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u11e5\n"+
		"\u00ba\3\u00ba\3\u00ba\3\u00ba\7\u00ba\u11ea\n\u00ba\f\u00ba\16\u00ba"+
		"\u11ed\13\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u11f2\n\u00ba\5\u00ba"+
		"\u11f4\n\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u11f9\n\u00ba\3\u00ba\3"+
		"\u00ba\3\u00ba\3\u00ba\5\u00ba\u11ff\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3"+
		"\u00ba\5\u00ba\u1205\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u120b"+
		"\n\u00ba\3\u00ba\3\u00ba\3\u00ba\7\u00ba\u1210\n\u00ba\f\u00ba\16\u00ba"+
		"\u1213\13\u00ba\3\u00ba\5\u00ba\u1216\n\u00ba\3\u00ba\3\u00ba\5\u00ba"+
		"\u121a\n\u00ba\3\u00ba\5\u00ba\u121d\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3"+
		"\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\5\u00ba\u122b\n\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u1230\n\u00ba\3"+
		"\u00ba\3\u00ba\5\u00ba\u1234\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3"+
		"\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u1241\n"+
		"\u00ba\3\u00ba\5\u00ba\u1244\n\u00ba\5\u00ba\u1246\n\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u124e\n\u00ba\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u1259"+
		"\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u1260\n\u00bb"+
		"\f\u00bb\16\u00bb\u1263\13\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\5\u00bb\u126b\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1276\n\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u127d\n\u00bc\f\u00bc\16\u00bc\u1280"+
		"\13\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1288"+
		"\n\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\5\u00bd\u1294\n\u00bd\3\u00bd\3\u00bd\5\u00bd\u1298\n"+
		"\u00bd\3\u00bd\3\u00bd\3\u00bd\6\u00bd\u129d\n\u00bd\r\u00bd\16\u00bd"+
		"\u129e\5\u00bd\u12a1\n\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u12a6\n\u00bd"+
		"\3\u00bd\3\u00bd\5\u00bd\u12aa\n\u00bd\3\u00bd\3\u00bd\3\u00bd\6\u00bd"+
		"\u12af\n\u00bd\r\u00bd\16\u00bd\u12b0\5\u00bd\u12b3\n\u00bd\3\u00bd\3"+
		"\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\5\u00bd\u12c1\n\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd"+
		"\u12c6\n\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u12dc\n\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\5\u00bd\u12f2\n\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u12f7\n\u00bd\3"+
		"\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\5\u00be\u1304\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\5\u00bf\u130c\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u1320\n\u00c1\3\u00c1"+
		"\5\u00c1\u1323\n\u00c1\3\u00c1\3\u00c1\7\u00c1\u1327\n\u00c1\f\u00c1\16"+
		"\u00c1\u132a\13\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2"+
		"\u1331\n\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u1338\n"+
		"\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u133d\n\u00c2\3\u00c2\3\u00c2\5"+
		"\u00c2\u1341\n\u00c2\6\u00c2\u1343\n\u00c2\r\u00c2\16\u00c2\u1344\3\u00c2"+
		"\5\u00c2\u1348\n\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3"+
		"\u134f\n\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\5\u00c3\u1361\n\u00c3\5\u00c3\u1363\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3"+
		"\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u1377\n\u00c4"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u137f\n\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u1384\n\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u1396\n\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\5\u00c5\u13a5\n\u00c5\5\u00c5\u13a7\n\u00c5\3\u00c6\3"+
		"\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u13ae\n\u00c6\3\u00c6\3\u00c6\3"+
		"\u00c6\3\u00c6\3\u00c6\5\u00c6\u13b5\n\u00c6\3\u00c6\3\u00c6\3\u00c6\5"+
		"\u00c6\u13ba\n\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u13bf\n\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u13c5\n\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\5\u00c6\u13ca\n\u00c6\5\u00c6\u13cc\n\u00c6\3\u00c7\3\u00c7\3\u00c7\3"+
		"\u00c7\3\u00c7\5\u00c7\u13d3\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5"+
		"\u00c7\u13d9\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u13df\n\u00c7"+
		"\3\u00c7\5\u00c7\u13e2\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7"+
		"\u13e8\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\6\u00c7"+
		"\u13f0\n\u00c7\r\u00c7\16\u00c7\u13f1\3\u00c7\5\u00c7\u13f5\n\u00c7\3"+
		"\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u13fc\n\u00c7\3\u00c7\5"+
		"\u00c7\u13ff\n\u00c7\3\u00c7\3\u00c7\3\u00c7\6\u00c7\u1404\n\u00c7\r\u00c7"+
		"\16\u00c7\u1405\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8"+
		"\u140e\n\u00c8\3\u00c8\3\u00c8\5\u00c8\u1412\n\u00c8\3\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\5\u00c8\u1418\n\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u141d"+
		"\n\u00c8\f\u00c8\16\u00c8\u1420\13\u00c8\5\u00c8\u1422\n\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u1429\n\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\5\u00c8\u142f\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\5\u00c8\u1436\n\u00c8\3\u00c8\5\u00c8\u1439\n\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\5\u00c8\u143f\n\u00c8\3\u00c8\3\u00c8\3\u00c8\7"+
		"\u00c8\u1444\n\u00c8\f\u00c8\16\u00c8\u1447\13\u00c8\5\u00c8\u1449\n\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u1451\n\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u1457\n\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u145e\n\u00c8\3\u00c8\5\u00c8\u1461\n"+
		"\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u1467\n\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\7\u00c8\u146c\n\u00c8\f\u00c8\16\u00c8\u146f\13\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u1476\n\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u147e\n\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\5\u00c8\u1484\n\u00c8\3\u00c8\3\u00c8\3\u00c8\7"+
		"\u00c8\u1489\n\u00c8\f\u00c8\16\u00c8\u148c\13\u00c8\3\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u1495\n\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\5\u00c8\u149a\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3"+
		"\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u14a4\n\u00c9\3\u00c9\3\u00c9\3"+
		"\u00c9\3\u00c9\5\u00c9\u14aa\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3"+
		"\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u14b6\n\u00c9\5"+
		"\u00c9\u14b8\n\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14bf"+
		"\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14c5\n\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14cb\n\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\5\u00ca\u14d1\n\u00ca\3\u00ca\3\u00ca\3\u00ca\6\u00ca\u14d6\n"+
		"\u00ca\r\u00ca\16\u00ca\u14d7\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\5\u00cb\u14df\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\5\u00cb\u14e7\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u14ed\n"+
		"\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\6\u00cb\u14fb\n\u00cb\r\u00cb\16\u00cb"+
		"\u14fc\3\u00cb\5\u00cb\u1500\n\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u1505"+
		"\n\u00cb\5\u00cb\u1507\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1513\n\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1519\n\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\6\u00cc\u1527\n\u00cc\r\u00cc\16\u00cc\u1528\3\u00cc\5\u00cc\u152c\n"+
		"\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1531\n\u00cc\3\u00cc\5\u00cc\u1534"+
		"\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1539\n\u00cc\5\u00cc\u153b\n"+
		"\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd"+
		"\u1544\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u154b\n"+
		"\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1551\n\u00ce\3\u00ce\5"+
		"\u00ce\u1554\n\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1559\n\u00ce\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u1560\n\u00cf\5\u00cf\u1562\n"+
		"\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u1568\n\u00cf\5\u00cf\u156a"+
		"\n\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u156f\n\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\5\u00cf\u1574\n\u00cf\3\u00cf\5\u00cf\u1577\n\u00cf\3\u00cf\3"+
		"\u00cf\3\u00cf\5\u00cf\u157c\n\u00cf\3\u00cf\5\u00cf\u157f\n\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\5\u00cf\u1584\n\u00cf\3\u00cf\5\u00cf\u1587\n\u00cf\3"+
		"\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u158e\n\u00cf\5\u00cf\u1590"+
		"\n\u00cf\3\u00cf\5\u00cf\u1593\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\5\u00cf\u1599\n\u00cf\3\u00cf\5\u00cf\u159c\n\u00cf\3\u00cf\5\u00cf\u159f"+
		"\n\u00cf\3\u00cf\5\u00cf\u15a2\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\5\u00d0\u15a8\n\u00d0\3\u00d0\3\u00d0\5\u00d0\u15ac\n\u00d0\3\u00d1\3"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u15b4\n\u00d1\3\u00d1\3"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u15bb\n\u00d1\3\u00d1\3\u00d1\3"+
		"\u00d1\3\u00d1\5\u00d1\u15c1\n\u00d1\5\u00d1\u15c3\n\u00d1\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u15ce"+
		"\n\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u15d3\n\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\5\u00d3\u15d9\n\u00d3\6\u00d3\u15db\n\u00d3\r\u00d3\16"+
		"\u00d3\u15dc\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3"+
		"\u00d4\5\u00d4\u15e7\n\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3"+
		"\u00d5\5\u00d5\u15ef\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3"+
		"\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u15fb\n\u00d5\3\u00d6\5"+
		"\u00d6\u15fe\n\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5"+
		"\u00d6\u1606\n\u00d6\5\u00d6\u1608\n\u00d6\3\u00d6\5\u00d6\u160b\n\u00d6"+
		"\3\u00d6\3\u00d6\5\u00d6\u160f\n\u00d6\3\u00d6\5\u00d6\u1612\n\u00d6\3"+
		"\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6"+
		"\u161c\n\u00d6\3\u00d6\3\u00d6\7\u00d6\u1620\n\u00d6\f\u00d6\16\u00d6"+
		"\u1623\13\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u162a"+
		"\n\u00d6\3\u00d6\3\u00d6\5\u00d6\u162e\n\u00d6\3\u00d6\3\u00d6\5\u00d6"+
		"\u1632\n\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\5\u00d6\u163b\n\u00d6\3\u00d6\3\u00d6\7\u00d6\u163f\n\u00d6\f\u00d6\16"+
		"\u00d6\u1642\13\u00d6\3\u00d6\5\u00d6\u1645\n\u00d6\3\u00d6\5\u00d6\u1648"+
		"\n\u00d6\3\u00d6\3\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\7\u00d7"+
		"\u1651\n\u00d7\f\u00d7\16\u00d7\u1654\13\u00d7\3\u00d7\5\u00d7\u1657\n"+
		"\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u165e\n\u00d8\3"+
		"\u00d8\3\u00d8\3\u00d8\5\u00d8\u1663\n\u00d8\3\u00d9\5\u00d9\u1666\n\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u166e\n\u00d9"+
		"\5\u00d9\u1670\n\u00d9\3\u00d9\5\u00d9\u1673\n\u00d9\3\u00d9\3\u00d9\5"+
		"\u00d9\u1677\n\u00d9\3\u00d9\5\u00d9\u167a\n\u00d9\3\u00d9\3\u00d9\5\u00d9"+
		"\u167e\n\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u1685\n"+
		"\u00d9\3\u00d9\3\u00d9\5\u00d9\u1689\n\u00d9\5\u00d9\u168b\n\u00d9\5\u00d9"+
		"\u168d\n\u00d9\3\u00d9\5\u00d9\u1690\n\u00d9\3\u00d9\5\u00d9\u1693\n\u00d9"+
		"\3\u00d9\5\u00d9\u1696\n\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da"+
		"\u169c\n\u00da\3\u00db\5\u00db\u169f\n\u00db\3\u00db\3\u00db\3\u00db\3"+
		"\u00db\3\u00db\3\u00db\5\u00db\u16a7\n\u00db\5\u00db\u16a9\n\u00db\3\u00db"+
		"\5\u00db\u16ac\n\u00db\3\u00db\3\u00db\5\u00db\u16b0\n\u00db\3\u00db\5"+
		"\u00db\u16b3\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u16b9\n\u00db"+
		"\3\u00db\5\u00db\u16bc\n\u00db\3\u00db\3\u00db\5\u00db\u16c0\n\u00db\3"+
		"\u00db\5\u00db\u16c3\n\u00db\3\u00db\5\u00db\u16c6\n\u00db\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u16cd\n\u00dc\3\u00dd\5\u00dd\u16d0\n"+
		"\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u16d7\n\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u16dd\n\u00dd\7\u00dd\u16df\n\u00dd"+
		"\f\u00dd\16\u00dd\u16e2\13\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\5\u00dd\u16eb\n\u00dd\3\u00dd\5\u00dd\u16ee\n\u00dd\3"+
		"\u00de\5\u00de\u16f1\n\u00de\3\u00de\3\u00de\5\u00de\u16f5\n\u00de\3\u00de"+
		"\5\u00de\u16f8\n\u00de\3\u00de\5\u00de\u16fb\n\u00de\3\u00de\5\u00de\u16fe"+
		"\n\u00de\3\u00df\3\u00df\5\u00df\u1702\n\u00df\3\u00e0\5\u00e0\u1705\n"+
		"\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u170d\n"+
		"\u00e0\5\u00e0\u170f\n\u00e0\3\u00e0\3\u00e0\5\u00e0\u1713\n\u00e0\3\u00e0"+
		"\5\u00e0\u1716\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u171c\n"+
		"\u00e0\f\u00e0\16\u00e0\u171f\13\u00e0\3\u00e0\5\u00e0\u1722\n\u00e0\3"+
		"\u00e0\3\u00e0\5\u00e0\u1726\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3"+
		"\u00e0\5\u00e0\u172d\n\u00e0\3\u00e0\3\u00e0\5\u00e0\u1731\n\u00e0\5\u00e0"+
		"\u1733\n\u00e0\5\u00e0\u1735\n\u00e0\3\u00e0\5\u00e0\u1738\n\u00e0\3\u00e0"+
		"\5\u00e0\u173b\n\u00e0\3\u00e0\5\u00e0\u173e\n\u00e0\3\u00e1\3\u00e1\3"+
		"\u00e1\3\u00e1\7\u00e1\u1744\n\u00e1\f\u00e1\16\u00e1\u1747\13\u00e1\3"+
		"\u00e1\3\u00e1\3\u00e1\5\u00e1\u174c\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3"+
		"\u00e1\5\u00e1\u1752\n\u00e1\5\u00e1\u1754\n\u00e1\3\u00e2\3\u00e2\5\u00e2"+
		"\u1758\n\u00e2\3\u00e2\5\u00e2\u175b\n\u00e2\3\u00e3\3\u00e3\3\u00e3\5"+
		"\u00e3\u1760\n\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u1765\n\u00e3\3\u00e3"+
		"\5\u00e3\u1768\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\5\u00e4\u1770\n\u00e4\3\u00e4\3\u00e4\5\u00e4\u1774\n\u00e4\3\u00e4\3"+
		"\u00e4\3\u00e4\7\u00e4\u1779\n\u00e4\f\u00e4\16\u00e4\u177c\13\u00e4\5"+
		"\u00e4\u177e\n\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\7\u00e4\u1785"+
		"\n\u00e4\f\u00e4\16\u00e4\u1788\13\u00e4\5\u00e4\u178a\n\u00e4\3\u00e4"+
		"\3\u00e4\5\u00e4\u178e\n\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\7\u00e4"+
		"\u1794\n\u00e4\f\u00e4\16\u00e4\u1797\13\u00e4\5\u00e4\u1799\n\u00e4\3"+
		"\u00e5\3\u00e5\5\u00e5\u179d\n\u00e5\3\u00e5\5\u00e5\u17a0\n\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\5\u00e5\u17ae\n\u00e5\3\u00e5\3\u00e5\5\u00e5\u17b2\n"+
		"\u00e5\3\u00e5\5\u00e5\u17b5\n\u00e5\3\u00e5\3\u00e5\5\u00e5\u17b9\n\u00e5"+
		"\3\u00e5\5\u00e5\u17bc\n\u00e5\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u17c1\n"+
		"\u00e6\3\u00e6\5\u00e6\u17c4\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5"+
		"\u00e6\u17ca\n\u00e6\3\u00e6\5\u00e6\u17cd\n\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\7\u00e6\u17d2\n\u00e6\f\u00e6\16\u00e6\u17d5\13\u00e6\3\u00e6\5\u00e6"+
		"\u17d8\n\u00e6\5\u00e6\u17da\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\7"+
		"\u00e6\u17e0\n\u00e6\f\u00e6\16\u00e6\u17e3\13\u00e6\5\u00e6\u17e5\n\u00e6"+
		"\3\u00e6\3\u00e6\5\u00e6\u17e9\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e7"+
		"\3\u00e7\5\u00e7\u17f0\n\u00e7\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u17f5\n"+
		"\u00e8\3\u00e8\5\u00e8\u17f8\n\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3"+
		"\u00e8\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u1802\n\u00e8\f\u00e8\16\u00e8"+
		"\u1805\13\u00e8\5\u00e8\u1807\n\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\5\u00e8\u180d\n\u00e8\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u1812\n\u00e8\f"+
		"\u00e8\16\u00e8\u1815\13\u00e8\3\u00e8\3\u00e8\5\u00e8\u1819\n\u00e8\3"+
		"\u00e8\3\u00e8\3\u00e8\5\u00e8\u181e\n\u00e8\3\u00e8\3\u00e8\3\u00e8\3"+
		"\u00e9\3\u00e9\5\u00e9\u1825\n\u00e9\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3"+
		"\u00eb\5\u00eb\u182c\n\u00eb\3\u00eb\5\u00eb\u182f\n\u00eb\3\u00eb\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u1837\n\u00eb\3\u00eb\3\u00eb"+
		"\3\u00eb\3\u00eb\7\u00eb\u183d\n\u00eb\f\u00eb\16\u00eb\u1840\13\u00eb"+
		"\5\u00eb\u1842\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\7\u00eb\u1848\n"+
		"\u00eb\f\u00eb\16\u00eb\u184b\13\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00ec"+
		"\3\u00ec\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u1855\n\u00ed\3\u00ed\5\u00ed"+
		"\u1858\n\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\7\u00ed"+
		"\u1860\n\u00ed\f\u00ed\16\u00ed\u1863\13\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\5\u00ed\u1869\n\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u186e\n"+
		"\u00ed\3\u00ed\5\u00ed\u1871\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3"+
		"\u00ee\3\u00ee\7\u00ee\u1879\n\u00ee\f\u00ee\16\u00ee\u187c\13\u00ee\5"+
		"\u00ee\u187e\n\u00ee\3\u00ee\5\u00ee\u1881\n\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\7\u00ef\u188d"+
		"\n\u00ef\f\u00ef\16\u00ef\u1890\13\u00ef\5\u00ef\u1892\n\u00ef\3\u00ef"+
		"\5\u00ef\u1895\n\u00ef\3\u00ef\3\u00ef\7\u00ef\u1899\n\u00ef\f\u00ef\16"+
		"\u00ef\u189c\13\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\7\u00f0\u18a7\n\u00f0\f\u00f0\16\u00f0\u18aa"+
		"\13\u00f0\5\u00f0\u18ac\n\u00f0\3\u00f0\5\u00f0\u18af\n\u00f0\3\u00f0"+
		"\3\u00f0\7\u00f0\u18b3\n\u00f0\f\u00f0\16\u00f0\u18b6\13\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\5\u00f0\u18bb\n\u00f0\3\u00f0\3\u00f0\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\5\u00f1\u18c3\n\u00f1\3\u00f1\5\u00f1\u18c6\n\u00f1\3"+
		"\u00f1\3\u00f1\5\u00f1\u18ca\n\u00f1\3\u00f1\3\u00f1\5\u00f1\u18ce\n\u00f1"+
		"\3\u00f1\5\u00f1\u18d1\n\u00f1\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u18d6\n"+
		"\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u18e4\n\u00f3\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u18f4\n\u00f4\3\u00f4\3\u00f4\5\u00f4"+
		"\u18f8\n\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u18fe\n\u00f4\5"+
		"\u00f4\u1900\n\u00f4\3\u00f4\5\u00f4\u1903\n\u00f4\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u190b\n\u00f5\3\u00f5\3\u00f5\7\u00f5"+
		"\u190f\n\u00f5\f\u00f5\16\u00f5\u1912\13\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\5\u00f5\u1917\n\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u191c\n\u00f5\3"+
		"\u00f5\5\u00f5\u191f\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\7"+
		"\u00f6\u1926\n\u00f6\f\u00f6\16\u00f6\u1929\13\u00f6\3\u00f6\3\u00f6\3"+
		"\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1934\n"+
		"\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\7\u00f7\u193a\n\u00f7\f\u00f7\16"+
		"\u00f7\u193d\13\u00f7\5\u00f7\u193f\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3"+
		"\u00f7\3\u00f7\5\u00f7\u1946\n\u00f7\3\u00f7\5\u00f7\u1949\n\u00f7\3\u00f8"+
		"\3\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u1976\n\u00f9"+
		"\3\u00f9\5\u00f9\u1979\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa"+
		"\u197f\n\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u198b\n\u00fa\5\u00fa\u198d\n\u00fa\3"+
		"\u00fa\5\u00fa\u1990\n\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3"+
		"\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\5\u00fb\u19a9\n\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u19b4\n\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u19bc\n\u00fc\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\7\u00fd\u19c5\n\u00fd\f\u00fd\16\u00fd"+
		"\u19c8\13\u00fd\7\u00fd\u19ca\n\u00fd\f\u00fd\16\u00fd\u19cd\13\u00fd"+
		"\5\u00fd\u19cf\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\5\u00fe\u19d7\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100"+
		"\3\u0100\3\u0100\5\u0100\u19e1\n\u0100\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\3\u0101\5\u0101\u19e8\n\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\5\u0101\u19ef\n\u0101\5\u0101\u19f1\n\u0101\3\u0101\3\u0101\3\u0101\3"+
		"\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u19fd\n"+
		"\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\3\u0101\5\u0101\u1a08\n\u0101\3\u0101\3\u0101\5\u0101\u1a0c\n\u0101\3"+
		"\u0101\3\u0101\3\u0101\5\u0101\u1a11\n\u0101\3\u0101\5\u0101\u1a14\n\u0101"+
		"\5\u0101\u1a16\n\u0101\3\u0101\5\u0101\u1a19\n\u0101\3\u0101\3\u0101\3"+
		"\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101"+
		"\u1a25\n\u0101\5\u0101\u1a27\n\u0101\5\u0101\u1a29\n\u0101\3\u0101\5\u0101"+
		"\u1a2c\n\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u1a31\n\u0101\3\u0101\5"+
		"\u0101\u1a34\n\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u1a39\n\u0101\3\u0101"+
		"\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u1a43"+
		"\n\u0101\3\u0101\3\u0101\5\u0101\u1a47\n\u0101\3\u0101\3\u0101\3\u0101"+
		"\5\u0101\u1a4c\n\u0101\3\u0101\5\u0101\u1a4f\n\u0101\5\u0101\u1a51\n\u0101"+
		"\3\u0101\5\u0101\u1a54\n\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u1a60\n\u0101\5\u0101"+
		"\u1a62\n\u0101\5\u0101\u1a64\n\u0101\3\u0101\5\u0101\u1a67\n\u0101\3\u0101"+
		"\3\u0101\3\u0101\3\u0101\5\u0101\u1a6d\n\u0101\3\u0102\3\u0102\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u1a77\n\u0103\3\u0104"+
		"\3\u0104\3\u0105\3\u0105\3\u0106\3\u0106\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107"+
		"\u1a8b\n\u0107\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u1a91\n\u0108\3"+
		"\u0109\3\u0109\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010b\3\u010b"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010d\3\u010d\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u1aaa\n\u010e\5\u010e"+
		"\u1aac\n\u010e\3\u010f\3\u010f\3\u010f\3\u0110\3\u0110\3\u0110\3\u0111"+
		"\3\u0111\3\u0112\3\u0112\3\u0113\3\u0113\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115"+
		"\u1ac6\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1acc\n\u0115\3"+
		"\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115"+
		"\5\u0115\u1ad7\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\5\u0116\u1adf\n\u0116\3\u0116\5\u0116\u1ae2\n\u0116\3\u0117\3\u0117\3"+
		"\u0117\3\u0118\3\u0118\3\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\5\u0119\u1af0\n\u0119\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\5\u011a\u1af8\n\u011a\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\5\u011b\u1aff\n\u011b\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u1b16\n\u011c"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011e\5\u011e\u1b23\n\u011e\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\5\u011f\u1b29\n\u011f\3\u011f\3\u011f\3\u011f\7\u011f\u1b2e\n\u011f\f"+
		"\u011f\16\u011f\u1b31\13\u011f\3\u011f\3\u011f\3\u011f\7\u011f\u1b36\n"+
		"\u011f\f\u011f\16\u011f\u1b39\13\u011f\5\u011f\u1b3b\n\u011f\3\u011f\5"+
		"\u011f\u1b3e\n\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0121\3\u0121\3"+
		"\u0121\5\u0121\u1b47\n\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0122\3"+
		"\u0122\3\u0122\3\u0122\5\u0122\u1b51\n\u0122\3\u0122\3\u0122\3\u0122\7"+
		"\u0122\u1b56\n\u0122\f\u0122\16\u0122\u1b59\13\u0122\3\u0122\5\u0122\u1b5c"+
		"\n\u0122\3\u0123\3\u0123\5\u0123\u1b60\n\u0123\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\5\u0124\u1b66\n\u0124\3\u0124\3\u0124\3\u0124\7\u0124\u1b6b\n"+
		"\u0124\f\u0124\16\u0124\u1b6e\13\u0124\3\u0124\5\u0124\u1b71\n\u0124\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1b77\n\u0125\3\u0125\3\u0125\3"+
		"\u0125\7\u0125\u1b7c\n\u0125\f\u0125\16\u0125\u1b7f\13\u0125\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\5\u0125\u1b85\n\u0125\3\u0125\5\u0125\u1b88\n\u0125"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u1b8e\n\u0126\3\u0126\3\u0126"+
		"\3\u0126\7\u0126\u1b93\n\u0126\f\u0126\16\u0126\u1b96\13\u0126\3\u0126"+
		"\5\u0126\u1b99\n\u0126\3\u0127\3\u0127\3\u0127\5\u0127\u1b9e\n\u0127\3"+
		"\u0127\3\u0127\3\u0127\5\u0127\u1ba3\n\u0127\3\u0127\6\u0127\u1ba6\n\u0127"+
		"\r\u0127\16\u0127\u1ba7\3\u0127\3\u0127\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\5\u0128\u1bb0\n\u0128\3\u0128\3\u0128\5\u0128\u1bb4\n\u0128\3\u0129\3"+
		"\u0129\3\u0129\3\u0129\5\u0129\u1bba\n\u0129\3\u0129\3\u0129\3\u0129\7"+
		"\u0129\u1bbf\n\u0129\f\u0129\16\u0129\u1bc2\13\u0129\3\u0129\5\u0129\u1bc5"+
		"\n\u0129\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a"+
		"\u1bce\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a"+
		"\u1bd6\n\u012a\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1bdc\n\u012b\3"+
		"\u012b\3\u012b\3\u012c\3\u012c\5\u012c\u1be2\n\u012c\3\u012d\3\u012d\3"+
		"\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u1bf3\n\u012e\3\u012e\3\u012e"+
		"\5\u012e\u1bf7\n\u012e\3\u012e\3\u012e\3\u012e\3\u012f\3\u012f\3\u012f"+
		"\5\u012f\u1bff\n\u012f\3\u012f\3\u012f\5\u012f\u1c03\n\u012f\3\u012f\3"+
		"\u012f\3\u012f\3\u012f\7\u012f\u1c09\n\u012f\f\u012f\16\u012f\u1c0c\13"+
		"\u012f\3\u012f\5\u012f\u1c0f\n\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1c14"+
		"\n\u012f\3\u012f\3\u012f\5\u012f\u1c18\n\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\5\u012f\u1c1f\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\5\u012f\u1c25\n\u012f\5\u012f\u1c27\n\u012f\3\u0130\3\u0130\5\u0130\u1c2b"+
		"\n\u0130\3\u0130\3\u0130\5\u0130\u1c2f\n\u0130\3\u0130\3\u0130\5\u0130"+
		"\u1c33\n\u0130\3\u0130\3\u0130\5\u0130\u1c37\n\u0130\3\u0130\3\u0130\3"+
		"\u0130\3\u0130\5\u0130\u1c3d\n\u0130\3\u0130\3\u0130\5\u0130\u1c41\n\u0130"+
		"\5\u0130\u1c43\n\u0130\3\u0131\3\u0131\3\u0131\5\u0131\u1c48\n\u0131\3"+
		"\u0131\3\u0131\5\u0131\u1c4c\n\u0131\3\u0131\3\u0131\3\u0131\7\u0131\u1c51"+
		"\n\u0131\f\u0131\16\u0131\u1c54\13\u0131\5\u0131\u1c56\n\u0131\3\u0131"+
		"\5\u0131\u1c59\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\7\u0131"+
		"\u1c60\n\u0131\f\u0131\16\u0131\u1c63\13\u0131\3\u0131\3\u0131\5\u0131"+
		"\u1c67\n\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u1c6c\n\u0131\3\u0131\5"+
		"\u0131\u1c6f\n\u0131\5\u0131\u1c71\n\u0131\3\u0132\3\u0132\5\u0132\u1c75"+
		"\n\u0132\3\u0132\3\u0132\5\u0132\u1c79\n\u0132\3\u0132\5\u0132\u1c7c\n"+
		"\u0132\3\u0132\3\u0132\5\u0132\u1c80\n\u0132\3\u0133\3\u0133\3\u0134\3"+
		"\u0134\5\u0134\u1c86\n\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1c8b\n\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1c92\n\u0134\5\u0134"+
		"\u1c94\n\u0134\3\u0134\3\u0134\5\u0134\u1c98\n\u0134\3\u0134\3\u0134\3"+
		"\u0134\3\u0134\7\u0134\u1c9e\n\u0134\f\u0134\16\u0134\u1ca1\13\u0134\3"+
		"\u0134\3\u0134\3\u0134\5\u0134\u1ca6\n\u0134\3\u0134\3\u0134\5\u0134\u1caa"+
		"\n\u0134\3\u0134\5\u0134\u1cad\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\5\u0134\u1cb6\n\u0134\3\u0134\5\u0134\u1cb9\n"+
		"\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1cbf\n\u0134\3\u0135\3"+
		"\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1cc6\n\u0135\3\u0135\3\u0135\3"+
		"\u0135\5\u0135\u1ccb\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3"+
		"\u0135\5\u0135\u1cd3\n\u0135\3\u0136\3\u0136\3\u0136\5\u0136\u1cd8\n\u0136"+
		"\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\5\u0136\u1ce4\n\u0136\5\u0136\u1ce6\n\u0136\3\u0137\3\u0137\3"+
		"\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137\u1cf1\n"+
		"\u0137\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u1cf8\n\u0138\3"+
		"\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\7\u0138\u1d00\n\u0138\f"+
		"\u0138\16\u0138\u1d03\13\u0138\3\u0139\3\u0139\3\u0139\3\u0139\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u1d19\n\u013a"+
		"\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b"+
		"\3\u013b\3\u013b\5\u013b\u1d26\n\u013b\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\5\u013c\u1d36\n\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1d3b\n"+
		"\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1d42\n\u013c\3"+
		"\u013c\5\u013c\u1d45\n\u013c\6\u013c\u1d47\n\u013c\r\u013c\16\u013c\u1d48"+
		"\5\u013c\u1d4b\n\u013c\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\5\u013d\u1d5c\n\u013d\3\u013e\3\u013e\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1d6b"+
		"\n\u013f\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1d73"+
		"\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140"+
		"\u1d7c\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140"+
		"\u1d84\n\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141"+
		"\5\u0141\u1d8d\n\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141"+
		"\3\u0141\3\u0141\3\u0141\5\u0141\u1d98\n\u0141\3\u0141\3\u0141\5\u0141"+
		"\u1d9c\n\u0141\5\u0141\u1d9e\n\u0141\5\u0141\u1da0\n\u0141\3\u0142\3\u0142"+
		"\3\u0142\3\u0142\5\u0142\u1da6\n\u0142\3\u0142\3\u0142\3\u0142\5\u0142"+
		"\u1dab\n\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\5\u0142\u1db2\n"+
		"\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\5\u0142\u1dbf\n\u0142\5\u0142\u1dc1\n\u0142\5"+
		"\u0142\u1dc3\n\u0142\3\u0142\5\u0142\u1dc6\n\u0142\3\u0142\5\u0142\u1dc9"+
		"\n\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1dd0\n\u0143"+
		"\3\u0143\5\u0143\u1dd3\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143"+
		"\u1dd9\n\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1dde\n\u0143\5\u0143\u1de0"+
		"\n\u0143\3\u0143\5\u0143\u1de3\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\5\u0143\u1de9\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\5\u0143\u1df1\n\u0143\5\u0143\u1df3\n\u0143\3\u0143\5\u0143\u1df6\n\u0143"+
		"\3\u0143\3\u0143\5\u0143\u1dfa\n\u0143\3\u0143\5\u0143\u1dfd\n\u0143\3"+
		"\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1e03\n\u0143\3\u0143\5\u0143\u1e06"+
		"\n\u0143\3\u0143\3\u0143\5\u0143\u1e0a\n\u0143\3\u0143\5\u0143\u1e0d\n"+
		"\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1e13\n\u0143\3\u0143\5"+
		"\u0143\u1e16\n\u0143\5\u0143\u1e18\n\u0143\3\u0144\3\u0144\5\u0144\u1e1c"+
		"\n\u0144\3\u0145\3\u0145\3\u0145\5\u0145\u1e21\n\u0145\3\u0146\3\u0146"+
		"\3\u0146\3\u0146\3\u0146\3\u0146\5\u0146\u1e29\n\u0146\3\u0146\3\u0146"+
		"\5\u0146\u1e2d\n\u0146\3\u0146\5\u0146\u1e30\n\u0146\3\u0147\3\u0147\3"+
		"\u0147\5\u0147\u1e35\n\u0147\3\u0148\3\u0148\3\u0148\3\u0148\3\u0149\3"+
		"\u0149\5\u0149\u1e3d\n\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u1e42\n\u0149"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014b\3\u014b\3\u014b\5\u014b"+
		"\u1e4c\n\u014b\3\u014b\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\3\u014d\3\u014d\5\u014d\u1e57\n\u014d\3\u014d\7\u014d\u1e5a\n\u014d\f"+
		"\u014d\16\u014d\u1e5d\13\u014d\3\u014e\3\u014e\5\u014e\u1e61\n\u014e\3"+
		"\u014f\3\u014f\3\u014f\3\u014f\5\u014f\u1e67\n\u014f\3\u014f\3\u014f\5"+
		"\u014f\u1e6b\n\u014f\3\u014f\5\u014f\u1e6e\n\u014f\3\u014f\3\u014f\5\u014f"+
		"\u1e72\n\u014f\3\u014f\3\u014f\5\u014f\u1e76\n\u014f\3\u014f\3\u014f\3"+
		"\u014f\3\u014f\3\u014f\3\u014f\5\u014f\u1e7e\n\u014f\3\u014f\3\u014f\3"+
		"\u014f\5\u014f\u1e83\n\u014f\5\u014f\u1e85\n\u014f\3\u014f\5\u014f\u1e88"+
		"\n\u014f\3\u014f\7\u014f\u1e8b\n\u014f\f\u014f\16\u014f\u1e8e\13\u014f"+
		"\3\u0150\3\u0150\5\u0150\u1e92\n\u0150\3\u0150\3\u0150\3\u0150\5\u0150"+
		"\u1e97\n\u0150\3\u0150\5\u0150\u1e9a\n\u0150\3\u0150\5\u0150\u1e9d\n\u0150"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150\u1ea3\n\u0150\3\u0150\3\u0150"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150\u1eab\n\u0150\3\u0150\3\u0150"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150\u1eb3\n\u0150\3\u0150\5\u0150"+
		"\u1eb6\n\u0150\3\u0150\5\u0150\u1eb9\n\u0150\3\u0151\3\u0151\5\u0151\u1ebd"+
		"\n\u0151\3\u0151\3\u0151\3\u0151\5\u0151\u1ec2\n\u0151\3\u0151\5\u0151"+
		"\u1ec5\n\u0151\3\u0151\3\u0151\3\u0151\3\u0151\5\u0151\u1ecb\n\u0151\3"+
		"\u0151\3\u0151\5\u0151\u1ecf\n\u0151\3\u0151\3\u0151\3\u0151\3\u0151\5"+
		"\u0151\u1ed5\n\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\5"+
		"\u0151\u1edd\n\u0151\3\u0151\3\u0151\3\u0151\3\u0151\6\u0151\u1ee3\n\u0151"+
		"\r\u0151\16\u0151\u1ee4\3\u0151\5\u0151\u1ee8\n\u0151\3\u0151\3\u0151"+
		"\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151"+
		"\3\u0151\3\u0151\5\u0151\u1ef7\n\u0151\3\u0151\5\u0151\u1efa\n\u0151\5"+
		"\u0151\u1efc\n\u0151\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3"+
		"\u0152\3\u0152\3\u0152\5\u0152\u1f07\n\u0152\3\u0153\3\u0153\3\u0153\3"+
		"\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\5\u0153\u1f12\n\u0153\3"+
		"\u0154\3\u0154\3\u0154\3\u0154\3\u0154\7\u0154\u1f19\n\u0154\f\u0154\16"+
		"\u0154\u1f1c\13\u0154\3\u0154\3\u0154\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\5\u0155\u1f25\n\u0155\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\5\u0156\u1f2f\n\u0156\5\u0156\u1f31\n\u0156\5"+
		"\u0156\u1f33\n\u0156\3\u0156\5\u0156\u1f36\n\u0156\3\u0156\5\u0156\u1f39"+
		"\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\5\u0156\u1f44\n\u0156\5\u0156\u1f46\n\u0156\5\u0156\u1f48\n\u0156"+
		"\3\u0156\5\u0156\u1f4b\n\u0156\3\u0157\7\u0157\u1f4e\n\u0157\f\u0157\16"+
		"\u0157\u1f51\13\u0157\3\u0157\3\u0157\3\u0157\3\u0158\3\u0158\3\u0158"+
		"\3\u0158\3\u0158\5\u0158\u1f5b\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\5\u0159\u1f64\n\u0159\3\u0159\5\u0159\u1f67\n"+
		"\u0159\3\u0159\5\u0159\u1f6a\n\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3"+
		"\u0159\7\u0159\u1f71\n\u0159\f\u0159\16\u0159\u1f74\13\u0159\5\u0159\u1f76"+
		"\n\u0159\3\u0159\5\u0159\u1f79\n\u0159\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015a\5\u015a\u1f80\n\u015a\3\u015a\5\u015a\u1f83\n\u015a\3\u015a\3"+
		"\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015a\3\u015a\5\u015a\u1f91\n\u015a\3\u015a\5\u015a\u1f94\n\u015a\3"+
		"\u015a\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u1f9b\n\u015a\3\u015a\3"+
		"\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u1fab\n\u015a\3\u015b\3\u015b"+
		"\5\u015b\u1faf\n\u015b\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\3\u015c\5\u015c\u1fb9\n\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\3\u015c\3\u015c\3\u015c\7\u015c\u1fcc\n\u015c\f\u015c\16\u015c"+
		"\u1fcf\13\u015c\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u1fd5\n\u015d"+
		"\3\u015e\3\u015e\3\u015e\6\u015e\u1fda\n\u015e\r\u015e\16\u015e\u1fdb"+
		"\3\u015e\3\u015e\5\u015e\u1fe0\n\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\6\u015e\u1fe6\n\u015e\r\u015e\16\u015e\u1fe7\3\u015e\3\u015e\5\u015e"+
		"\u1fec\n\u015e\3\u015e\3\u015e\5\u015e\u1ff0\n\u015e\3\u015f\3\u015f\3"+
		"\u015f\3\u015f\5\u015f\u1ff6\n\u015f\3\u0160\3\u0160\3\u0160\3\u0160\3"+
		"\u0160\3\u0160\3\u0160\3\u0160\5\u0160\u2000\n\u0160\3\u0161\3\u0161\3"+
		"\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161\u200a\n\u0161\3"+
		"\u0162\3\u0162\3\u0163\3\u0163\3\u0163\5\u0163\u2011\n\u0163\3\u0163\3"+
		"\u0163\3\u0163\7\u0163\u2016\n\u0163\f\u0163\16\u0163\u2019\13\u0163\3"+
		"\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u2021\n\u0163\3"+
		"\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u2028\n\u0163\3\u0164\3"+
		"\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u202f\n\u0164\3\u0164\3\u0164\3"+
		"\u0164\3\u0164\3\u0164\3\u0165\3\u0165\5\u0165\u2038\n\u0165\3\u0165\3"+
		"\u0165\5\u0165\u203c\n\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3"+
		"\u0165\3\u0165\3\u0165\5\u0165\u2046\n\u0165\3\u0166\3\u0166\3\u0166\7"+
		"\u0166\u204b\n\u0166\f\u0166\16\u0166\u204e\13\u0166\3\u0167\3\u0167\3"+
		"\u0167\7\u0167\u2053\n\u0167\f\u0167\16\u0167\u2056\13\u0167\3\u0168\3"+
		"\u0168\3\u0168\7\u0168\u205b\n\u0168\f\u0168\16\u0168\u205e\13\u0168\3"+
		"\u0169\5\u0169\u2061\n\u0169\3\u0169\3\u0169\3\u016a\3\u016a\3\u016a\3"+
		"\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a"+
		"\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u2077\n\u016a"+
		"\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u2080"+
		"\n\u016a\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u2086\n\u016a\3\u016a"+
		"\3\u016a\3\u016a\3\u016a\5\u016a\u208c\n\u016a\3\u016a\3\u016a\3\u016a"+
		"\3\u016a\5\u016a\u2092\n\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a"+
		"\3\u016a\3\u016a\3\u016a\5\u016a\u209c\n\u016a\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\5\u016b\u20a3\n\u016b\3\u016b\7\u016b\u20a6\n\u016b\f"+
		"\u016b\16\u016b\u20a9\13\u016b\3\u016c\3\u016c\5\u016c\u20ad\n\u016c\3"+
		"\u016c\3\u016c\5\u016c\u20b1\n\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3"+
		"\u016c\5\u016c\u20b8\n\u016c\3\u016d\3\u016d\5\u016d\u20bc\n\u016d\3\u016d"+
		"\5\u016d\u20bf\n\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u20c4\n\u016d\3"+
		"\u016d\3\u016d\5\u016d\u20c8\n\u016d\3\u016d\3\u016d\5\u016d\u20cc\n\u016d"+
		"\3\u016d\3\u016d\3\u016d\5\u016d\u20d1\n\u016d\3\u016d\3\u016d\3\u016d"+
		"\7\u016d\u20d6\n\u016d\f\u016d\16\u016d\u20d9\13\u016d\5\u016d\u20db\n"+
		"\u016d\3\u016d\3\u016d\5\u016d\u20df\n\u016d\3\u016e\3\u016e\3\u016e\5"+
		"\u016e\u20e4\n\u016e\3\u016e\3\u016e\5\u016e\u20e8\n\u016e\3\u016f\3\u016f"+
		"\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\5\u016f\u20f1\n\u016f\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\5\u0170\u20f8\n\u0170\3\u0171\3\u0171"+
		"\3\u0171\3\u0171\3\u0171\7\u0171\u20ff\n\u0171\f\u0171\16\u0171\u2102"+
		"\13\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171"+
		"\3\u0171\5\u0171\u210d\n\u0171\5\u0171\u210f\n\u0171\3\u0172\3\u0172\3"+
		"\u0172\3\u0172\3\u0172\5\u0172\u2116\n\u0172\3\u0172\3\u0172\3\u0172\3"+
		"\u0172\5\u0172\u211c\n\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u2121\n\u0172"+
		"\3\u0172\7\u0172\u2124\n\u0172\f\u0172\16\u0172\u2127\13\u0172\5\u0172"+
		"\u2129\n\u0172\3\u0173\3\u0173\3\u0173\3\u0174\3\u0174\5\u0174\u2130\n"+
		"\u0174\3\u0175\3\u0175\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\7\u0176"+
		"\u2139\n\u0176\f\u0176\16\u0176\u213c\13\u0176\3\u0176\3\u0176\3\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\7\u0177"+
		"\u215b\n\u0177\f\u0177\16\u0177\u215e\13\u0177\3\u0177\3\u0177\3\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
		"\3\u0177\5\u0177\u216d\n\u0177\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178"+
		"\5\u0178\u2174\n\u0178\5\u0178\u2176\n\u0178\3\u0179\3\u0179\3\u0179\7"+
		"\u0179\u217b\n\u0179\f\u0179\16\u0179\u217e\13\u0179\3\u017a\3\u017a\3"+
		"\u017a\3\u017a\7\u017a\u2184\n\u017a\f\u017a\16\u017a\u2187\13\u017a\3"+
		"\u017a\3\u017a\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\5\u017b\u2190\n"+
		"\u017b\3\u017c\3\u017c\3\u017c\5\u017c\u2195\n\u017c\3\u017c\3\u017c\3"+
		"\u017c\3\u017c\3\u017c\5\u017c\u219c\n\u017c\3\u017c\5\u017c\u219f\n\u017c"+
		"\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u21a6\n\u017d\3\u017d"+
		"\3\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u21ad\n\u017d\3\u017d\5\u017d"+
		"\u21b0\n\u017d\5\u017d\u21b2\n\u017d\3\u017e\3\u017e\5\u017e\u21b6\n\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u21bc\n\u017e\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\5\u017f\u21c2\n\u017f\3\u0180\3\u0180\3\u0180\7\u0180"+
		"\u21c7\n\u0180\f\u0180\16\u0180\u21ca\13\u0180\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\5\u0181\u21d1\n\u0181\3\u0182\3\u0182\7\u0182\u21d5\n"+
		"\u0182\f\u0182\16\u0182\u21d8\13\u0182\3\u0183\3\u0183\5\u0183\u21dc\n"+
		"\u0183\3\u0183\3\u0183\5\u0183\u21e0\n\u0183\3\u0183\3\u0183\5\u0183\u21e4"+
		"\n\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u21e9\n\u0183\5\u0183\u21eb\n"+
		"\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u21f2\n\u0183\3"+
		"\u0183\3\u0183\5\u0183\u21f6\n\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3"+
		"\u0183\5\u0183\u21fd\n\u0183\5\u0183\u21ff\n\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\5\u0183\u2206\n\u0183\5\u0183\u2208\n\u0183\3\u0184\3"+
		"\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\5\u0184\u2211\n\u0184\3"+
		"\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\5\u0184\u2219\n\u0184\3"+
		"\u0185\3\u0185\3\u0185\7\u0185\u221e\n\u0185\f\u0185\16\u0185\u2221\13"+
		"\u0185\3\u0186\3\u0186\3\u0186\5\u0186\u2226\n\u0186\3\u0187\3\u0187\3"+
		"\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0188\5\u0188\u2231\n"+
		"\u0188\3\u0188\3\u0188\5\u0188\u2235\n\u0188\5\u0188\u2237\n\u0188\3\u0188"+
		"\5\u0188\u223a\n\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\5\u0188\u2252"+
		"\n\u0188\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189"+
		"\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a"+
		"\3\u018a\3\u018b\3\u018b\3\u018b\7\u018b\u2269\n\u018b\f\u018b\16\u018b"+
		"\u226c\13\u018b\3\u018c\3\u018c\5\u018c\u2270\n\u018c\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\7\u018d\u2282\n\u018d\f\u018d"+
		"\16\u018d\u2285\13\u018d\3\u018d\5\u018d\u2288\n\u018d\3\u018d\3\u018d"+
		"\5\u018d\u228c\n\u018d\3\u018e\3\u018e\3\u018e\3\u018e\3\u018f\3\u018f"+
		"\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\5\u018f"+
		"\u229c\n\u018f\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\5\u0190"+
		"\u22a4\n\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\5\u0190\u22ba\n\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\5\u0190\u22f4\n\u0190\3\u0190\3\u0190\5\u0190\u22f8\n\u0190\3\u0190\3"+
		"\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\5\u0190\u2319\n\u0190\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\3\u0191\5\u0191\u2320\n\u0191\3\u0192\3\u0192\3\u0192\3\u0192"+
		"\5\u0192\u2326\n\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u2333\n\u0192\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\5\u0192\u2342\n\u0192\3\u0192\3\u0192\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u234d\n\u0192"+
		"\3\u0193\3\u0193\3\u0193\5\u0193\u2352\n\u0193\3\u0193\3\u0193\3\u0193"+
		"\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\5\u0193\u235c\n\u0193\3\u0193"+
		"\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\5\u0193\u2365\n\u0193"+
		"\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0195\3\u0195"+
		"\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0198"+
		"\3\u0198\3\u0198\3\u0198\3\u0198\3\u0199\5\u0199\u2387\n\u0199\3\u0199"+
		"\3\u0199\3\u019a\5\u019a\u238c\n\u019a\3\u019a\3\u019a\3\u019b\3\u019b"+
		"\5\u019b\u2392\n\u019b\3\u019c\5\u019c\u2395\n\u019c\3\u019c\3\u019c\3"+
		"\u019c\5\u019c\u239a\n\u019c\3\u019c\7\u019c\u239d\n\u019c\f\u019c\16"+
		"\u019c\u23a0\13\u019c\3\u019c\3\u019c\3\u019d\3\u019d\3\u019d\3\u019d"+
		"\5\u019d\u23a8\n\u019d\3\u019d\7\u019d\u23ab\n\u019d\f\u019d\16\u019d"+
		"\u23ae\13\u019d\3\u019d\3\u019d\3\u019e\5\u019e\u23b3\n\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\7\u019e\u23ba\n\u019e\f\u019e\16\u019e"+
		"\u23bd\13\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\7\u019e\u23cb\n\u019e\f\u019e"+
		"\16\u019e\u23ce\13\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u23d3\n\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u23db\n\u019e"+
		"\3\u019f\3\u019f\5\u019f\u23df\n\u019f\3\u01a0\3\u01a0\3\u01a0\3\u01a0"+
		"\7\u01a0\u23e5\n\u01a0\f\u01a0\16\u01a0\u23e8\13\u01a0\3\u01a0\3\u01a0"+
		"\3\u01a1\3\u01a1\5\u01a1\u23ee\n\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\7\u01a2\u23f9\n\u01a2\f\u01a2"+
		"\16\u01a2\u23fc\13\u01a2\3\u01a3\3\u01a3\3\u01a3\7\u01a3\u2401\n\u01a3"+
		"\f\u01a3\16\u01a3\u2404\13\u01a3\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4"+
		"\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\5\u01a4\u2410\n\u01a4\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u2417\n\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\5\u01a5\u241d\n\u01a5\3\u01a5\3\u01a5\5\u01a5\u2421\n"+
		"\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u2432"+
		"\n\u01a5\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6"+
		"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u2441\n\u01a6\5\u01a6"+
		"\u2443\n\u01a6\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u2448\n\u01a6\3\u01a7\5"+
		"\u01a7\u244b\n\u01a7\3\u01a7\3\u01a7\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3"+
		"\u01a8\5\u01a8\u2454\n\u01a8\3\u01a8\5\u01a8\u2457\n\u01a8\3\u01a8\5\u01a8"+
		"\u245a\n\u01a8\3\u01a8\3\u01a8\3\u01a9\3\u01a9\3\u01a9\3\u01aa\3\u01aa"+
		"\3\u01aa\3\u01aa\3\u01aa\3\u01aa\5\u01aa\u2467\n\u01aa\3\u01ab\3\u01ab"+
		"\5\u01ab\u246b\n\u01ab\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\5\u01ac\u2473\n\u01ac\3\u01ad\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u2479\n"+
		"\u01ad\3\u01ae\3\u01ae\3\u01ae\3\u01ae\7\u01ae\u247f\n\u01ae\f\u01ae\16"+
		"\u01ae\u2482\13\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u2488\n"+
		"\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u248e\n\u01ae\3\u01ae\3"+
		"\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae"+
		"\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u249d\n\u01ae\3\u01af\3\u01af\3\u01af"+
		"\3\u01af\3\u01af\3\u01af\3\u01af\5\u01af\u24a6\n\u01af\3\u01af\3\u01af"+
		"\3\u01b0\3\u01b0\5\u01b0\u24ac\n\u01b0\3\u01b1\3\u01b1\3\u01b1\3\u01b1"+
		"\5\u01b1\u24b2\n\u01b1\3\u01b1\5\u01b1\u24b5\n\u01b1\3\u01b1\3\u01b1\5"+
		"\u01b1\u24b9\n\u01b1\3\u01b1\3\u01b1\3\u01b1\7\u01b1\u24be\n\u01b1\f\u01b1"+
		"\16\u01b1\u24c1\13\u01b1\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\5\u01b2"+
		"\u24c8\n\u01b2\3\u01b2\5\u01b2\u24cb\n\u01b2\3\u01b2\3\u01b2\3\u01b2\3"+
		"\u01b2\5\u01b2\u24d1\n\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\5\u01b2\u24d7"+
		"\n\u01b2\5\u01b2\u24d9\n\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\5\u01b2"+
		"\u24df\n\u01b2\3\u01b2\5\u01b2\u24e2\n\u01b2\5\u01b2\u24e4\n\u01b2\3\u01b2"+
		"\3\u01b2\3\u01b2\3\u01b2\5\u01b2\u24ea\n\u01b2\5\u01b2\u24ec\n\u01b2\3"+
		"\u01b2\3\u01b2\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3"+
		"\3\u01b3\3\u01b3\3\u01b3\5\u01b3\u24fa\n\u01b3\3\u01b3\3\u01b3\3\u01b3"+
		"\3\u01b3\3\u01b3\5\u01b3\u2501\n\u01b3\3\u01b3\3\u01b3\3\u01b4\3\u01b4"+
		"\3\u01b4\3\u01b4\3\u01b4\5\u01b4\u250a\n\u01b4\3\u01b5\3\u01b5\3\u01b5"+
		"\3\u01b5\3\u01b5\5\u01b5\u2511\n\u01b5\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\5\u01b6\u251d\n\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\5\u01b6\u2524\n\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b7\3\u01b7\3\u01b7\5\u01b7\u252b\n\u01b7\3\u01b7\3\u01b7"+
		"\3\u01b7\3\u01b7\3\u01b7\5\u01b7\u2532\n\u01b7\3\u01b7\3\u01b7\3\u01b7"+
		"\3\u01b7\5\u01b7\u2538\n\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7"+
		"\5\u01b7\u253f\n\u01b7\3\u01b7\5\u01b7\u2542\n\u01b7\3\u01b8\3\u01b8\3"+
		"\u01b8\5\u01b8\u2547\n\u01b8\3\u01b8\3\u01b8\3\u01b9\3\u01b9\3\u01b9\5"+
		"\u01b9\u254e\n\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u2555"+
		"\n\u01b9\3\u01b9\3\u01b9\3\u01ba\3\u01ba\5\u01ba\u255b\n\u01ba\3\u01bb"+
		"\3\u01bb\3\u01bb\5\u01bb\u2560\n\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb"+
		"\5\u01bb\u2566\n\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u256c\n"+
		"\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u2572\n\u01bb\3\u01bb\3"+
		"\u01bb\3\u01bb\3\u01bb\5\u01bb\u2578\n\u01bb\3\u01bb\3\u01bb\3\u01bb\3"+
		"\u01bb\5\u01bb\u257e\n\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u2584"+
		"\n\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u258a\n\u01bb\3\u01bb"+
		"\5\u01bb\u258d\n\u01bb\3\u01bc\3\u01bc\5\u01bc\u2591\n\u01bc\3\u01bc\3"+
		"\u01bc\3\u01bc\5\u01bc\u2596\n\u01bc\7\u01bc\u2598\n\u01bc\f\u01bc\16"+
		"\u01bc\u259b\13\u01bc\3\u01bd\3\u01bd\3\u01bd\7\u01bd\u25a0\n\u01bd\f"+
		"\u01bd\16\u01bd\u25a3\13\u01bd\3\u01be\3\u01be\5\u01be\u25a7\n\u01be\3"+
		"\u01bf\3\u01bf\3\u01c0\3\u01c0\3\u01c1\5\u01c1\u25ae\n\u01c1\3\u01c1\3"+
		"\u01c1\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\5\u01c2\u25b7\n\u01c2\5"+
		"\u01c2\u25b9\n\u01c2\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\5\u01c3\u25c0"+
		"\n\u01c3\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\5\u01c4\u25cc\n\u01c4\3\u01c5\3\u01c5\3\u01c5\5\u01c5"+
		"\u25d1\n\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\3\u01c5\3\u01c5\5\u01c5\u25dc\n\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\3\u01c5\3\u01c5\3\u01c5\3\u01c5\5\u01c5\u25e6\n\u01c5\5\u01c5\u25e8\n"+
		"\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\5\u01c5\u25ee\n\u01c5\5\u01c5\u25f0"+
		"\n\u01c5\3\u01c5\3\u01c5\3\u01c5\5\u01c5\u25f5\n\u01c5\5\u01c5\u25f7\n"+
		"\u01c5\3\u01c5\5\u01c5\u25fa\n\u01c5\3\u01c6\3\u01c6\5\u01c6\u25fe\n\u01c6"+
		"\3\u01c7\3\u01c7\5\u01c7\u2602\n\u01c7\3\u01c8\3\u01c8\3\u01c8\3\u01c8"+
		"\5\u01c8\u2608\n\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8"+
		"\3\u01c8\5\u01c8\u2611\n\u01c8\3\u01c8\5\u01c8\u2614\n\u01c8\5\u01c8\u2616"+
		"\n\u01c8\3\u01c9\5\u01c9\u2619\n\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9"+
		"\5\u01c9\u261f\n\u01c9\3\u01c9\3\u01c9\5\u01c9\u2623\n\u01c9\3\u01c9\5"+
		"\u01c9\u2626\n\u01c9\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3"+
		"\u01ca\5\u01ca\u262f\n\u01ca\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3"+
		"\u01cb\3\u01cb\5\u01cb\u2638\n\u01cb\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3"+
		"\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u2644\n\u01cc\3"+
		"\u01cc\5\u01cc\u2647\n\u01cc\3\u01cd\3\u01cd\5\u01cd\u264b\n\u01cd\3\u01cd"+
		"\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u2651\n\u01cd\3\u01cd\5\u01cd\u2654\n"+
		"\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u265a\n\u01cd\3\u01ce\3"+
		"\u01ce\3\u01ce\5\u01ce\u265f\n\u01ce\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u2664"+
		"\n\u01cf\3\u01cf\3\u01cf\5\u01cf\u2668\n\u01cf\3\u01cf\3\u01cf\5\u01cf"+
		"\u266c\n\u01cf\3\u01cf\3\u01cf\5\u01cf\u2670\n\u01cf\3\u01d0\3\u01d0\3"+
		"\u01d1\3\u01d1\3\u01d1\5\u01d1\u2677\n\u01d1\3\u01d2\3\u01d2\3\u01d3\3"+
		"\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\5\u01d3\u268a\n\u01d3\3\u01d4"+
		"\3\u01d4\3\u01d5\3\u01d5\5\u01d5\u2690\n\u01d5\3\u01d5\2\4\\\u02b6\u01d6"+
		"\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFH"+
		"JLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c"+
		"\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4"+
		"\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc"+
		"\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4"+
		"\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec"+
		"\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104"+
		"\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c"+
		"\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134"+
		"\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c"+
		"\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164"+
		"\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c"+
		"\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194"+
		"\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac"+
		"\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4"+
		"\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc"+
		"\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4"+
		"\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c"+
		"\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224"+
		"\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c"+
		"\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254"+
		"\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c"+
		"\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284"+
		"\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c"+
		"\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4"+
		"\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc"+
		"\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4"+
		"\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc"+
		"\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314"+
		"\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c"+
		"\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344"+
		"\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c"+
		"\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374"+
		"\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c"+
		"\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4"+
		"\u03a6\u03a8\2{\3\2\u030a\u030b\4\2\u030a\u030a\u030f\u030f\5\2\u01d6"+
		"\u01d6\u02e4\u02e4\u02e7\u02e7\4\2\u030a\u030b\u030f\u030f\4\2\u00ba\u00ba"+
		"\u02c6\u02c6\5\2||\u012a\u012a\u016a\u016a\4\2\u00e1\u00e1\u00e4\u00e4"+
		"\3\2\u030f\u0310\3\2\u0123\u0127\4\2\u01c4\u01c4\u026f\u026f\4\2\u012d"+
		"\u012d\u0269\u0269\5\2TT\u012d\u012d\u0269\u0269\5\2\u00d4\u00d4\u00ff"+
		"\u00ff\u02ba\u02bb\4\2\22\22\u02dc\u02dc\4\2\26\26\u0239\u0239\4\2\5\5"+
		"\u0297\u0297\5\2\5\5\u0261\u0261\u0295\u0295\4\2\t\tHH\4\2\3\3gg\4\2\u01e1"+
		"\u01e1\u01e9\u01e9\4\2\u030b\u030b\u030f\u030f\4\2\u0224\u0224\u024c\u024c"+
		"\4\2";
	private static final String _serializedATNSegment1 =
		"\7\b\u00da\u00da\5\2\u00d4\u00d4\u00f6\u00f6\u00f8\u00f8\4\2\u014c\u014c"+
		"\u014f\u014f\4\2\n\n\u00ec\u00ec\3\2\u030d\u030e\4\2\3\3\u013c\u013c\4"+
		"\2\u00b5\u00b5\u017a\u017a\3\2\u0105\u0106\4\2\u030b\u030b\u030f\u0310"+
		"\4\2\u00cd\u00cd\u0168\u0168\4\2\u00c8\u00c8\u0145\u0145\4\2\u010c\u010c"+
		"\u01e1\u01e1\4\2\u030d\u030d\u030f\u030f\4\2]]\u0091\u0091\6\2\\\\\u00a1"+
		"\u00a1\u0131\u0131\u016b\u016b\4\2\35\35\u01fe\u01fe\4\2\u00a1\u00a1\u016b"+
		"\u016b\4\2\\\\\u016b\u016b\5\2\u0209\u0209\u024c\u024c\u02e0\u02e0\4\2"+
		"\u02f5\u02f5\u030b\u030b\5\2AA\u013e\u013e\u01f7\u01f7\4\2YY\u030f\u030f"+
		"\4\2YY\u030b\u030b\4\2\u0233\u0233\u030f\u030f\5\2\u0209\u0209\u0224\u0224"+
		"\u024c\u024c\6\2\u0186\u0188\u01db\u01dc\u0290\u0292\u02ea\u02eb\4\2\u0085"+
		"\u0085\u008b\u008b\5\2\u0214\u0214\u0238\u0238\u024a\u024a\5\2\f\f\u0158"+
		"\u0158\u021d\u021d\4\2\u00d4\u00d4\u00f2\u00f2\3\2\u0101\u0102\5\2\\\\"+
		"\u00a1\u00a1\u016b\u016b\4\2\u0085\u0085\u018a\u018a\4\2\u0272\u0273\u0293"+
		"\u0293\4\2\u00f4\u00f4\u02b2\u02b2\5\2\u01ec\u01ec\u02b5\u02b5\u02fd\u02fd"+
		"\5\2\u0155\u0155\u019a\u019a\u01e1\u01e1\5\2\u01cf\u01cf\u0216\u0216\u024f"+
		"\u024f\4\2\u020c\u020c\u0233\u0233\4\2\5\5\u00a5\u00a6\5\2\u00aa\u00aa"+
		"\u00cf\u00cf\u00dd\u00dd\5\2\u0112\u0112\u0152\u0152\u01e2\u01e2\4\2k"+
		"k\u01e2\u01e2\5\2\5\5\u017e\u017e\u0279\u0279\4\2\u008c\u008c\u00e1\u00e1"+
		"\5\2\u01e7\u01e7\u026a\u026a\u026d\u026d\4\2\u0295\u0295\u0297\u0297\5"+
		"\2\u0255\u0255\u02ab\u02ab\u02ca\u02ca\5\2\u018d\u018d\u01e2\u01e2\u0203"+
		"\u0203\4\2\u0117\u0117\u02d7\u02d7\4\2\u0203\u0203\u02c9\u02c9\5\2\u008c"+
		"\u008c\u01ac\u01ac\u02c9\u02c9\5\2\u00d4\u00d4\u01b4\u01b4\u02e8\u02e8"+
		"\4\2\u024f\u024f\u02bd\u02bd\4\2\u0170\u0170\u0236\u0236\3\2\u0272\u0273"+
		"\4\2\u0081\u0081\u0310\u0310\4\2\u01d2\u01d2\u01ec\u01ec\4\2\u01f2\u01f2"+
		"\u02cf\u02cf\4\2\u0155\u0155\u0174\u0174\3\2\u015f\u0160\6\2\u01ad\u01ad"+
		"\u0274\u0274\u02c1\u02c1\u030f\u030f\4\2\u01bd\u01bd\u01e5\u01e5\4\2\u0206"+
		"\u0206\u02b7\u02b7\6\2\u01e6\u01e6\u01f9\u01f9\u0227\u0227\u02d0\u02d0"+
		"\5\2\u0270\u0270\u0295\u0295\u02b8\u02b8\4\2\u0180\u0180\u029d\u029d\3"+
		"\2\u0329\u032b\4\2\u032c\u032d\u032f\u0331\3\2\u032c\u032d\5\2\5\5\f\f"+
		"\u0142\u0142\4\2\5\5bb\3\2\u0311\u0312\4\2\u02b0\u02b0\u02b2\u02b2\4\2"+
		"\u01ff\u01ff\u025b\u025b\6\2\u0108\u0108\u019a\u019a\u01f3\u01f3\u027a"+
		"\u027a\5\2\u01a6\u01a6\u02ae\u02ae\u02f0\u02f0\4\2\20\20^^\4\2\u00ed\u00ed"+
		"\u0212\u0212\5\2\u00c8\u00c8\u01bb\u01bb\u0212\u0212\5\2\u00c8\u00c8\u0212"+
		"\u0212\u0237\u0237\4\2\u00de\u00de\u030a\u030b\5\2\u008c\u008c\u00b0\u00b0"+
		"\u011e\u011e\6\2\u00c8\u00c8\u0212\u0212\u0237\u0237\u02a2\u02a2\4\2\u030a"+
		"\u030a\u030c\u030c\5\2\u01d9\u01d9\u028f\u028f\u02b3\u02b3\b\2\u01a2\u01a2"+
		"\u023b\u023b\u024e\u024e\u02d3\u02d4\u02da\u02da\u02fa\u02fb\4\2\u01c0"+
		"\u01c0\u01c2\u01c2\4\2\u0200\u0200\u022c\u022c\4\2\u022a\u022a\u022d\u022d"+
		"\4\2\u028e\u028e\u02b2\u02b2\5\2\u008c\u008c\u00e1\u00e1\u0295\u0295\4"+
		"\2\64\64\u00d3\u00d3\3\2\u010f\u0110\4\2\u023b\u023b\u030b\u030b\4\2\u030b"+
		"\u030b\u0311\u0311b\2\'\'RRrr\u0082\u0083\u0086\u0086\u00ab\u00ab\u00bc"+
		"\u00bd\u00e2\u00e2\u00f0\u00f0\u0104\u0104\u0108\u0108\u0119\u011a\u0121"+
		"\u0121\u0128\u0128\u0136\u0136\u013f\u013f\u0143\u0143\u014a\u014a\u0158"+
		"\u0158\u0180\u0180\u0183\u0183\u0185\u0185\u0195\u0195\u019a\u019a\u01a1"+
		"\u01a2\u01ad\u01ae\u01b1\u01b1\u01b5\u01b5\u01b9\u01b9\u01bb\u01bc\u01be"+
		"\u01c2\u01d6\u01d6\u01d8\u01d9\u01e1\u01e1\u01e6\u01e6\u01ec\u01ec\u01f1"+
		"\u01f1\u01f8\u01f9\u01ff\u01ff\u0201\u0203\u0206\u0207\u020c\u020c\u020e"+
		"\u020f\u0212\u0212\u0218\u0218\u021a\u021a\u021e\u0220\u0223\u0223\u0225"+
		"\u0227\u022b\u022b\u022e\u022e\u0233\u0237\u023a\u023b\u0245\u0246\u0248"+
		"\u0248\u024e\u024e\u0253\u0253\u0256\u0256\u025b\u025d\u0260\u0260\u0265"+
		"\u0265\u0267\u0267\u026b\u026b\u026d\u026e\u0270\u0274\u0276\u0277\u027a"+
		"\u027a\u027e\u027e\u0280\u0280\u0285\u0285\u028e\u028f\u0293\u0293\u0295"+
		"\u0295\u0299\u0299\u029d\u029d\u02a2\u02a2\u02a4\u02a4\u02ad\u02ae\u02b0"+
		"\u02b5\u02b7\u02b8\u02c1\u02c1\u02c4\u02c4\u02c9\u02c9\u02cb\u02cb\u02cd"+
		"\u02ce\u02d0\u02d1\u02d3\u02d4\u02da\u02da\u02e1\u02e4\u02ed\u02ed\u02f0"+
		"\u02f4\u02f6\u02f6\u02f9\u02fd\u02ff\u02ff\u0301\u0302\u030c\u030c\3\2"+
		"\u0317\u031e\7\2\u0209\u0209\u0224\u0224\u024c\u024c\u02e0\u02e0\u032b"+
		"\u032b\2\u2c96\2\u03ad\3\2\2\2\4\u03b2\3\2\2\2\6\u03bd\3\2\2\2\b\u03c7"+
		"\3\2\2\2\n\u03ce\3\2\2\2\f\u046d\3\2\2\2\16\u047b\3\2\2\2\20\u047d\3\2"+
		"\2\2\22\u0488\3\2\2\2\24\u048c\3\2\2\2\26\u049a\3\2\2\2\30\u049c\3\2\2"+
		"\2\32\u04a3\3\2\2\2\34\u04ad\3\2\2\2\36\u04b9\3\2\2\2 \u04bb\3\2\2\2\""+
		"\u04bd\3\2\2\2$\u04bf\3\2\2\2&\u04d9\3\2\2\2(\u04ea\3\2\2\2*\u04f7\3\2"+
		"\2\2,\u04fc\3\2\2\2.\u0512\3\2\2\2\60\u0520\3\2\2\2\62\u0522\3\2\2\2\64"+
		"\u053f\3\2\2\2\66\u0554\3\2\2\28\u0561\3\2\2\2:\u0566\3\2\2\2<\u056a\3"+
		"\2\2\2>\u056e\3\2\2\2@\u0579\3\2\2\2B\u057e\3\2\2\2D\u0580\3\2\2\2F\u0585"+
		"\3\2\2\2H\u0587\3\2\2\2J\u0589\3\2\2\2L\u058c\3\2\2\2N\u0590\3\2\2\2P"+
		"\u0596\3\2\2\2R\u0598\3\2\2\2T\u059b\3\2\2\2V\u059d\3\2\2\2X\u05a0\3\2"+
		"\2\2Z\u05a5\3\2\2\2\\\u05b0\3\2\2\2^\u05b9\3\2\2\2`\u05bd\3\2\2\2b\u05bf"+
		"\3\2\2\2d\u05c5\3\2\2\2f\u05c7\3\2\2\2h\u05c9\3\2\2\2j\u05cc\3\2\2\2l"+
		"\u05d4\3\2\2\2n\u05d6\3\2\2\2p\u05d8\3\2\2\2r\u05ee\3\2\2\2t\u0601\3\2"+
		"\2\2v\u0609\3\2\2\2x\u060d\3\2\2\2z\u0615\3\2\2\2|\u0624\3\2\2\2~\u0626"+
		"\3\2\2\2\u0080\u0652\3\2\2\2\u0082\u065b\3\2\2\2\u0084\u0668\3\2\2\2\u0086"+
		"\u066a\3\2\2\2\u0088\u066c\3\2\2\2\u008a\u066f\3\2\2\2\u008c\u0673\3\2"+
		"\2\2\u008e\u067d\3\2\2\2\u0090\u0687\3\2\2\2\u0092\u06b3\3\2\2\2\u0094"+
		"\u06ca\3\2\2\2\u0096\u06cc\3\2\2\2\u0098\u06ce\3\2\2\2\u009a\u06d0\3\2"+
		"\2\2\u009c\u06d5\3\2\2\2\u009e\u06d8\3\2\2\2\u00a0\u083b\3\2\2\2\u00a2"+
		"\u083d\3\2\2\2\u00a4\u0873\3\2\2\2\u00a6\u0878\3\2\2\2\u00a8\u08a4\3\2"+
		"\2\2\u00aa\u08bb\3\2\2\2\u00ac\u08d9\3\2\2\2\u00ae\u08dd\3\2\2\2\u00b0"+
		"\u08e3\3\2\2\2\u00b2\u08e9\3\2\2\2\u00b4\u08ed\3\2\2\2\u00b6\u08f1\3\2"+
		"\2\2\u00b8\u08f6\3\2\2\2\u00ba\u0904\3\2\2\2\u00bc\u090a\3\2\2\2\u00be"+
		"\u0910\3\2\2\2\u00c0\u0920\3\2\2\2\u00c2\u0924\3\2\2\2\u00c4\u092a\3\2"+
		"\2\2\u00c6\u0930\3\2\2\2\u00c8\u0938\3\2\2\2\u00ca\u093e\3\2\2\2\u00cc"+
		"\u094d\3\2\2\2\u00ce\u095f\3\2\2\2\u00d0\u0966\3\2\2\2\u00d2\u096b\3\2"+
		"\2\2\u00d4\u0976\3\2\2\2\u00d6\u097b\3\2\2\2\u00d8\u097f\3\2\2\2\u00da"+
		"\u0983\3\2\2\2\u00dc\u0988\3\2\2\2\u00de\u098d\3\2\2\2\u00e0\u0992\3\2"+
		"\2\2\u00e2\u09a0\3\2\2\2\u00e4\u09a6\3\2\2\2\u00e6\u09ab\3\2\2\2\u00e8"+
		"\u09b3\3\2\2\2\u00ea\u09b7\3\2\2\2\u00ec\u09c8\3\2\2\2\u00ee\u09d0\3\2"+
		"\2\2\u00f0\u09d6\3\2\2\2\u00f2\u09e4\3\2\2\2\u00f4\u09fa\3\2\2\2\u00f6"+
		"\u09ff\3\2\2\2\u00f8\u0a05\3\2\2\2\u00fa\u0a0a\3\2\2\2\u00fc\u0a0e\3\2"+
		"\2\2\u00fe\u0a2a\3\2\2\2\u0100\u0a35\3\2\2\2\u0102\u0a3e\3\2\2\2\u0104"+
		"\u0a4b\3\2\2\2\u0106\u0a53\3\2\2\2\u0108\u0a58\3\2\2\2\u010a\u0a63\3\2"+
		"\2\2\u010c\u0a81\3\2\2\2\u010e\u0a9f\3\2\2\2\u0110\u0ac1\3\2\2\2\u0112"+
		"\u0ad1\3\2\2\2\u0114\u0ade\3\2\2\2\u0116\u0af1\3\2\2\2\u0118\u0afe\3\2"+
		"\2\2\u011a\u0b07\3\2\2\2\u011c\u0b25\3\2\2\2\u011e\u0c18\3\2\2\2\u0120"+
		"\u0c21\3\2\2\2\u0122\u0c5b\3\2\2\2\u0124\u0c8c\3\2\2\2\u0126\u0c8e\3\2"+
		"\2\2\u0128\u0cb7\3\2\2\2\u012a\u0ce9\3\2\2\2\u012c\u0d2f\3\2\2\2\u012e"+
		"\u0d72\3\2\2\2\u0130\u0d82\3\2\2\2\u0132\u0d9e\3\2\2\2\u0134\u0db1\3\2"+
		"\2\2\u0136\u0dc6\3\2\2\2\u0138\u0e0e\3\2\2\2\u013a\u0e6d\3\2\2\2\u013c"+
		"\u0e83\3\2\2\2\u013e\u0e8f\3\2\2\2\u0140\u0eab\3\2\2\2\u0142\u0ec0\3\2"+
		"\2\2\u0144\u0eda\3\2\2\2\u0146\u0ee3\3\2\2\2\u0148\u0f03\3\2\2\2\u014a"+
		"\u0f0d\3\2\2\2\u014c\u0f1d\3\2\2\2\u014e\u0f29\3\2\2\2\u0150\u0f32\3\2"+
		"\2\2\u0152\u0f43\3\2\2\2\u0154\u0f5b\3\2\2\2\u0156\u0fc7\3\2\2\2\u0158"+
		"\u0fe1\3\2\2\2\u015a\u0fed\3\2\2\2\u015c\u0ff4\3\2\2\2\u015e\u1020\3\2"+
		"\2\2\u0160\u102b\3\2\2\2\u0162\u103f\3\2\2\2\u0164\u1069\3\2\2\2\u0166"+
		"\u1070\3\2\2\2\u0168\u107e\3\2\2\2\u016a\u1090\3\2\2\2\u016c\u10d6\3\2"+
		"\2\2\u016e\u1101\3\2\2\2\u0170\u1137\3\2\2\2\u0172\u11c0\3\2\2\2\u0174"+
		"\u124f\3\2\2\2\u0176\u126c\3\2\2\2\u0178\u1289\3\2\2\2\u017a\u12f8\3\2"+
		"\2\2\u017c\u1305\3\2\2\2\u017e\u130d\3\2\2\2\u0180\u1315\3\2\2\2\u0182"+
		"\u132b\3\2\2\2\u0184\u1349\3\2\2\2\u0186\u1364\3\2\2\2\u0188\u1378\3\2"+
		"\2\2\u018a\u13a8\3\2\2\2\u018c\u13cd\3\2\2\2\u018e\u1499\3\2\2\2\u0190"+
		"\u14b7\3\2\2\2\u0192\u14b9\3\2\2\2\u0194\u14d9\3\2\2\2\u0196\u1508\3\2"+
		"\2\2\u0198\u153c\3\2\2\2\u019a\u154c\3\2\2\2\u019c\u155a\3\2\2\2\u019e"+
		"\u15a3\3\2\2\2\u01a0\u15c2\3\2\2\2\u01a2\u15c4\3\2\2\2\u01a4\u15c8\3\2"+
		"\2\2\u01a6\u15e6\3\2\2\2\u01a8\u15e8\3\2\2\2\u01aa\u15fd\3\2\2\2\u01ac"+
		"\u1656\3\2\2\2\u01ae\u1658\3\2\2\2\u01b0\u1665\3\2\2\2\u01b2\u169b\3\2"+
		"\2\2\u01b4\u169e\3\2\2\2\u01b6\u16cc\3\2\2\2\u01b8\u16cf\3\2\2\2\u01ba"+
		"\u16f0\3\2\2\2\u01bc\u1701\3\2\2\2\u01be\u1704\3\2\2\2\u01c0\u173f\3\2"+
		"\2\2\u01c2\u1757\3\2\2\2\u01c4\u1767\3\2\2\2\u01c6\u1769\3\2\2\2\u01c8"+
		"\u179a\3\2\2\2\u01ca\u17c3\3\2\2\2\u01cc\u17ef\3\2\2\2\u01ce\u17f7\3\2"+
		"\2\2\u01d0\u1824\3\2\2\2\u01d2\u1826\3\2\2\2\u01d4\u182e\3\2\2\2\u01d6"+
		"\u184f\3\2\2\2\u01d8\u1857\3\2\2\2\u01da\u1872\3\2\2\2\u01dc\u1885\3\2"+
		"\2\2\u01de\u18a0\3\2\2\2\u01e0\u18be\3\2\2\2\u01e2\u18d5\3\2\2\2\u01e4"+
		"\u18e3\3\2\2\2\u01e6\u18e5\3\2\2\2\u01e8\u1904\3\2\2\2\u01ea\u1920\3\2"+
		"\2\2\u01ec\u192c\3\2\2\2\u01ee\u194a\3\2\2\2\u01f0\u194c\3\2\2\2\u01f2"+
		"\u197a\3\2\2\2\u01f4\u19a8\3\2\2\2\u01f6\u19bb\3\2\2\2\u01f8\u19bd\3\2"+
		"\2\2\u01fa\u19d6\3\2\2\2\u01fc\u19d8\3\2\2\2\u01fe\u19e0\3\2\2\2\u0200"+
		"\u19e2\3\2\2\2\u0202\u1a6e\3\2\2\2\u0204\u1a76\3\2\2\2\u0206\u1a78\3\2"+
		"\2\2\u0208\u1a7a\3\2\2\2\u020a\u1a7c\3\2\2\2\u020c\u1a8a\3\2\2\2\u020e"+
		"\u1a90\3\2\2\2\u0210\u1a92\3\2\2\2\u0212\u1a94\3\2\2\2\u0214\u1a99\3\2"+
		"\2\2\u0216\u1a9b\3\2\2\2\u0218\u1a9f\3\2\2\2\u021a\u1aab\3\2\2\2\u021c"+
		"\u1aad\3\2\2\2\u021e\u1ab0\3\2\2\2\u0220\u1ab3\3\2\2\2\u0222\u1ab5\3\2"+
		"\2\2\u0224\u1ab7\3\2\2\2\u0226\u1ab9\3\2\2\2\u0228\u1ad6\3\2\2\2\u022a"+
		"\u1ad8\3\2\2\2\u022c\u1ae3\3\2\2\2\u022e\u1ae6\3\2\2\2\u0230\u1aef\3\2"+
		"\2\2\u0232\u1af7\3\2\2\2\u0234\u1afe\3\2\2\2\u0236\u1b15\3\2\2\2\u0238"+
		"\u1b17\3\2\2\2\u023a\u1b22\3\2\2\2\u023c\u1b24\3\2\2\2\u023e\u1b3f\3\2"+
		"\2\2\u0240\u1b46\3\2\2\2\u0242\u1b4c\3\2\2\2\u0244\u1b5f\3\2\2\2\u0246"+
		"\u1b61\3\2\2\2\u0248\u1b72\3\2\2\2\u024a\u1b89\3\2\2\2\u024c\u1b9a\3\2"+
		"\2\2\u024e\u1bab\3\2\2\2\u0250\u1bb5\3\2\2\2\u0252\u1bc6\3\2\2\2\u0254"+
		"\u1bd7\3\2\2\2\u0256\u1be1\3\2\2\2\u0258\u1be3\3\2\2\2\u025a\u1bea\3\2"+
		"\2\2\u025c\u1c26\3\2\2\2\u025e\u1c42\3\2\2\2\u0260\u1c70\3\2\2\2\u0262"+
		"\u1c74\3\2\2\2\u0264\u1c81\3\2\2\2\u0266\u1cbe\3\2\2\2\u0268\u1cc0\3\2"+
		"\2\2\u026a\u1ce5\3\2\2\2\u026c\u1ce7\3\2\2\2\u026e\u1cf7\3\2\2\2\u0270"+
		"\u1d04\3\2\2\2\u0272\u1d18\3\2\2\2\u0274\u1d25\3\2\2\2\u0276\u1d4a\3\2"+
		"\2\2\u0278\u1d5b\3\2\2\2\u027a\u1d5d\3\2\2\2\u027c\u1d6a\3\2\2\2\u027e"+
		"\u1d83\3\2\2\2\u0280\u1d9f\3\2\2\2\u0282\u1dc8\3\2\2\2\u0284\u1e17\3\2"+
		"\2\2\u0286\u1e19\3\2\2\2\u0288\u1e1d\3\2\2\2\u028a\u1e22\3\2\2\2\u028c"+
		"\u1e31\3\2\2\2\u028e\u1e36\3\2\2\2\u0290\u1e3a\3\2\2\2\u0292\u1e43\3\2"+
		"\2\2\u0294\u1e48\3\2\2\2\u0296\u1e50\3\2\2\2\u0298\u1e54\3\2\2\2\u029a"+
		"\u1e60\3\2\2\2\u029c\u1e62\3\2\2\2\u029e\u1e91\3\2\2\2\u02a0\u1ebc\3\2"+
		"\2\2\u02a2\u1efd\3\2\2\2\u02a4\u1f08\3\2\2\2\u02a6\u1f13\3\2\2\2\u02a8"+
		"\u1f1f\3\2\2\2\u02aa\u1f26\3\2\2\2\u02ac\u1f4f\3\2\2\2\u02ae\u1f5a\3\2"+
		"\2\2\u02b0\u1f5c\3\2\2\2\u02b2\u1faa\3\2\2\2\u02b4\u1fae\3\2\2\2\u02b6"+
		"\u1fb8\3\2\2\2\u02b8\u1fd4\3\2\2\2\u02ba\u1fef\3\2\2\2\u02bc\u1ff5\3\2"+
		"\2\2\u02be\u1fff\3\2\2\2\u02c0\u2009\3\2\2\2\u02c2\u200b\3\2\2\2\u02c4"+
		"\u2027\3\2\2\2\u02c6\u2029\3\2\2\2\u02c8\u2045\3\2\2\2\u02ca\u2047\3\2"+
		"\2\2\u02cc\u204f\3\2\2\2\u02ce\u2057\3\2\2\2\u02d0\u2060\3\2\2\2\u02d2"+
		"\u209b\3\2\2\2\u02d4\u20a2\3\2\2\2\u02d6\u20b0\3\2\2\2\u02d8\u20b9\3\2"+
		"\2\2\u02da\u20e0\3\2\2\2\u02dc\u20f0\3\2\2\2\u02de\u20f7\3\2\2\2\u02e0"+
		"\u20f9\3\2\2\2\u02e2\u2128\3\2\2\2\u02e4\u212a\3\2\2\2\u02e6\u212d\3\2"+
		"\2\2\u02e8\u2131\3\2\2\2\u02ea\u2133\3\2\2\2\u02ec\u216c\3\2\2\2\u02ee"+
		"\u216e\3\2\2\2\u02f0\u2177\3\2\2\2\u02f2\u217f\3\2\2\2\u02f4\u218f\3\2"+
		"\2\2\u02f6\u2194\3\2\2\2\u02f8\u21b1\3\2\2\2\u02fa\u21bb\3\2\2\2\u02fc"+
		"\u21c1\3\2\2\2\u02fe\u21c3\3\2\2\2\u0300\u21d0\3\2\2\2\u0302\u21d2\3\2"+
		"\2\2\u0304\u2207\3\2\2\2\u0306\u2209\3\2\2\2\u0308\u221a\3\2\2\2\u030a"+
		"\u2222\3\2\2\2\u030c\u2227\3\2\2\2\u030e\u2251\3\2\2\2\u0310\u2253\3\2"+
		"\2\2\u0312\u225b\3\2\2\2\u0314\u2265\3\2\2\2\u0316\u226d\3\2\2\2\u0318"+
		"\u228b\3\2\2\2\u031a\u228d\3\2\2\2\u031c\u229b\3\2\2\2\u031e\u2318\3\2"+
		"\2\2\u0320\u231f\3\2\2\2\u0322\u234c\3\2\2\2\u0324\u2364\3\2\2\2\u0326"+
		"\u2366\3\2\2\2\u0328\u236d\3\2\2\2\u032a\u2374\3\2\2\2\u032c\u237b\3\2"+
		"\2\2\u032e\u2380\3\2\2\2\u0330\u2386\3\2\2\2\u0332\u238b\3\2\2\2\u0334"+
		"\u238f\3\2\2\2\u0336\u2394\3\2\2\2\u0338\u23a3\3\2\2\2\u033a\u23b2\3\2"+
		"\2\2\u033c\u23de\3\2\2\2\u033e\u23e0\3\2\2\2\u0340\u23ed\3\2\2\2\u0342"+
		"\u23ef\3\2\2\2\u0344\u23fd\3\2\2\2\u0346\u240f\3\2\2\2\u0348\u2431\3\2"+
		"\2\2\u034a\u2447\3\2\2\2\u034c\u244a\3\2\2\2\u034e\u244e\3\2\2\2\u0350"+
		"\u245d\3\2\2\2\u0352\u2466\3\2\2\2\u0354\u246a\3\2\2\2\u0356\u2472\3\2"+
		"\2\2\u0358\u2478\3\2\2\2\u035a\u249c\3\2\2\2\u035c\u249e\3\2\2\2\u035e"+
		"\u24ab\3\2\2\2\u0360\u24ad\3\2\2\2\u0362\u24c2\3\2\2\2\u0364\u2500\3\2"+
		"\2\2\u0366\u2509\3\2\2\2\u0368\u2510\3\2\2\2\u036a\u2523\3\2\2\2\u036c"+
		"\u2541\3\2\2\2\u036e\u2546\3\2\2\2\u0370\u2554\3\2\2\2\u0372\u255a\3\2"+
		"\2\2\u0374\u258c\3\2\2\2\u0376\u258e\3\2\2\2\u0378\u259c\3\2\2\2\u037a"+
		"\u25a6\3\2\2\2\u037c\u25a8\3\2\2\2\u037e\u25aa\3\2\2\2\u0380\u25ad\3\2"+
		"\2\2\u0382\u25b8\3\2\2\2\u0384\u25bf\3\2\2\2\u0386\u25c1\3\2\2\2\u0388"+
		"\u25cd\3\2\2\2\u038a\u25fd\3\2\2\2\u038c\u2601\3\2\2\2\u038e\u2603\3\2"+
		"\2\2\u0390\u2618\3\2\2\2\u0392\u2627\3\2\2\2\u0394\u2637\3\2\2\2\u0396"+
		"\u2639\3\2\2\2\u0398\u2659\3\2\2\2\u039a\u265e\3\2\2\2\u039c\u266f\3\2"+
		"\2\2\u039e\u2671\3\2\2\2\u03a0\u2676\3\2\2\2\u03a2\u2678\3\2\2\2\u03a4"+
		"\u2689\3\2\2\2\u03a6\u268b\3\2\2\2\u03a8\u268d\3\2\2\2\u03aa\u03ac\5\4"+
		"\3\2\u03ab\u03aa\3\2\2\2\u03ac\u03af\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ad"+
		"\u03ae\3\2\2\2\u03ae\u03b0\3\2\2\2\u03af\u03ad\3\2\2\2\u03b0\u03b1\7\2"+
		"\2\3\u03b1\3\3\2\2\2\u03b2\u03b6\5\6\4\2\u03b3\u03b5\5\u0286\u0144\2\u03b4"+
		"\u03b3\3\2\2\2\u03b5\u03b8\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b6\u03b7\3\2"+
		"\2\2\u03b7\5\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b9\u03bb\5\b\5\2\u03ba\u03bc"+
		"\7\u0327\2\2\u03bb\u03ba\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03be\3\2\2"+
		"\2\u03bd\u03b9\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03bd\3\2\2\2\u03bf\u03c0"+
		"\3\2\2\2\u03c0\7\3\2\2\2\u03c1\u03c8\5\n\6\2\u03c2\u03c8\5\f\7\2\u03c3"+
		"\u03c8\5\16\b\2\u03c4\u03c8\5\u028a\u0146\2\u03c5\u03c8\5.\30\2\u03c6"+
		"\u03c8\5\60\31\2\u03c7\u03c1\3\2\2\2\u03c7\u03c2\3\2\2\2\u03c7\u03c3\3"+
		"\2\2\2\u03c7\u03c4\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c7\u03c6\3\2\2\2\u03c8"+
		"\t\3\2\2\2\u03c9\u03cf\5\u01aa\u00d6\2\u03ca\u03cf\5\u01b0\u00d9\2\u03cb"+
		"\u03cf\5\u01b4\u00db\2\u03cc\u03cf\5\u01ba\u00de\2\u03cd\u03cf\5\u01be"+
		"\u00e0\2\u03ce\u03c9\3\2\2\2\u03ce\u03ca\3\2\2\2\u03ce\u03cb\3\2\2\2\u03ce"+
		"\u03cc\3\2\2\2\u03ce\u03cd\3\2\2\2\u03cf\13\3\2\2\2\u03d0\u046e\5\62\32"+
		"\2\u03d1\u046e\5:\36\2\u03d2\u046e\5t;\2\u03d3\u046e\5\u0082B\2\u03d4"+
		"\u046e\5\u008eH\2\u03d5\u046e\5\u0090I\2\u03d6\u046e\5\u008cG\2\u03d7"+
		"\u046e\5\u009cO\2\u03d8\u046e\5\u00a6T\2\u03d9\u046e\5\u00a8U\2\u03da"+
		"\u046e\5\u0112\u008a\2\u03db\u046e\5\u0116\u008c\2\u03dc\u046e\5\u01f2"+
		"\u00fa\2\u03dd\u046e\5\u0158\u00ad\2\u03de\u046e\5\u0200\u0101\2\u03df"+
		"\u046e\5\u011c\u008f\2\u03e0\u046e\5\u0124\u0093\2\u03e1\u046e\5\u0126"+
		"\u0094\2\u03e2\u046e\5\u012a\u0096\2\u03e3\u046e\5\u012e\u0098\2\u03e4"+
		"\u046e\5\u0132\u009a\2\u03e5\u046e\5\u013a\u009e\2\u03e6\u046e\5\u013e"+
		"\u00a0\2\u03e7\u046e\5\u0136\u009c\2\u03e8\u046e\5\u0146\u00a4\2\u03e9"+
		"\u046e\5\u0142\u00a2\2\u03ea\u046e\5\u014a\u00a6\2\u03eb\u046e\5\u014c"+
		"\u00a7\2\u03ec\u046e\5\u014e\u00a8\2\u03ed\u046e\5\u0150\u00a9\2\u03ee"+
		"\u046e\5\u0156\u00ac\2\u03ef\u046e\5\u0166\u00b4\2\u03f0\u046e\5\u0160"+
		"\u00b1\2\u03f1\u046e\5\u016c\u00b7\2\u03f2\u046e\5\u0170\u00b9\2\u03f3"+
		"\u046e\5\u0174\u00bb\2\u03f4\u046e\5\u0178\u00bd\2\u03f5\u046e\5\u017a"+
		"\u00be\2\u03f6\u046e\5\u017e\u00c0\2\u03f7\u046e\5\u0180\u00c1\2\u03f8"+
		"\u046e\5\u0184\u00c3\2\u03f9\u046e\5\u0186\u00c4\2\u03fa\u046e\5\u01f0"+
		"\u00f9\2\u03fb\u046e\5\u018c\u00c7\2\u03fc\u046e\5\u0192\u00ca\2\u03fd"+
		"\u046e\5\u0194\u00cb\2\u03fe\u046e\5\64\33\2\u03ff\u046e\5p9\2\u0400\u046e"+
		"\5~@\2\u0401\u046e\5\u00aaV\2\u0402\u046e\5\u0110\u0089\2\u0403\u046e"+
		"\5\u0114\u008b\2\u0404\u046e\5\u0118\u008d\2\u0405\u046e\5\u01c6\u00e4"+
		"\2\u0406\u046e\5\u015a\u00ae\2\u0407\u046e\5\u011a\u008e\2\u0408\u046e"+
		"\5\u0128\u0095\2\u0409\u046e\5\u012c\u0097\2\u040a\u046e\5\u0130\u0099"+
		"\2\u040b\u046e\5\u0134\u009b\2\u040c\u046e\5\u01c8\u00e5\2\u040d\u046e"+
		"\5\u013c\u009f\2\u040e\u046e\5\u0140\u00a1\2\u040f\u046e\5\u0138\u009d"+
		"\2\u0410\u046e\5\u0148\u00a5\2\u0411\u046e\5\u0144\u00a3\2\u0412\u046e"+
		"\5\u00a2R\2\u0413\u046e\5\u01d8\u00ed\2\u0414\u046e\5\u01ca\u00e6\2\u0415"+
		"\u046e\5\u01cc\u00e7\2\u0416\u046e\5\u0152\u00aa\2\u0417\u046e\5\u0154"+
		"\u00ab\2\u0418\u046e\5\u015c\u00af\2\u0419\u046e\5\u015e\u00b0\2\u041a"+
		"\u046e\5\u0162\u00b2\2\u041b\u046e\5\u0164\u00b3\2\u041c\u046e\5\u0168"+
		"\u00b5\2\u041d\u046e\5\u016a\u00b6\2\u041e\u046e\5\u016e\u00b8\2\u041f"+
		"\u046e\5\u0172\u00ba\2\u0420\u046e\5\u0176\u00bc\2\u0421\u046e\5\u017c"+
		"\u00bf\2\u0422\u046e\5\u0182\u00c2\2\u0423\u046e\5\u01e6\u00f4\2\u0424"+
		"\u046e\5\u0188\u00c5\2\u0425\u046e\5\u018a\u00c6\2\u0426\u046e\5\u01e8"+
		"\u00f5\2\u0427\u046e\5\u0252\u012a\2\u0428\u046e\5\u018e\u00c8\2\u0429"+
		"\u046e\5\u0190\u00c9\2\u042a\u046e\5\u01ec\u00f7\2\u042b\u046e\5\u0196"+
		"\u00cc\2\u042c\u046e\5\u0198\u00cd\2\u042d\u046e\5\66\34\2\u042e\u046e"+
		"\58\35\2\u042f\u046e\5r:\2\u0430\u046e\5\u0080A\2\u0431\u046e\5\u009a"+
		"N\2\u0432\u046e\5\u00a4S\2\u0433\u046e\5\u00acW\2\u0434\u046e\5\u00ae"+
		"X\2\u0435\u046e\5\u00b0Y\2\u0436\u046e\5\u00b2Z\2\u0437\u046e\5\u00b4"+
		"[\2\u0438\u046e\5\u00b6\\\2\u0439\u046e\5\u00b8]\2\u043a\u046e\5\u00ba"+
		"^\2\u043b\u046e\5\u00bc_\2\u043c\u046e\5\u00e6t\2\u043d\u046e\5\u00be"+
		"`\2\u043e\u046e\5\u00c0a\2\u043f\u046e\5\u00ccg\2\u0440\u046e\5\u00ce"+
		"h\2\u0441\u046e\5\u00c2b\2\u0442\u046e\5\u00c4c\2\u0443\u046e\5\u00c6"+
		"d\2\u0444\u046e\5\u00c8e\2\u0445\u046e\5\u00caf\2\u0446\u046e\5\u00d0"+
		"i\2\u0447\u046e\5\u00d2j\2\u0448\u046e\5\u00d4k\2\u0449\u046e\5\u024a"+
		"\u0126\2\u044a\u046e\5\u023c\u011f\2\u044b\u046e\5\u00d6l\2\u044c\u046e"+
		"\5\u00d8m\2\u044d\u046e\5\u00dan\2\u044e\u046e\5\u00dco\2\u044f\u046e"+
		"\5\u00dep\2\u0450\u046e\5\u0242\u0122\2\u0451\u046e\5\u00e0q\2\u0452\u046e"+
		"\5\u00e2r\2\u0453\u046e\5\u00e4s\2\u0454\u046e\5\u00e8u\2\u0455\u046e"+
		"\5\u00eav\2\u0456\u046e\5\u00ecw\2\u0457\u046e\5\u00eex\2\u0458\u046e"+
		"\5\u00f0y\2\u0459\u046e\5\u00f2z\2\u045a\u046e\5\u00f4{\2\u045b\u046e"+
		"\5\u00f6|\2\u045c\u046e\5\u00f8}\2\u045d\u046e\5\u00fa~\2\u045e\u046e"+
		"\5\u00fc\177\2\u045f\u046e\5\u024c\u0127\2\u0460\u046e\5\u00fe\u0080\2"+
		"\u0461\u046e\5\u0100\u0081\2\u0462\u046e\5\u0102\u0082\2\u0463\u046e\5"+
		"\u024e\u0128\2\u0464\u046e\5\u0244\u0123\2\u0465\u046e\5\u0254\u012b\2"+
		"\u0466\u046e\5\u0104\u0083\2\u0467\u046e\5\u0250\u0129\2\u0468\u046e\5"+
		"\u0106\u0084\2\u0469\u046e\5\u0108\u0085\2\u046a\u046e\5\u010a\u0086\2"+
		"\u046b\u046e\5\u010c\u0087\2\u046c\u046e\5\u010e\u0088\2\u046d\u03d0\3"+
		"\2\2\2\u046d\u03d1\3\2\2\2\u046d\u03d2\3\2\2\2\u046d\u03d3\3\2\2\2\u046d"+
		"\u03d4\3\2\2\2\u046d\u03d5\3\2\2\2\u046d\u03d6\3\2\2\2\u046d\u03d7\3\2"+
		"\2\2\u046d\u03d8\3\2\2\2\u046d\u03d9\3\2\2\2\u046d\u03da\3\2\2\2\u046d"+
		"\u03db\3\2\2\2\u046d\u03dc\3\2\2\2\u046d\u03dd\3\2\2\2\u046d\u03de\3\2"+
		"\2\2\u046d\u03df\3\2\2\2\u046d\u03e0\3\2\2\2\u046d\u03e1\3\2\2\2\u046d"+
		"\u03e2\3\2\2\2\u046d\u03e3\3\2\2\2\u046d\u03e4\3\2\2\2\u046d\u03e5\3\2"+
		"\2\2\u046d\u03e6\3\2\2\2\u046d\u03e7\3\2\2\2\u046d\u03e8\3\2\2\2\u046d"+
		"\u03e9\3\2\2\2\u046d\u03ea\3\2\2\2\u046d\u03eb\3\2\2\2\u046d\u03ec\3\2"+
		"\2\2\u046d\u03ed\3\2\2\2\u046d\u03ee\3\2\2\2\u046d\u03ef\3\2\2\2\u046d"+
		"\u03f0\3\2\2\2\u046d\u03f1\3\2\2\2\u046d\u03f2\3\2\2\2\u046d\u03f3\3\2"+
		"\2\2\u046d\u03f4\3\2\2\2\u046d\u03f5\3\2\2\2\u046d\u03f6\3\2\2\2\u046d"+
		"\u03f7\3\2\2\2\u046d\u03f8\3\2\2\2\u046d\u03f9\3\2\2\2\u046d\u03fa\3\2"+
		"\2\2\u046d\u03fb\3\2\2\2\u046d\u03fc\3\2\2\2\u046d\u03fd\3\2\2\2\u046d"+
		"\u03fe\3\2\2\2\u046d\u03ff\3\2\2\2\u046d\u0400\3\2\2\2\u046d\u0401\3\2"+
		"\2\2\u046d\u0402\3\2\2\2\u046d\u0403\3\2\2\2\u046d\u0404\3\2\2\2\u046d"+
		"\u0405\3\2\2\2\u046d\u0406\3\2\2\2\u046d\u0407\3\2\2\2\u046d\u0408\3\2"+
		"\2\2\u046d\u0409\3\2\2\2\u046d\u040a\3\2\2\2\u046d\u040b\3\2\2\2\u046d"+
		"\u040c\3\2\2\2\u046d\u040d\3\2\2\2\u046d\u040e\3\2\2\2\u046d\u040f\3\2"+
		"\2\2\u046d\u0410\3\2\2\2\u046d\u0411\3\2\2\2\u046d\u0412\3\2\2\2\u046d"+
		"\u0413\3\2\2\2\u046d\u0414\3\2\2\2\u046d\u0415\3\2\2\2\u046d\u0416\3\2"+
		"\2\2\u046d\u0417\3\2\2\2\u046d\u0418\3\2\2\2\u046d\u0419\3\2\2\2\u046d"+
		"\u041a\3\2\2\2\u046d\u041b\3\2\2\2\u046d\u041c\3\2\2\2\u046d\u041d\3\2"+
		"\2\2\u046d\u041e\3\2\2\2\u046d\u041f\3\2\2\2\u046d\u0420\3\2\2\2\u046d"+
		"\u0421\3\2\2\2\u046d\u0422\3\2\2\2\u046d\u0423\3\2\2\2\u046d\u0424\3\2"+
		"\2\2\u046d\u0425\3\2\2\2\u046d\u0426\3\2\2\2\u046d\u0427\3\2\2\2\u046d"+
		"\u0428\3\2\2\2\u046d\u0429\3\2\2\2\u046d\u042a\3\2\2\2\u046d\u042b\3\2"+
		"\2\2\u046d\u042c\3\2\2\2\u046d\u042d\3\2\2\2\u046d\u042e\3\2\2\2\u046d"+
		"\u042f\3\2\2\2\u046d\u0430\3\2\2\2\u046d\u0431\3\2\2\2\u046d\u0432\3\2"+
		"\2\2\u046d\u0433\3\2\2\2\u046d\u0434\3\2\2\2\u046d\u0435\3\2\2\2\u046d"+
		"\u0436\3\2\2\2\u046d\u0437\3\2\2\2\u046d\u0438\3\2\2\2\u046d\u0439\3\2"+
		"\2\2\u046d\u043a\3\2\2\2\u046d\u043b\3\2\2\2\u046d\u043c\3\2\2\2\u046d"+
		"\u043d\3\2\2\2\u046d\u043e\3\2\2\2\u046d\u043f\3\2\2\2\u046d\u0440\3\2"+
		"\2\2\u046d\u0441\3\2\2\2\u046d\u0442\3\2\2\2\u046d\u0443\3\2\2\2\u046d"+
		"\u0444\3\2\2\2\u046d\u0445\3\2\2\2\u046d\u0446\3\2\2\2\u046d\u0447\3\2"+
		"\2\2\u046d\u0448\3\2\2\2\u046d\u0449\3\2\2\2\u046d\u044a\3\2\2\2\u046d"+
		"\u044b\3\2\2\2\u046d\u044c\3\2\2\2\u046d\u044d\3\2\2\2\u046d\u044e\3\2"+
		"\2\2\u046d\u044f\3\2\2\2\u046d\u0450\3\2\2\2\u046d\u0451\3\2\2\2\u046d"+
		"\u0452\3\2\2\2\u046d\u0453\3\2\2\2\u046d\u0454\3\2\2\2\u046d\u0455\3\2"+
		"\2\2\u046d\u0456\3\2\2\2\u046d\u0457\3\2\2\2\u046d\u0458\3\2\2\2\u046d"+
		"\u0459\3\2\2\2\u046d\u045a\3\2\2\2\u046d\u045b\3\2\2\2\u046d\u045c\3\2"+
		"\2\2\u046d\u045d\3\2\2\2\u046d\u045e\3\2\2\2\u046d\u045f\3\2\2\2\u046d"+
		"\u0460\3\2\2\2\u046d\u0461\3\2\2\2\u046d\u0462\3\2\2\2\u046d\u0463\3\2"+
		"\2\2\u046d\u0464\3\2\2\2\u046d\u0465\3\2\2\2\u046d\u0466\3\2\2\2\u046d"+
		"\u0467\3\2\2\2\u046d\u0468\3\2\2\2\u046d\u0469\3\2\2\2\u046d\u046a\3\2"+
		"\2\2\u046d\u046b\3\2\2\2\u046d\u046c\3\2\2\2\u046e\r\3\2\2\2\u046f\u047c"+
		"\5\20\t\2\u0470\u047c\5\22\n\2\u0471\u047c\5\24\13\2\u0472\u047c\5\26"+
		"\f\2\u0473\u047c\5\32\16\2\u0474\u047c\5\30\r\2\u0475\u047c\5\34\17\2"+
		"\u0476\u047c\5$\23\2\u0477\u047c\5&\24\2\u0478\u047c\5(\25\2\u0479\u047c"+
		"\5*\26\2\u047a\u047c\5,\27\2\u047b\u046f\3\2\2\2\u047b\u0470\3\2\2\2\u047b"+
		"\u0471\3\2\2\2\u047b\u0472\3\2\2\2\u047b\u0473\3\2\2\2\u047b\u0474\3\2"+
		"\2\2\u047b\u0475\3\2\2\2\u047b\u0476\3\2\2\2\u047b\u0477\3\2\2\2\u047b"+
		"\u0478\3\2\2\2\u047b\u0479\3\2\2\2\u047b\u047a\3\2\2\2\u047c\17\3\2\2"+
		"\2\u047d\u047f\7\33\2\2\u047e\u0480\7\u0327\2\2\u047f\u047e\3\2\2\2\u047f"+
		"\u0480\3\2\2\2\u0480\u0482\3\2\2\2\u0481\u0483\5\6\4\2\u0482\u0481\3\2"+
		"\2\2\u0482\u0483\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0486\7l\2\2\u0485"+
		"\u0487\7\u0327\2\2\u0486\u0485\3\2\2\2\u0486\u0487\3\2\2\2\u0487\21\3"+
		"\2\2\2\u0488\u048a\7 \2\2\u0489\u048b\7\u0327\2\2\u048a\u0489\3\2\2\2"+
		"\u048a\u048b\3\2\2\2\u048b\23\3\2\2\2\u048c\u048e\7A\2\2\u048d\u048f\7"+
		"\u0327\2\2\u048e\u048d\3\2\2\2\u048e\u048f\3\2\2\2\u048f\25\3\2\2\2\u0490"+
		"\u0491\7\u008f\2\2\u0491\u0493\5\u03a0\u01d1\2\u0492\u0494\7\u0327\2\2"+
		"\u0493\u0492\3\2\2\2\u0493\u0494\3\2\2\2\u0494\u049b\3\2\2\2\u0495\u0496"+
		"\5\u03a0\u01d1\2\u0496\u0498\7\u0328\2\2\u0497\u0499\7\u0327\2\2\u0498"+
		"\u0497\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u049b\3\2\2\2\u049a\u0490\3\2"+
		"\2\2\u049a\u0495\3\2\2\2\u049b\27\3\2\2\2\u049c\u049e\7\u0119\2\2\u049d"+
		"\u049f\5\u02b6\u015c\2\u049e\u049d\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u04a1"+
		"\3\2\2\2\u04a0\u04a2\7\u0327\2\2\u04a1\u04a0\3\2\2\2\u04a1\u04a2\3\2\2"+
		"\2\u04a2\31\3\2\2\2\u04a3\u04a4\7\u0099\2\2\u04a4\u04a5\5\u02cc\u0167"+
		"\2\u04a5\u04a8\5\b\5\2\u04a6\u04a7\7j\2\2\u04a7\u04a9\5\b\5\2\u04a8\u04a6"+
		"\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04ab\3\2\2\2\u04aa\u04ac\7\u0327\2"+
		"\2\u04ab\u04aa\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\33\3\2\2\2\u04ad\u04b4"+
		"\7\u02e2\2\2\u04ae\u04af\5\36\20\2\u04af\u04b0\7\u0326\2\2\u04b0\u04b1"+
		"\5 \21\2\u04b1\u04b2\7\u0326\2\2\u04b2\u04b3\5\"\22\2\u04b3\u04b5\3\2"+
		"\2\2\u04b4\u04ae\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04b7\3\2\2\2\u04b6"+
		"\u04b8\7\u0327\2\2\u04b7\u04b6\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\35\3"+
		"\2\2\2\u04b9\u04ba\t\2\2\2\u04ba\37\3\2\2\2\u04bb\u04bc\t\3\2\2\u04bc"+
		"!\3\2\2\2\u04bd\u04be\t\2\2\2\u04be#\3\2\2\2\u04bf\u04c0\7\33\2\2\u04c0"+
		"\u04c2\7\u02ed\2\2\u04c1\u04c3\7\u0327\2\2\u04c2\u04c1\3\2\2\2\u04c2\u04c3"+
		"\3\2\2\2\u04c3\u04c5\3\2\2\2\u04c4\u04c6\5\6\4\2\u04c5\u04c4\3\2\2\2\u04c5"+
		"\u04c6\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04c8\7l\2\2\u04c8\u04ca\7\u02ed"+
		"\2\2\u04c9\u04cb\7\u0327\2\2\u04ca\u04c9\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb"+
		"\u04cc\3\2\2\2\u04cc\u04cd\7\33\2\2\u04cd\u04cf\7\u01b1\2\2\u04ce\u04d0"+
		"\7\u0327\2\2\u04cf\u04ce\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d2\3\2\2"+
		"\2\u04d1\u04d3\5\6\4\2\u04d2\u04d1\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d4"+
		"\3\2\2\2\u04d4\u04d5\7l\2\2\u04d5\u04d7\7\u01b1\2\2\u04d6\u04d8\7\u0327"+
		"\2\2\u04d7\u04d6\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8%\3\2\2\2\u04d9\u04db"+
		"\7\u0176\2\2\u04da\u04dc\5\u01b8\u00dd\2\u04db\u04da\3\2\2\2\u04db\u04dc"+
		"\3\2\2\2\u04dc\u04de\3\2\2\2\u04dd\u04df\7\u0326\2\2\u04de\u04dd\3\2\2"+
		"\2\u04de\u04df\3\2\2\2\u04df\u04e2\3\2\2\2\u04e0\u04e1\t\4\2\2\u04e1\u04e3"+
		"\5\u01bc\u00df\2\u04e2\u04e0\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e5\3"+
		"\2\2\2\u04e4\u04e6\5\u02b6\u015c\2\u04e5\u04e4\3\2\2\2\u04e5\u04e6\3\2"+
		"\2\2\u04e6\u04e8\3\2\2\2\u04e7\u04e9\7\u0327\2\2\u04e8\u04e7\3\2\2\2\u04e8"+
		"\u04e9\3\2\2\2\u04e9\'\3\2\2\2\u04ea\u04eb\7\u0179\2\2\u04eb\u04f5\5\u02cc"+
		"\u0167\2\u04ec\u04f6\5\b\5\2\u04ed\u04ef\7 \2\2\u04ee\u04f0\7\u0327\2"+
		"\2\u04ef\u04ee\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f6\3\2\2\2\u04f1\u04f3"+
		"\7A\2\2\u04f2\u04f4\7\u0327\2\2\u04f3\u04f2\3\2\2\2\u04f3\u04f4\3\2\2"+
		"\2\u04f4\u04f6\3\2\2\2\u04f5\u04ec\3\2\2\2\u04f5\u04ed\3\2\2\2\u04f5\u04f1"+
		"\3\2\2\2\u04f6)\3\2\2\2\u04f7\u04f8\7\u0100\2\2\u04f8\u04fa\5\u02b6\u015c"+
		"\2\u04f9\u04fb\7\u0327\2\2\u04fa\u04f9\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb"+
		"+\3\2\2\2\u04fc\u04fd\7\u0107\2\2\u04fd\u04fe\7\u0324\2\2\u04fe\u04ff"+
		"\t\5\2\2\u04ff\u0500\7\u0326\2\2\u0500\u0501\5\u02b4\u015b\2\u0501\u0502"+
		"\7\u0326\2\2\u0502\u0507\5\u02b4\u015b\2\u0503\u0504\7\u0326\2\2\u0504"+
		"\u0506\5\u02b4\u015b\2\u0505\u0503\3\2\2\2\u0506\u0509\3\2\2\2\u0507\u0505"+
		"\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u050a\3\2\2\2\u0509\u0507\3\2\2\2\u050a"+
		"\u050d\7\u0325\2\2\u050b\u050c\7\u017b\2\2\u050c\u050e\t\6\2\2\u050d\u050b"+
		"\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u0510\3\2\2\2\u050f\u0511\7\u0327\2"+
		"\2\u0510\u050f\3\2\2\2\u0510\u0511\3\2\2\2\u0511-\3\2\2\2\u0512\u0513"+
		"\7\u0327\2\2\u0513/\3\2\2\2\u0514\u0521\5\u025c\u012f\2\u0515\u0521\5"+
		"\u025e\u0130\2\u0516\u0521\5\u01a6\u00d4\2\u0517\u0521\5\u01a4\u00d3\2"+
		"\u0518\u0521\5\u019a\u00ce\2\u0519\u0521\5\u019e\u00d0\2\u051a\u0521\5"+
		"\u0260\u0131\2\u051b\u0521\5\u01a8\u00d5\2\u051c\u0521\5\u0266\u0134\2"+
		"\u051d\u0521\5\u0282\u0142\2\u051e\u0521\5\u0284\u0143\2\u051f\u0521\5"+
		"\u0288\u0145\2\u0520\u0514\3\2\2\2\u0520\u0515\3\2\2\2\u0520\u0516\3\2"+
		"\2\2\u0520\u0517\3\2\2\2\u0520\u0518\3\2\2\2\u0520\u0519\3\2\2\2\u0520"+
		"\u051a\3\2\2\2\u0520\u051b\3\2\2\2\u0520\u051c\3\2\2\2\u0520\u051d\3\2"+
		"\2\2\u0520\u051e\3\2\2\2\u0520\u051f\3\2\2\2\u0521\61\3\2\2\2\u0522\u0523"+
		"\7\t\2\2\u0523\u0524\7\16\2\2\u0524\u0525\7\u0120\2\2\u0525\u0526\5\u03a0"+
		"\u01d1\2\u0526\u052d\7\u017b\2\2\u0527\u0529\7\u0326\2\2\u0528\u0527\3"+
		"\2\2\2\u0528\u0529\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u052b\7\u0256\2\2"+
		"\u052b\u052c\7\u0313\2\2\u052c\u052e\5\u03a0\u01d1\2\u052d\u0528\3\2\2"+
		"\2\u052d\u052e\3\2\2\2\u052e\u0535\3\2\2\2\u052f\u0531\7\u0326\2\2\u0530"+
		"\u052f\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0532\3\2\2\2\u0532\u0533\7\u00f3"+
		"\2\2\u0533\u0534\7\u0313\2\2\u0534\u0536\7\u030f\2\2\u0535\u0530\3\2\2"+
		"\2\u0535\u0536\3\2\2\2\u0536\u053d\3\2\2\2\u0537\u0539\7\u0326\2\2\u0538"+
		"\u0537\3\2\2\2\u0538\u0539\3\2\2\2\u0539\u053a\3\2\2\2\u053a\u053b\7["+
		"\2\2\u053b\u053c\7\u0313\2\2\u053c\u053e\5\u03a0\u01d1\2\u053d\u0538\3"+
		"\2\2\2\u053d\u053e\3\2\2\2\u053e\63\3\2\2\2\u053f\u0540\7H\2\2\u0540\u0541"+
		"\7\16\2\2\u0541\u0542\7\u0120\2\2\u0542\u0543\5\u03a0\u01d1\2\u0543\u054a"+
		"\7\u017b\2\2\u0544\u0546\7\u0326\2\2\u0545\u0544\3\2\2\2\u0545\u0546\3"+
		"\2\2\2\u0546\u0547\3\2\2\2\u0547\u0548\7\u00f3\2\2\u0548\u0549\7\u0313"+
		"\2\2\u0549\u054b\7\u030f\2\2\u054a\u0545\3\2\2\2\u054a\u054b\3\2\2\2\u054b"+
		"\u0552\3\2\2\2\u054c\u054e\7\u0326\2\2\u054d\u054c\3\2\2\2\u054d\u054e"+
		"\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0550\7[\2\2\u0550\u0551\7\u0313\2"+
		"\2\u0551\u0553\5\u03a0\u01d1\2\u0552\u054d\3\2\2\2\u0552\u0553\3\2\2\2"+
		"\u0553\65\3\2\2\2\u0554\u0555\7g\2\2\u0555\u0558\7\u018b\2\2\u0556\u0557"+
		"\7\u0099\2\2\u0557\u0559\7w\2\2\u0558\u0556\3\2\2\2\u0558\u0559\3\2\2"+
		"\2\u0559\u055d\3\2\2\2\u055a\u055b\5\u03a0\u01d1\2\u055b\u055c\7\u031f"+
		"\2\2\u055c\u055e\3\2\2\2\u055d\u055a\3\2\2\2\u055d\u055e\3\2\2\2\u055e"+
		"\u055f\3\2\2\2\u055f\u0560\5\u03a0\u01d1\2\u0560\67\3\2\2\2\u0561\u0562"+
		"\7g\2\2\u0562\u0563\7\16\2\2\u0563\u0564\7\u0120\2\2\u0564\u0565\5\u03a0"+
		"\u01d1\2\u05659\3\2\2\2\u0566\u0567\5<\37\2\u0567\u0568\5\u03a0\u01d1"+
		"\2\u0568\u0569\5> \2\u0569;\3\2\2\2\u056a\u056b\7\t\2\2\u056b\u056c\7"+
		"\u0197\2\2\u056c=\3\2\2\2\u056d\u056f\5@!\2\u056e\u056d\3\2\2\2\u056e"+
		"\u056f\3\2\2\2\u056f\u0571\3\2\2\2\u0570\u0572\5V,\2\u0571\u0570\3\2\2"+
		"\2\u0571\u0572\3\2\2\2\u0572\u0574\3\2\2\2\u0573\u0575\5D#\2\u0574\u0573"+
		"\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u0577\3\2\2\2\u0576\u0578\5J&\2\u0577"+
		"\u0576\3\2\2\2\u0577\u0578\3\2\2\2\u0578?\3\2\2\2\u0579\u057c\5B\"\2\u057a"+
		"\u057d\5Z.\2\u057b\u057d\5R*\2\u057c\u057a\3\2\2\2\u057c\u057b\3\2\2\2"+
		"\u057dA\3\2\2\2\u057e\u057f\7\u008b\2\2\u057fC\3\2\2\2\u0580\u0581\5H"+
		"%\2\u0581\u0582\5F$\2\u0582E\3\2\2\2\u0583\u0586\7\5\2\2\u0584\u0586\5"+
		"l\67\2\u0585\u0583\3\2\2\2\u0585\u0584\3\2\2\2\u0586G\3\2\2\2\u0587\u0588"+
		"\7g\2\2\u0588I\3\2\2\2\u0589\u058a\5L\'\2\u058a\u058b\5N(\2\u058bK\3\2"+
		"\2\2\u058c\u058d\7\3\2\2\u058d\u058e\7\u0081\2\2\u058e\u058f\7\u008b\2"+
		"\2\u058fM\3\2\2\2\u0590\u0594\5P)\2\u0591\u0592\5T+\2\u0592\u0593\5\u03a0"+
		"\u01d1\2\u0593\u0595\3\2\2\2\u0594\u0591\3\2\2\2\u0594\u0595\3\2\2\2\u0595"+
		"O\3\2\2\2\u0596\u0597\7\u030f\2\2\u0597Q\3\2\2\2\u0598\u0599\5T+\2\u0599"+
		"\u059a\5\u03a0\u01d1\2\u059aS\3\2\2\2\u059b\u059c\7\17\2\2\u059cU\3\2"+
		"\2\2\u059d\u059e\5X-\2\u059e\u059f\5\\/\2\u059fW\3\2\2\2\u05a0\u05a1\7"+
		"\u017b\2\2\u05a1Y\3\2\2\2\u05a2\u05a6\5^\60\2\u05a3\u05a6\5h\65\2\u05a4"+
		"\u05a6\7\u030f\2\2\u05a5\u05a2\3\2\2\2\u05a5\u05a3\3\2\2\2\u05a5\u05a4"+
		"\3\2\2\2\u05a6[\3\2\2\2\u05a7\u05a8\b/\1\2\u05a8\u05a9\7\u00f5\2\2\u05a9"+
		"\u05aa\7\u0313\2\2\u05aa\u05b1\t\7\2\2\u05ab\u05ac\7\u0175\2\2\u05ac\u05ad"+
		"\7\u0313\2\2\u05ad\u05b1\t\b\2\2\u05ae\u05af\7\u0165\2\2\u05af\u05b1\7"+
		"Q\2\2\u05b0\u05a7\3\2\2\2\u05b0\u05ab\3\2\2\2\u05b0\u05ae\3\2\2\2\u05b1"+
		"\u05b6\3\2\2\2\u05b2\u05b3\f\3\2\2\u05b3\u05b5\7\u0326\2\2\u05b4\u05b2"+
		"\3\2\2\2\u05b5\u05b8\3\2\2\2\u05b6\u05b4\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7"+
		"]\3\2\2\2\u05b8\u05b6\3\2\2\2\u05b9\u05ba\5b\62\2\u05ba\u05bb\5`\61\2"+
		"\u05bb\u05bc\5d\63\2\u05bc_\3\2\2\2\u05bd\u05be\5\u03a0\u01d1\2\u05be"+
		"a\3\2\2\2\u05bf\u05c0\7e\2\2\u05c0c\3\2\2\2\u05c1\u05c2\5f\64\2\u05c2"+
		"\u05c3\5d\63\2\u05c3\u05c6\3\2\2\2\u05c4\u05c6\5\u03a0\u01d1\2\u05c5\u05c1"+
		"\3\2\2\2\u05c5\u05c4\3\2\2\2\u05c6e\3\2\2\2\u05c7\u05c8\7\30\2\2\u05c8"+
		"g\3\2\2\2\u05c9\u05ca\5j\66\2\u05ca\u05cb\5d\63\2\u05cbi\3\2\2\2\u05cc"+
		"\u05cd\7\u01e4\2\2\u05cdk\3\2\2\2\u05ce\u05cf\5n8\2\u05cf\u05d0\5h\65"+
		"\2\u05d0\u05d1\7\u0308\2\2\u05d1\u05d2\7\u0326\2\2\u05d2\u05d5\3\2\2\2"+
		"\u05d3\u05d5\5h\65\2\u05d4\u05ce\3\2\2\2\u05d4\u05d3\3\2\2\2\u05d5m\3"+
		"\2\2\2\u05d6\u05d7\7\u0308\2\2\u05d7o\3\2\2\2\u05d8\u05d9\7H\2\2\u05d9"+
		"\u05da\7\u0197\2\2\u05da\u05dd\5\u03a0\u01d1\2\u05db\u05dc\7\23\2\2\u05dc"+
		"\u05de\5\u03a0\u01d1\2\u05dd\u05db\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u05df"+
		"\3\2\2\2\u05df\u05e4\7\u008b\2\2\u05e0\u05e2\7\u0326\2\2\u05e1\u05e0\3"+
		"\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e5\t\t\2\2\u05e4"+
		"\u05e1\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6\u05e4\3\2\2\2\u05e6\u05e7\3\2"+
		"\2\2\u05e7\u05ec\3\2\2\2\u05e8\u05e9\7\u017b\2\2\u05e9\u05ea\7\u00f5\2"+
		"\2\u05ea\u05eb\7\u0313\2\2\u05eb\u05ed\t\7\2\2\u05ec\u05e8\3\2\2\2\u05ec"+
		"\u05ed\3\2\2\2\u05edq\3\2\2\2\u05ee\u05ef\7g\2\2\u05ef\u05f2\7\u0197\2"+
		"\2\u05f0\u05f1\7\u0099\2\2\u05f1\u05f3\7w\2\2\u05f2\u05f0\3\2\2\2\u05f2"+
		"\u05f3\3\2\2\2\u05f3\u05f8\3\2\2\2\u05f4\u05f6\7\u0326\2\2\u05f5\u05f4"+
		"\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7\u05f9\5\u03a0\u01d1"+
		"\2\u05f8\u05f5\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05f8\3\2\2\2\u05fa\u05fb"+
		"\3\2\2\2\u05fb\u05ff\3\2\2\2\u05fc\u05fd\7\u017b\2\2\u05fd\u05fe\7\u0261"+
		"\2\2\u05fe\u0600\7\u01da\2\2\u05ff\u05fc\3\2\2\2\u05ff\u0600\3\2\2\2\u0600"+
		"s\3\2\2\2\u0601\u0602\5v<\2\u0602\u0607\5\u03a0\u01d1\2\u0603\u0608\5"+
		"x=\2\u0604\u0605\7\u029e\2\2\u0605\u0606\7\u0283\2\2\u0606\u0608\7\u00ab"+
		"\2\2\u0607\u0603\3\2\2\2\u0607\u0604\3\2\2\2\u0608u\3\2\2\2\u0609\u060a"+
		"\7\t\2\2\u060a\u060b\7\21\2\2\u060b\u060c\7\u00ab\2\2\u060cw\3\2\2\2\u060d"+
		"\u060e\5z>\2\u060e\u0611\5|?\2\u060f\u0610\7\u0326\2\2\u0610\u0612\5|"+
		"?\2\u0611\u060f\3\2\2\2\u0611\u0612\3\2\2\2\u0612\u0613\3\2\2\2\u0613"+
		"\u0614\7\u0325\2\2\u0614y\3\2\2\2\u0615\u0616\7\u017b\2\2\u0616\u0617"+
		"\7\u0283\2\2\u0617\u0618\7\u00ab\2\2\u0618\u0619\7\u0324\2\2\u0619{\3"+
		"\2\2\2\u061a\u061b\7\u01d2\2\2\u061b\u061c\7%\2\2\u061c\u061d\7\u00f3"+
		"\2\2\u061d\u061e\7\u0313\2\2\u061e\u0625\7\u030f\2\2\u061f\u0620\7\u01ec"+
		"\2\2\u0620\u0621\7%\2\2\u0621\u0622\7\u00f3\2\2\u0622\u0623\7\u0313\2"+
		"\2\u0623\u0625\7\u030f\2\2\u0624\u061a\3\2\2\2\u0624\u061f\3\2\2\2\u0625"+
		"}\3\2\2\2\u0626\u0627\7H\2\2\u0627\u0628\7\21\2\2\u0628\u0629\7\u00ab"+
		"\2\2\u0629\u062c\5\u03a0\u01d1\2\u062a\u062b\7\23\2\2\u062b\u062d\5\u03a0"+
		"\u01d1\2\u062c\u062a\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u063b\3\2\2\2\u062e"+
		"\u0639\7\u008b\2\2\u062f\u0630\7\u0081\2\2\u0630\u0631\7\u0313\2\2\u0631"+
		"\u063a\7\u030f\2\2\u0632\u0633\7u\2\2\u0633\u0634\7\u0313\2\2\u0634\u063a"+
		"\7\u030f\2\2\u0635\u0636\7\u0197\2\2\u0636\u063a\5\u03a0\u01d1\2\u0637"+
		"\u0638\7\u0288\2\2\u0638\u063a\5\u03a0\u01d1\2\u0639\u062f\3\2\2\2\u0639"+
		"\u0632\3\2\2\2\u0639\u0635\3\2\2\2\u0639\u0637\3\2\2\2\u063a\u063c\3\2"+
		"\2\2\u063b\u062e\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u0649\3\2\2\2\u063d"+
		"\u0647\7\u017b\2\2\u063e\u063f\7\u018c\2\2\u063f\u0640\7\u0313\2\2\u0640"+
		"\u0648\t\n\2\2\u0641\u0642\7\u0289\2\2\u0642\u0643\7\u0313\2\2\u0643\u0648"+
		"\7\u030f\2\2\u0644\u0645\7\u01c5\2\2\u0645\u0646\7\u0313\2\2\u0646\u0648"+
		"\t\13\2\2\u0647\u063e\3\2\2\2\u0647\u0641\3\2\2\2\u0647\u0644\3\2\2\2"+
		"\u0648\u064a\3\2\2\2\u0649\u063d\3\2\2\2\u0649\u064a\3\2\2\2\u064a\u0650"+
		"\3\2\2\2\u064b\u064c\7\u01ec\2\2\u064c\u064d\7%\2\2\u064d\u064e\7\u00f3"+
		"\2\2\u064e\u064f\7\u0313\2\2\u064f\u0651\7\u030f\2\2\u0650\u064b\3\2\2"+
		"\2\u0650\u0651\3\2\2\2\u0651\177\3\2\2\2\u0652\u0653\7g\2\2\u0653\u0654"+
		"\7\21\2\2\u0654\u0655\7\u00ab\2\2\u0655\u0659\5\u03a0\u01d1\2\u0656\u0657"+
		"\7\u029e\2\2\u0657\u0658\7\u0288\2\2\u0658\u065a\7\u00ab\2\2\u0659\u0656"+
		"\3\2\2\2\u0659\u065a\3\2\2\2\u065a\u0081\3\2\2\2\u065b\u065f\5\u008aF"+
		"\2\u065c\u065d\5\u0092J\2\u065d\u065e\5\u0088E\2\u065e\u0660\3\2\2\2\u065f"+
		"\u065c\3\2\2\2\u065f\u0660\3\2\2\2\u0660\u0661\3\2\2\2\u0661\u0662\5\u0364"+
		"\u01b3\2\u0662\u0663\5\u0086D\2\u0663\u0664\5\u0084C\2\u0664\u0083\3\2"+
		"\2\2\u0665\u0669\5\u03a0\u01d1\2\u0666\u0667\7\u012d\2\2\u0667\u0669\7"+
		"\u0274\2\2\u0668\u0665\3\2\2\2\u0668\u0666\3\2\2\2\u0669\u0085\3\2\2\2"+
		"\u066a\u066b\7\u015c\2\2\u066b\u0087\3\2\2\2\u066c\u066d\7\u0328\2\2\u066d"+
		"\u066e\7\u0328\2\2\u066e\u0089\3\2\2\2\u066f\u0670\7\t\2\2\u0670\u0671"+
		"\7\23\2\2\u0671\u0672\7\u00e4\2\2\u0672\u008b\3\2\2\2\u0673\u0677\5\u008a"+
		"F\2\u0674\u0675\5\u0094K\2\u0675\u0676\5\u0088E\2\u0676\u0678\3\2\2\2"+
		"\u0677\u0674\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u0679\3\2\2\2\u0679\u067a"+
		"\5\u0364\u01b3\2\u067a\u067b\5\u0086D\2\u067b\u067c\5\u0084C\2\u067c\u008d"+
		"\3\2\2\2\u067d\u0681\5\u008aF\2\u067e\u067f\5\u0096L\2\u067f\u0680\5\u0088"+
		"E\2\u0680\u0682\3\2\2\2\u0681\u067e\3\2\2\2\u0681\u0682\3\2\2\2\u0682"+
		"\u0683\3\2\2\2\u0683\u0684\5\u0366\u01b4\2\u0684\u0685\5\u0086D\2\u0685"+
		"\u0686\5\u0084C\2\u0686\u008f\3\2\2\2\u0687\u068b\5\u008aF\2\u0688\u0689"+
		"\5\u0098M\2\u0689\u068a\5\u0088E\2\u068a\u068c\3\2\2\2\u068b\u0688\3\2"+
		"\2\2\u068b\u068c\3\2\2\2\u068c\u068d\3\2\2\2\u068d\u068e\5\u0368\u01b5"+
		"\2\u068e\u068f\5\u0086D\2\u068f\u0690\5\u0084C\2\u0690\u0091\3\2\2\2\u0691"+
		"\u06b4\7\u0269\2\2\u0692\u06b4\7\u0197\2\2\u0693\u0694\7\21\2\2\u0694"+
		"\u06b4\7\u00ab\2\2\u0695\u0696\7\u01a1\2\2\u0696\u06b4\7\u0092\2\2\u0697"+
		"\u06b4\7*\2\2\u0698\u06b4\7C\2\2\u0699\u06b4\7\u02f0\2\2\u069a\u06b4\7"+
		"T\2\2\u069b\u06b4\7m\2\2\u069c\u069d\7\u0208\2\2\u069d\u06b4\7\u01b0\2"+
		"\2\u069e\u069f\7\u0208\2\2\u069f\u06b4\7\u02d5\2\2\u06a0\u06a1\7\u024b"+
		"\2\2\u06a1\u06b4\7\u02f0\2\2\u06a2\u06a3\7\u02a2\2\2\u06a3\u06a4\7\u0137"+
		"\2\2\u06a4\u06b4\7\u01a8\2\2\u06a5\u06b4\7\u0120\2\2\u06a6\u06b4\7\u02af"+
		"\2\2\u06a7\u06b4\7\u012d\2\2\u06a8\u06a9\7\u02b9\2\2\u06a9\u06aa\7\u0287"+
		"\2\2\u06aa\u06b4\7\u022f\2\2\u06ab\u06ac\7\u0136\2\2\u06ac\u06b4\7\u0120"+
		"\2\2\u06ad\u06b4\7\u0137\2\2\u06ae\u06af\7\u02db\2\2\u06af\u06b4\7\u00ab"+
		"\2\2\u06b0\u06b1\7\u0301\2\2\u06b1\u06b2\7\u012d\2\2\u06b2\u06b4\7\u01b7"+
		"\2\2\u06b3\u0691\3\2\2\2\u06b3\u0692\3\2\2\2\u06b3\u0693\3\2\2\2\u06b3"+
		"\u0695\3\2\2\2\u06b3\u0697\3\2\2\2\u06b3\u0698\3\2\2\2\u06b3\u0699\3\2"+
		"\2\2\u06b3\u069a\3\2\2\2\u06b3\u069b\3\2\2\2\u06b3\u069c\3\2\2\2\u06b3"+
		"\u069e\3\2\2\2\u06b3\u06a0\3\2\2\2\u06b3\u06a2\3\2\2\2\u06b3\u06a5\3\2"+
		"\2\2\u06b3\u06a6\3\2\2\2\u06b3\u06a7\3\2\2\2\u06b3\u06a8\3\2\2\2\u06b3"+
		"\u06ab\3\2\2\2\u06b3\u06ad\3\2\2\2\u06b3\u06ae\3\2\2\2\u06b3\u06b0\3\2"+
		"\2\2\u06b4\u0093\3\2\2\2\u06b5\u06cb\7\u0269\2\2\u06b6\u06cb\7\u0197\2"+
		"\2\u06b7\u06b8\7\21\2\2\u06b8\u06cb\7\u00ab\2\2\u06b9\u06cb\7*\2\2\u06ba"+
		"\u06cb\7\u02f0\2\2\u06bb\u06cb\7T\2\2\u06bc\u06bd\7\u0208\2\2\u06bd\u06cb"+
		"\7\u01b0\2\2\u06be\u06bf\7\u0208\2\2\u06bf\u06cb\7\u02d5\2\2\u06c0\u06cb"+
		"\7\u0120\2\2\u06c1\u06cb\7\u012d\2\2\u06c2\u06c3\7\u02b9\2\2\u06c3\u06c4"+
		"\7\u0287\2\2\u06c4\u06cb\7\u022f\2\2\u06c5\u06c6\7\u02db\2\2\u06c6\u06cb"+
		"\7\u00ab\2\2\u06c7\u06c8\7\u0301\2\2\u06c8\u06c9\7\u012d\2\2\u06c9\u06cb"+
		"\7\u01b7\2\2\u06ca\u06b5\3\2\2\2\u06ca\u06b6\3\2\2\2\u06ca\u06b7\3\2\2"+
		"\2\u06ca\u06b9\3\2\2\2\u06ca\u06ba\3\2\2\2\u06ca\u06bb\3\2\2\2\u06ca\u06bc"+
		"\3\2\2\2\u06ca\u06be\3\2\2\2\u06ca\u06c0\3\2\2\2\u06ca\u06c1\3\2\2\2\u06ca"+
		"\u06c2\3\2\2\2\u06ca\u06c5\3\2\2\2\u06ca\u06c7\3\2\2\2\u06cb\u0095\3\2"+
		"\2\2\u06cc\u06cd\t\f\2\2\u06cd\u0097\3\2\2\2\u06ce\u06cf\t\r\2\2\u06cf"+
		"\u0099\3\2\2\2\u06d0\u06d1\7g\2\2\u06d1\u06d2\7\u01a1\2\2\u06d2\u06d3"+
		"\7\u0092\2\2\u06d3\u06d4\5\u03a0\u01d1\2\u06d4\u009b\3\2\2\2\u06d5\u06d6"+
		"\5\u009eP\2\u06d6\u06d7\5\u00a0Q\2\u06d7\u009d\3\2\2\2\u06d8\u06d9\7\t"+
		"\2\2\u06d9\u06da\7\u01a1\2\2\u06da\u06db\7\u0092\2\2\u06db\u06dc\5\u03a0"+
		"\u01d1\2\u06dc\u009f\3\2\2\2\u06dd\u06de\7\u013c\2\2\u06de\u06ee\7\u0324"+
		"\2\2\u06df\u06e0\7\25\2\2\u06e0\u06e1\7\u0313\2\2\u06e1\u06ef\t\16\2\2"+
		"\u06e2\u06e3\7\u01f6\2\2\u06e3\u06e4\7\u0313\2\2\u06e4\u06ef\7\u030b\2"+
		"\2\u06e5\u06e6\7\u0213\2\2\u06e6\u06e7\7\u0313\2\2\u06e7\u06ef\7\u030b"+
		"\2\2\u06e8\u06e9\7\u01d1\2\2\u06e9\u06ea\7\u0313\2\2\u06ea\u06ef\t\b\2"+
		"\2\u06eb\u06ec\7\u02a1\2\2\u06ec\u06ed\7\u0313\2\2\u06ed\u06ef\7\u030b"+
		"\2\2\u06ee\u06df\3\2\2\2\u06ee\u06e2\3\2\2\2\u06ee\u06e5\3\2\2\2\u06ee"+
		"\u06e8\3\2\2\2\u06ee\u06eb\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u083c\7\u0325"+
		"\2\2\u06f1\u06f2\7\3\2\2\u06f2\u06f3\7T\2\2\u06f3\u083c\5\u03a0\u01d1"+
		"\2\u06f4\u06f5\7\u029e\2\2\u06f5\u06f6\7T\2\2\u06f6\u083c\5\u03a0\u01d1"+
		"\2\u06f7\u06f8\7\3\2\2\u06f8\u06f9\7\u02a0\2\2\u06f9\u06fa\7\u00e4\2\2"+
		"\u06fa\u06fb\7\u030f\2\2\u06fb\u06fc\7\u017b\2\2\u06fc\u0700\7\u0324\2"+
		"\2\u06fd\u06fe\7\u01ed\2\2\u06fe\u06ff\7\u0313\2\2\u06ff\u0701\7\u030f"+
		"\2\2\u0700\u06fd\3\2\2\2\u0700\u0701\3\2\2\2\u0701\u0708\3\2\2\2\u0702"+
		"\u0704\7\u0326\2\2\u0703\u0702\3\2\2\2\u0703\u0704\3\2\2\2\u0704\u0705"+
		"\3\2\2\2\u0705\u0706\7\27\2\2\u0706\u0707\7\u0313\2\2\u0707\u0709\t\17"+
		"\2\2\u0708\u0703\3\2\2\2\u0708\u0709\3\2\2\2\u0709\u0710\3\2\2\2\u070a"+
		"\u070c\7\u0326\2\2\u070b\u070a\3\2\2\2\u070b\u070c\3\2\2\2\u070c\u070d"+
		"\3\2\2\2\u070d\u070e\7\u01f4\2\2\u070e\u070f\7\u0313\2\2\u070f\u0711\t"+
		"\20\2\2\u0710\u070b\3\2\2\2\u0710\u0711\3\2\2\2\u0711\u0718\3\2\2\2\u0712"+
		"\u0714\7\u0326\2\2\u0713\u0712\3\2\2\2\u0713\u0714\3\2\2\2\u0714\u0715"+
		"\3\2\2\2\u0715\u0716\7\u02c0\2\2\u0716\u0717\7\u0313\2\2\u0717\u0719\t"+
		"\20\2\2\u0718\u0713\3\2\2\2\u0718\u0719\3\2\2\2\u0719\u0720\3\2\2\2\u071a"+
		"\u071c\7\u0326\2\2\u071b\u071a\3\2\2\2\u071b\u071c\3\2\2\2\u071c\u071d"+
		"\3\2\2\2\u071d\u071e\7\u01a3\2\2\u071e\u071f\7\u0313\2\2\u071f\u0721\7"+
		"\u030b\2\2\u0720\u071b\3\2\2\2\u0720\u0721\3\2\2\2\u0721\u072b\3\2\2\2"+
		"\u0722\u0724\7\u0326\2\2\u0723\u0722\3\2\2\2\u0723\u0724\3\2\2\2\u0724"+
		"\u0725\3\2\2\2\u0725\u0726\7\u027f\2\2\u0726\u0727\7\u0324\2\2\u0727\u0728"+
		"\7\6\2\2\u0728\u0729\7\u0313\2\2\u0729\u072a\t\21\2\2\u072a\u072c\7\u0325"+
		"\2\2\u072b\u0723\3\2\2\2\u072b\u072c\3\2\2\2\u072c\u0736\3\2\2\2\u072d"+
		"\u072f\7\u0326\2\2\u072e\u072d\3\2\2\2\u072e\u072f\3\2\2\2\u072f\u0730"+
		"\3\2\2\2\u0730\u0731\7\u02bc\2\2\u0731\u0732\7\u0324\2\2\u0732\u0733\7"+
		"\6\2\2\u0733\u0734\7\u0313\2\2\u0734\u0735\7\u0295\2\2\u0735\u0737\7\u0325"+
		"\2\2\u0736\u072e\3\2\2\2\u0736\u0737\3\2\2\2\u0737\u0738\3\2\2\2\u0738"+
		"\u083c\7\u0325\2\2\u0739\u073a\7\u02bc\2\2\u073a\u0743\7\u0324\2\2\u073b"+
		"\u073c\7\6\2\2\u073c\u073d\7\u0313\2\2\u073d\u0744\t\22\2\2\u073e\u073f"+
		"\7\u0296\2\2\u073f\u0740\7\u0313\2\2\u0740\u0741\7\u0324\2\2\u0741\u0742"+
		"\7\u030f\2\2\u0742\u0744\7\u0325\2\2\u0743\u073b\3\2\2\2\u0743\u073e\3"+
		"\2\2\2\u0744\u083c\3\2\2\2\u0745\u0746\7\u027f\2\2\u0746\u075d\7\u0324"+
		"\2\2\u0747\u0748\7\6\2\2\u0748\u0749\7\u0313\2\2\u0749\u075e\t\22\2\2"+
		"\u074a\u074b\7\u0296\2\2\u074b\u074c\7\u0313\2\2\u074c\u0757\7\u0324\2"+
		"\2\u074d\u074f\7\u0326\2\2\u074e\u074d\3\2\2\2\u074e\u074f\3\2\2\2\u074f"+
		"\u0750\3\2\2\2\u0750\u0752\7\u030f\2\2\u0751\u074e\3\2\2\2\u0752\u0755"+
		"\3\2\2\2\u0753\u0751\3\2\2\2\u0753\u0754\3\2\2\2\u0754\u0758\3\2\2\2\u0755"+
		"\u0753\3\2\2\2\u0756\u0758\7\u00d4\2\2\u0757\u0753\3\2\2\2\u0757\u0756"+
		"\3\2\2\2\u0758\u0759\3\2\2\2\u0759\u075e\7\u0325\2\2\u075a\u075b\7\u02c5"+
		"\2\2\u075b\u075c\7\u0313\2\2\u075c\u075e\7\u030b\2\2\u075d\u0747\3\2\2"+
		"\2\u075d\u074a\3\2\2\2\u075d\u075a\3\2\2\2\u075e\u083c\3\2\2\2\u075f\u0760"+
		"\7\u0253\2\2\u0760\u0761\7\u02a0\2\2\u0761\u0762\7\u00e4\2\2\u0762\u079c"+
		"\7\u030f\2\2\u0763\u0764\7\u017b\2\2\u0764\u0774\7\u0324\2\2\u0765\u0766"+
		"\7\u01ed\2\2\u0766\u0767\7\u0313\2\2\u0767\u0775\7\u030f\2\2\u0768\u0769"+
		"\7\27\2\2\u0769\u076a\7\u0313\2\2\u076a\u0775\t\17\2\2\u076b\u076c\7\u01f4"+
		"\2\2\u076c\u076d\7\u0313\2\2\u076d\u0775\t\20\2\2\u076e\u076f\7\u02c0"+
		"\2\2\u076f\u0770\7\u0313\2\2\u0770\u0775\t\20\2\2\u0771\u0772\7\u01a3"+
		"\2\2\u0772\u0773\7\u0313\2\2\u0773\u0775\7\u030b\2\2\u0774\u0765\3\2\2"+
		"\2\u0774\u0768\3\2\2\2\u0774\u076b\3\2\2\2\u0774\u076e\3\2\2\2\u0774\u0771"+
		"\3\2\2\2\u0775\u079d\3\2\2\2\u0776\u0777\7\u02bc\2\2\u0777\u0780\7\u0324"+
		"\2\2\u0778\u0779\7\6\2\2\u0779\u077a\7\u0313\2\2\u077a\u0781\t\22\2\2"+
		"\u077b\u077c\7\u0296\2\2\u077c\u077d\7\u0313\2\2\u077d\u077e\7\u0324\2"+
		"\2\u077e\u077f\7\u030f\2\2\u077f\u0781\7\u0325\2\2\u0780\u0778\3\2\2\2"+
		"\u0780\u077b\3\2\2\2\u0781\u079d\3\2\2\2\u0782\u0783\7\u027f\2\2\u0783"+
		"\u079a\7\u0324\2\2\u0784\u0785\7\6\2\2\u0785\u0786\7\u0313\2\2\u0786\u079b"+
		"\t\22\2\2\u0787\u0788\7\u0296\2\2\u0788\u0789\7\u0313\2\2\u0789\u0794"+
		"\7\u0324\2\2\u078a\u078c\7\u0326\2\2\u078b\u078a\3\2\2\2\u078b\u078c\3"+
		"\2\2\2\u078c\u078d\3\2\2\2\u078d\u078f\7\u030f\2\2\u078e\u078b\3\2\2\2"+
		"\u078f\u0792\3\2\2\2\u0790\u078e\3\2\2\2\u0790\u0791\3\2\2\2\u0791\u0795"+
		"\3\2\2\2\u0792\u0790\3\2\2\2\u0793\u0795\7\u00d4\2\2\u0794\u0790\3\2\2"+
		"\2\u0794\u0793\3\2\2\2\u0795\u0796\3\2\2\2\u0796\u079b\7\u0325\2\2\u0797"+
		"\u0798\7\u02c5\2\2\u0798\u0799\7\u0313\2\2\u0799\u079b\7\u030b\2\2\u079a"+
		"\u0784\3\2\2\2\u079a\u0787\3\2\2\2\u079a\u0797\3\2\2\2\u079b\u079d\3\2"+
		"\2\2\u079c\u0763\3\2\2\2\u079c\u0776\3\2\2\2\u079c\u0782\3\2\2\2\u079d"+
		"\u079e\3\2\2\2\u079e\u083c\7\u0325\2\2\u079f\u07a0\7\u029e\2\2\u07a0\u07a1"+
		"\7\u02a0\2\2\u07a1\u07a2\7\u00e4\2\2\u07a2\u083c\7\u030f\2\2\u07a3\u083c"+
		"\7\u00a9\2\2\u07a4\u07a5\7\u00a9\2\2\u07a5\u07a6\7\u01a1\2\2\u07a6\u07a7"+
		"\7\u0092\2\2\u07a7\u07be\7\u00e4\2\2\u07a8\u07aa\7\u0326\2\2\u07a9\u07a8"+
		"\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa\u07ab\3\2\2\2\u07ab\u07ac\7\u030f\2"+
		"\2\u07ac\u07ad\7\u017b\2\2\u07ad\u07ae\7\u0324\2\2\u07ae\u07af\7\u0231"+
		"\2\2\u07af\u07b0\7\u0313\2\2\u07b0\u07b1\7\u030f\2\2\u07b1\u07b2\7\u0326"+
		"\2\2\u07b2\u07b3\7\27\2\2\u07b3\u07b4\7\u0313\2\2\u07b4\u07b5\t\17\2\2"+
		"\u07b5\u07b6\7\u0326\2\2\u07b6\u07b7\7\u01f4\2\2\u07b7\u07b8\7\u0313\2"+
		"\2\u07b8\u07b9\7\u0239\2\2\u07b9\u07ba\7\u0326\2\2\u07ba\u07bb\7\u02c0"+
		"\2\2\u07bb\u07bc\7\u0313\2\2\u07bc\u07bd\t\20\2\2\u07bd\u07bf\7\u0325"+
		"\2\2\u07be\u07a9\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0\u07be\3\2\2\2\u07c0"+
		"\u07c1\3\2\2\2\u07c1\u083c\3\2\2\2\u07c2\u07c3\7\u0253\2\2\u07c3\u07c4"+
		"\7\u01a1\2\2\u07c4\u07c5\7\u0092\2\2\u07c5\u07e8\7\u00e4\2\2\u07c6\u07c8"+
		"\7\u0326\2\2\u07c7\u07c6\3\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u07c9\3\2\2"+
		"\2\u07c9\u07ca\7\u030f\2\2\u07ca\u07cb\7\u017b\2\2\u07cb\u07cc\7\u0324"+
		"\2\2\u07cc\u07cd\7\u0231\2\2\u07cd\u07ce\7\u0313\2\2\u07ce\u07d5\7\u030f"+
		"\2\2\u07cf\u07d1\7\u0326\2\2\u07d0\u07cf\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1"+
		"\u07d2\3\2\2\2\u07d2\u07d3\7\27\2\2\u07d3\u07d4\7\u0313\2\2\u07d4\u07d6"+
		"\t\17\2\2\u07d5\u07d0\3\2\2\2\u07d5\u07d6\3\2\2\2\u07d6\u07dd\3\2\2\2"+
		"\u07d7\u07d9\7\u0326\2\2\u07d8\u07d7\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9"+
		"\u07da\3\2\2\2\u07da\u07db\7\u01f4\2\2\u07db\u07dc\7\u0313\2\2\u07dc\u07de"+
		"\7\u0239\2\2\u07dd\u07d8\3\2\2\2\u07dd\u07de\3\2\2\2\u07de\u07e5\3\2\2"+
		"\2\u07df\u07e1\7\u0326\2\2\u07e0\u07df\3\2\2\2\u07e0\u07e1\3\2\2\2\u07e1"+
		"\u07e2\3\2\2\2\u07e2\u07e3\7\u02c0\2\2\u07e3\u07e4\7\u0313\2\2\u07e4\u07e6"+
		"\t\20\2\2\u07e5\u07e0\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u07e7\3\2\2\2"+
		"\u07e7\u07e9\7\u0325\2\2\u07e8\u07c7\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea"+
		"\u07e8\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb\u083c\3\2\2\2\u07ec\u07ed\7\u0091"+
		"\2\2\u07ed\u07ee\7H\2\2\u07ee\u07ef\7\f\2\2\u07ef\u083c\7T\2\2\u07f0\u07f1"+
		"\7]\2\2\u07f1\u07f2\7H\2\2\u07f2\u07f3\7\f\2\2\u07f3\u083c\7T\2\2\u07f4"+
		"\u083c\7}\2\2\u07f5\u083c\7\u0204\2\2\u07f6\u07f7\7\3\2\2\u07f7\u07f8"+
		"\7\u0230\2\2\u07f8\u07f9\7\u030f\2\2\u07f9\u081b\7\u0324\2\2\u07fa\u07fb"+
		"\7\u017b\2\2\u07fb\u07fc\7\u01de\2\2\u07fc\u07fd\7\u00e4\2\2\u07fd\u07fe"+
		"\7\u0324\2\2\u07fe\u07ff\7\u00a5\2\2\u07ff\u0800\7\u00a5\2\2\u0800\u0801"+
		"\3\2\2\2\u0801\u081c\7\u0325\2\2\u0802\u0803\7\u017b\2\2\u0803\u0804\7"+
		"\u0222\2\2\u0804\u0810\7\u0324\2\2\u0805\u0807\7\u0326\2\2\u0806\u0805"+
		"\3\2\2\2\u0806\u0807\3\2\2\2\u0807\u0808\3\2\2\2\u0808\u080d\7\u0324\2"+
		"\2\u0809\u080a\7\u00a5\2\2\u080a\u080b\7\u0326\2\2\u080b\u080e\7\u00a5"+
		"\2\2\u080c\u080e\7\u00a6\2\2\u080d\u0809\3\2\2\2\u080d\u080c\3\2\2\2\u080e"+
		"\u080f\3\2\2\2\u080f\u0811\7\u0325\2\2\u0810\u0806\3\2\2\2\u0811\u0812"+
		"\3\2\2\2\u0812\u0810\3\2\2\2\u0812\u0813\3\2\2\2\u0813\u0814\3\2\2\2\u0814"+
		"\u0819\7\u0325\2\2\u0815\u0816\7\u0326\2\2\u0816\u0817\7\u027d\2\2\u0817"+
		"\u0818\7\u0313\2\2\u0818\u081a\7\u030b\2\2\u0819\u0815\3\2\2\2\u0819\u081a"+
		"\3\2\2\2\u081a\u081c\3\2\2\2\u081b\u07fa\3\2\2\2\u081b\u0802\3\2\2\2\u081c"+
		"\u081d\3\2\2\2\u081d\u083c\7\u0325\2\2\u081e\u081f\7\u0253\2\2\u081f\u082c"+
		"\7\u0230\2\2\u0820\u0821\7\3\2\2\u0821\u0822\7\u0222\2\2\u0822\u0826\7"+
		"\u0324\2\2\u0823\u0824\7\u00a5\2\2\u0824\u0827\7\u00a5\2\2\u0825\u0827"+
		"\7\u00a6\2\2\u0826\u0823\3\2\2\2\u0826\u0825\3\2\2\2\u0827\u0828\3\2\2"+
		"\2\u0828\u082d\7\u0325\2\2\u0829\u082a\7\u027d\2\2\u082a\u082b\7\u0313"+
		"\2\2\u082b\u082d\7\u030b\2\2\u082c\u0820\3\2\2\2\u082c\u0829\3\2\2\2\u082d"+
		"\u083c\3\2\2\2\u082e\u082f\7\u0114\2\2\u082f\u0830\7\u0230\2\2\u0830\u083c"+
		"\7\u030f\2\2\u0831\u0832\7\u029e\2\2\u0832\u0833\7\u0230\2\2\u0833\u083c"+
		"\7\u030f\2\2\u0834\u083c\7\u026a\2\2\u0835\u0836\7\u017b\2\2\u0836\u0837"+
		"\7\u0324\2\2\u0837\u0838\7h\2\2\u0838\u0839\7\u0313\2\2\u0839\u083a\7"+
		"\u00f7\2\2\u083a\u083c\7\u0325\2\2\u083b\u06dd\3\2\2\2\u083b\u06f1\3\2"+
		"\2\2\u083b\u06f4\3\2\2\2\u083b\u06f7\3\2\2\2\u083b\u0739\3\2\2\2\u083b"+
		"\u0745\3\2\2\2\u083b\u075f\3\2\2\2\u083b\u079f\3\2\2\2\u083b\u07a3\3\2"+
		"\2\2\u083b\u07a4\3\2\2\2\u083b\u07c2\3\2\2\2\u083b\u07ec\3\2\2\2\u083b"+
		"\u07f0\3\2\2\2\u083b\u07f4\3\2\2\2\u083b\u07f5\3\2\2\2\u083b\u07f6\3\2"+
		"\2\2\u083b\u081e\3\2\2\2\u083b\u082e\3\2\2\2\u083b\u0831\3\2\2\2\u083b"+
		"\u0834\3\2\2\2\u083b\u0835\3\2\2\2\u083c\u00a1\3\2\2\2\u083d\u083e\t\23"+
		"\2\2\u083e\u083f\7\u01aa\2\2\u083f\u0840\7\u0281\2\2\u0840\u0841\5\u03a0"+
		"\u01d1\2\u0841\u0842\7\u0085\2\2\u0842\u0843\7E\2\2\u0843\u0844\7\u013c"+
		"\2\2\u0844\u084e\7\u0324\2\2\u0845\u0846\7D\2\2\u0846\u0849\7\u0313\2"+
		"\2\u0847\u084a\5\u03a0\u01d1\2\u0848\u084a\7\f\2\2\u0849\u0847\3\2\2\2"+
		"\u0849\u0848\3\2\2\2\u084a\u084c\3\2\2\2\u084b\u084d\7\u0326\2\2\u084c"+
		"\u084b\3\2\2\2\u084c\u084d\3\2\2\2\u084d\u084f\3\2\2\2\u084e\u0845\3\2"+
		"\2\2\u084e\u084f\3\2\2\2\u084f\u085c\3\2\2\2\u0850\u0851\7\u00b9\2\2\u0851"+
		"\u0857\7\u0313\2\2\u0852\u0854\7f\2\2\u0853\u0852\3\2\2\2\u0853\u0854"+
		"\3\2\2\2\u0854\u0855\3\2\2\2\u0855\u0858\5\u03a0\u01d1\2\u0856\u0858\7"+
		"\f\2\2\u0857\u0853\3\2\2\2\u0857\u0856\3\2\2\2\u0858\u085a\3\2\2\2\u0859"+
		"\u085b\7\u0326\2\2\u085a\u0859\3\2\2\2\u085a\u085b\3\2\2\2\u085b\u085d"+
		"\3\2\2\2\u085c\u0850\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u0867\3\2\2\2\u085e"+
		"\u085f\7\u02a3\2\2\u085f\u0862\7\u0313\2\2\u0860\u0863\7\u030f\2\2\u0861"+
		"\u0863\7\f\2\2\u0862\u0860\3\2\2\2\u0862\u0861\3\2\2\2\u0863\u0865\3\2"+
		"\2\2\u0864\u0866\7\u0326\2\2\u0865\u0864\3\2\2\2\u0865\u0866\3\2\2\2\u0866"+
		"\u0868\3\2\2\2\u0867\u085e\3\2\2\2\u0867\u0868\3\2\2\2\u0868\u086f\3\2"+
		"\2\2\u0869\u086a\7\u0282\2\2\u086a\u086d\7\u0313\2\2\u086b\u086e\7\u030b"+
		"\2\2\u086c\u086e\7Y\2\2\u086d\u086b\3\2\2\2\u086d\u086c\3\2\2\2\u086e"+
		"\u0870\3\2\2\2\u086f\u0869\3\2\2\2\u086f\u0870\3\2\2\2\u0870\u0871\3\2"+
		"\2\2\u0871\u0872\7\u0325\2\2\u0872\u00a3\3\2\2\2\u0873\u0874\7g\2\2\u0874"+
		"\u0875\7\u01aa\2\2\u0875\u0876\7\u0281\2\2\u0876\u0877\5\u03a0\u01d1\2"+
		"\u0877\u00a5\3\2\2\2\u0878\u0879\7\t\2\2\u0879\u087a\7*\2\2\u087a\u08a2"+
		"\5\u03a0\u01d1\2\u087b\u087c\7\u029e\2\2\u087c\u08a3\7\u0284\2\2\u087d"+
		"\u087e\7\u017b\2\2\u087e\u087f\7\u0283\2\2\u087f\u0880\7\u00ab\2\2\u0880"+
		"\u0897\7\u0324\2\2\u0881\u0882\7\u0081\2\2\u0882\u0883\7\u0313\2\2\u0883"+
		"\u0885\7\u030f\2\2\u0884\u0886\7\u0326\2\2\u0885\u0884\3\2\2\2\u0885\u0886"+
		"\3\2\2\2\u0886\u0898\3\2\2\2\u0887\u0888\7\u01d2\2\2\u0888\u0889\7%\2"+
		"\2\u0889\u088a\7\u00f3\2\2\u088a\u088b\7\u0313\2\2\u088b\u088d\7\u030f"+
		"\2\2\u088c\u088e\7\u0326\2\2\u088d\u088c\3\2\2\2\u088d\u088e\3\2\2\2\u088e"+
		"\u0898\3\2\2\2\u088f\u0890\7\u01ec\2\2\u0890\u0891\7%\2\2\u0891\u0892"+
		"\7\u00f3\2\2\u0892\u0893\7\u0313\2\2\u0893\u0895\7\u030f\2\2\u0894\u0896"+
		"\7\u0326\2\2\u0895\u0894\3\2\2\2\u0895\u0896\3\2\2\2\u0896\u0898\3\2\2"+
		"\2\u0897\u0881\3\2\2\2\u0897\u0887\3\2\2\2\u0897\u088f\3\2\2\2\u0898\u0899"+
		"\3\2\2\2\u0899\u0897\3\2\2\2\u0899\u089a\3\2\2\2\u089a\u089b\3\2\2\2\u089b"+
		"\u08a3\7\u0325\2\2\u089c\u089d\7\u017b\2\2\u089d\u089e\7\u0183\2\2\u089e"+
		"\u089f\7\u0085\2\2\u089f\u08a0\7\u01a4\2\2\u08a0\u08a1\7\u0313\2\2\u08a1"+
		"\u08a3\t\b\2\2\u08a2\u087b\3\2\2\2\u08a2\u087d\3\2\2\2\u08a2\u089c\3\2"+
		"\2\2\u08a3\u00a7\3\2\2\2\u08a4\u08a5\7\t\2\2\u08a5\u08a6\7\67\2\2\u08a6"+
		"\u08a7\7\u01ec\2\2\u08a7\u08a8\7\u00ab\2\2\u08a8\u08a9\5\u03a0\u01d1\2"+
		"\u08a9\u08aa\t\24\2\2\u08aa\u08ab\7\u02f9\2\2\u08ab\u08ac\7\u0324\2\2"+
		"\u08ac\u08ad\7\u01b8\2\2\u08ad\u08ae\7\u0313\2\2\u08ae\u08b7\5\u03a0\u01d1"+
		"\2\u08af\u08b0\7\u0326\2\2\u08b0\u08b1\7\u018c\2\2\u08b1\u08b2\7\u0313"+
		"\2\2\u08b2\u08b3\7\u030f\2\2\u08b3\u08b4\7\u0326\2\2\u08b4\u08b5\7\u01eb"+
		"\2\2\u08b5\u08b6\7\u0313\2\2\u08b6\u08b8\7\u0310\2\2\u08b7\u08af\3\2\2"+
		"\2\u08b7\u08b8\3\2\2\2\u08b8\u08b9\3\2\2\2\u08b9\u08ba\7\u0325\2\2\u08ba"+
		"\u00a9\3\2\2\2\u08bb\u08bc\7H\2\2\u08bc\u08bd\7\67\2\2\u08bd\u08be\7\u01ec"+
		"\2\2\u08be\u08bf\7\u00ab\2\2\u08bf\u08c0\5\u03a0\u01d1\2\u08c0\u08c1\7"+
		"\u017b\2\2\u08c1\u08d5\7\u0171\2\2\u08c2\u08c4\7\u0324\2\2\u08c3\u08c5"+
		"\7\u0326\2\2\u08c4\u08c3\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u08c6\3\2\2"+
		"\2\u08c6\u08c7\7\u01b8\2\2\u08c7\u08c8\7\u0313\2\2\u08c8\u08c9\5\u03a0"+
		"\u01d1\2\u08c9\u08ca\7\u0326\2\2\u08ca\u08cb\7\u018c\2\2\u08cb\u08cc\7"+
		"\u0313\2\2\u08cc\u08cd\7\u030f\2\2\u08cd\u08ce\7\u0326\2\2\u08ce\u08cf"+
		"\7\u01eb\2\2\u08cf\u08d0\7\u0313\2\2\u08d0\u08d1\7\u0310\2\2\u08d1\u08d3"+
		"\7\u0325\2\2\u08d2\u08d4\7\u0326\2\2\u08d3\u08d2\3\2\2\2\u08d3\u08d4\3"+
		"\2\2\2\u08d4\u08d6\3\2\2\2\u08d5\u08c2\3\2\2\2\u08d6\u08d7\3\2\2\2\u08d7"+
		"\u08d5\3\2\2\2\u08d7\u08d8\3\2\2\2\u08d8\u00ab\3\2\2\2\u08d9\u08da\7g"+
		"\2\2\u08da\u08db\7*\2\2\u08db\u08dc\5\u03a0\u01d1\2\u08dc\u00ad\3\2\2"+
		"\2\u08dd\u08de\7g\2\2\u08de\u08df\7\67\2\2\u08df\u08e0\7\u01ec\2\2\u08e0"+
		"\u08e1\7\u00ab\2\2\u08e1\u08e2\5\u03a0\u01d1\2\u08e2\u00af\3\2\2\2\u08e3"+
		"\u08e4\7g\2\2\u08e4\u08e5\7\67\2\2\u08e5\u08e6\7\u00bc\2\2\u08e6\u08e7"+
		"\7\u00ab\2\2\u08e7\u08e8\5\u03a0\u01d1\2\u08e8\u00b1\3\2\2\2\u08e9\u08ea"+
		"\7g\2\2\u08ea\u08eb\7C\2\2\u08eb\u08ec\5\u03a0\u01d1\2\u08ec\u00b3\3\2"+
		"\2\2\u08ed\u08ee\7g\2\2\u08ee\u08ef\7\u01c6\2\2\u08ef\u08f0\5\u03a0\u01d1"+
		"\2\u08f0\u00b5\3\2\2\2\u08f1\u08f2\7g\2\2\u08f2\u08f3\7\u01c7\2\2\u08f3"+
		"\u08f4\7\u0288\2\2\u08f4\u08f5\5\u03a0\u01d1\2\u08f5\u00b7\3\2\2\2\u08f6"+
		"\u08f7\7g\2\2\u08f7\u08fa\7T\2\2\u08f8\u08f9\7\u0099\2\2\u08f9\u08fb\7"+
		"w\2\2\u08fa\u08f8\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb\u0900\3\2\2\2\u08fc"+
		"\u08fe\7\u0326\2\2\u08fd\u08fc\3\2\2\2\u08fd\u08fe\3\2\2\2\u08fe\u08ff"+
		"\3\2\2\2\u08ff\u0901\5\u03a0\u01d1\2\u0900\u08fd\3\2\2\2\u0901\u0902\3"+
		"\2\2\2\u0902\u0900\3\2\2\2\u0902\u0903\3\2\2\2\u0903\u00b9\3\2\2\2\u0904"+
		"\u0905\7g\2\2\u0905\u0906\7T\2\2\u0906\u0907\7\u0198\2\2\u0907\u0908\7"+
		"\u0144\2\2\u0908\u0909\5\u03a0\u01d1\2\u0909\u00bb\3\2\2\2\u090a\u090b"+
		"\7g\2\2\u090b\u090c\7T\2\2\u090c\u090d\7\u02b6\2\2\u090d\u090e\7\u01c6"+
		"\2\2\u090e\u090f\5\u03a0\u01d1\2\u090f\u00bd\3\2\2\2\u0910\u0911\7g\2"+
		"\2\u0911\u0914\7Y\2\2\u0912\u0913\7\u0099\2\2\u0913\u0915\7w\2\2\u0914"+
		"\u0912\3\2\2\2\u0914\u0915\3\2\2\2\u0915\u0917\3\2\2\2\u0916\u0918\7\u0326"+
		"\2\2\u0917\u0916\3\2\2\2\u0917\u0918\3\2\2\2\u0918\u091c\3\2\2\2\u0919"+
		"\u091a\5\u03a0\u01d1\2\u091a\u091b\7\u031f\2\2\u091b\u091d\3\2\2\2\u091c"+
		"\u0919\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u091e\3\2\2\2\u091e\u091f\5\u03a0"+
		"\u01d1\2\u091f\u00bf\3\2\2\2\u0920\u0921\7g\2\2\u0921\u0922\7m\2\2\u0922"+
		"\u0923\5\u03a0\u01d1\2\u0923\u00c1\3\2\2\2\u0924\u0925\7g\2\2\u0925\u0926"+
		"\7{\2\2\u0926\u0927\7Q\2\2\u0927\u0928\7\u0143\2\2\u0928\u0929\5\u03a0"+
		"\u01d1\2\u0929\u00c3\3\2\2\2\u092a\u092b\7g\2\2\u092b\u092c\7{\2\2\u092c"+
		"\u092d\7\u0081\2\2\u092d\u092e\7\u0205\2\2\u092e\u092f\5\u03a0\u01d1\2"+
		"\u092f\u00c5\3\2\2\2\u0930\u0931\7g\2\2\u0931\u0932\7{\2\2\u0932\u0933"+
		"\7\u00b1\2\2\u0933\u0936\5\u03a0\u01d1\2\u0934\u0935\7\23\2\2\u0935\u0937"+
		"\5\u03a0\u01d1\2\u0936\u0934\3\2\2\2\u0936\u0937\3\2\2\2\u0937\u00c7\3"+
		"\2\2\2\u0938\u0939\7g\2\2\u0939\u093a\7{\2\2\u093a\u093b\7\u02a9\2\2\u093b"+
		"\u093c\7\u027b\2\2\u093c\u093d\5\u03a0\u01d1\2\u093d\u00c9\3\2\2\2\u093e"+
		"\u093f\7g\2\2\u093f\u0940\7{\2\2\u0940\u0944\7\u0155\2\2\u0941\u0942\5"+
		"\u03a0\u01d1\2\u0942\u0943\7\u031f\2\2\u0943\u0945\3\2\2\2\u0944\u0941"+
		"\3\2\2\2\u0944\u0945\3\2\2\2\u0945\u0949\3\2\2\2\u0946\u0947\5\u03a0\u01d1"+
		"\2\u0947\u0948\7\u031f\2\2\u0948\u094a\3\2\2\2\u0949\u0946\3\2\2\2\u0949"+
		"\u094a\3\2\2\2\u094a\u094b\3\2\2\2\u094b\u094c\5\u03a0\u01d1\2\u094c\u00cb"+
		"\3\2\2\2\u094d\u094e\7g\2\2\u094e\u094f\7q\2\2\u094f\u0954\7\u00dc\2\2"+
		"\u0950\u0952\7\u0326\2\2\u0951\u0950\3\2\2\2\u0951\u0952\3\2\2\2\u0952"+
		"\u0953\3\2\2\2\u0953\u0955\5\u03a0\u01d1\2\u0954\u0951\3\2\2\2\u0955\u0956"+
		"\3\2\2\2\u0956\u0954\3\2\2\2\u0956\u0957\3\2\2\2\u0957\u0958\3\2\2\2\u0958"+
		"\u095d\7\u00e4\2\2\u0959\u095e\7\u0136\2\2\u095a\u095e\7T\2\2\u095b\u095c"+
		"\7\u028a\2\2\u095c\u095e\5\u03a0\u01d1\2\u095d\u0959\3\2\2\2\u095d\u095a"+
		"\3\2\2\2\u095d\u095b\3\2\2\2\u095e\u00cd\3\2\2\2\u095f\u0960\7g\2\2\u0960"+
		"\u0961\7q\2\2\u0961\u0962\7\u013a\2\2\u0962\u0963\5\u03a0\u01d1\2\u0963"+
		"\u0964\7\u00e4\2\2\u0964\u0965\7\u0136\2\2\u0965\u00cf\3\2\2\2\u0966\u0967"+
		"\7g\2\2\u0967\u0968\7\u0208\2\2\u0968\u0969\7\u01b0\2\2\u0969\u096a\5"+
		"\u03a0\u01d1\2\u096a\u00d1\3\2\2\2\u096b\u096c\7g\2\2\u096c\u096d\7\u0208"+
		"\2\2\u096d\u096e\7\u009d\2\2\u096e\u0972\7\u00e4\2\2\u096f\u0970\5\u03a0"+
		"\u01d1\2\u0970\u0971\7\u031f\2\2\u0971\u0973\3\2\2\2\u0972\u096f\3\2\2"+
		"\2\u0972\u0973\3\2\2\2\u0973\u0974\3\2\2\2\u0974\u0975\5\u03a0\u01d1\2"+
		"\u0975\u00d3\3\2\2\2\u0976\u0977\7g\2\2\u0977\u0978\7\u0208\2\2\u0978"+
		"\u0979\7\u02d5\2\2\u0979\u097a\5\u03a0\u01d1\2\u097a\u00d5\3\2\2\2\u097b"+
		"\u097c\7g\2\2\u097c\u097d\7\u0236\2\2\u097d\u097e\5\u03a0\u01d1\2\u097e"+
		"\u00d7\3\2\2\2\u097f\u0980\7g\2\2\u0980\u0981\7\u00bc\2\2\u0981\u0982"+
		"\7\u00ab\2\2\u0982\u00d9\3\2\2\2\u0983\u0984\7g\2\2\u0984\u0985\7\u024b"+
		"\2\2\u0985\u0986\7\u02f0\2\2\u0986\u0987\5\u03a0\u01d1\2\u0987\u00db\3"+
		"\2\2\2\u0988\u0989\7g\2\2\u0989\u098a\7\u0277\2\2\u098a\u098b\7\u008d"+
		"\2\2\u098b\u098c\5\u03a0\u01d1\2\u098c\u00dd\3\2\2\2\u098d\u098e\7g\2"+
		"\2\u098e\u098f\7\u0277\2\2\u098f\u0990\7\u012e\2\2\u0990\u0991\5\u03a0"+
		"\u01d1\2\u0991\u00df\3\2\2\2\u0992\u0993\7g\2\2\u0993\u0997\7\u028a\2"+
		"\2\u0994\u0995\5\u03a0\u01d1\2\u0995\u0996\7\u031f\2\2\u0996\u0998\3\2"+
		"\2\2\u0997\u0994\3\2\2\2\u0997\u0998\3\2\2\2\u0998\u099c\3\2\2\2\u0999"+
		"\u099a\5\u03a0\u01d1\2\u099a\u099b\7\u031f\2\2\u099b\u099d\3\2\2\2\u099c"+
		"\u0999\3\2\2\2\u099c\u099d\3\2\2\2\u099d\u099e\3\2\2\2\u099e\u099f\5\u03a0"+
		"\u01d1\2\u099f\u00e1\3\2\2\2\u09a0\u09a1\7g\2\2\u09a1\u09a2\7\u02a2\2"+
		"\2\u09a2\u09a3\7\u0137\2\2\u09a3\u09a4\7\u01a8\2\2\u09a4\u09a5\5\u03a0"+
		"\u01d1\2\u09a5\u00e3\3\2\2\2\u09a6\u09a7\7g\2\2\u09a7\u09a8\7\u02a9\2"+
		"\2\u09a8\u09a9\7\u027b\2\2\u09a9\u09aa\5\u03a0\u01d1\2\u09aa\u00e5\3\2"+
		"\2\2\u09ab\u09ac\7g\2\2\u09ac\u09af\7\u0120\2\2\u09ad\u09ae\7\u0099\2"+
		"\2\u09ae\u09b0\7w\2\2\u09af\u09ad\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0\u09b1"+
		"\3\2\2\2\u09b1\u09b2\5\u03a0\u01d1\2\u09b2\u00e7\3\2\2\2\u09b3\u09b4\7"+
		"g\2\2\u09b4\u09b5\7\u02af\2\2\u09b5\u09b6\5\u03a0\u01d1\2\u09b6\u00e9"+
		"\3\2\2\2\u09b7\u09b8\7g\2\2\u09b8\u09bb\7\u0129\2\2\u09b9\u09ba\7\u0099"+
		"\2\2\u09ba\u09bc\7w\2\2\u09bb\u09b9\3\2\2\2\u09bb\u09bc\3\2\2\2\u09bc"+
		"\u09c6\3\2\2\2\u09bd\u09bf\7\u0326\2\2\u09be\u09bd\3\2\2\2\u09be\u09bf"+
		"\3\2\2\2\u09bf\u09c3\3\2\2\2\u09c0\u09c1\5\u03a0\u01d1\2\u09c1\u09c2\7"+
		"\u031f\2\2\u09c2\u09c4\3\2\2\2\u09c3\u09c0\3\2\2\2\u09c3\u09c4\3\2\2\2"+
		"\u09c4\u09c5\3\2\2\2\u09c5\u09c7\5\u03a0\u01d1\2\u09c6\u09be\3\2\2\2\u09c6"+
		"\u09c7\3\2\2\2\u09c7\u00eb\3\2\2\2\u09c8\u09c9\7g\2\2\u09c9\u09cc\7\u012d"+
		"\2\2\u09ca\u09cb\7\u0099\2\2\u09cb\u09cd\7w\2\2\u09cc\u09ca\3\2\2\2\u09cc"+
		"\u09cd\3\2\2\2\u09cd\u09ce\3\2\2\2\u09ce\u09cf\5\u03a0\u01d1\2\u09cf\u00ed"+
		"\3\2\2\2\u09d0\u09d1\7g\2\2\u09d1\u09d2\7\u02b9\2\2\u09d2\u09d3\7\u0287"+
		"\2\2\u09d3\u09d4\7\u022f\2\2\u09d4\u09d5\5\u03a0\u01d1\2\u09d5\u00ef\3"+
		"\2\2\2\u09d6\u09d7\7g\2\2\u09d7\u09d8\7\u012f\2\2\u09d8\u09db\7\u00fc"+
		"\2\2\u09d9\u09da\7\u0099\2\2\u09da\u09dc\7w\2\2\u09db\u09d9\3\2\2\2\u09db"+
		"\u09dc\3\2\2\2\u09dc\u09e0\3\2\2\2\u09dd\u09de\5\u03a0\u01d1\2\u09de\u09df"+
		"\7\u031f\2\2\u09df\u09e1\3\2\2\2\u09e0\u09dd\3\2\2\2\u09e0\u09e1\3\2\2"+
		"\2\u09e1\u09e2\3\2\2\2\u09e2\u09e3\5\u03a0\u01d1\2\u09e3\u00f1\3\2\2\2"+
		"\u09e4\u09e5\7g\2\2\u09e5\u09e8\7\u0135\2\2\u09e6\u09e7\7\u0099\2\2\u09e7"+
		"\u09e9\7w\2\2\u09e8\u09e6\3\2\2\2\u09e8\u09e9\3\2\2\2\u09e9\u09f8\3\2"+
		"\2\2\u09ea\u09ec\7\u0326\2\2\u09eb\u09ea\3\2\2\2\u09eb\u09ec\3\2\2\2\u09ec"+
		"\u09f0\3\2\2\2\u09ed\u09ee\5\u03a0\u01d1\2\u09ee\u09ef\7\u031f\2\2\u09ef"+
		"\u09f1\3\2\2\2\u09f0\u09ed\3\2\2\2\u09f0\u09f1\3\2\2\2\u09f1\u09f5\3\2"+
		"\2\2\u09f2\u09f3\5\u03a0\u01d1\2\u09f3\u09f4\7\u031f\2\2\u09f4\u09f6\3"+
		"\2\2\2\u09f5\u09f2\3\2\2\2\u09f5\u09f6\3\2\2\2\u09f6\u09f7\3\2\2\2\u09f7"+
		"\u09f9\5\u03a0\u01d1\2\u09f8\u09eb\3\2\2\2\u09f8\u09f9\3\2\2\2\u09f9\u00f3"+
		"\3\2\2\2\u09fa\u09fb\7g\2\2\u09fb\u09fc\7\u0136\2\2\u09fc\u09fd\7\u0198"+
		"\2\2\u09fd\u09fe\5\u03a0\u01d1\2\u09fe\u00f5\3\2\2\2\u09ff\u0a00\7g\2"+
		"\2\u0a00\u0a01\7\u0136\2\2\u0a01\u0a02\7\u0198\2\2\u0a02\u0a03\7\u0144"+
		"\2\2\u0a03\u0a04\5\u03a0\u01d1\2\u0a04\u00f7\3\2\2\2\u0a05\u0a06\7g\2"+
		"\2\u0a06\u0a07\7\u0136\2\2\u0a07\u0a08\7\u0120\2\2\u0a08\u0a09\5\u03a0"+
		"\u01d1\2\u0a09\u00f9\3\2\2\2\u0a0a\u0a0b\7g\2\2\u0a0b\u0a0c\7\u0137\2"+
		"\2\u0a0c\u0a0d\5\u03a0\u01d1\2\u0a0d\u00fb\3\2\2\2\u0a0e\u0a10\7g\2\2"+
		"\u0a0f\u0a11\7\u01c1\2\2\u0a10\u0a0f\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11"+
		"\u0a12\3\2\2\2\u0a12\u0a13\7\u02c8\2\2\u0a13\u0a17\7\u008b\2\2\u0a14\u0a15"+
		"\5\u03a0\u01d1\2\u0a15\u0a16\7\u031f\2\2\u0a16\u0a18\3\2\2\2\u0a17\u0a14"+
		"\3\2\2\2\u0a17\u0a18\3\2\2\2\u0a18\u0a19\3\2\2\2\u0a19\u0a1a\5\u03a0\u01d1"+
		"\2\u0a1a\u0a26\7%\2\2\u0a1b\u0a1d\7\u0326\2\2\u0a1c\u0a1b\3\2\2\2\u0a1c"+
		"\u0a1d\3\2\2\2\u0a1d\u0a1e\3\2\2\2\u0a1e\u0a1f\7*\2\2\u0a1f\u0a27\5\u03a0"+
		"\u01d1\2\u0a20\u0a22\7\u0326\2\2\u0a21\u0a20\3\2\2\2\u0a21\u0a22\3\2\2"+
		"\2\u0a22\u0a23\3\2\2\2\u0a23\u0a24\7\21\2\2\u0a24\u0a25\7\u00ab\2\2\u0a25"+
		"\u0a27\5\u03a0\u01d1\2\u0a26\u0a1c\3\2\2\2\u0a26\u0a21\3\2\2\2\u0a27\u0a28"+
		"\3\2\2\2\u0a28\u0a26\3\2\2\2\u0a28\u0a29\3\2\2\2\u0a29\u00fd\3\2\2\2\u0a2a"+
		"\u0a2b\7g\2\2\u0a2b\u0a2f\7\u0149\2\2\u0a2c\u0a2d\5\u03a0\u01d1\2\u0a2d"+
		"\u0a2e\7\u031f\2\2\u0a2e\u0a30\3\2\2\2\u0a2f\u0a2c\3\2\2\2\u0a2f\u0a30"+
		"\3\2\2\2\u0a30\u0a31\3\2\2\2\u0a31\u0a32\5\u03a0\u01d1\2\u0a32\u0a33\7"+
		"\u031f\2\2\u0a33\u0a34\5\u03a0\u01d1\2\u0a34\u00ff\3\2\2\2\u0a35\u0a36"+
		"\7g\2\2\u0a36\u0a37\7\u02db\2\2\u0a37\u0a38\7\u00ab\2\2\u0a38\u0a3c\5"+
		"\u03a0\u01d1\2\u0a39\u0a3a\7\u029e\2\2\u0a3a\u0a3b\7\u0288\2\2\u0a3b\u0a3d"+
		"\7\u00ab\2\2\u0a3c\u0a39\3\2\2\2\u0a3c\u0a3d\3\2\2\2\u0a3d\u0101\3\2\2"+
		"\2\u0a3e\u0a3f\7g\2\2\u0a3f\u0a42\7\u02dd\2\2\u0a40\u0a41\7\u0099\2\2"+
		"\u0a41\u0a43\7w\2\2\u0a42\u0a40\3\2\2\2\u0a42\u0a43\3\2\2\2\u0a43\u0a47"+
		"\3\2\2\2\u0a44\u0a45\5\u03a0\u01d1\2\u0a45\u0a46\7\u031f\2\2\u0a46\u0a48"+
		"\3\2\2\2\u0a47\u0a44\3\2\2\2\u0a47\u0a48\3\2\2\2\u0a48\u0a49\3\2\2\2\u0a49"+
		"\u0a4a\5\u03a0\u01d1\2\u0a4a\u0103\3\2\2\2\u0a4b\u0a4c\7g\2\2\u0a4c\u0a4f"+
		"\7\u0170\2\2\u0a4d\u0a4e\7\u0099\2\2\u0a4e\u0a50\7w\2\2\u0a4f\u0a4d\3"+
		"\2\2\2\u0a4f\u0a50\3\2\2\2\u0a50\u0a51\3\2\2\2\u0a51\u0a52\5\u03a0\u01d1"+
		"\2\u0a52\u0105\3\2\2\2\u0a53\u0a54\7g\2\2\u0a54\u0a55\7\u0300\2\2\u0a55"+
		"\u0a56\7\u0092\2\2\u0a56\u0a57\5\u03a0\u01d1\2\u0a57\u0107\3\2\2\2\u0a58"+
		"\u0a59\7g\2\2\u0a59\u0a5a\7\u0301\2\2\u0a5a\u0a5b\7\u012d\2\2\u0a5b\u0a5f"+
		"\7\u01b7\2\2\u0a5c\u0a5d\5\u03a0\u01d1\2\u0a5d\u0a5e\7\u031f\2\2\u0a5e"+
		"\u0a60\3\2\2\2\u0a5f\u0a5c\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60\u0a61\3\2"+
		"\2\2\u0a61\u0a62\5\u03a0\u01d1\2\u0a62\u0109\3\2\2\2\u0a63\u0a64\7\u01e1"+
		"\2\2\u0a64\u0a73\7\u0162\2\2\u0a65\u0a67\7\u0326\2\2\u0a66\u0a65\3\2\2"+
		"\2\u0a66\u0a67\3\2\2\2\u0a67\u0a6b\3\2\2\2\u0a68\u0a69\5\u03a0\u01d1\2"+
		"\u0a69\u0a6a\7\u031f\2\2\u0a6a\u0a6c\3\2\2\2\u0a6b\u0a68\3\2\2\2\u0a6b"+
		"\u0a6c\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d\u0a6f\5\u03a0\u01d1\2\u0a6e\u0a66"+
		"\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70\u0a6e\3\2\2\2\u0a70\u0a71\3\2\2\2\u0a71"+
		"\u0a74\3\2\2\2\u0a72\u0a74\7\5\2\2\u0a73\u0a6e\3\2\2\2\u0a73\u0a72\3\2"+
		"\2\2\u0a74\u0a75\3\2\2\2\u0a75\u0a7f\7\u00e4\2\2\u0a76\u0a77\5\u03a0\u01d1"+
		"\2\u0a77\u0a78\7\u031f\2\2\u0a78\u0a7a\3\2\2\2\u0a79\u0a76\3\2\2\2\u0a79"+
		"\u0a7a\3\2\2\2\u0a7a\u0a7b\3\2\2\2\u0a7b\u0a80\5\u03a0\u01d1\2\u0a7c\u0a80"+
		"\7T\2\2\u0a7d\u0a7e\7\5\2\2\u0a7e\u0a80\7\u0136\2\2\u0a7f\u0a79\3\2\2"+
		"\2\u0a7f\u0a7c\3\2\2\2\u0a7f\u0a7d\3\2\2\2\u0a80\u010b\3\2\2\2\u0a81\u0a82"+
		"\7\u01e9\2\2\u0a82\u0a91\7\u0162\2\2\u0a83\u0a85\7\u0326\2\2\u0a84\u0a83"+
		"\3\2\2\2\u0a84\u0a85\3\2\2\2\u0a85\u0a89\3\2\2\2\u0a86\u0a87\5\u03a0\u01d1"+
		"\2\u0a87\u0a88\7\u031f\2\2\u0a88\u0a8a\3\2\2\2\u0a89\u0a86\3\2\2\2\u0a89"+
		"\u0a8a\3\2\2\2\u0a8a\u0a8b\3\2\2\2\u0a8b\u0a8d\5\u03a0\u01d1\2\u0a8c\u0a84"+
		"\3\2\2\2\u0a8d\u0a8e\3\2\2\2\u0a8e\u0a8c\3\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f"+
		"\u0a92\3\2\2\2\u0a90\u0a92\7\5\2\2\u0a91\u0a8c\3\2\2\2\u0a91\u0a90\3\2"+
		"\2\2\u0a92\u0a93\3\2\2\2\u0a93\u0a9d\7\u00e4\2\2\u0a94\u0a95\5\u03a0\u01d1"+
		"\2\u0a95\u0a96\7\u031f\2\2\u0a96\u0a98\3\2\2\2\u0a97\u0a94\3\2\2\2\u0a97"+
		"\u0a98\3\2\2\2\u0a98\u0a99\3\2\2\2\u0a99\u0a9e\5\u03a0\u01d1\2\u0a9a\u0a9e"+
		"\7T\2\2\u0a9b\u0a9c\7\5\2\2\u0a9c\u0a9e\7\u0136\2\2\u0a9d\u0a97\3\2\2"+
		"\2\u0a9d\u0a9a\3\2\2\2\u0a9d\u0a9b\3\2\2\2\u0a9e\u010d\3\2\2\2\u0a9f\u0aa0"+
		"\7\u0163\2\2\u0aa0\u0aa4\7\u0155\2\2\u0aa1\u0aa2\5\u03a0\u01d1\2\u0aa2"+
		"\u0aa3\7\u031f\2\2\u0aa3\u0aa5\3\2\2\2\u0aa4\u0aa1\3\2\2\2\u0aa4\u0aa5"+
		"\3\2\2\2\u0aa5\u0aa9\3\2\2\2\u0aa6\u0aa7\5\u03a0\u01d1\2\u0aa7\u0aa8\7"+
		"\u031f\2\2\u0aa8\u0aaa\3\2\2\2\u0aa9\u0aa6\3\2\2\2\u0aa9\u0aaa\3\2\2\2"+
		"\u0aaa\u0aab\3\2\2\2\u0aab\u0abf\5\u03a0\u01d1\2\u0aac\u0aad\7\u017b\2"+
		"\2\u0aad\u0aae\7\u0324\2\2\u0aae\u0aaf\7\u0278\2\2\u0aaf\u0ab9\7\u0324"+
		"\2\2\u0ab0\u0ab2\7\u0326\2\2\u0ab1\u0ab0\3\2\2\2\u0ab1\u0ab2\3\2\2\2\u0ab2"+
		"\u0ab7\3\2\2\2\u0ab3\u0ab8\7\u030b\2\2\u0ab4\u0ab5\7\u030b\2\2\u0ab5\u0ab6"+
		"\7\u015c\2\2\u0ab6\u0ab8\7\u030b\2\2\u0ab7\u0ab3\3\2\2\2\u0ab7\u0ab4\3"+
		"\2\2\2\u0ab8\u0aba\3\2\2\2\u0ab9\u0ab1\3\2\2\2\u0aba\u0abb\3\2\2\2\u0abb"+
		"\u0ab9\3\2\2\2\u0abb\u0abc\3\2\2\2\u0abc\u0abd\3\2\2\2\u0abd\u0abe\7\u0325"+
		"\2\2\u0abe\u0ac0\7\u0325\2\2\u0abf\u0aac\3\2\2\2\u0abf\u0ac0\3\2\2\2\u0ac0"+
		"\u010f\3\2\2\2\u0ac1\u0ac2\7H\2\2\u0ac2\u0ac3\7\67\2\2\u0ac3\u0ac4\7\u00bc"+
		"\2\2\u0ac4\u0ac5\7\u00ab\2\2\u0ac5\u0ac6\5\u03a0\u01d1\2\u0ac6\u0ac7\7"+
		"\u017b\2\2\u0ac7\u0ac8\7\u0324\2\2\u0ac8\u0ac9\7\u00ad\2\2\u0ac9\u0aca"+
		"\7\u0313\2\2\u0aca\u0acb\7\u030f\2\2\u0acb\u0acc\7\u0326\2\2\u0acc\u0acd"+
		"\7\u00ac\2\2\u0acd\u0ace\7\u0313\2\2\u0ace\u0acf\7\u030f\2\2\u0acf\u0ad0"+
		"\7\u0325\2\2\u0ad0\u0111\3\2\2\2\u0ad1\u0ad2\7\t\2\2\u0ad2\u0ad3\7\u01c6"+
		"\2\2\u0ad3\u0ad4\5\u03a0\u01d1\2\u0ad4\u0ad5\7\u017b\2\2\u0ad5\u0ad6\7"+
		"\u0096\2\2\u0ad6\u0ad7\7\u0313\2\2\u0ad7\u0adc\7\u030f\2\2\u0ad8\u0ad9"+
		"\7\u0326\2\2\u0ad9\u0ada\7\u02be\2\2\u0ada\u0adb\7\u0313\2\2\u0adb\u0add"+
		"\7\u030f\2\2\u0adc\u0ad8\3\2\2\2\u0adc\u0add\3\2\2\2\u0add\u0113\3\2\2"+
		"\2\u0ade\u0adf\7H\2\2\u0adf\u0ae0\7\u01c6\2\2\u0ae0\u0ae1\5\u03a0\u01d1"+
		"\2\u0ae1\u0ae2\7\u017b\2\2\u0ae2\u0ae3\7\u0096\2\2\u0ae3\u0ae4\7\u0313"+
		"\2\2\u0ae4\u0ae9\7\u030f\2\2\u0ae5\u0ae6\7\u0326\2\2\u0ae6\u0ae7\7\u02be"+
		"\2\2\u0ae7\u0ae8\7\u0313\2\2\u0ae8\u0aea\7\u030f\2\2\u0ae9\u0ae5\3\2\2"+
		"\2\u0ae9\u0aea\3\2\2\2\u0aea\u0aef\3\2\2\2\u0aeb\u0aec\7\u0085\2\2\u0aec"+
		"\u0aed\7\u01c7\2\2\u0aed\u0aee\7\u0288\2\2\u0aee\u0af0\5\u03a0\u01d1\2"+
		"\u0aef\u0aeb\3\2\2\2\u0aef\u0af0\3\2\2\2\u0af0\u0115\3\2\2\2\u0af1\u0af2"+
		"\7\t\2\2\u0af2\u0af3\7\u01c7\2\2\u0af3\u0af4\7\u0288\2\2\u0af4\u0af9\5"+
		"\u03a0\u01d1\2\u0af5\u0af6\7\u008b\2\2\u0af6\u0af7\7\u0081\2\2\u0af7\u0af8"+
		"\7\u0313\2\2\u0af8\u0afa\7\u030f\2\2\u0af9\u0af5\3\2\2\2\u0af9\u0afa\3"+
		"\2\2\2\u0afa\u0afc\3\2\2\2\u0afb\u0afd\t\25\2\2\u0afc\u0afb\3\2\2\2\u0afc"+
		"\u0afd\3\2\2\2\u0afd\u0117\3\2\2\2\u0afe\u0aff\7H\2\2\u0aff\u0b00\7\u01c7"+
		"\2\2\u0b00\u0b01\7\u0288\2\2\u0b01\u0b02\5\u03a0\u01d1\2\u0b02\u0b03\7"+
		"\u008b\2\2\u0b03\u0b04\7\u0081\2\2\u0b04\u0b05\7\u0313\2\2\u0b05\u0b06"+
		"\7\u030f\2\2\u0b06\u0119\3\2\2\2\u0b07\u0b08\7H\2\2\u0b08\u0b09\7q\2\2"+
		"\u0b09\u0b0a\7\u00dc\2\2\u0b0a\u0b0b\5\u03a0\u01d1\2\u0b0b\u0b10\7\u00e4"+
		"\2\2\u0b0c\u0b11\7\u0136\2\2\u0b0d\u0b11\7T\2\2\u0b0e\u0b0f\7\u028a\2"+
		"\2\u0b0f\u0b11\5\u03a0\u01d1\2\u0b10\u0b0c\3\2\2\2\u0b10\u0b0d\3\2\2\2"+
		"\u0b10\u0b0e\3\2\2\2\u0b11\u0b14\3\2\2\2\u0b12\u0b13\7\u017b\2\2\u0b13"+
		"\u0b15\7\177\2\2\u0b14\u0b12\3\2\2\2\u0b14\u0b15\3\2\2\2\u0b15\u0b16\3"+
		"\2\2\2\u0b16\u0b1b\7\u0085\2\2\u0b17\u0b19\7\u0326\2\2\u0b18\u0b17\3\2"+
		"\2\2\u0b18\u0b19\3\2\2\2\u0b19\u0b1a\3\2\2\2\u0b1a\u0b1c\5\u03a0\u01d1"+
		"\2\u0b1b\u0b18\3\2\2\2\u0b1c\u0b1d\3\2\2\2\u0b1d\u0b1b\3\2\2\2\u0b1d\u0b1e"+
		"\3\2\2\2\u0b1e\u0b1f\3\2\2\2\u0b1f\u0b20\7\u015c\2\2\u0b20\u0b21\7\u0137"+
		"\2\2\u0b21\u0b22\7\u030f\2\2\u0b22\u0b23\7\u0326\2\2\u0b23\u0b24\7\u030f"+
		"\2\2\u0b24\u011b\3\2\2\2\u0b25\u0b26\t\23\2\2\u0b26\u0b27\7q\2\2\u0b27"+
		"\u0b28\7\u013a\2\2\u0b28\u0b29\5\u03a0\u01d1\2\u0b29\u0b2a\7\u00e4\2\2"+
		"\u0b2a\u0b6e\7\u0136\2\2\u0b2b\u0b2d\7\u0326\2\2\u0b2c\u0b2b\3\2\2\2\u0b2c"+
		"\u0b2d\3\2\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u0b2f\7\3\2\2\u0b2f\u0b33\7q"+
		"\2\2\u0b30\u0b31\5\u03a0\u01d1\2\u0b31\u0b32\7\u031f\2\2\u0b32\u0b34\3"+
		"\2\2\2\u0b33\u0b30\3\2\2\2\u0b33\u0b34\3\2\2\2\u0b34\u0b35\3\2\2\2\u0b35"+
		"\u0b36\5\u03a0\u01d1\2\u0b36\u0b37\7\u031f\2\2\u0b37\u0b38\5\u03a0\u01d1"+
		"\2\u0b38\u0b69\3\2\2\2\u0b39\u0b47\7\u0324\2\2\u0b3a\u0b44\7\u013c\2\2"+
		"\u0b3b\u0b3d\7\u0326\2\2\u0b3c\u0b3b\3\2\2\2\u0b3c\u0b3d\3\2\2\2\u0b3d"+
		"\u0b3e\3\2\2\2\u0b3e\u0b3f\5\u03a0\u01d1\2\u0b3f\u0b40\7\u0313\2\2\u0b40"+
		"\u0b41\t\26\2\2\u0b41\u0b43\3\2\2\2\u0b42\u0b3c\3\2\2\2\u0b43\u0b46\3"+
		"\2\2\2\u0b44\u0b42\3\2\2\2\u0b44\u0b45\3\2\2\2\u0b45\u0b48\3\2\2\2\u0b46"+
		"\u0b44\3\2\2\2\u0b47\u0b3a\3\2\2\2\u0b47\u0b48\3\2\2\2\u0b48\u0b5d\3\2"+
		"\2\2\u0b49\u0b4a\7\u0182\2\2\u0b4a\u0b57\7\u0324\2\2\u0b4b\u0b4d\7\u0326"+
		"\2\2\u0b4c\u0b4b\3\2\2\2\u0b4c\u0b4d\3\2\2\2\u0b4d\u0b51\3\2\2\2\u0b4e"+
		"\u0b4f\5\u03a0\u01d1\2\u0b4f\u0b50\7\u031f\2\2\u0b50\u0b52\3\2\2\2\u0b51"+
		"\u0b4e\3\2\2\2\u0b51\u0b52\3\2\2\2\u0b52\u0b53\3\2\2\2\u0b53\u0b54\5\u03a0"+
		"\u01d1\2\u0b54\u0b55\7\u031f\2\2\u0b55\u0b56\5\u03a0\u01d1\2\u0b56\u0b58"+
		"\3\2\2\2\u0b57\u0b4c\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59\u0b57\3\2\2\2\u0b59"+
		"\u0b5a\3\2\2\2\u0b5a\u0b5b\3\2\2\2\u0b5b\u0b5c\7\u0325\2\2\u0b5c\u0b5e"+
		"\3\2\2\2\u0b5d\u0b49\3\2\2\2\u0b5e\u0b5f\3\2\2\2\u0b5f\u0b5d\3\2\2\2\u0b5f"+
		"\u0b60\3\2\2\2\u0b60\u0b63\3\2\2\2\u0b61\u0b62\7\u0178\2\2\u0b62\u0b64"+
		"\5\u011e\u0090\2\u0b63\u0b61\3\2\2\2\u0b63\u0b64\3\2\2\2\u0b64\u0b65\3"+
		"\2\2\2\u0b65\u0b66\7\u0325\2\2\u0b66\u0b68\3\2\2\2\u0b67\u0b39\3\2\2\2"+
		"\u0b68\u0b6b\3\2\2\2\u0b69\u0b67\3\2\2\2\u0b69\u0b6a\3\2\2\2\u0b6a\u0b6d"+
		"\3\2\2\2\u0b6b\u0b69\3\2\2\2\u0b6c\u0b2c\3\2\2\2\u0b6d\u0b70\3\2\2\2\u0b6e"+
		"\u0b6c\3\2\2\2\u0b6e\u0b6f\3\2\2\2\u0b6f\u0b81\3\2\2\2\u0b70\u0b6e\3\2"+
		"\2\2\u0b71\u0b73\7\u0326\2\2\u0b72\u0b71\3\2\2\2\u0b72\u0b73\3\2\2\2\u0b73"+
		"\u0b74\3\2\2\2\u0b74\u0b75\7g\2\2\u0b75\u0b79\7q\2\2\u0b76\u0b77\5\u03a0"+
		"\u01d1\2\u0b77\u0b78\7\u031f\2\2\u0b78\u0b7a\3\2\2\2\u0b79\u0b76\3\2\2"+
		"\2\u0b79\u0b7a\3\2\2\2\u0b7a\u0b7b\3\2\2\2\u0b7b\u0b7c\5\u03a0\u01d1\2"+
		"\u0b7c\u0b7d\7\u031f\2\2\u0b7d\u0b7e\5\u03a0\u01d1\2\u0b7e\u0b80\3\2\2"+
		"\2\u0b7f\u0b72\3\2\2\2\u0b80\u0b83\3\2\2\2\u0b81\u0b7f\3\2\2\2\u0b81\u0b82"+
		"\3\2\2\2\u0b82\u0bad\3\2\2\2\u0b83\u0b81\3\2\2\2\u0b84\u0b85\7\3\2\2\u0b85"+
		"\u0b89\7\u0158\2\2\u0b86\u0b87\5\u03a0\u01d1\2\u0b87\u0b88\7\u031f\2\2"+
		"\u0b88\u0b8a\3\2\2\2\u0b89\u0b86\3\2\2\2\u0b89\u0b8a\3\2\2\2\u0b8a\u0b8b"+
		"\3\2\2\2\u0b8b\u0b8c\5\u03a0\u01d1\2\u0b8c\u0b8d\7\u031f\2\2\u0b8d\u0b8e"+
		"\5\u03a0\u01d1\2\u0b8e\u0ba8\3\2\2\2\u0b8f\u0b90\7\u0324\2\2\u0b90\u0ba0"+
		"\7\u013c\2\2\u0b91\u0b93\7\u0326\2\2\u0b92\u0b91\3\2\2\2\u0b92\u0b93\3"+
		"\2\2\2\u0b93\u0b94\3\2\2\2\u0b94\u0b95\5\u03a0\u01d1\2\u0b95\u0b9e\7\u0313"+
		"\2\2\u0b96\u0b98\7\u0324\2\2\u0b97\u0b96\3\2\2\2\u0b97\u0b98\3\2\2\2\u0b98"+
		"\u0b99\3\2\2\2\u0b99\u0b9b\7\u030b\2\2\u0b9a\u0b9c\7\u0325\2\2\u0b9b\u0b9a"+
		"\3\2\2\2\u0b9b\u0b9c\3\2\2\2\u0b9c\u0b9f\3\2\2\2\u0b9d\u0b9f\7\u030f\2"+
		"\2\u0b9e\u0b97\3\2\2\2\u0b9e\u0b9d\3\2\2\2\u0b9f\u0ba1\3\2\2\2\u0ba0\u0b92"+
		"\3\2\2\2\u0ba1\u0ba2\3\2\2\2\u0ba2\u0ba0\3\2\2\2\u0ba2\u0ba3\3\2\2\2\u0ba3"+
		"\u0ba4\3\2\2\2\u0ba4\u0ba5\7\u0325\2\2\u0ba5\u0ba7\3\2\2\2\u0ba6\u0b8f"+
		"\3\2\2\2\u0ba7\u0baa\3\2\2\2\u0ba8\u0ba6\3\2\2\2\u0ba8\u0ba9\3\2\2\2\u0ba9"+
		"\u0bac\3\2\2\2\u0baa\u0ba8\3\2\2\2\u0bab\u0b84\3\2\2\2\u0bac\u0baf\3\2"+
		"\2\2\u0bad\u0bab\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae\u0bbd\3\2\2\2\u0baf"+
		"\u0bad\3\2\2\2\u0bb0\u0bb1\7g\2\2\u0bb1\u0bb5\7\u0158\2\2\u0bb2\u0bb3"+
		"\5\u03a0\u01d1\2\u0bb3\u0bb4\7\u031f\2\2\u0bb4\u0bb6\3\2\2\2\u0bb5\u0bb2"+
		"\3\2\2\2\u0bb5\u0bb6\3\2\2\2\u0bb6\u0bb7\3\2\2\2\u0bb7\u0bb8\5\u03a0\u01d1"+
		"\2\u0bb8\u0bb9\7\u031f\2\2\u0bb9\u0bba\5\u03a0\u01d1\2\u0bba\u0bbc\3\2"+
		"\2\2\u0bbb\u0bb0\3\2\2\2\u0bbc\u0bbf\3\2\2\2\u0bbd\u0bbb\3\2\2\2\u0bbd"+
		"\u0bbe\3\2\2\2\u0bbe\u0c01\3\2\2\2\u0bbf\u0bbd\3\2\2\2\u0bc0\u0bc1\7\u017b"+
		"\2\2\u0bc1\u0bc9\7\u0324\2\2\u0bc2\u0bc4\7\u0326\2\2\u0bc3\u0bc2\3\2\2"+
		"\2\u0bc3\u0bc4\3\2\2\2\u0bc4\u0bc5\3\2\2\2\u0bc5\u0bc6\7\u00bd\2\2\u0bc6"+
		"\u0bc7\7\u0313\2\2\u0bc7\u0bc8\7\u030b\2\2\u0bc8\u0bca\t\27\2\2\u0bc9"+
		"\u0bc3\3\2\2\2\u0bc9\u0bca\3\2\2\2\u0bca\u0bd1\3\2\2\2\u0bcb\u0bcd\7\u0326"+
		"\2\2\u0bcc\u0bcb\3\2\2\2\u0bcc\u0bcd\3\2\2\2\u0bcd\u0bce\3\2\2\2\u0bce"+
		"\u0bcf\7s\2\2\u0bcf\u0bd0\7\u0313\2\2\u0bd0\u0bd2\t\30\2\2\u0bd1\u0bcc"+
		"\3\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2\u0bdd\3\2\2\2\u0bd3\u0bd5\7\u0326\2"+
		"\2\u0bd4\u0bd3\3\2\2\2\u0bd4\u0bd5\3\2\2\2\u0bd5\u0bd6\3\2\2\2\u0bd6\u0bd7"+
		"\7\u00c0\2\2\u0bd7\u0bdb\7\u0313\2\2\u0bd8\u0bd9\7\u030b\2\2\u0bd9\u0bdc"+
		"\7\u02bd\2\2\u0bda\u0bdc\7\u009e\2\2\u0bdb\u0bd8\3\2\2\2\u0bdb\u0bda\3"+
		"\2\2\2\u0bdc\u0bde\3\2\2\2\u0bdd\u0bd4\3\2\2\2\u0bdd\u0bde\3\2\2\2\u0bde"+
		"\u0be6\3\2\2\2\u0bdf\u0be1\7\u0326\2\2\u0be0\u0bdf\3\2\2\2\u0be0\u0be1"+
		"\3\2\2\2\u0be1\u0be2\3\2\2\2\u0be2\u0be3\7\u00c1\2\2\u0be3\u0be4\7\u0313"+
		"\2\2\u0be4\u0be5\7\u030b\2\2\u0be5\u0be7\t\27\2\2\u0be6\u0be0\3\2\2\2"+
		"\u0be6\u0be7\3\2\2\2\u0be7\u0bee\3\2\2\2\u0be8\u0bea\7\u0326\2\2\u0be9"+
		"\u0be8\3\2\2\2\u0be9\u0bea\3\2\2\2\u0bea\u0beb\3\2\2\2\u0beb\u0bec\7\u00c7"+
		"\2\2\u0bec\u0bed\7\u0313\2\2\u0bed\u0bef\t\31\2\2\u0bee\u0be9\3\2\2\2"+
		"\u0bee\u0bef\3\2\2\2\u0bef\u0bf6\3\2\2\2\u0bf0\u0bf2\7\u0326\2\2\u0bf1"+
		"\u0bf0\3\2\2\2\u0bf1\u0bf2\3\2\2\2\u0bf2\u0bf3\3\2\2\2\u0bf3\u0bf4\7\u015e"+
		"\2\2\u0bf4\u0bf5\7\u0313\2\2\u0bf5\u0bf7\t\b\2\2\u0bf6\u0bf1\3\2\2\2\u0bf6"+
		"\u0bf7\3\2\2\2\u0bf7\u0bfe\3\2\2\2\u0bf8\u0bfa\7\u0326\2\2\u0bf9\u0bf8"+
		"\3\2\2\2\u0bf9\u0bfa\3\2\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u0bfc\7\u014e\2"+
		"\2\u0bfc\u0bfd\7\u0313\2\2\u0bfd\u0bff\t\b\2\2\u0bfe\u0bf9\3\2\2\2\u0bfe"+
		"\u0bff\3\2\2\2\u0bff\u0c00\3\2\2\2\u0c00\u0c02\7\u0325\2\2\u0c01\u0bc0"+
		"\3\2\2\2\u0c01\u0c02\3\2\2\2\u0c02\u0c06\3\2\2\2\u0c03\u0c04\7\u014a\2"+
		"\2\u0c04\u0c05\7\u0313\2\2\u0c05\u0c07\t\32\2\2\u0c06\u0c03\3\2\2\2\u0c06"+
		"\u0c07\3\2\2\2\u0c07\u011d\3\2\2\2\u0c08\u0c0a\7\u0326\2\2\u0c09\u0c08"+
		"\3\2\2\2\u0c09\u0c0a\3\2\2\2\u0c0a\u0c0c\3\2\2\2\u0c0b\u0c0d\t\33\2\2"+
		"\u0c0c\u0c0b\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d\u0c0f\3\2\2\2\u0c0e\u0c10"+
		"\7\u00db\2\2\u0c0f\u0c0e\3\2\2\2\u0c0f\u0c10\3\2\2\2\u0c10\u0c16\3\2\2"+
		"\2\u0c11\u0c17\5\u0120\u0091\2\u0c12\u0c13\7\u0324\2\2\u0c13\u0c14\5\u011e"+
		"\u0090\2\u0c14\u0c15\7\u0325\2\2\u0c15\u0c17\3\2\2\2\u0c16\u0c11\3\2\2"+
		"\2\u0c16\u0c12\3\2\2\2\u0c17\u0c19\3\2\2\2\u0c18\u0c09\3\2\2\2\u0c19\u0c1a"+
		"\3\2\2\2\u0c1a\u0c18\3\2\2\2\u0c1a\u0c1b\3\2\2\2\u0c1b\u011f\3\2\2\2\u0c1c"+
		"\u0c22\5\u0122\u0092\2\u0c1d\u0c1e\7\u0324\2\2\u0c1e\u0c1f\5\u011e\u0090"+
		"\2\u0c1f\u0c20\7\u0325\2\2\u0c20\u0c22\3\2\2\2\u0c21\u0c1c\3\2\2\2\u0c21"+
		"\u0c1d\3\2\2\2\u0c22\u0121\3\2\2\2\u0c23\u0c40\5\u03a0\u01d1\2\u0c24\u0c2f"+
		"\5\u03a0\u01d1\2\u0c25\u0c26\5\u03a0\u01d1\2\u0c26\u0c27\7\u031f\2\2\u0c27"+
		"\u0c29\3\2\2\2\u0c28\u0c25\3\2\2\2\u0c28\u0c29\3\2\2\2\u0c29\u0c2a\3\2"+
		"\2\2\u0c2a\u0c2b\5\u03a0\u01d1\2\u0c2b\u0c2c\7\u031f\2\2\u0c2c\u0c2d\5"+
		"\u03a0\u01d1\2\u0c2d\u0c2f\3\2\2\2\u0c2e\u0c24\3\2\2\2\u0c2e\u0c28\3\2"+
		"\2\2\u0c2f\u0c3b\3\2\2\2\u0c30\u0c3c\7\u0313\2\2\u0c31\u0c32\7\u0315\2"+
		"\2\u0c32\u0c3c\7\u0314\2\2\u0c33\u0c34\7\u0316\2\2\u0c34\u0c3c\7\u0313"+
		"\2\2\u0c35\u0c3c\7\u0314\2\2\u0c36\u0c37\7\u0314\2\2\u0c37\u0c3c\7\u0313"+
		"\2\2\u0c38\u0c3c\7\u0315\2\2\u0c39\u0c3a\7\u0315\2\2\u0c3a\u0c3c\7\u0313"+
		"\2\2\u0c3b\u0c30\3\2\2\2\u0c3b\u0c31\3\2\2\2\u0c3b\u0c33\3\2\2\2\u0c3b"+
		"\u0c35\3\2\2\2\u0c3b\u0c36\3\2\2\2\u0c3b\u0c38\3\2\2\2\u0c3b\u0c39\3\2"+
		"\2\2\u0c3c\u0c3d\3\2\2\2\u0c3d\u0c3e\t\26\2\2\u0c3e\u0c40\3\2\2\2\u0c3f"+
		"\u0c23\3\2\2\2\u0c3f\u0c2e\3\2\2\2\u0c40\u0c5c\3\2\2\2\u0c41\u0c42\5\u03a0"+
		"\u01d1\2\u0c42\u0c43\7\u031f\2\2\u0c43\u0c45\3\2\2\2\u0c44\u0c41\3\2\2"+
		"\2\u0c44\u0c45\3\2\2\2\u0c45\u0c46\3\2\2\2\u0c46\u0c47\5\u03a0\u01d1\2"+
		"\u0c47\u0c48\7\u031f\2\2\u0c48\u0c49\5\u03a0\u01d1\2\u0c49\u0c57\7\u0324"+
		"\2\2\u0c4a\u0c58\5\u03a0\u01d1\2\u0c4b\u0c4c\5\u03a0\u01d1\2\u0c4c\u0c4d"+
		"\7\u031f\2\2\u0c4d\u0c4f\3\2\2\2\u0c4e\u0c4b\3\2\2\2\u0c4e\u0c4f\3\2\2"+
		"\2\u0c4f\u0c50\3\2\2\2\u0c50\u0c51\5\u03a0\u01d1\2\u0c51\u0c52\7\u031f"+
		"\2\2\u0c52\u0c53\5\u03a0\u01d1\2\u0c53\u0c54\3\2\2\2\u0c54\u0c55\7\u0326"+
		"\2\2\u0c55\u0c56\t\26\2\2\u0c56\u0c58\3\2\2\2\u0c57\u0c4a\3\2\2\2\u0c57"+
		"\u0c4e\3\2\2\2\u0c58\u0c59\3\2\2\2\u0c59\u0c5a\7\u0325\2\2\u0c5a\u0c5c"+
		"\3\2\2\2\u0c5b\u0c3f\3\2\2\2\u0c5b\u0c44\3\2\2\2\u0c5c\u0123\3\2\2\2\u0c5d"+
		"\u0c5e\7\t\2\2\u0c5e\u0c5f\7{\2\2\u0c5f\u0c60\7Q\2\2\u0c60\u0c61\7\u0143"+
		"\2\2\u0c61\u0c62\5\u03a0\u01d1\2\u0c62\u0c72\7\u013c\2\2\u0c63\u0c64\7"+
		"\u0234\2\2\u0c64\u0c65\7\u0313\2\2\u0c65\u0c67\t\34\2\2\u0c66\u0c68\7"+
		"\u0326\2\2\u0c67\u0c66\3\2\2\2\u0c67\u0c68\3\2\2\2\u0c68\u0c73\3\2\2\2"+
		"\u0c69\u0c6a\7\u02aa\2\2\u0c6a\u0c6b\7\u0313\2\2\u0c6b\u0c6d\t\34\2\2"+
		"\u0c6c\u0c6e\7\u0326\2\2\u0c6d\u0c6c\3\2\2\2\u0c6d\u0c6e\3\2\2\2\u0c6e"+
		"\u0c73\3\2\2\2\u0c6f\u0c70\7\u01c6\2\2\u0c70\u0c71\7\u0313\2\2\u0c71\u0c73"+
		"\5\u03a0\u01d1\2\u0c72\u0c63\3\2\2\2\u0c72\u0c69\3\2\2\2\u0c72\u0c6f\3"+
		"\2\2\2\u0c73\u0c74\3\2\2\2\u0c74\u0c72\3\2\2\2\u0c74\u0c75\3\2\2\2\u0c75"+
		"\u0c8d\3\2\2\2\u0c76\u0c77\7\t\2\2\u0c77\u0c78\7{\2\2\u0c78\u0c79\7Q\2"+
		"\2\u0c79\u0c7a\7\u0143\2\2\u0c7a\u0c7b\5\u03a0\u01d1\2\u0c7b\u0c7c\7\u017b"+
		"\2\2\u0c7c\u0c7d\7\u0324\2\2\u0c7d\u0c7e\7\u02f0\2\2\u0c7e\u0c7f\7\u0313"+
		"\2\2\u0c7f\u0c80\7\u01a9\2\2\u0c80\u0c81\7\u0326\2\2\u0c81\u0c82\7\u0234"+
		"\2\2\u0c82\u0c83\7\u0313\2\2\u0c83\u0c88\7\u030f\2\2\u0c84\u0c85\7\u0326"+
		"\2\2\u0c85\u0c86\7\u01c6\2\2\u0c86\u0c87\7\u0313\2\2\u0c87\u0c89\5\u03a0"+
		"\u01d1\2\u0c88\u0c84\3\2\2\2\u0c88\u0c89\3\2\2\2\u0c89\u0c8a\3\2\2\2\u0c8a"+
		"\u0c8b\7\u0325\2\2\u0c8b\u0c8d\3\2\2\2\u0c8c\u0c5d\3\2\2\2\u0c8c\u0c76"+
		"\3\2\2\2\u0c8d\u0125\3\2\2\2\u0c8e\u0c8f\7\t\2\2\u0c8f\u0c90\7{\2\2\u0c90"+
		"\u0c91\7\u00b1\2\2\u0c91\u0c94\5\u03a0\u01d1\2\u0c92\u0c93\7\23\2\2\u0c93"+
		"\u0c95\5\u03a0\u01d1\2\u0c94\u0c92\3\2\2\2\u0c94\u0c95\3\2\2\2\u0c95\u0c96"+
		"\3\2\2\2\u0c96\u0c97\t\35\2\2\u0c97\u0c98\7\u0324\2\2\u0c98\u0c99\7\u01bd"+
		"\2\2\u0c99\u0c9d\7\u0313\2\2\u0c9a\u0c9e\7\u030f\2\2\u0c9b\u0c9e\7\u0310"+
		"\2\2\u0c9c\u0c9e\7\u00d4\2\2\u0c9d\u0c9a\3\2\2\2\u0c9d\u0c9b\3\2\2\2\u0c9d"+
		"\u0c9c\3\2\2\2\u0c9e\u0c9f\3\2\2\2\u0c9f\u0ca0\7\u0326\2\2\u0ca0\u0ca1"+
		"\7\u00fb\2\2\u0ca1\u0ca3\7\u0313\2\2\u0ca2\u0ca4\t\36\2\2\u0ca3\u0ca2"+
		"\3\2\2\2\u0ca3\u0ca4\3\2\2\2\u0ca4\u0ca5\3\2\2\2\u0ca5\u0ca6\7\u0325\2"+
		"\2\u0ca6\u0ca7\3\2\2\2\u0ca7\u0cb1\7\u017b\2\2\u0ca8\u0caa\7\u0326\2\2"+
		"\u0ca9\u0ca8\3\2\2\2\u0ca9\u0caa\3\2\2\2\u0caa\u0cab\3\2\2\2\u0cab\u0cac"+
		"\7\u00af\2\2\u0cac\u0cad\7\u0313\2\2\u0cad\u0cb2\t\37\2\2\u0cae\u0caf"+
		"\7S\2\2\u0caf\u0cb0\7\u0313\2\2\u0cb0\u0cb2\5\u03a0\u01d1\2\u0cb1\u0ca9"+
		"\3\2\2\2\u0cb1\u0cae\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u0cb1\3\2\2\2\u0cb3"+
		"\u0cb4\3\2\2\2\u0cb4\u0cb5\3\2\2\2\u0cb5\u0cb6\7\u0325\2\2\u0cb6\u0127"+
		"\3\2\2\2\u0cb7\u0cb8\7H\2\2\u0cb8\u0cb9\7{\2\2\u0cb9\u0cba\7\u00b1\2\2"+
		"\u0cba\u0cbd\5\u03a0\u01d1\2\u0cbb\u0cbc\7\23\2\2\u0cbc\u0cbe\5\u03a0"+
		"\u01d1\2\u0cbd\u0cbb\3\2\2\2\u0cbd\u0cbe\3\2\2\2\u0cbe\u0cbf\3\2\2\2\u0cbf"+
		"\u0cc1\7\u008b\2\2\u0cc0\u0cc2\7\u0326\2\2\u0cc1\u0cc0\3\2\2\2\u0cc1\u0cc2"+
		"\3\2\2\2\u0cc2\u0cc4\3\2\2\2\u0cc3\u0cc5\7\u0324\2\2\u0cc4\u0cc3\3\2\2"+
		"\2\u0cc4\u0cc5\3\2\2\2\u0cc5\u0cc8\3\2\2\2\u0cc6\u0cc7\7\u01bd\2\2\u0cc7"+
		"\u0cc9\7\u0313\2\2\u0cc8\u0cc6\3\2\2\2\u0cc8\u0cc9\3\2\2\2\u0cc9\u0ccd"+
		"\3\2\2\2\u0cca\u0cce\7\u030f\2\2\u0ccb\u0cce\7\u0310\2\2\u0ccc\u0cce\7"+
		"\u00d4\2\2\u0ccd\u0cca\3\2\2\2\u0ccd\u0ccb\3\2\2\2\u0ccd\u0ccc\3\2\2\2"+
		"\u0cce\u0cd6\3\2\2\2\u0ccf\u0cd0\7\u0326\2\2\u0cd0\u0cd1\7\u00fb\2\2\u0cd1"+
		"\u0cd3\7\u0313\2\2\u0cd2\u0cd4\t\36\2\2\u0cd3\u0cd2\3\2\2\2\u0cd3\u0cd4"+
		"\3\2\2\2\u0cd4\u0cd5\3\2\2\2\u0cd5\u0cd7\7\u0325\2\2\u0cd6\u0ccf\3\2\2"+
		"\2\u0cd6\u0cd7\3\2\2\2\u0cd7\u0ce7\3\2\2\2\u0cd8\u0ce2\7\u017b\2\2\u0cd9"+
		"\u0cdb\7\u0326\2\2\u0cda\u0cd9\3\2\2\2\u0cda\u0cdb\3\2\2\2\u0cdb\u0cdc"+
		"\3\2\2\2\u0cdc\u0cdd\7\u00af\2\2\u0cdd\u0cde\7\u0313\2\2\u0cde\u0ce3\t"+
		"\37\2\2\u0cdf\u0ce0\7S\2\2\u0ce0\u0ce1\7\u0313\2\2\u0ce1\u0ce3\5\u03a0"+
		"\u01d1\2\u0ce2\u0cda\3\2\2\2\u0ce2\u0cdf\3\2\2\2\u0ce3\u0ce4\3\2\2\2\u0ce4"+
		"\u0ce2\3\2\2\2\u0ce4\u0ce5\3\2\2\2\u0ce5\u0ce6\3\2\2\2\u0ce6\u0ce8\7\u0325"+
		"\2\2\u0ce7\u0cd8\3\2\2\2\u0ce7\u0ce8\3\2\2\2\u0ce8\u0129\3\2\2\2\u0ce9"+
		"\u0cea\7\t\2\2\u0cea\u0ceb\7{\2\2\u0ceb\u0cec\7\u02a9\2\2\u0cec\u0cef"+
		"\7\u027b\2\2\u0ced\u0cf0\5\u03a0\u01d1\2\u0cee\u0cf0\7\u01d3\2\2\u0cef"+
		"\u0ced\3\2\2\2\u0cef\u0cee\3\2\2\2\u0cf0\u0cf1\3\2\2\2\u0cf1\u0cf2\7\u017b"+
		"\2\2\u0cf2\u0cf3\7\u0324\2\2\u0cf3\u0cf4\7\u023c\2\2\u0cf4\u0cf5\7\u0313"+
		"\2\2\u0cf5\u0d1b\7\u030b\2\2\u0cf6\u0cf8\7\u0326\2\2\u0cf7\u0cf6\3\2\2"+
		"\2\u0cf7\u0cf8\3\2\2\2\u0cf8\u0cf9\3\2\2\2\u0cf9\u0cfa\7\u0189\2\2\u0cfa"+
		"\u0cfb\7\u01c3\2\2\u0cfb\u0d09\7\u0313\2\2\u0cfc\u0d0a\7\u019a\2\2\u0cfd"+
		"\u0cff\7\u0326\2\2\u0cfe\u0cfd\3\2\2\2\u0cfe\u0cff\3\2\2\2\u0cff\u0d00"+
		"\3\2\2\2\u0d00\u0d01\7\u030b\2\2\u0d01\u0d02\7\u015c\2\2\u0d02\u0d06\7"+
		"\u030b\2\2\u0d03\u0d04\7\u0326\2\2\u0d04\u0d06\7\u030b\2\2\u0d05\u0cfe"+
		"\3\2\2\2\u0d05\u0d03\3\2\2\2\u0d06\u0d07\3\2\2\2\u0d07\u0d05\3\2\2\2\u0d07"+
		"\u0d08\3\2\2\2\u0d08\u0d0a\3\2\2\2\u0d09\u0cfc\3\2\2\2\u0d09\u0d05\3\2"+
		"\2\2\u0d0a\u0d1c\3\2\2\2\u0d0b\u0d0c\7\u0266\2\2\u0d0c\u0d17\7\u0313\2"+
		"\2\u0d0d\u0d0f\7\u0326\2\2\u0d0e\u0d0d\3\2\2\2\u0d0e\u0d0f\3\2\2\2\u0d0f"+
		"\u0d10\3\2\2\2\u0d10\u0d11\7\u030b\2\2\u0d11\u0d12\7\u015c\2\2\u0d12\u0d18"+
		"\7\u030b\2\2\u0d13\u0d15\7\u0326\2\2\u0d14\u0d13\3\2\2\2\u0d14\u0d15\3"+
		"\2\2\2\u0d15\u0d16\3\2\2\2\u0d16\u0d18\7\u030b\2\2\u0d17\u0d0e\3\2\2\2"+
		"\u0d17\u0d14\3\2\2\2\u0d18\u0d19\3\2\2\2\u0d19\u0d17\3\2\2\2\u0d19\u0d1a"+
		"\3\2\2\2\u0d1a\u0d1c\3\2\2\2\u0d1b\u0cf7\3\2\2\2\u0d1b\u0d0b\3\2\2\2\u0d1c"+
		"\u0d23\3\2\2\2\u0d1d\u0d1f\7\u0326\2\2\u0d1e\u0d1d\3\2\2\2\u0d1e\u0d1f"+
		"\3\2\2\2\u0d1f\u0d20\3\2\2\2\u0d20\u0d21\7\u0241\2\2\u0d21\u0d22\7\u0313"+
		"\2\2\u0d22\u0d24\7\u030b\2\2\u0d23\u0d1e\3\2\2\2\u0d23\u0d24\3\2\2\2\u0d24"+
		"\u0d2b\3\2\2\2\u0d25\u0d27\7\u0326\2\2\u0d26\u0d25\3\2\2\2\u0d26\u0d27"+
		"\3\2\2\2\u0d27\u0d28\3\2\2\2\u0d28\u0d29\7\u0243\2\2\u0d29\u0d2a\7\u0313"+
		"\2\2\u0d2a\u0d2c\7\u030b\2\2\u0d2b\u0d26\3\2\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c"+
		"\u0d2d\3\2\2\2\u0d2d\u0d2e\7\u0325\2\2\u0d2e\u012b\3\2\2\2\u0d2f\u0d30"+
		"\7H\2\2\u0d30\u0d31\7{\2\2\u0d31\u0d32\7\u02a9\2\2\u0d32\u0d33\7\u027b"+
		"\2\2\u0d33\u0d34\5\u03a0\u01d1\2\u0d34\u0d35\7\u017b\2\2\u0d35\u0d36\7"+
		"\u0324\2\2\u0d36\u0d37\7\u023c\2\2\u0d37\u0d38\7\u0313\2\2\u0d38\u0d5e"+
		"\7\u030b\2\2\u0d39\u0d3b\7\u0326\2\2\u0d3a\u0d39\3\2\2\2\u0d3a\u0d3b\3"+
		"\2\2\2\u0d3b\u0d3c\3\2\2\2\u0d3c\u0d3d\7\u0189\2\2\u0d3d\u0d3e\7\u01c3"+
		"\2\2\u0d3e\u0d4c\7\u0313\2";
	private static final String _serializedATNSegment2 =
		"\2\u0d3f\u0d4d\7\u019a\2\2\u0d40\u0d42\7\u0326\2\2\u0d41\u0d40\3\2\2\2"+
		"\u0d41\u0d42\3\2\2\2\u0d42\u0d43\3\2\2\2\u0d43\u0d44\7\u030b\2\2\u0d44"+
		"\u0d45\7\u015c\2\2\u0d45\u0d49\7\u030b\2\2\u0d46\u0d47\7\u0326\2\2\u0d47"+
		"\u0d49\7\u030b\2\2\u0d48\u0d41\3\2\2\2\u0d48\u0d46\3\2\2\2\u0d49\u0d4a"+
		"\3\2\2\2\u0d4a\u0d48\3\2\2\2\u0d4a\u0d4b\3\2\2\2\u0d4b\u0d4d\3\2\2\2\u0d4c"+
		"\u0d3f\3\2\2\2\u0d4c\u0d48\3\2\2\2\u0d4d\u0d5f\3\2\2\2\u0d4e\u0d4f\7\u0266"+
		"\2\2\u0d4f\u0d5a\7\u0313\2\2\u0d50\u0d52\7\u0326\2\2\u0d51\u0d50\3\2\2"+
		"\2\u0d51\u0d52\3\2\2\2\u0d52\u0d53\3\2\2\2\u0d53\u0d54\7\u030b\2\2\u0d54"+
		"\u0d55\7\u015c\2\2\u0d55\u0d5b\7\u030b\2\2\u0d56\u0d58\7\u0326\2\2\u0d57"+
		"\u0d56\3\2\2\2\u0d57\u0d58\3\2\2\2\u0d58\u0d59\3\2\2\2\u0d59\u0d5b\7\u030b"+
		"\2\2\u0d5a\u0d51\3\2\2\2\u0d5a\u0d57\3\2\2\2\u0d5b\u0d5c\3\2\2\2\u0d5c"+
		"\u0d5a\3\2\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d\u0d5f\3\2\2\2\u0d5e\u0d3a\3\2"+
		"\2\2\u0d5e\u0d4e\3\2\2\2\u0d5f\u0d66\3\2\2\2\u0d60\u0d62\7\u0326\2\2\u0d61"+
		"\u0d60\3\2\2\2\u0d61\u0d62\3\2\2\2\u0d62\u0d63\3\2\2\2\u0d63\u0d64\7\u0241"+
		"\2\2\u0d64\u0d65\7\u0313\2\2\u0d65\u0d67\7\u030b\2\2\u0d66\u0d61\3\2\2"+
		"\2\u0d66\u0d67\3\2\2\2\u0d67\u0d6e\3\2\2\2\u0d68\u0d6a\7\u0326\2\2\u0d69"+
		"\u0d68\3\2\2\2\u0d69\u0d6a\3\2\2\2\u0d6a\u0d6b\3\2\2\2\u0d6b\u0d6c\7\u0243"+
		"\2\2\u0d6c\u0d6d\7\u0313\2\2\u0d6d\u0d6f\7\u030b\2\2\u0d6e\u0d69\3\2\2"+
		"\2\u0d6e\u0d6f\3\2\2\2\u0d6f\u0d70\3\2\2\2\u0d70\u0d71\7\u0325\2\2\u0d71"+
		"\u012d\3\2\2\2\u0d72\u0d73\7\t\2\2\u0d73\u0d74\7\u0208\2\2\u0d74\u0d75"+
		"\7\u01b0\2\2\u0d75\u0d80\5\u03a0\u01d1\2\u0d76\u0d7b\7\u0298\2\2\u0d77"+
		"\u0d78\7\u017b\2\2\u0d78\u0d79\7\u0181\2\2\u0d79\u0d7a\7\u0313\2\2\u0d7a"+
		"\u0d7c\t\b\2\2\u0d7b\u0d77\3\2\2\2\u0d7b\u0d7c\3\2\2\2\u0d7c\u0d81\3\2"+
		"\2\2\u0d7d\u0d81\7\u029f\2\2\u0d7e\u0d7f\7\17\2\2\u0d7f\u0d81\7Y\2\2\u0d80"+
		"\u0d76\3\2\2\2\u0d80\u0d7d\3\2\2\2\u0d80\u0d7e\3\2\2\2\u0d81\u012f\3\2"+
		"\2\2\u0d82\u0d83\7H\2\2\u0d83\u0d84\7\u0208\2\2\u0d84\u0d85\7\u01b0\2"+
		"\2\u0d85\u0d89\5\u03a0\u01d1\2\u0d86\u0d87\7\u00e4\2\2\u0d87\u0d88\7\u01fa"+
		"\2\2\u0d88\u0d8a\5\u03a0\u01d1\2\u0d89\u0d86\3\2\2\2\u0d89\u0d8a\3\2\2"+
		"\2\u0d8a\u0d8e\3\2\2\2\u0d8b\u0d8c\7\u009a\2\2\u0d8c\u0d8d\7\u027a\2\2"+
		"\u0d8d\u0d8f\7\u030f\2\2\u0d8e\u0d8b\3\2\2\2\u0d8e\u0d8f\3\2\2\2\u0d8f"+
		"\u0d94\3\2\2\2\u0d90\u0d91\7\u017b\2\2\u0d91\u0d92\7\u0181\2\2\u0d92\u0d93"+
		"\7\u0313\2\2\u0d93\u0d95\t\b\2\2\u0d94\u0d90\3\2\2\2\u0d94\u0d95\3\2\2"+
		"\2\u0d95\u0d98\3\2\2\2\u0d96\u0d97\7\17\2\2\u0d97\u0d99\7Y\2\2\u0d98\u0d96"+
		"\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99\u0d9c\3\2\2\2\u0d9a\u0d9b\7\23\2\2"+
		"\u0d9b\u0d9d\5\u03a0\u01d1\2\u0d9c\u0d9a\3\2\2\2\u0d9c\u0d9d\3\2\2\2\u0d9d"+
		"\u0131\3\2\2\2\u0d9e\u0d9f\7\t\2\2\u0d9f\u0da0\7\u0208\2\2\u0da0\u0da1"+
		"\7\u02d5\2\2\u0da1\u0daf\5\u03a0\u01d1\2\u0da2\u0da3\7\3\2\2\u0da3\u0da4"+
		"\7\u030f\2\2\u0da4\u0da5\7\u00af\2\2\u0da5\u0db0\t \2\2\u0da6\u0dad\7"+
		"g\2\2\u0da7\u0da8\7\u030f\2\2\u0da8\u0da9\7\u00af\2\2\u0da9\u0dae\t \2"+
		"\2\u0daa\u0dab\7\5\2\2\u0dab\u0dae\t \2\2\u0dac\u0dae\7\5\2\2\u0dad\u0da7"+
		"\3\2\2\2\u0dad\u0daa\3\2\2\2\u0dad\u0dac\3\2\2\2\u0dae\u0db0\3\2\2\2\u0daf"+
		"\u0da2\3\2\2\2\u0daf\u0da6\3\2\2\2\u0db0\u0133\3\2\2\2\u0db1\u0db2\7H"+
		"\2\2\u0db2\u0db3\7\u0208\2\2\u0db3\u0db4\7\u02d5\2\2\u0db4\u0dc0\5\u03a0"+
		"\u01d1\2\u0db5\u0dbe\7\u008b\2\2\u0db6\u0db7\5\u03a0\u01d1\2\u0db7\u0db8"+
		"\7\u031f\2\2\u0db8\u0dba\3\2\2\2\u0db9\u0db6\3\2\2\2\u0db9\u0dba\3\2\2"+
		"\2\u0dba\u0dbb\3\2\2\2\u0dbb\u0dbf\5\u03a0\u01d1\2\u0dbc\u0dbd\7\u0153"+
		"\2\2\u0dbd\u0dbf\7\u02d5\2\2\u0dbe\u0db9\3\2\2\2\u0dbe\u0dbc\3\2\2\2\u0dbf"+
		"\u0dc1\3\2\2\2\u0dc0\u0db5\3\2\2\2\u0dc0\u0dc1\3\2\2\2\u0dc1\u0dc4\3\2"+
		"\2\2\u0dc2\u0dc3\7\23\2\2\u0dc3\u0dc5\5\u03a0\u01d1\2\u0dc4\u0dc2\3\2"+
		"\2\2\u0dc4\u0dc5\3\2\2\2\u0dc5\u0135\3\2\2\2\u0dc6\u0dc7\7\t\2\2\u0dc7"+
		"\u0dc8\7\u0236\2\2\u0dc8\u0e0c\5\u03a0\u01d1\2\u0dc9\u0dcb\t\25\2\2\u0dca"+
		"\u0dc9\3\2\2\2\u0dca\u0dcb\3\2\2\2\u0dcb\u0e0d\3\2\2\2\u0dcc\u0dda\7\u017b"+
		"\2\2\u0dcd\u0dce\7\u00f3\2\2\u0dce\u0dd2\7\u0313\2\2\u0dcf\u0dd3\7\u030f"+
		"\2\2\u0dd0\u0dd1\7\u0310\2\2\u0dd1\u0dd3\7\u0094\2\2\u0dd2\u0dcf\3\2\2"+
		"\2\u0dd2\u0dd0\3\2\2\2\u0dd3\u0dd7\3\2\2\2\u0dd4\u0dd6\t!\2\2\u0dd5\u0dd4"+
		"\3\2\2\2\u0dd6\u0dd9\3\2\2\2\u0dd7\u0dd5\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8"+
		"\u0ddb\3\2\2\2\u0dd9\u0dd7\3\2\2\2\u0dda\u0dcd\3\2\2\2\u0dda\u0ddb\3\2"+
		"\2\2\u0ddb\u0de5\3\2\2\2\u0ddc\u0ddd\7\u00e3\2\2\u0ddd\u0dde\7\u0313\2"+
		"\2\u0dde\u0de2\7\u030f\2\2\u0ddf\u0de1\t!\2\2\u0de0\u0ddf\3\2\2\2\u0de1"+
		"\u0de4\3\2\2\2\u0de2\u0de0\3\2\2\2\u0de2\u0de3\3\2\2\2\u0de3\u0de6\3\2"+
		"\2\2\u0de4\u0de2\3\2\2\2\u0de5\u0ddc\3\2\2\2\u0de5\u0de6\3\2\2\2\u0de6"+
		"\u0dea\3\2\2\2\u0de7\u0de8\7Z\2\2\u0de8\u0de9\7\u0313\2\2\u0de9\u0deb"+
		"\5\u03a0\u01d1\2\u0dea\u0de7\3\2\2\2\u0dea\u0deb\3\2\2\2\u0deb\u0def\3"+
		"\2\2\2\u0dec\u0ded\7\u01d5\2\2\u0ded\u0dee\7\u0313\2\2\u0dee\u0df0\5\u03a0"+
		"\u01d1\2\u0def\u0dec\3\2\2\2\u0def\u0df0\3\2\2\2\u0df0\u0df4\3\2\2\2\u0df1"+
		"\u0df2\7\u0256\2\2\u0df2\u0df3\7\u0313\2\2\u0df3\u0df5\5\u03a0\u01d1\2"+
		"\u0df4\u0df1\3\2\2\2\u0df4\u0df5\3\2\2\2\u0df5\u0df9\3\2\2\2\u0df6\u0df7"+
		"\7/\2\2\u0df7\u0df8\7\u0313\2\2\u0df8\u0dfa\t\b\2\2\u0df9\u0df6\3\2\2"+
		"\2\u0df9\u0dfa\3\2\2\2\u0dfa\u0dfe\3\2\2\2\u0dfb\u0dfc\7\60\2\2\u0dfc"+
		"\u0dfd\7\u0313\2\2\u0dfd\u0dff\t\b\2\2\u0dfe\u0dfb\3\2\2\2\u0dfe\u0dff"+
		"\3\2\2\2\u0dff\u0e03\3\2\2\2\u0e00\u0e01\7\u01c6\2\2\u0e01\u0e02\7\u0313"+
		"\2\2\u0e02\u0e04\5\u03a0\u01d1\2\u0e03\u0e00\3\2\2\2\u0e03\u0e04\3\2\2"+
		"\2\u0e04\u0e07\3\2\2\2\u0e05\u0e06\7\u0261\2\2\u0e06\u0e08\7\u01c6\2\2"+
		"\u0e07\u0e05\3\2\2\2\u0e07\u0e08\3\2\2\2\u0e08\u0e0d\3\2\2\2\u0e09\u0e0a"+
		"\t\24\2\2\u0e0a\u0e0b\7\u01c6\2\2\u0e0b\u0e0d\5\u03a0\u01d1\2\u0e0c\u0dca"+
		"\3\2\2\2\u0e0c\u0dcc\3\2\2\2\u0e0c\u0e09\3\2\2\2\u0e0d\u0137\3\2\2\2\u0e0e"+
		"\u0e0f\7H\2\2\u0e0f\u0e10\7\u0236\2\2\u0e10\u0e6b\5\u03a0\u01d1\2\u0e11"+
		"\u0e1f\7\u017b\2\2\u0e12\u0e13\7\u00f3\2\2\u0e13\u0e17\7\u0313\2\2\u0e14"+
		"\u0e18\7\u030f\2\2\u0e15\u0e16\7\u0310\2\2\u0e16\u0e18\7\u0094\2\2\u0e17"+
		"\u0e14\3\2\2\2\u0e17\u0e15\3\2\2\2\u0e18\u0e1c\3\2\2\2\u0e19\u0e1b\t!"+
		"\2\2\u0e1a\u0e19\3\2\2\2\u0e1b\u0e1e\3\2\2\2\u0e1c\u0e1a\3\2\2\2\u0e1c"+
		"\u0e1d\3\2\2\2\u0e1d\u0e20\3\2\2\2\u0e1e\u0e1c\3\2\2\2\u0e1f\u0e12\3\2"+
		"\2\2\u0e1f\u0e20\3\2\2\2\u0e20\u0e27\3\2\2\2\u0e21\u0e23\7\u0326\2\2\u0e22"+
		"\u0e21\3\2\2\2\u0e22\u0e23\3\2\2\2\u0e23\u0e24\3\2\2\2\u0e24\u0e25\7\u013f"+
		"\2\2\u0e25\u0e26\7\u0313\2\2\u0e26\u0e28\7\u0310\2\2\u0e27\u0e22\3\2\2"+
		"\2\u0e27\u0e28\3\2\2\2\u0e28\u0e2f\3\2\2\2\u0e29\u0e2b\7\u0326\2\2\u0e2a"+
		"\u0e29\3\2\2\2\u0e2a\u0e2b\3\2\2\2\u0e2b\u0e2c\3\2\2\2\u0e2c\u0e2d\7Z"+
		"\2\2\u0e2d\u0e2e\7\u0313\2\2\u0e2e\u0e30\5\u03a0\u01d1\2\u0e2f\u0e2a\3"+
		"\2\2\2\u0e2f\u0e30\3\2\2\2\u0e30\u0e37\3\2\2\2\u0e31\u0e33\7\u0326\2\2"+
		"\u0e32\u0e31\3\2\2\2\u0e32\u0e33\3\2\2\2\u0e33\u0e34\3\2\2\2\u0e34\u0e35"+
		"\7\u01d5\2\2\u0e35\u0e36\7\u0313\2\2\u0e36\u0e38\5\u03a0\u01d1\2\u0e37"+
		"\u0e32\3\2\2\2\u0e37\u0e38\3\2\2\2\u0e38\u0e3f\3\2\2\2\u0e39\u0e3b\7\u0326"+
		"\2\2\u0e3a\u0e39\3\2\2\2\u0e3a\u0e3b\3\2\2\2\u0e3b\u0e3c\3\2\2\2\u0e3c"+
		"\u0e3d\7\60\2\2\u0e3d\u0e3e\7\u0313\2\2\u0e3e\u0e40\t\b\2\2\u0e3f\u0e3a"+
		"\3\2\2\2\u0e3f\u0e40\3\2\2\2\u0e40\u0e47\3\2\2\2\u0e41\u0e43\7\u0326\2"+
		"\2\u0e42\u0e41\3\2\2\2\u0e42\u0e43\3\2\2\2\u0e43\u0e44\3\2\2\2\u0e44\u0e45"+
		"\7/\2\2\u0e45\u0e46\7\u0313\2\2\u0e46\u0e48\t\b\2\2\u0e47\u0e42\3\2\2"+
		"\2\u0e47\u0e48\3\2\2\2\u0e48\u0e4f\3\2\2\2\u0e49\u0e4b\7\u0326\2\2\u0e4a"+
		"\u0e49\3\2\2\2\u0e4a\u0e4b\3\2\2\2\u0e4b\u0e4c\3\2\2\2\u0e4c\u0e4d\7\u01c6"+
		"\2\2\u0e4d\u0e4e\7\u0313\2\2\u0e4e\u0e50\5\u03a0\u01d1\2\u0e4f\u0e4a\3"+
		"\2\2\2\u0e4f\u0e50\3\2\2\2\u0e50\u0e6c\3\2\2\2\u0e51\u0e69\7\u008b\2\2"+
		"\u0e52\u0e53\7\u017a\2\2\u0e53\u0e5a\7\u017b\2\2\u0e54\u0e56\7\u0326\2"+
		"\2\u0e55\u0e54\3\2\2\2\u0e55\u0e56\3\2\2\2\u0e56\u0e57\3\2\2\2\u0e57\u0e58"+
		"\7Z\2\2\u0e58\u0e59\7\u0313\2\2\u0e59\u0e5b\5\u03a0\u01d1\2\u0e5a\u0e55"+
		"\3\2\2\2\u0e5a\u0e5b\3\2\2\2\u0e5b\u0e62\3\2\2\2\u0e5c\u0e5e\7\u0326\2"+
		"\2\u0e5d\u0e5c\3\2\2\2\u0e5d\u0e5e\3\2\2\2\u0e5e\u0e5f\3\2\2\2\u0e5f\u0e60"+
		"\7\u01d5\2\2\u0e60\u0e61\7\u0313\2\2\u0e61\u0e63\7\u030f\2\2\u0e62\u0e5d"+
		"\3\2\2\2\u0e62\u0e63\3\2\2\2\u0e63\u0e6a\3\2\2\2\u0e64\u0e65\7*\2\2\u0e65"+
		"\u0e6a\5\u03a0\u01d1\2\u0e66\u0e67\7\21\2\2\u0e67\u0e68\7\u00ab\2\2\u0e68"+
		"\u0e6a\5\u03a0\u01d1\2\u0e69\u0e52\3\2\2\2\u0e69\u0e64\3\2\2\2\u0e69\u0e66"+
		"\3\2\2\2\u0e6a\u0e6c\3\2\2\2\u0e6b\u0e11\3\2\2\2\u0e6b\u0e51\3\2\2\2\u0e6c"+
		"\u0139\3\2\2\2\u0e6d\u0e6e\7\t\2\2\u0e6e\u0e6f\7\u0236\2\2\u0e6f\u0e81"+
		"\5\u03a0\u01d1\2\u0e70\u0e72\t\25\2\2\u0e71\u0e70\3\2\2\2\u0e71\u0e72"+
		"\3\2\2\2\u0e72\u0e82\3\2\2\2\u0e73\u0e7f\7\u017b\2\2\u0e74\u0e75\7\u00f3"+
		"\2\2\u0e75\u0e76\7\u0313\2\2\u0e76\u0e7a\7\u030f\2\2\u0e77\u0e78\7\u00e3"+
		"\2\2\u0e78\u0e79\7\u0313\2\2\u0e79\u0e7b\7\u030f\2\2\u0e7a\u0e77\3\2\2"+
		"\2\u0e7a\u0e7b\3\2\2\2\u0e7b\u0e80\3\2\2\2\u0e7c\u0e7d\7\u0256\2\2\u0e7d"+
		"\u0e7e\7\u0313\2\2\u0e7e\u0e80\5\u03a0\u01d1\2\u0e7f\u0e74\3\2\2\2\u0e7f"+
		"\u0e7c\3\2\2\2\u0e80\u0e82\3\2\2\2\u0e81\u0e71\3\2\2\2\u0e81\u0e73\3\2"+
		"\2\2\u0e82\u013b\3\2\2\2\u0e83\u0e84\7H\2\2\u0e84\u0e85\7\u0236\2\2\u0e85"+
		"\u0e86\5\u03a0\u01d1\2\u0e86\u0e87\7\u017b\2\2\u0e87\u0e88\7\u00f3\2\2"+
		"\u0e88\u0e89\7\u0313\2\2\u0e89\u0e8d\7\u030f\2\2\u0e8a\u0e8b\7\u013f\2"+
		"\2\u0e8b\u0e8c\7\u0313\2\2\u0e8c\u0e8e\7\u0310\2\2\u0e8d\u0e8a\3\2\2\2"+
		"\u0e8d\u0e8e\3\2\2\2\u0e8e\u013d\3\2\2\2\u0e8f\u0e90\7\t\2\2\u0e90\u0e91"+
		"\7\u0236\2\2\u0e91\u0ea9\5\u03a0\u01d1\2\u0e92\u0e94\t\25\2\2\u0e93\u0e92"+
		"\3\2\2\2\u0e93\u0e94\3\2\2\2\u0e94\u0eaa\3\2\2\2\u0e95\u0ea7\7\u017b\2"+
		"\2\u0e96\u0e97\7\u00f3\2\2\u0e97\u0e98\7\u0313\2\2\u0e98\u0ea2\7\u030f"+
		"\2\2\u0e99\u0e9a\7\u00e3\2\2\u0e9a\u0e9b\7\u0313\2\2\u0e9b\u0e9f\7\u030f"+
		"\2\2\u0e9c\u0e9e\t!\2\2\u0e9d\u0e9c\3\2\2\2\u0e9e\u0ea1\3\2\2\2\u0e9f"+
		"\u0e9d\3\2\2\2\u0e9f\u0ea0\3\2\2\2\u0ea0\u0ea3\3\2\2\2\u0ea1\u0e9f\3\2"+
		"\2\2\u0ea2\u0e99\3\2\2\2\u0ea2\u0ea3\3\2\2\2\u0ea3\u0ea8\3\2\2\2\u0ea4"+
		"\u0ea5\7\u0256\2\2\u0ea5\u0ea6\7\u0313\2\2\u0ea6\u0ea8\5\u03a0\u01d1\2"+
		"\u0ea7\u0e96\3\2\2\2\u0ea7\u0ea4\3\2\2\2\u0ea8\u0eaa\3\2\2\2\u0ea9\u0e93"+
		"\3\2\2\2\u0ea9\u0e95\3\2\2\2\u0eaa\u013f\3\2\2\2\u0eab\u0eac\7H\2\2\u0eac"+
		"\u0ead\7\u0236\2\2\u0ead\u0ebe\5\u03a0\u01d1\2\u0eae\u0eaf\7\u017b\2\2"+
		"\u0eaf\u0eb0\7\u00f3\2\2\u0eb0\u0eb1\7\u0313\2\2\u0eb1\u0eb3\7\u030f\2"+
		"\2\u0eb2\u0eb4\7\u00cd\2\2\u0eb3\u0eb2\3\2\2\2\u0eb3\u0eb4\3\2\2\2\u0eb4"+
		"\u0eba\3\2\2\2\u0eb5\u0eb6\7/\2\2\u0eb6\u0eb8\7\u0313\2\2\u0eb7\u0eb9"+
		"\t\b\2\2\u0eb8\u0eb7\3\2\2\2\u0eb8\u0eb9\3\2\2\2\u0eb9\u0ebb\3\2\2\2\u0eba"+
		"\u0eb5\3\2\2\2\u0eba\u0ebb\3\2\2\2\u0ebb\u0ebf\3\2\2\2\u0ebc\u0ebd\7\u008b"+
		"\2\2\u0ebd\u0ebf\7\u017a\2\2\u0ebe\u0eae\3\2\2\2\u0ebe\u0ebc\3\2\2\2\u0ebf"+
		"\u0141\3\2\2\2\u0ec0\u0ec1\7\t\2\2\u0ec1\u0ec2\7\u00bc\2\2\u0ec2\u0ed8"+
		"\7\u00ab\2\2\u0ec3\u0ec5\7\u0202\2\2\u0ec4\u0ec3\3\2\2\2\u0ec4\u0ec5\3"+
		"\2\2\2\u0ec5\u0ec6\3\2\2\2\u0ec6\u0ec7\7\u010e\2\2\u0ec7\u0ec8\7\u017b"+
		"\2\2\u0ec8\u0ec9\7\u01ec\2\2\u0ec9\u0eca\7%\2\2\u0eca\u0ecb\7\u00f3\2"+
		"\2\u0ecb\u0ecc\7\u0313\2\2\u0ecc\u0ed9\7\u030f\2\2\u0ecd\u0ece\t\24\2"+
		"\2\u0ece\u0ecf\7\u01ec\2\2\u0ecf\u0ed6\7%\2\2\u0ed0\u0ed1\7\u0137\2\2"+
		"\u0ed1\u0ed2\7\u00bc\2\2\u0ed2\u0ed7\7\u00ab\2\2\u0ed3\u0ed4\7\u00f3\2"+
		"\2\u0ed4\u0ed5\7\u0313\2\2\u0ed5\u0ed7\7\u030f\2\2\u0ed6\u0ed0\3\2\2\2"+
		"\u0ed6\u0ed3\3\2\2\2\u0ed7\u0ed9\3\2\2\2\u0ed8\u0ec4\3\2\2\2\u0ed8\u0ecd"+
		"\3\2\2\2\u0ed9\u0143\3\2\2\2\u0eda\u0edb\7H\2\2\u0edb\u0edc\7\u00bc\2"+
		"\2\u0edc\u0edd\7\u00ab\2\2\u0edd\u0ede\7\u01ec\2\2\u0ede\u0edf\7%\2\2"+
		"\u0edf\u0ee0\7\u00f3\2\2\u0ee0\u0ee1\7\u0313\2\2\u0ee1\u0ee2\7\u030f\2"+
		"\2\u0ee2\u0145\3\2\2\2\u0ee3\u0ee4\7\t\2\2\u0ee4\u0ee5\7\u00bc\2\2\u0ee5"+
		"\u0f01\7\u00ab\2\2\u0ee6\u0ee8\7\u0202\2\2\u0ee7\u0ee6\3\2\2\2\u0ee7\u0ee8"+
		"\3\2\2\2\u0ee8\u0ee9\3\2\2\2\u0ee9\u0eea\7\u010e\2\2\u0eea\u0eeb\7\u017b"+
		"\2\2\u0eeb\u0eec\7\u01ec\2\2\u0eec\u0eed\7%\2\2\u0eed\u0eee\7\u00f3\2"+
		"\2\u0eee\u0eef\7\u0313\2\2\u0eef\u0f02\7\u030f\2\2\u0ef0\u0ef1\7\3\2\2"+
		"\u0ef1\u0ef2\7\u01ec\2\2\u0ef2\u0ef9\7%\2\2\u0ef3\u0ef4\7\u0137\2\2\u0ef4"+
		"\u0ef5\7\u00bc\2\2\u0ef5\u0efa\7\u00ab\2\2\u0ef6\u0ef7\7\u00f3\2\2\u0ef7"+
		"\u0ef8\7\u0313\2\2\u0ef8\u0efa\7\u030f\2\2\u0ef9\u0ef3\3\2\2\2\u0ef9\u0ef6"+
		"\3\2\2\2\u0efa\u0f02\3\2\2\2\u0efb\u0efc\7g\2\2\u0efc\u0efd\7\u01ec\2"+
		"\2\u0efd\u0efe\7%\2\2\u0efe\u0eff\7\u00f3\2\2\u0eff\u0f00\7\u0313\2\2"+
		"\u0f00\u0f02\7\u030f\2\2\u0f01\u0ee7\3\2\2\2\u0f01\u0ef0\3\2\2\2\u0f01"+
		"\u0efb\3\2\2\2\u0f02\u0147\3\2\2\2\u0f03\u0f04\7H\2\2\u0f04\u0f05\7\u00bc"+
		"\2\2\u0f05\u0f0b\7\u00ab\2\2\u0f06\u0f07\7\u01ec\2\2\u0f07\u0f08\7%\2"+
		"\2\u0f08\u0f09\7\u00f3\2\2\u0f09\u0f0a\7\u0313\2\2\u0f0a\u0f0c\7\u030f"+
		"\2\2\u0f0b\u0f06\3\2\2\2\u0f0b\u0f0c\3\2\2\2\u0f0c\u0149\3\2\2\2\u0f0d"+
		"\u0f0e\7\t\2\2\u0f0e\u0f0f\7\u024b\2\2\u0f0f\u0f10\7\u02f0\2\2\u0f10\u0f11"+
		"\5\u03a0\u01d1\2\u0f11\u0f12\7\u02f7\2\2\u0f12\u0f1b\7\u0313\2\2\u0f13"+
		"\u0f1c\7\u00d4\2\2\u0f14\u0f1c\7\u01e8\2\2\u0f15\u0f1c\7\u02fe\2\2\u0f16"+
		"\u0f17\7\u02f8\2\2\u0f17\u0f18\7\u017b\2\2\u0f18\u0f19\7\u012d\2\2\u0f19"+
		"\u0f1a\7\u01b7\2\2\u0f1a\u0f1c\5\u03a0\u01d1\2\u0f1b\u0f13\3\2\2\2\u0f1b"+
		"\u0f14\3\2\2\2\u0f1b\u0f15\3\2\2\2\u0f1b\u0f16\3\2\2\2\u0f1c\u014b\3\2"+
		"\2\2\u0f1d\u0f1e\7\t\2\2\u0f1e\u0f1f\7\u0277\2\2\u0f1f\u0f20\7\u008d\2"+
		"\2\u0f20\u0f21\5\u03a0\u01d1\2\u0f21\u0f22\7\u0324\2\2\u0f22\u0f23\7\u0325"+
		"\2\2\u0f23\u0f24\t\"\2\2\u0f24\u0f25\7\u028e\2\2\u0f25\u0f26\7\u0324\2"+
		"\2\u0f26\u0f27\7\u030b\2\2\u0f27\u0f28\7\u0325\2\2\u0f28\u014d\3\2\2\2"+
		"\u0f29\u0f2a\7\t\2\2\u0f2a\u0f2b\7\u0277\2\2\u0f2b\u0f2c\7\u012e\2\2\u0f2c"+
		"\u0f2d\5\u03a0\u01d1\2\u0f2d\u0f2e\7\u025b\2\2\u0f2e\u0f30\7\u016f\2\2"+
		"\u0f2f\u0f31\5\u03a0\u01d1\2\u0f30\u0f2f\3\2\2\2\u0f30\u0f31\3\2\2\2\u0f31"+
		"\u014f\3\2\2\2\u0f32\u0f33\7\t\2\2\u0f33\u0f34\7\u02a2\2\2\u0f34\u0f35"+
		"\7\u0137\2\2\u0f35\u0f36\7\u01a8\2\2\u0f36\u0f37\5\u03a0\u01d1\2\u0f37"+
		"\u0f3b\7\u017b\2\2\u0f38\u0f39\7\u0170\2\2\u0f39\u0f3a\7\u0313\2\2\u0f3a"+
		"\u0f3c\5\u03a0\u01d1\2\u0f3b\u0f38\3\2\2\2\u0f3b\u0f3c\3\2\2\2\u0f3c\u0f41"+
		"\3\2\2\2\u0f3d\u0f3e\7\u0326\2\2\u0f3e\u0f3f\7\13\2\2\u0f3f\u0f40\7\u0313"+
		"\2\2\u0f40\u0f42\t\b\2\2\u0f41\u0f3d\3\2\2\2\u0f41\u0f42\3\2\2\2\u0f42"+
		"\u0151\3\2\2\2\u0f43\u0f44\7H\2\2\u0f44\u0f45\7\u02a2\2\2\u0f45\u0f46"+
		"\7\u0137\2\2\u0f46\u0f47\7\u01a8\2\2\u0f47\u0f4a\5\u03a0\u01d1\2\u0f48"+
		"\u0f49\7\23\2\2\u0f49\u0f4b\5\u03a0\u01d1\2\u0f4a\u0f48\3\2\2\2\u0f4a"+
		"\u0f4b\3\2\2\2\u0f4b\u0f4c\3\2\2\2\u0f4c\u0f4d\7\u015c\2\2\u0f4d\u0f4e"+
		"\7\u0137\2\2\u0f4e\u0f4f\7\u030f\2\2\u0f4f\u0f53\7\u017b\2\2\u0f50\u0f51"+
		"\7\u0170\2\2\u0f51\u0f52\7\u0313\2\2\u0f52\u0f54\5\u03a0\u01d1\2\u0f53"+
		"\u0f50\3\2\2\2\u0f53\u0f54\3\2\2\2\u0f54\u0f59\3\2\2\2\u0f55\u0f56\7\u0326"+
		"\2\2\u0f56\u0f57\7\13\2\2\u0f57\u0f58\7\u0313\2\2\u0f58\u0f5a\t\b\2\2"+
		"\u0f59\u0f55\3\2\2\2\u0f59\u0f5a\3\2\2\2\u0f5a\u0153\3\2\2\2\u0f5b\u0f5c"+
		"\7H\2\2\u0f5c\u0f5d\7\u02a9\2\2\u0f5d\u0f5e\7\u027b\2\2\u0f5e\u0fc5\5"+
		"\u03a0\u01d1\2\u0f5f\u0f60\7\u017b\2\2\u0f60\u0f67\7\u0324\2\2\u0f61\u0f63"+
		"\7\u0326\2\2\u0f62\u0f61\3\2\2\2\u0f62\u0f63\3\2\2\2\u0f63\u0f64\3\2\2"+
		"\2\u0f64\u0f65\7\u023d\2\2\u0f65\u0f66\7\u0313\2\2\u0f66\u0f68\7\u030b"+
		"\2\2\u0f67\u0f62\3\2\2\2\u0f67\u0f68\3\2\2\2\u0f68\u0f6f\3\2\2\2\u0f69"+
		"\u0f6b\7\u0326\2\2\u0f6a\u0f69\3\2\2\2\u0f6a\u0f6b\3\2\2\2\u0f6b\u0f6c"+
		"\3\2\2\2\u0f6c\u0f6d\7\u023c\2\2\u0f6d\u0f6e\7\u0313\2\2\u0f6e\u0f70\7"+
		"\u030b\2\2\u0f6f\u0f6a\3\2\2\2\u0f6f\u0f70\3\2\2\2\u0f70\u0f77\3\2\2\2"+
		"\u0f71\u0f73\7\u0326\2\2\u0f72\u0f71\3\2\2\2\u0f72\u0f73\3\2\2\2\u0f73"+
		"\u0f74\3\2\2\2\u0f74\u0f75\7\u01af\2\2\u0f75\u0f76\7\u0313\2\2\u0f76\u0f78"+
		"\7\u030b\2\2\u0f77\u0f72\3\2\2\2\u0f77\u0f78\3\2\2\2\u0f78\u0fa2\3\2\2"+
		"\2\u0f79\u0f7b\7\u0326\2\2\u0f7a\u0f79\3\2\2\2\u0f7a\u0f7b\3\2\2\2\u0f7b"+
		"\u0f7c\3\2\2\2\u0f7c\u0f7d\7\u0189\2\2\u0f7d\u0f7e\7\u012c\2\2\u0f7e\u0fa0"+
		"\7\u0313\2\2\u0f7f\u0fa1\7\u019a\2\2\u0f80\u0f8a\7\u0324\2\2\u0f81\u0f83"+
		"\7\u0326\2\2\u0f82\u0f81\3\2\2\2\u0f82\u0f83\3\2\2\2\u0f83\u0f88\3\2\2"+
		"\2\u0f84\u0f89\7\u030b\2\2\u0f85\u0f86\7\u030b\2\2\u0f86\u0f87\7\u015c"+
		"\2\2\u0f87\u0f89\7\u030b\2\2\u0f88\u0f84\3\2\2\2\u0f88\u0f85\3\2\2\2\u0f89"+
		"\u0f8b\3\2\2\2\u0f8a\u0f82\3\2\2\2\u0f8b\u0f8c\3\2\2\2\u0f8c\u0f8a\3\2"+
		"\2\2\u0f8c\u0f8d\3\2\2\2\u0f8d\u0f8e\3\2\2\2\u0f8e\u0fa1\7\u0325\2\2\u0f8f"+
		"\u0f90\7\u0266\2\2\u0f90\u0f91\7\u0313\2\2\u0f91\u0f9b\7\u0324\2\2\u0f92"+
		"\u0f94\7\u0326\2\2\u0f93\u0f92\3\2\2\2\u0f93\u0f94\3\2\2\2\u0f94\u0f99"+
		"\3\2\2\2\u0f95\u0f9a\7\u030b\2\2\u0f96\u0f97\7\u030b\2\2\u0f97\u0f98\7"+
		"\u015c\2\2\u0f98\u0f9a\7\u030b\2\2\u0f99\u0f95\3\2\2\2\u0f99\u0f96\3\2"+
		"\2\2\u0f9a\u0f9c\3\2\2\2\u0f9b\u0f93\3\2\2\2\u0f9c\u0f9d\3\2\2\2\u0f9d"+
		"\u0f9b\3\2\2\2\u0f9d\u0f9e\3\2\2\2\u0f9e\u0f9f\3\2\2\2\u0f9f\u0fa1\7\u0325"+
		"\2\2\u0fa0\u0f7f\3\2\2\2\u0fa0\u0f80\3\2\2\2\u0fa0\u0f8f\3\2\2\2\u0fa1"+
		"\u0fa3\3\2\2\2\u0fa2\u0f7a\3\2\2\2\u0fa2\u0fa3\3\2\2\2\u0fa3\u0faa\3\2"+
		"\2\2\u0fa4\u0fa6\7\u0326\2\2\u0fa5\u0fa4\3\2\2\2\u0fa5\u0fa6\3\2\2\2\u0fa6"+
		"\u0fa7\3\2\2\2\u0fa7\u0fa8\7\u0242\2\2\u0fa8\u0fa9\7\u0313\2\2\u0fa9\u0fab"+
		"\7\u030b\2\2\u0faa\u0fa5\3\2\2\2\u0faa\u0fab\3\2\2\2\u0fab\u0fb2\3\2\2"+
		"\2\u0fac\u0fae\7\u0326\2\2\u0fad\u0fac\3\2\2\2\u0fad\u0fae\3\2\2\2\u0fae"+
		"\u0faf\3\2\2\2\u0faf\u0fb0\7\u0241\2\2\u0fb0\u0fb1\7\u0313\2\2\u0fb1\u0fb3"+
		"\7\u030b\2\2\u0fb2\u0fad\3\2\2\2\u0fb2\u0fb3\3\2\2\2\u0fb3\u0fba\3\2\2"+
		"\2\u0fb4\u0fb6\7\u0326\2\2\u0fb5\u0fb4\3\2\2\2\u0fb5\u0fb6\3\2\2\2\u0fb6"+
		"\u0fb7\3\2\2\2\u0fb7\u0fb8\7\u0240\2\2\u0fb8\u0fb9\7\u0313\2\2\u0fb9\u0fbb"+
		"\7\u030b\2\2\u0fba\u0fb5\3\2\2\2\u0fba\u0fbb\3\2\2\2\u0fbb\u0fc2\3\2\2"+
		"\2\u0fbc\u0fbe\7\u0326\2\2\u0fbd\u0fbc\3\2\2\2\u0fbd\u0fbe\3\2\2\2\u0fbe"+
		"\u0fbf\3\2\2\2\u0fbf\u0fc0\7\u023f\2\2\u0fc0\u0fc1\7\u0313\2\2\u0fc1\u0fc3"+
		"\7\u030b\2\2\u0fc2\u0fbd\3\2\2\2\u0fc2\u0fc3\3\2\2\2\u0fc3\u0fc4\3\2\2"+
		"\2\u0fc4\u0fc6\7\u0325\2\2\u0fc5\u0f5f\3\2\2\2\u0fc5\u0fc6\3\2\2\2\u0fc6"+
		"\u0155\3\2\2\2\u0fc7\u0fc8\7\t\2\2\u0fc8\u0fc9\7\u02a9\2\2\u0fc9\u0fdf"+
		"\7\u0090\2\2\u0fca\u0fe0\t#\2\2\u0fcb\u0fcc\7\u017b\2\2\u0fcc\u0fcd\7"+
		"\u0324\2\2\u0fcd\u0fce\7\61\2\2\u0fce\u0fd4\7\u0313\2\2\u0fcf\u0fd0\5"+
		"\u03a0\u01d1\2\u0fd0\u0fd1\7\u031f\2\2\u0fd1\u0fd2\5\u03a0\u01d1\2\u0fd2"+
		"\u0fd5\3\2\2\2\u0fd3\u0fd5\7\u00de\2\2\u0fd4\u0fcf\3\2\2\2\u0fd4\u0fd3"+
		"\3\2\2\2\u0fd5\u0fd6\3\2\2\2\u0fd6\u0fe0\7\u0325\2\2\u0fd7\u0fd8\7\u0113"+
		"\2\2\u0fd8\u0fe0\7\u0149\2\2\u0fd9\u0fda\7\u017b\2\2\u0fda\u0fdb\7\u0324"+
		"\2\2\u0fdb\u0fdc\7\u00c3\2\2\u0fdc\u0fdd\7\u0313\2\2\u0fdd\u0fde\7\u030b"+
		"\2\2\u0fde\u0fe0\7\u0325\2\2\u0fdf\u0fca\3\2\2\2\u0fdf\u0fcb\3\2\2\2\u0fdf"+
		"\u0fd7\3\2\2\2\u0fdf\u0fd9\3\2\2\2\u0fe0\u0157\3\2\2\2\u0fe1\u0fe2\7\t"+
		"\2\2\u0fe2\u0fe3\7\u0120\2\2\u0fe3\u0feb\5\u03a0\u01d1\2\u0fe4\u0fe5\t"+
		"\24\2\2\u0fe5\u0fe6\7\u00c6\2\2\u0fe6\u0fec\5\u03a0\u01d1\2\u0fe7\u0fe8"+
		"\7\u017b\2\2\u0fe8\u0fe9\7\u0256\2\2\u0fe9\u0fea\7\u0313\2\2\u0fea\u0fec"+
		"\5\u03a0\u01d1\2\u0feb\u0fe4\3\2\2\2\u0feb\u0fe7\3\2\2\2\u0fec\u0159\3"+
		"\2\2\2\u0fed\u0fee\7H\2\2\u0fee\u0fef\7\u0120\2\2\u0fef\u0ff2\5\u03a0"+
		"\u01d1\2\u0ff0\u0ff1\7\23\2\2\u0ff1\u0ff3\5\u03a0\u01d1\2\u0ff2\u0ff0"+
		"\3\2\2\2\u0ff2\u0ff3\3\2\2\2\u0ff3\u015b\3\2\2\2\u0ff4\u0ff5\7H\2\2\u0ff5"+
		"\u0ff6\7\u02af\2\2\u0ff6\u0ff9\5\u03a0\u01d1\2\u0ff7\u0ff8\7\23\2\2\u0ff8"+
		"\u0ffa\5\u03a0\u01d1\2\u0ff9\u0ff7\3\2\2\2\u0ff9\u0ffa\3\2\2\2\u0ffa\u0ffb"+
		"\3\2\2\2\u0ffb\u1002\7\u017b\2\2\u0ffc\u0ffe\7\u0326\2\2\u0ffd\u0ffc\3"+
		"\2\2\2\u0ffd\u0ffe\3\2\2\2\u0ffe\u0fff\3\2\2\2\u0fff\u1000\7\u0139\2\2"+
		"\u1000\u1001\7\u0313\2\2\u1001\u1003\7\u030f\2\2\u1002\u0ffd\3\2\2\2\u1002"+
		"\u1003\3\2\2\2\u1003\u100a\3\2\2\2\u1004\u1006\7\u0326\2\2\u1005\u1004"+
		"\3\2\2\2\u1005\u1006\3\2\2\2\u1006\u1007\3\2\2\2\u1007\u1008\7\u01ab\2"+
		"\2\u1008\u1009\7\u0313\2\2\u1009\u100b\7\u030f\2\2\u100a\u1005\3\2\2\2"+
		"\u100a\u100b\3\2\2\2\u100b\u1012\3\2\2\2\u100c\u100e\7\u0326\2\2\u100d"+
		"\u100c\3\2\2\2\u100d\u100e\3\2\2\2\u100e\u100f\3\2\2\2\u100f\u1010\7\u00b2"+
		"\2\2\u1010\u1011\7\u0313\2\2\u1011\u1013\7\u030b\2\2\u1012\u100d\3\2\2"+
		"\2\u1012\u1013\3\2\2\2\u1013\u1015\3\2\2\2\u1014\u1016\7\u0326\2\2\u1015"+
		"\u1014\3\2\2\2\u1015\u1016\3\2\2\2\u1016\u1017\3\2\2\2\u1017\u1018\7\u0185"+
		"\2\2\u1018\u1019\7\u0313\2\2\u1019\u101e\t$\2\2\u101a\u101b\7\u0326\2"+
		"\2\u101b\u101c\7\u0250\2\2\u101c\u101d\7\u0313\2\2\u101d\u101f\t$\2\2"+
		"\u101e\u101a\3\2\2\2\u101e\u101f\3\2\2\2\u101f\u015d\3\2\2\2\u1020\u1021"+
		"\7H\2\2\u1021\u1025\7\u0129\2\2\u1022\u1023\5\u03a0\u01d1\2\u1023\u1024"+
		"\7\u031f\2\2\u1024\u1026\3\2\2\2\u1025\u1022\3\2\2\2\u1025\u1026\3\2\2"+
		"\2\u1026\u1027\3\2\2\2\u1027\u1028\5\u03a0\u01d1\2\u1028\u1029\7\17\2"+
		"\2\u1029\u102a\5\u02cc\u0167\2\u102a\u015f\3\2\2\2\u102b\u102c\7\t\2\2"+
		"\u102c\u102d\7\u012d\2\2\u102d\u102e\5\u03a0\u01d1\2\u102e\u1038\7\u0161"+
		"\2\2\u102f\u1035\7\u0269\2\2\u1030\u1035\7\u02f0\2\2\u1031\u1032\7\u0301"+
		"\2\2\u1032\u1033\7\u012d\2\2\u1033\u1035\7\u01b7\2\2\u1034\u102f\3\2\2"+
		"\2\u1034\u1030\3\2\2\2\u1034\u1031\3\2\2\2\u1035\u1036\3\2\2\2\u1036\u1037"+
		"\7\u0328\2\2\u1037\u1039\7\u0328\2\2\u1038\u1034\3\2\2\2\u1038\u1039\3"+
		"\2\2\2\u1039\u103a\3\2\2\2\u103a\u103d\5\u03a0\u01d1\2\u103b\u103c\7\u031f"+
		"\2\2\u103c\u103e\5\u03a0\u01d1\2\u103d\u103b\3\2\2\2\u103d\u103e\3\2\2"+
		"\2\u103e\u0161\3\2\2\2\u103f\u1040\7H\2\2\u1040\u1048\7\u012d\2\2\u1041"+
		"\u1049\5\u03a0\u01d1\2\u1042\u1043\7\23\2\2\u1043\u1049\5\u03a0\u01d1"+
		"\2\u1044\u1045\5\u03a0\u01d1\2\u1045\u1046\7\23\2\2\u1046\u1047\5\u03a0"+
		"\u01d1\2\u1047\u1049\3\2\2\2\u1048\u1041\3\2\2\2\u1048\u1042\3\2\2\2\u1048"+
		"\u1044\3\2\2\2\u1049\u1066\3\2\2\2\u104a\u1065\5\u01e8\u00f5\2\u104b\u1065"+
		"\5\u01ec\u00f7\2\u104c\u104d\t%\2\2\u104d\u104e\t&\2\2\u104e\u1052\7\u00e4"+
		"\2\2\u104f\u1050\7\u012d\2\2\u1050\u1051\7\u0328\2\2\u1051\u1053\7\u0328"+
		"\2\2\u1052\u104f\3\2\2\2\u1052\u1053\3\2\2\2\u1053\u1054\3\2\2\2\u1054"+
		"\u1055\5\u03a0\u01d1\2\u1055\u1056\7\u015c\2\2\u1056\u1057\5\u03a0\u01d1"+
		"\2\u1057\u1065\3\2\2\2\u1058\u1059\7\u011c\2\2\u1059\u105a\t&\2\2\u105a"+
		"\u105e\7\u00e4\2\2\u105b\u105c\7\u012d\2\2\u105c\u105d\7\u0328\2\2\u105d"+
		"\u105f\7\u0328\2\2\u105e\u105b\3\2\2\2\u105e\u105f\3\2\2\2\u105f\u1060"+
		"\3\2\2\2\u1060\u1061\5\u03a0\u01d1\2\u1061\u1062\7\u008b\2\2\u1062\u1063"+
		"\5\u03a0\u01d1\2\u1063\u1065\3\2\2\2\u1064\u104a\3\2\2\2\u1064\u104b\3"+
		"\2\2\2\u1064\u104c\3\2\2\2\u1064\u1058\3\2\2\2\u1065\u1068\3\2\2\2\u1066"+
		"\u1064\3\2\2\2\u1066\u1067\3\2\2\2\u1067\u0163\3\2\2\2\u1068\u1066\3\2"+
		"\2\2\u1069\u106a\7H\2\2\u106a\u106b\7\u012d\2\2\u106b\u106e\5\u03a0\u01d1"+
		"\2\u106c\u106d\7\23\2\2\u106d\u106f\5\u03a0\u01d1\2\u106e\u106c\3\2\2"+
		"\2\u106e\u106f\3\2\2\2\u106f\u0165\3\2\2\2\u1070\u1071\7\t\2\2\u1071\u1072"+
		"\7\u012d\2\2\u1072\u1073\5\u03a0\u01d1\2\u1073\u1077\7\u0161\2\2\u1074"+
		"\u1075\7\u0269\2\2\u1075\u1076\7\u0328\2\2\u1076\u1078\7\u0328\2\2\u1077"+
		"\u1074\3\2\2\2\u1077\u1078\3\2\2\2\u1078\u1079\3\2\2\2\u1079\u107c\5\u03a0"+
		"\u01d1\2\u107a\u107b\7\u031f\2\2\u107b\u107d\7\u030c\2\2\u107c\u107a\3"+
		"\2\2\2\u107c\u107d\3\2\2\2\u107d\u0167\3\2\2\2\u107e\u107f\7H\2\2\u107f"+
		"\u1080\7\u02b9\2\2\u1080\u1081\7\u0287\2\2\u1081\u1082\7\u022f\2\2\u1082"+
		"\u108a\5\u03a0\u01d1\2\u1083\u1087\7\u008b\2\2\u1084\u1085\5\u03a0\u01d1"+
		"\2\u1085\u1086\7\u031f\2\2\u1086\u1088\3\2\2\2\u1087\u1084\3\2\2\2\u1087"+
		"\u1088\3\2\2\2\u1088\u1089\3\2\2\2\u1089\u108b\5\u03a0\u01d1\2\u108a\u1083"+
		"\3\2\2\2\u108a\u108b\3\2\2\2\u108b\u108e\3\2\2\2\u108c\u108d\7\23\2\2"+
		"\u108d\u108f\5\u03a0\u01d1\2\u108e\u108c\3\2\2\2\u108e\u108f\3\2\2\2\u108f"+
		"\u0169\3\2\2\2\u1090\u1091\7H\2\2\u1091\u1092\7\u012f\2\2\u1092\u1096"+
		"\7\u00fc\2\2\u1093\u1094\5\u03a0\u01d1\2\u1094\u1095\7\u031f\2\2\u1095"+
		"\u1097\3\2\2\2\u1096\u1093\3\2\2\2\u1096\u1097\3\2\2\2\u1097\u1098\3\2"+
		"\2\2\u1098\u10c1\5\u03a0\u01d1\2\u1099\u109b\7\u0326\2\2\u109a\u1099\3"+
		"\2\2\2\u109a\u109b\3\2\2\2\u109b\u109c\3\2\2\2\u109c\u109e\7\3\2\2\u109d"+
		"\u109f\t\'\2\2\u109e\u109d\3\2\2\2\u109e\u109f\3\2\2\2\u109f\u10a0\3\2"+
		"\2\2\u10a0\u10a1\7\u00fe\2\2\u10a1\u10a2\5\u03a0\u01d1\2\u10a2\u10a3\7"+
		"\u031f\2\2\u10a3\u10a4\5\u03a0\u01d1\2\u10a4\u10a9\7\u0324\2\2\u10a5\u10a7"+
		"\7\u0326\2\2\u10a6\u10a5\3\2\2\2\u10a6\u10a7\3\2\2\2\u10a7\u10a8\3\2\2"+
		"\2\u10a8\u10aa\5\u03a0\u01d1\2\u10a9\u10a6\3\2\2\2\u10aa\u10ab\3\2\2\2"+
		"\u10ab\u10a9\3\2\2\2\u10ab\u10ac\3\2\2\2\u10ac\u10ad\3\2\2\2\u10ad\u10ae"+
		"\7\u0325\2\2\u10ae\u10af\7\u00e4\2\2\u10af\u10b0\5\u03a0\u01d1\2\u10b0"+
		"\u10b1\7\u031f\2\2\u10b1\u10be\5\u03a0\u01d1\2\u10b2\u10b4\7\u0326\2\2"+
		"\u10b3\u10b2\3\2\2\2\u10b3\u10b4\3\2\2\2\u10b4\u10b5\3\2\2\2\u10b5\u10b6"+
		"\7\u018a\2\2\u10b6\u10bd\t(\2\2\u10b7\u10b9\7\u0326\2\2\u10b8\u10b7\3"+
		"\2\2\2\u10b8\u10b9\3\2\2\2\u10b9\u10ba\3\2\2\2\u10ba\u10bb\7\32\2\2\u10bb"+
		"\u10bd\t)\2\2\u10bc\u10b3\3\2\2\2\u10bc\u10b8\3\2\2\2\u10bd\u10c0\3\2"+
		"\2\2\u10be\u10bc\3\2\2\2\u10be\u10bf\3\2\2\2\u10bf\u10c2\3\2\2\2\u10c0"+
		"\u10be\3\2\2\2\u10c1\u109a\3\2\2\2\u10c2\u10c3\3\2\2\2\u10c3\u10c1\3\2"+
		"\2\2\u10c3\u10c4\3\2\2\2\u10c4\u10cf\3\2\2\2\u10c5\u10c6\7\u017b\2\2\u10c6"+
		"\u10c7\7\u0324\2\2\u10c7\u10c8\7\u014a\2\2\u10c8\u10c9\7\u0313\2\2\u10c9"+
		"\u10cc\t\b\2\2\u10ca\u10cb\7\u02b5\2\2\u10cb\u10cd\t\b\2\2\u10cc\u10ca"+
		"\3\2\2\2\u10cc\u10cd\3\2\2\2\u10cd\u10ce\3\2\2\2\u10ce\u10d0\7\u0325\2"+
		"\2\u10cf\u10c5\3\2\2\2\u10cf\u10d0\3\2\2\2\u10d0\u10d4\3\2\2\2\u10d1\u10d2"+
		"\7\u00db\2\2\u10d2\u10d3\7\u0085\2\2\u10d3\u10d5\7\u0111\2\2\u10d4\u10d1"+
		"\3\2\2\2\u10d4\u10d5\3\2\2\2\u10d5\u016b\3\2\2\2\u10d6\u10d7\7\t\2\2\u10d7"+
		"\u10db\7\u0135\2\2\u10d8\u10d9\5\u03a0\u01d1\2\u10d9\u10da\7\u031f\2\2"+
		"\u10da\u10dc\3\2\2\2\u10db\u10d8\3\2\2\2\u10db\u10dc\3\2\2\2\u10dc\u10dd"+
		"\3\2\2\2\u10dd\u10e3\5\u03a0\u01d1\2\u10de\u10e1\7\u0114\2\2\u10df\u10e0"+
		"\7\u017b\2\2\u10e0\u10e2\7\u030b\2\2\u10e1\u10df\3\2\2\2\u10e1\u10e2\3"+
		"\2\2\2\u10e2\u10e4\3\2\2\2\u10e3\u10de\3\2\2\2\u10e3\u10e4\3\2\2\2\u10e4"+
		"\u10e8\3\2\2\2\u10e5\u10e6\7\u009c\2\2\u10e6\u10e7\7%\2\2\u10e7\u10e9"+
		"\7\u030b\2\2\u10e8\u10e5\3\2\2\2\u10e8\u10e9\3\2\2\2\u10e9\u10ee\3\2\2"+
		"\2\u10ea\u10eb\7\u00cb\2\2\u10eb\u10ef\7\u030b\2\2\u10ec\u10ed\7\u0261"+
		"\2\2\u10ed\u10ef\7\u00cb\2\2\u10ee\u10ea\3\2\2\2\u10ee\u10ec\3\2\2\2\u10ee"+
		"\u10ef\3\2\2\2\u10ef\u10f4\3\2\2\2\u10f0\u10f1\7\u00bf\2\2\u10f1\u10f5"+
		"\7\u030b\2\2\u10f2\u10f3\7\u0261\2\2\u10f3\u10f5\7\u00bf\2\2\u10f4\u10f0"+
		"\3\2\2\2\u10f4\u10f2\3\2\2\2\u10f4\u10f5\3\2\2\2\u10f5\u10f9\3\2\2\2\u10f6"+
		"\u10fa\7P\2\2\u10f7\u10f8\7\u0261\2\2\u10f8\u10fa\7P\2\2\u10f9\u10f6\3"+
		"\2\2\2\u10f9\u10f7\3\2\2\2\u10f9\u10fa\3\2\2\2\u10fa\u10ff\3\2\2\2\u10fb"+
		"\u10fc\7&\2\2\u10fc\u1100\7\u030b\2\2\u10fd\u10fe\7\u0261\2\2\u10fe\u1100"+
		"\7&\2\2\u10ff\u10fb\3\2\2\2\u10ff\u10fd\3\2\2\2\u10ff\u1100\3\2\2\2\u1100"+
		"\u016d\3\2\2\2\u1101\u1102\7H\2\2\u1102\u1106\7\u0135\2\2\u1103\u1104"+
		"\5\u03a0\u01d1\2\u1104\u1105\7\u031f\2\2\u1105\u1107\3\2\2\2\u1106\u1103"+
		"\3\2\2\2\u1106\u1107\3\2\2\2\u1107\u1108\3\2\2\2\u1108\u110b\5\u03a0\u01d1"+
		"\2\u1109\u110a\7\17\2\2\u110a\u110c\5\u0398\u01cd\2\u110b\u1109\3\2\2"+
		"\2\u110b\u110c\3\2\2\2\u110c\u1110\3\2\2\2\u110d\u110e\7\u014c\2\2\u110e"+
		"\u110f\7\u017b\2\2\u110f\u1111\7\u030b\2\2\u1110\u110d\3\2\2\2\u1110\u1111"+
		"\3\2\2\2\u1111\u1118\3\2\2\2\u1112\u1113\7\u009c\2\2\u1113\u1115\7%\2"+
		"\2\u1114\u1116\7\u032d\2\2\u1115\u1114\3\2\2\2\u1115\u1116\3\2\2\2\u1116"+
		"\u1117\3\2\2\2\u1117\u1119\7\u030b\2\2\u1118\u1112\3\2\2\2\u1118\u1119"+
		"\3\2\2\2\u1119\u1120\3\2\2\2\u111a\u111c\7\u00cb\2\2\u111b\u111d\7\u030b"+
		"\2\2\u111c\u111b\3\2\2\2\u111c\u111d\3\2\2\2\u111d\u1121\3\2\2\2\u111e"+
		"\u111f\7\u0261\2\2\u111f\u1121\7\u00cb\2\2\u1120\u111a\3\2\2\2\u1120\u111e"+
		"\3\2\2\2\u1120\u1121\3\2\2\2\u1121\u1128\3\2\2\2\u1122\u1124\7\u00bf\2"+
		"\2\u1123\u1125\7\u030b\2\2\u1124\u1123\3\2\2\2\u1124\u1125\3\2\2\2\u1125"+
		"\u1129\3\2\2\2\u1126\u1127\7\u0261\2\2\u1127\u1129\7\u00bf\2\2\u1128\u1122"+
		"\3\2\2\2\u1128\u1126\3\2\2\2\u1128\u1129\3\2\2\2\u1129\u112d\3\2\2\2\u112a"+
		"\u112e\7P\2\2\u112b\u112c\7\u0261\2\2\u112c\u112e\7P\2\2\u112d\u112a\3"+
		"\2\2\2\u112d\u112b\3\2\2\2\u112d\u112e\3\2\2\2\u112e\u1135\3\2\2\2\u112f"+
		"\u1131\7&\2\2\u1130\u1132\7\u030b\2\2\u1131\u1130\3\2\2\2\u1131\u1132"+
		"\3\2\2\2\u1132\u1136\3\2\2\2\u1133\u1134\7\u0261\2\2\u1134\u1136\7&\2"+
		"\2\u1135\u112f\3\2\2\2\u1135\u1133\3\2\2\2\u1135\u1136\3\2\2\2\u1136\u016f"+
		"\3\2\2\2\u1137\u1138\7\t\2\2\u1138\u1139\7\u0136\2\2\u1139\u113a\7\u0198"+
		"\2\2\u113a\u11be\5\u03a0\u01d1\2\u113b\u1168\7\u015c\2\2\u113c\u113d\7"+
		"\u0081\2\2\u113d\u1162\7\u0324\2\2\u113e\u1140\7\u0326\2\2\u113f\u113e"+
		"\3\2\2\2\u113f\u1140\3\2\2\2\u1140\u1141\3\2\2\2\u1141\u1142\7\u01fc\2"+
		"\2\u1142\u1143\7\u0313\2\2\u1143\u1161\7\u030f\2\2\u1144\u1146\7\u0326"+
		"\2\2\u1145\u1144\3\2\2\2\u1145\u1146\3\2\2\2\u1146\u1147\3\2\2\2\u1147"+
		"\u1148\7\u0249\2\2\u1148\u114c\7\u0313\2\2\u1149\u114a\7\u030b\2\2\u114a"+
		"\u114d\t*\2\2\u114b\u114d\7\u02f5\2\2\u114c\u1149\3\2\2\2\u114c\u114b"+
		"\3\2\2\2\u114d\u1161\3\2\2\2\u114e\u1150\7\u0326\2\2\u114f\u114e\3\2\2"+
		"\2\u114f\u1150\3\2\2\2\u1150\u1151\3\2\2\2\u1151\u1152\7\u0245\2\2\u1152"+
		"\u1153\7\u0313\2\2\u1153\u1161\t+\2\2\u1154\u1156\7\u0326\2\2\u1155\u1154"+
		"\3\2\2\2\u1155\u1156\3\2\2\2\u1156\u1157\3\2\2\2\u1157\u1158\7\u023e\2"+
		"\2\u1158\u1159\7\u0313\2\2\u1159\u1161\7\u030b\2\2\u115a\u115c\7\u0326"+
		"\2\2\u115b\u115a\3\2\2\2\u115b\u115c\3\2\2\2\u115c\u115d\3\2\2\2\u115d"+
		"\u115e\7\u02a8\2\2\u115e\u115f\7\u0313\2\2\u115f\u1161\t\b\2\2\u1160\u113f"+
		"\3\2\2\2\u1160\u1145\3\2\2\2\u1160\u114f\3\2\2\2\u1160\u1155\3\2\2\2\u1160"+
		"\u115b\3\2\2\2\u1161\u1164\3\2\2\2\u1162\u1160\3\2\2\2\u1162\u1163\3\2"+
		"\2\2\u1163\u1165\3\2\2\2\u1164\u1162\3\2\2\2\u1165\u1169\7\u0325\2\2\u1166"+
		"\u1169\7\u0194\2\2\u1167\u1169\7\u02bf\2\2\u1168\u113c\3\2\2\2\u1168\u1166"+
		"\3\2\2\2\u1168\u1167\3\2\2\2\u1169\u116b\3\2\2\2\u116a\u113b\3\2\2\2\u116a"+
		"\u116b\3\2\2\2\u116b\u1186\3\2\2\2\u116c\u116d\7\u017b\2\2\u116d\u1182"+
		"\7\u0324\2\2\u116e\u1170\7\u0326\2\2\u116f\u116e\3\2\2\2\u116f\u1170\3"+
		"\2\2\2\u1170\u1171\3\2\2\2\u1171\u1172\7\u028b\2\2\u1172\u1173\7\u0313"+
		"\2\2\u1173\u1181\7\u030b\2\2\u1174\u1176\7\u0326\2\2\u1175\u1174\3\2\2"+
		"\2\u1175\u1176\3\2\2\2\u1176\u1177\3\2\2\2\u1177\u1178\7\u00e5\2\2\u1178"+
		"\u1179\7\u0313\2\2\u1179\u1181\t,\2\2\u117a\u117c\7\u0326\2\2\u117b\u117a"+
		"\3\2\2\2\u117b\u117c\3\2\2\2\u117c\u117d\3\2\2\2\u117d\u117e\7\u014a\2"+
		"\2\u117e\u117f\7\u0313\2\2\u117f\u1181\t\b\2\2\u1180\u116f\3\2\2\2\u1180"+
		"\u1175\3\2\2\2\u1180\u117b\3\2\2\2\u1181\u1184\3\2\2\2\u1182\u1180\3\2"+
		"\2\2\u1182\u1183\3\2\2\2\u1183\u1185\3\2\2\2\u1184\u1182\3\2\2\2\u1185"+
		"\u1187\7\u0325\2\2\u1186\u116c\3\2\2\2\u1186\u1187\3\2\2\2\u1187\u11b6"+
		"\3\2\2\2\u1188\u11b4\7\u0178\2\2\u1189\u118b\7\u0326\2\2\u118a\u1189\3"+
		"\2\2\2\u118a\u118b\3\2\2\2\u118b\u118d\3\2\2\2\u118c\u118e\7\u00db\2\2"+
		"\u118d\u118c\3\2\2\2\u118d\u118e\3\2\2\2\u118e\u118f\3\2\2\2\u118f\u119b"+
		"\5\u03a0\u01d1\2\u1190\u119c\7\u0313\2\2\u1191\u1192\7\u0315\2\2\u1192"+
		"\u119c\7\u0314\2\2\u1193\u1194\7\u0316\2\2\u1194\u119c\7\u0313\2\2\u1195"+
		"\u119c\7\u0314\2\2\u1196\u1197\7\u0314\2\2\u1197\u119c\7\u0313\2\2\u1198"+
		"\u119c\7\u0315\2\2\u1199\u119a\7\u0315\2\2\u119a\u119c\7\u0313\2\2\u119b"+
		"\u1190\3\2\2\2\u119b\u1191\3\2\2\2\u119b\u1193\3\2\2\2\u119b\u1195\3\2"+
		"\2\2\u119b\u1196\3\2\2\2\u119b\u1198\3\2\2\2\u119b\u1199\3\2\2\2\u119c"+
		"\u119d\3\2\2\2\u119d\u119e\t\26\2\2\u119e\u11b5\3\2\2\2\u119f\u11a1\7"+
		"\u0326\2\2\u11a0\u119f\3\2\2\2\u11a0\u11a1\3\2\2\2\u11a1\u11a2\3\2\2\2"+
		"\u11a2\u11a4\t\33\2\2\u11a3\u11a5\7\u00db\2\2\u11a4\u11a3\3\2\2\2\u11a4"+
		"\u11a5\3\2\2\2\u11a5\u11b1\3\2\2\2\u11a6\u11b2\7\u0313\2\2\u11a7\u11a8"+
		"\7\u0315\2\2\u11a8\u11b2\7\u0314\2\2\u11a9\u11aa\7\u0316\2\2\u11aa\u11b2"+
		"\7\u0313\2\2\u11ab\u11b2\7\u0314\2\2\u11ac\u11ad\7\u0314\2\2\u11ad\u11b2"+
		"\7\u0313\2\2\u11ae\u11b2\7\u0315\2\2\u11af\u11b0\7\u0315\2\2\u11b0\u11b2"+
		"\7\u0313\2\2\u11b1\u11a6\3\2\2\2\u11b1\u11a7\3\2\2\2\u11b1\u11a9\3\2\2"+
		"\2\u11b1\u11ab\3\2\2\2\u11b1\u11ac\3\2\2\2\u11b1\u11ae\3\2\2\2\u11b1\u11af"+
		"\3\2\2\2\u11b2\u11b3\3\2\2\2\u11b3\u11b5\t\26\2\2\u11b4\u118a\3\2\2\2"+
		"\u11b4\u11a0\3\2\2\2\u11b5\u11b7\3\2\2\2\u11b6\u1188\3\2\2\2\u11b6\u11b7"+
		"\3\2\2\2\u11b7\u11bf\3\2\2\2\u11b8\u11b9\7\u029e\2\2\u11b9\u11bf\7\u0178"+
		"\2\2\u11ba\u11bb\7\u0253\2\2\u11bb\u11bc\7\u0256\2\2\u11bc\u11bd\7\u0313"+
		"\2\2\u11bd\u11bf\5\u03a0\u01d1\2\u11be\u116a\3\2\2\2\u11be\u11b8\3\2\2"+
		"\2\u11be\u11ba\3\2\2\2\u11bf\u0171\3\2\2\2\u11c0\u11c1\7H\2\2\u11c1\u11c2"+
		"\7\u0136\2\2\u11c2\u11c3\7\u0198\2\2\u11c3\u124d\5\u03a0\u01d1\2\u11c4"+
		"\u11f1\7\u015c\2\2\u11c5\u11c6\7\u0081\2\2\u11c6\u11eb\7\u0324\2\2\u11c7"+
		"\u11c9\7\u0326\2\2\u11c8\u11c7\3\2\2\2\u11c8\u11c9\3\2\2\2\u11c9\u11ca"+
		"\3\2\2\2\u11ca\u11cb\7\u01fc\2\2\u11cb\u11cc\7\u0313\2\2\u11cc\u11ea\7"+
		"\u030f\2\2\u11cd\u11cf\7\u0326\2\2\u11ce\u11cd\3\2\2\2\u11ce\u11cf\3\2"+
		"\2\2\u11cf\u11d0\3\2\2\2\u11d0\u11d1\7\u0249\2\2\u11d1\u11d5\7\u0313\2"+
		"\2\u11d2\u11d3\7\u030b\2\2\u11d3\u11d6\t*\2\2\u11d4\u11d6\7\u02f5\2\2"+
		"\u11d5\u11d2\3\2\2\2\u11d5\u11d4\3\2\2\2\u11d6\u11ea\3\2\2\2\u11d7\u11d9"+
		"\7\u0326\2\2\u11d8\u11d7\3\2\2\2\u11d8\u11d9\3\2\2\2\u11d9\u11da\3\2\2"+
		"\2\u11da\u11db\7\u0245\2\2\u11db\u11dc\7\u0313\2\2\u11dc\u11ea\t+\2\2"+
		"\u11dd\u11df\7\u0326\2\2\u11de\u11dd\3\2\2\2\u11de\u11df\3\2\2\2\u11df"+
		"\u11e0\3\2\2\2\u11e0\u11e1\7\u023e\2\2\u11e1\u11e2\7\u0313\2\2\u11e2\u11ea"+
		"\7\u030b\2\2\u11e3\u11e5\7\u0326\2\2\u11e4\u11e3\3\2\2\2\u11e4\u11e5\3"+
		"\2\2\2\u11e5\u11e6\3\2\2\2\u11e6\u11e7\7\u02a8\2\2\u11e7\u11e8\7\u0313"+
		"\2\2\u11e8\u11ea\t\b\2\2\u11e9\u11c8\3\2\2\2\u11e9\u11ce\3\2\2\2\u11e9"+
		"\u11d8\3\2\2\2\u11e9\u11de\3\2\2\2\u11e9\u11e4\3\2\2\2\u11ea\u11ed\3\2"+
		"\2\2\u11eb\u11e9\3\2\2\2\u11eb\u11ec\3\2\2\2\u11ec\u11ee\3\2\2\2\u11ed"+
		"\u11eb\3\2\2\2\u11ee\u11f2\7\u0325\2\2\u11ef\u11f2\7\u0194\2\2\u11f0\u11f2"+
		"\7\u02bf\2\2\u11f1\u11c5\3\2\2\2\u11f1\u11ef\3\2\2\2\u11f1\u11f0\3\2\2"+
		"\2\u11f2\u11f4\3\2\2\2\u11f3\u11c4\3\2\2\2\u11f3\u11f4\3\2\2\2\u11f4\u1215"+
		"\3\2\2\2\u11f5\u11f6\7\u017b\2\2\u11f6\u1211\7\u0324\2\2\u11f7\u11f9\7"+
		"\u0326\2\2\u11f8\u11f7\3\2\2\2\u11f8\u11f9\3\2\2\2\u11f9\u11fa\3\2\2\2"+
		"\u11fa\u11fb\7\u028b\2\2\u11fb\u11fc\7\u0313\2\2\u11fc\u1210\7\u030b\2"+
		"\2\u11fd\u11ff\7\u0326\2\2\u11fe\u11fd\3\2\2\2\u11fe\u11ff\3\2\2\2\u11ff"+
		"\u1200\3\2\2\2\u1200\u1201\7\u00e5\2\2\u1201\u1202\7\u0313\2\2\u1202\u1210"+
		"\t,\2\2\u1203\u1205\7\u0326\2\2\u1204\u1203\3\2\2\2\u1204\u1205\3\2\2"+
		"\2\u1205\u1206\3\2\2\2\u1206\u1207\7\u014a\2\2\u1207\u1208\7\u0313\2\2"+
		"\u1208\u1210\t\b\2\2\u1209\u120b\7\u0326\2\2\u120a\u1209\3\2\2\2\u120a"+
		"\u120b\3\2\2\2\u120b\u120c\3\2\2\2\u120c\u120d\7\u0199\2\2\u120d\u120e"+
		"\7\u0313\2\2\u120e\u1210\5\u03a0\u01d1\2\u120f\u11f8\3\2\2\2\u120f\u11fe"+
		"\3\2\2\2\u120f\u1204\3\2\2\2\u120f\u120a\3\2\2\2\u1210\u1213\3\2\2\2\u1211"+
		"\u120f\3\2\2\2\u1211\u1212\3\2\2\2\u1212\u1214\3\2\2\2\u1213\u1211\3\2"+
		"\2\2\u1214\u1216\7\u0325\2\2\u1215\u11f5\3\2\2\2\u1215\u1216\3\2\2\2\u1216"+
		"\u1245\3\2\2\2\u1217\u1243\7\u0178\2\2\u1218\u121a\7\u0326\2\2\u1219\u1218"+
		"\3\2\2\2\u1219\u121a\3\2\2\2\u121a\u121c\3\2\2\2\u121b\u121d\7\u00db\2"+
		"\2\u121c\u121b\3\2\2\2\u121c\u121d\3\2\2\2\u121d\u121e\3\2\2\2\u121e\u122a"+
		"\5\u03a0\u01d1\2\u121f\u122b\7\u0313\2\2\u1220\u1221\7\u0315\2\2\u1221"+
		"\u122b\7\u0314\2\2\u1222\u1223\7\u0316\2\2\u1223\u122b\7\u0313\2\2\u1224"+
		"\u122b\7\u0314\2\2\u1225\u1226\7\u0314\2\2\u1226\u122b\7\u0313\2\2\u1227"+
		"\u122b\7\u0315\2\2\u1228\u1229\7\u0315\2\2\u1229\u122b\7\u0313\2\2\u122a"+
		"\u121f\3\2\2\2\u122a\u1220\3\2\2\2\u122a\u1222\3\2\2\2\u122a\u1224\3\2"+
		"\2\2\u122a\u1225\3\2\2\2\u122a\u1227\3\2\2\2\u122a\u1228\3\2\2\2\u122b"+
		"\u122c\3\2\2\2\u122c\u122d\t\26\2\2\u122d\u1244\3\2\2\2\u122e\u1230\7"+
		"\u0326\2\2\u122f\u122e\3\2\2\2\u122f\u1230\3\2\2\2\u1230\u1231\3\2\2\2"+
		"\u1231\u1233\t\33\2\2\u1232\u1234\7\u00db\2\2\u1233\u1232\3\2\2\2\u1233"+
		"\u1234\3\2\2\2\u1234\u1240\3\2\2\2\u1235\u1241\7\u0313\2\2\u1236\u1237"+
		"\7\u0315\2\2\u1237\u1241\7\u0314\2\2\u1238\u1239\7\u0316\2\2\u1239\u1241"+
		"\7\u0313\2\2\u123a\u1241\7\u0314\2\2\u123b\u123c\7\u0314\2\2\u123c\u1241"+
		"\7\u0313\2\2\u123d\u1241\7\u0315\2\2\u123e\u123f\7\u0315\2\2\u123f\u1241"+
		"\7\u0313\2\2\u1240\u1235\3\2\2\2\u1240\u1236\3\2\2\2\u1240\u1238\3\2\2"+
		"\2\u1240\u123a\3\2\2\2\u1240\u123b\3\2\2\2\u1240\u123d\3\2\2\2\u1240\u123e"+
		"\3\2\2\2\u1241\u1242\3\2\2\2\u1242\u1244\t\26\2\2\u1243\u1219\3\2\2\2"+
		"\u1243\u122f\3\2\2\2\u1244\u1246\3\2\2\2\u1245\u1217\3\2\2\2\u1245\u1246"+
		"\3\2\2\2\u1246\u124e\3\2\2\2\u1247\u1248\7\u029e\2\2\u1248\u124e\7\u0178"+
		"\2\2\u1249\u124a\7\u0253\2\2\u124a\u124b\7\u0256\2\2\u124b\u124c\7\u0313"+
		"\2\2\u124c\u124e\5\u03a0\u01d1\2\u124d\u11f3\3\2\2\2\u124d\u1247\3\2\2"+
		"\2\u124d\u1249\3\2\2\2\u124e\u0173\3\2\2\2\u124f\u1250\7\t\2\2\u1250\u1251"+
		"\7\u0136\2\2\u1251\u1252\7\u0198\2\2\u1252\u1253\7\u0144\2\2\u1253\u1258"+
		"\5\u03a0\u01d1\2\u1254\u1255\7\u0085\2\2\u1255\u1256\7\u0136\2\2\u1256"+
		"\u1257\7\u0198\2\2\u1257\u1259\5\u03a0\u01d1\2\u1258\u1254\3\2\2\2\u1258"+
		"\u1259\3\2\2\2\u1259\u1261\3\2\2\2\u125a\u125b\t\24\2\2\u125b\u125c\7"+
		"\u0324\2\2\u125c\u125d\5\u03a0\u01d1\2\u125d\u125e\7\u0325\2\2\u125e\u1260"+
		"\3\2\2\2\u125f\u125a\3\2\2\2\u1260\u1263\3\2\2\2\u1261\u125f\3\2\2\2\u1261"+
		"\u1262\3\2\2\2\u1262\u126a\3\2\2\2\u1263\u1261\3\2\2\2\u1264\u1265\7\u017b"+
		"\2\2\u1265\u1266\7\u0324\2\2\u1266\u1267\7\u014a\2\2\u1267\u1268\7\u0313"+
		"\2\2\u1268\u1269\t\b\2\2\u1269\u126b\7\u0325\2\2\u126a\u1264\3\2\2\2\u126a"+
		"\u126b\3\2\2\2\u126b\u0175\3\2\2\2\u126c\u126d\7H\2\2\u126d\u126e\7\u0136"+
		"\2\2\u126e\u126f\7\u0198\2\2\u126f\u1270\7\u0144\2\2\u1270\u1275\5\u03a0"+
		"\u01d1\2\u1271\u1272\7\u0085\2\2\u1272\u1273\7\u0136\2\2\u1273\u1274\7"+
		"\u0198\2\2\u1274\u1276\5\u03a0\u01d1\2\u1275\u1271\3\2\2\2\u1275\u1276"+
		"\3\2\2\2\u1276\u127e\3\2\2\2\u1277\u1278\7\3\2\2\u1278\u1279\7\u0324\2"+
		"\2\u1279\u127a\5\u03a0\u01d1\2\u127a\u127b\7\u0325\2\2\u127b\u127d\3\2"+
		"\2\2\u127c\u1277\3\2\2\2\u127d\u1280\3\2\2\2\u127e\u127c\3\2\2\2\u127e"+
		"\u127f\3\2\2\2\u127f\u1287\3\2\2\2\u1280\u127e\3\2\2\2\u1281\u1282\7\u017b"+
		"\2\2\u1282\u1283\7\u0324\2\2\u1283\u1284\7\u014a\2\2\u1284\u1285\7\u0313"+
		"\2\2\u1285\u1286\t\b\2\2\u1286\u1288\7\u0325\2\2\u1287\u1281\3\2\2\2\u1287"+
		"\u1288\3\2\2\2\u1288\u0177\3\2\2\2\u1289\u128a\7\t\2\2\u128a\u128b\7\u0136"+
		"\2\2\u128b\u128c\7;\2\2\u128c\u12f6\7\u013c\2\2\u128d\u128e\7\u0103\2"+
		"\2\u128e\u12b2\7\u0189\2\2\u128f\u1290\7\u01c3\2\2\u1290\u12a0\7\u0313"+
		"\2\2\u1291\u12a1\7\u019a\2\2\u1292\u1294\7\u0326\2\2\u1293\u1292\3\2\2"+
		"\2\u1293\u1294\3\2\2\2\u1294\u1295\3\2\2\2\u1295\u129d\7\u030b\2\2\u1296"+
		"\u1298\7\u0326\2\2\u1297\u1296\3\2\2\2\u1297\u1298\3\2\2\2\u1298\u1299"+
		"\3\2\2\2\u1299\u129a\7\u030b\2\2\u129a\u129b\7\u015c\2\2\u129b\u129d\7"+
		"\u030b\2\2\u129c\u1293\3\2\2\2\u129c\u1297\3\2\2\2\u129d\u129e\3\2\2\2"+
		"\u129e\u129c\3\2\2\2\u129e\u129f\3\2\2\2\u129f\u12a1\3\2\2\2\u12a0\u1291"+
		"\3\2\2\2\u12a0\u129c\3\2\2\2\u12a1\u12b3\3\2\2\2\u12a2\u12a3\7\u0266\2"+
		"\2\u12a3\u12ae\7\u0313\2\2\u12a4\u12a6\7\u0326\2\2\u12a5\u12a4\3\2\2\2"+
		"\u12a5\u12a6\3\2\2\2\u12a6\u12a7\3\2\2\2\u12a7\u12af\7\u030b\2\2\u12a8"+
		"\u12aa\7\u0326\2\2\u12a9\u12a8\3\2\2\2\u12a9\u12aa\3\2\2\2\u12aa\u12ab"+
		"\3\2\2\2\u12ab\u12ac\7\u030b\2\2\u12ac\u12ad\7\u015c\2\2\u12ad\u12af\7"+
		"\u030b\2\2\u12ae\u12a5\3\2\2\2\u12ae\u12a9\3\2\2\2\u12af\u12b0\3\2\2\2"+
		"\u12b0\u12ae\3\2\2\2\u12b0\u12b1\3\2\2\2\u12b1\u12b3\3\2\2\2\u12b2\u128f"+
		"\3\2\2\2\u12b2\u12a2\3\2\2\2\u12b3\u12f7\3\2\2\2\u12b4\u12b5\7_\2\2\u12b5"+
		"\u12c5\7\u00ba\2\2\u12b6\u12c6\7\u00e4\2\2\u12b7\u12c6\7\u00e1\2\2\u12b8"+
		"\u12b9\7\u027a\2\2\u12b9\u12ba\7\u0313\2\2\u12ba\u12c6\t-\2\2\u12bb\u12bc"+
		"\7\u00c2\2\2\u12bc\u12c0\7\u0313\2\2\u12bd\u12be\7\u030b\2\2\u12be\u12c1"+
		"\7\u024c\2\2\u12bf\u12c1\7Y\2\2\u12c0\u12bd\3\2\2\2\u12c0\u12bf\3\2\2"+
		"\2\u12c1\u12c6\3\2\2\2\u12c2\u12c3\7\u023e\2\2\u12c3\u12c4\7\u0313\2\2"+
		"\u12c4\u12c6\t.\2\2\u12c5\u12b6\3\2\2\2\u12c5\u12b7\3\2\2\2\u12c5\u12b8"+
		"\3\2\2\2\u12c5\u12bb\3\2\2\2\u12c5\u12c2\3\2\2\2\u12c6\u12f7\3\2\2\2\u12c7"+
		"\u12c8\7}\2\2\u12c8\u12c9\7\63\2\2\u12c9\u12db\7\u0287\2\2\u12ca\u12cb"+
		"\7\u0173\2\2\u12cb\u12cc\7\u0313\2\2\u12cc\u12dc\t-\2\2\u12cd\u12ce\7"+
		"\u0146\2\2\u12ce\u12cf\7\u0313\2\2\u12cf\u12dc\t-\2\2\u12d0\u12d1\7\u0147"+
		"\2\2\u12d1\u12d2\7\u0313\2\2\u12d2\u12dc\t-\2\2\u12d3\u12d4\7\u0148\2"+
		"\2\u12d4\u12dc\t-\2\2\u12d5\u12d6\7~\2\2\u12d6\u12d7\7\u0313\2\2\u12d7"+
		"\u12dc\t-\2\2\u12d8\u12d9\7\u0095\2\2\u12d9\u12da\7\u0313\2\2\u12da\u12dc"+
		"\t.\2\2\u12db\u12ca\3\2\2\2\u12db\u12cd\3\2\2\2\u12db\u12d0\3\2\2\2\u12db"+
		"\u12d3\3\2\2\2\u12db\u12d5\3\2\2\2\u12db\u12d8\3\2\2\2\u12dc\u12f7\3\2"+
		"\2\2\u12dd\u12de\7\u0211\2\2\u12de\u12df\7\63\2\2\u12df\u12e0\7@\2\2\u12e0"+
		"\u12e1\7\u0313\2\2\u12e1\u12f7\t/\2\2\u12e2\u12e3\7\"\2\2\u12e3\u12e4"+
		"\7\u027b\2\2\u12e4\u12f1\7z\2\2\u12e5\u12e6\7\u00e4\2\2\u12e6\u12e7\7"+
		"\u0324\2\2\u12e7\u12e8\7\u0082\2\2\u12e8\u12e9\7\u0313\2\2\u12e9\u12ea"+
		"\7\u030f\2\2\u12ea\u12eb\7\u0326\2\2\u12eb\u12ec\7\u02cb\2\2\u12ec\u12ed"+
		"\7\u0313\2\2\u12ed\u12ee\7\u030b\2\2\u12ee\u12ef\t\60\2\2\u12ef\u12f2"+
		"\7\u0325\2\2\u12f0\u12f2\7\u00e1\2\2\u12f1\u12e5\3\2\2\2\u12f1\u12f0\3"+
		"\2\2\2\u12f2\u12f7\3\2\2\2\u12f3\u12f4\7\u013c\2\2\u12f4\u12f5\7\u0141"+
		"\2\2\u12f5\u12f7\t\b\2\2\u12f6\u128d\3\2\2\2\u12f6\u12b4\3\2\2\2\u12f6"+
		"\u12c7\3\2\2\2\u12f6\u12dd\3\2\2\2\u12f6\u12e2\3\2\2\2\u12f6\u12f3\3\2"+
		"\2\2\u12f7\u0179\3\2\2\2\u12f8\u12f9\7\t\2\2\u12f9\u12fa\7\u0136\2\2\u12fa"+
		"\u12fb\7\u0120\2\2\u12fb\u1303\5\u03a0\u01d1\2\u12fc\u12fd\t\24\2\2\u12fd"+
		"\u12fe\7\u00c6\2\2\u12fe\u1304\5\u03a0\u01d1\2\u12ff\u1300\7\u017b\2\2"+
		"\u1300\u1301\7\u0256\2\2\u1301\u1302\7\u0313\2\2\u1302\u1304\5\u03a0\u01d1"+
		"\2\u1303\u12fc\3\2\2\2\u1303\u12ff\3\2\2\2\u1304\u017b\3\2\2\2\u1305\u1306"+
		"\7H\2\2\u1306\u1307\7\u0136\2\2\u1307\u1308\7\u0120\2\2\u1308\u130b\5"+
		"\u03a0\u01d1\2\u1309\u130a\7\23\2\2\u130a\u130c\5\u03a0\u01d1\2\u130b"+
		"\u1309\3\2\2\2\u130b\u130c\3\2\2\2\u130c\u017d\3\2\2\2\u130d\u130e\7\t"+
		"\2\2\u130e\u130f\7\u0136\2\2\u130f\u1310\7\u0120\2\2\u1310\u1311\5\u03a0"+
		"\u01d1\2\u1311\u1312\t\24\2\2\u1312\u1313\7\u00c6\2\2\u1313\u1314\5\u03a0"+
		"\u01d1\2\u1314\u017f\3\2\2\2\u1315\u1316\7\t\2\2\u1316\u1317\7\u0137\2"+
		"\2\u1317\u131f\5\u03a0\u01d1\2\u1318\u1319\7\u00e4\2\2\u1319\u131a\7\u028a"+
		"\2\2\u131a\u131b\5\u03a0\u01d1\2\u131b\u131c\7\u031f\2\2\u131c\u131d\3"+
		"\2\2\2\u131d\u131e\5\u03a0\u01d1\2\u131e\u1320\3\2\2\2\u131f\u1318\3\2"+
		"\2\2\u131f\u1320\3\2\2\2\u1320\u1328\3\2\2\2\u1321\u1323\7\u0326\2\2\u1322"+
		"\u1321\3\2\2\2\u1322\u1323\3\2\2\2\u1323\u1324\3\2\2\2\u1324\u1325\t\24"+
		"\2\2\u1325\u1327\5\u03a0\u01d1\2\u1326\u1322\3\2\2\2\u1327\u132a\3\2\2"+
		"\2\u1328\u1326\3\2\2\2\u1328\u1329\3\2\2\2\u1329\u0181\3\2\2\2\u132a\u1328"+
		"\3\2\2\2\u132b\u132c\7H\2\2\u132c\u132d\7\u0137\2\2\u132d\u1330\5\u03a0"+
		"\u01d1\2\u132e\u132f\7\23\2\2\u132f\u1331\5\u03a0\u01d1\2\u1330\u132e"+
		"\3\2\2\2\u1330\u1331\3\2\2\2\u1331\u1332\3\2\2\2\u1332\u1333\7\u00e4\2"+
		"\2\u1333\u1337\7\u028a\2\2\u1334\u1335\5\u03a0\u01d1\2\u1335\u1336\7\u031f"+
		"\2\2\u1336\u1338\3\2\2\2\u1337\u1334\3\2\2\2\u1337\u1338\3\2\2\2\u1338"+
		"\u1339\3\2\2\2\u1339\u1347\5\u03a0\u01d1\2\u133a\u1342\7\u0324\2\2\u133b"+
		"\u133d\7\u0326\2\2\u133c\u133b\3\2\2\2\u133c\u133d\3\2\2\2\u133d\u1340"+
		"\3\2\2\2\u133e\u1341\5\u03a0\u01d1\2\u133f\u1341\7Y\2\2\u1340\u133e\3"+
		"\2\2\2\u1340\u133f\3\2\2\2\u1341\u1343\3\2\2\2\u1342\u133c\3\2\2\2\u1343"+
		"\u1344\3\2\2\2\u1344\u1342\3\2\2\2\u1344\u1345\3\2\2\2\u1345\u1346\3\2"+
		"\2\2\u1346\u1348\7\u0325\2\2\u1347\u133a\3\2\2\2\u1347\u1348\3\2\2\2\u1348"+
		"\u0183\3\2\2\2\u1349\u134a\7\t\2\2\u134a\u134b\7\u0137\2\2\u134b\u134c"+
		"\7\u00bc\2\2\u134c\u1362\7\u00ab\2\2\u134d\u134f\7\u0202\2\2\u134e\u134d"+
		"\3\2\2\2\u134e\u134f\3\2\2\2\u134f\u1350\3\2\2\2\u1350\u1363\7\u010e\2"+
		"\2\u1351\u1360\7\u017b\2\2\u1352\u1353\7\u026c\2\2\u1353\u1354\7\u0313"+
		"\2\2\u1354\u1355\7\u030f\2\2\u1355\u1356\7\u0326\2\2\u1356\u1357\7\u00e3"+
		"\2\2\u1357\u1358\7\u0313\2\2\u1358\u1361\7\u030f\2\2\u1359\u135a\7\u0258"+
		"\2\2\u135a\u135b\7\u0313\2\2\u135b\u135c\7\u030f\2\2\u135c\u135d\7\u0326"+
		"\2\2\u135d\u135e\7\u025a\2\2\u135e\u135f\7\u0313\2\2\u135f\u1361\7\u030f"+
		"\2\2\u1360\u1352\3\2\2\2\u1360\u1359\3\2\2\2\u1360\u1361\3\2\2\2\u1361"+
		"\u1363\3\2\2\2\u1362\u134e\3\2\2\2\u1362\u1351\3\2\2\2\u1363\u0185\3\2"+
		"\2\2\u1364\u1365\7\t\2\2\u1365\u1366\7\u02db\2\2\u1366\u1367\7\u00ab\2"+
		"\2\u1367\u1368\5\u03a0\u01d1\2\u1368\u1369\t\24\2\2\u1369\u136a\7\u01ec"+
		"\2\2\u136a\u1376\7%\2\2\u136b\u136c\7*\2\2\u136c\u1377\5\u03a0\u01d1\2"+
		"\u136d\u136e\7\u00f3\2\2\u136e\u136f\7\u0313\2\2\u136f\u1377\7\u030f\2"+
		"\2\u1370\u1371\7\u02db\2\2\u1371\u1372\7\u00ab\2\2\u1372\u1377\5\u03a0"+
		"\u01d1\2\u1373\u1374\7\21\2\2\u1374\u1375\7\u00ab\2\2\u1375\u1377\5\u03a0"+
		"\u01d1\2\u1376\u136b\3\2\2\2\u1376\u136d\3\2\2\2\u1376\u1370\3\2\2\2\u1376"+
		"\u1373\3\2\2\2\u1377\u0187\3\2\2\2\u1378\u1379\7\t\2\2\u1379\u137a\7\u02db"+
		"\2\2\u137a\u137b\7\u00ab\2\2\u137b\u137e\5\u03a0\u01d1\2\u137c\u137d\7"+
		"\23\2\2\u137d\u137f\5\u03a0\u01d1\2\u137e\u137c\3\2\2\2\u137e\u137f\3"+
		"\2\2\2\u137f\u1383\3\2\2\2\u1380\u1381\7\u008b\2\2\u1381\u1382\7\u0288"+
		"\2\2\u1382\u1384\5\u03a0\u01d1\2\u1383\u1380\3\2\2\2\u1383\u1384\3\2\2"+
		"\2\u1384\u1385\3\2\2\2\u1385\u13a6\7\u017b\2\2\u1386\u1387\7\u0229\2\2"+
		"\u1387\u1388\7\u0313\2\2\u1388\u1396\7\u030f\2\2\u1389\u138a\7\u018c\2"+
		"\2\u138a\u138b\7\u0313\2\2\u138b\u1396\t\61\2\2\u138c\u138d\7\u0217\2"+
		"\2\u138d\u138e\7\u0313\2\2\u138e\u1396\7\u030f\2\2\u138f\u1390\7\u0289"+
		"\2\2\u1390\u1391\7\u0313\2\2\u1391\u1396\7\u030f\2\2\u1392\u1393\7\u01c5"+
		"\2\2\u1393\u1394\7\u0313\2\2\u1394\u1396\t\13\2\2\u1395\u1386\3\2\2\2"+
		"\u1395\u1389\3\2\2\2\u1395\u138c\3\2\2\2\u1395\u138f\3\2\2\2\u1395\u1392"+
		"\3\2\2\2\u1396\u13a7\3\2\2\2\u1397\u1398\7\u01ec\2\2\u1398\u13a4\7%\2"+
		"\2\u1399\u139a\7*\2\2\u139a\u13a5\5\u03a0\u01d1\2\u139b\u139c\7\u00f3"+
		"\2\2\u139c\u139d\7\u0313\2\2\u139d\u13a5\7\u030f\2\2\u139e\u139f\7\u02db"+
		"\2\2\u139f\u13a0\7\u00ab\2\2\u13a0\u13a5\5\u03a0\u01d1\2\u13a1\u13a2\7"+
		"\21\2\2\u13a2\u13a3\7\u00ab\2\2\u13a3\u13a5\5\u03a0\u01d1\2\u13a4\u1399"+
		"\3\2\2\2\u13a4\u139b\3\2\2\2\u13a4\u139e\3\2\2\2\u13a4\u13a1\3\2\2\2\u13a5"+
		"\u13a7\3\2\2\2\u13a6\u1395\3\2\2\2\u13a6\u1397\3\2\2\2\u13a7\u0189\3\2"+
		"\2\2\u13a8\u13a9\7H\2\2\u13a9\u13ad\7\u02dd\2\2\u13aa\u13ab\5\u03a0\u01d1"+
		"\2\u13ab\u13ac\7\u031f\2\2\u13ac\u13ae\3\2\2\2\u13ad\u13aa\3\2\2\2\u13ad"+
		"\u13ae\3\2\2\2\u13ae\u13af\3\2\2\2\u13af\u13b0\5\u03a0\u01d1\2\u13b0\u13cb"+
		"\7\u0085\2\2\u13b1\u13b2\5\u03a0\u01d1\2\u13b2\u13b3\7\u031f\2\2\u13b3"+
		"\u13b5\3\2\2\2\u13b4\u13b1\3\2\2\2\u13b4\u13b5\3\2\2\2\u13b5\u13b9\3\2"+
		"\2\2\u13b6\u13b7\5\u03a0\u01d1\2\u13b7\u13b8\7\u031f\2\2\u13b8\u13ba\3"+
		"\2\2\2\u13b9\u13b6\3\2\2\2\u13b9\u13ba\3\2\2\2\u13ba\u13be\3\2\2\2\u13bb"+
		"\u13bc\5\u03a0\u01d1\2\u13bc\u13bd\7\u031f\2\2\u13bd\u13bf\3\2\2\2\u13be"+
		"\u13bb\3\2\2\2\u13be\u13bf\3\2\2\2\u13bf\u13c0\3\2\2\2\u13c0\u13cc\5\u03a0"+
		"\u01d1\2\u13c1\u13c2\5\u03a0\u01d1\2\u13c2\u13c3\7\u031f\2\2\u13c3\u13c5"+
		"\3\2\2\2\u13c4\u13c1\3\2\2\2\u13c4\u13c5\3\2\2\2\u13c5\u13c9\3\2\2\2\u13c6"+
		"\u13c7\5\u03a0\u01d1\2\u13c7\u13c8\7\u031f\2\2\u13c8\u13ca\3\2\2\2\u13c9"+
		"\u13c6\3\2\2\2\u13c9\u13ca\3\2\2\2\u13ca\u13cc\3\2\2\2\u13cb\u13b4\3\2"+
		"\2\2\u13cb\u13c4\3\2\2\2\u13cc\u018b\3\2\2\2\u13cd\u13ce\7\t\2\2\u13ce"+
		"\u13cf\7\u0170\2\2\u13cf\u13d0\5\u03a0\u01d1\2\u13d0\u1403\7\u017b\2\2"+
		"\u13d1\u13d3\7\u0326\2\2\u13d2\u13d1\3\2\2\2\u13d2\u13d3\3\2\2\2\u13d3"+
		"\u13d4\3\2\2\2\u13d4\u13d5\7\u0256\2\2\u13d5\u13d6\7\u0313\2\2\u13d6\u1404"+
		"\5\u03a0\u01d1\2\u13d7\u13d9\7\u0326\2\2\u13d8\u13d7\3\2\2\2\u13d8\u13d9"+
		"\3\2\2\2\u13d9\u13da\3\2\2\2\u13da\u13db\7[\2\2\u13db\u13de\7\u0313\2"+
		"\2\u13dc\u13df\5\u03a0\u01d1\2\u13dd\u13df\7\u00de\2\2\u13de\u13dc\3\2"+
		"\2\2\u13de\u13dd\3\2\2\2\u13df\u1404\3\2\2\2\u13e0\u13e2\7\u0326\2\2\u13e1"+
		"\u13e0\3\2\2\2\u13e1\u13e2\3\2\2\2\u13e2\u13e3\3\2\2\2\u13e3\u13e4\7\u0236"+
		"\2\2\u13e4\u13e5\7\u0313\2\2\u13e5\u1404\5\u03a0\u01d1\2\u13e6\u13e8\7"+
		"\u0326\2\2\u13e7\u13e6\3\2\2\2\u13e7\u13e8\3\2\2\2\u13e8\u13e9\3\2\2\2"+
		"\u13e9\u13ea\7\u00f3\2\2\u13ea\u13eb\7\u0313\2\2\u13eb\u13ef\7\u030f\2"+
		"\2\u13ec\u13ed\7\u00e3\2\2\u13ed\u13ee\7\u0313\2\2\u13ee\u13f0\7\u030f"+
		"\2\2\u13ef\u13ec\3\2\2\2\u13f0\u13f1\3\2\2\2\u13f1\u13ef\3\2\2\2\u13f1"+
		"\u13f2\3\2\2\2\u13f2\u1404\3\2\2\2\u13f3\u13f5\7\u0326\2\2\u13f4\u13f3"+
		"\3\2\2\2\u13f4\u13f5\3\2\2\2\u13f5\u13f6\3\2\2\2\u13f6\u13f7\7\u01d5\2"+
		"\2\u13f7\u13fb\7\u0313\2\2\u13f8\u13fc\7\u00d4\2\2\u13f9\u13fc\7\u030b"+
		"\2\2\u13fa\u13fc\5\u03a0\u01d1\2\u13fb\u13f8\3\2\2\2\u13fb\u13f9\3\2\2"+
		"\2\u13fb\u13fa\3\2\2\2\u13fc\u1404\3\2\2\2\u13fd\u13ff\7\u0326\2\2\u13fe"+
		"\u13fd\3\2\2\2\u13fe\u13ff\3\2\2\2\u13ff\u1400\3\2\2\2\u1400\u1401\7\u018e"+
		"\2\2\u1401\u1402\7\u0313\2\2\u1402\u1404\t\b\2\2\u1403\u13d2\3\2\2\2\u1403"+
		"\u13d8\3\2\2\2\u1403\u13e1\3\2\2\2\u1403\u13e7\3\2\2\2\u1403\u13f4\3\2"+
		"\2\2\u1403\u13fe\3\2\2\2\u1404\u1405\3\2\2\2\u1405\u1403\3\2\2\2\u1405"+
		"\u1406\3\2\2\2\u1406\u018d\3\2\2\2\u1407\u1408\7H\2\2\u1408\u1409\7\u0170"+
		"\2\2\u1409\u140d\5\u03a0\u01d1\2\u140a\u140b\t\62\2\2\u140b\u140c\7\u0236"+
		"\2\2\u140c\u140e\5\u03a0\u01d1\2\u140d\u140a\3\2\2\2\u140d\u140e\3\2\2"+
		"\2\u140e\u1421\3\2\2\2\u140f\u141e\7\u017b\2\2\u1410\u1412\7\u0326\2\2"+
		"\u1411\u1410\3\2\2\2\u1411\u1412\3\2\2\2\u1412\u1413\3\2\2\2\u1413\u1414"+
		"\7[\2\2\u1414\u1415\7\u0313\2\2\u1415\u141d\5\u03a0\u01d1\2\u1416\u1418"+
		"\7\u0326\2\2\u1417\u1416\3\2\2\2\u1417\u1418\3\2\2\2\u1418\u1419\3\2\2"+
		"\2\u1419\u141a\7\u018e\2\2\u141a\u141b\7\u0313\2\2\u141b\u141d\t\b\2\2"+
		"\u141c\u1411\3\2\2\2\u141c\u1417\3\2\2\2\u141d\u1420\3\2\2\2\u141e\u141c"+
		"\3\2\2\2\u141e\u141f\3\2\2\2\u141f\u1422\3\2\2\2\u1420\u141e\3\2\2\2\u1421"+
		"\u140f\3\2\2\2\u1421\u1422\3\2\2\2\u1422\u149a\3\2\2\2\u1423\u1424\7H"+
		"\2\2\u1424\u1475\7\u0170\2\2\u1425\u1448\5\u03a0\u01d1\2\u1426\u1445\7"+
		"\u017b\2\2\u1427\u1429\7\u0326\2\2\u1428\u1427\3\2\2\2\u1428\u1429\3\2"+
		"\2\2\u1429\u142a\3\2\2\2\u142a\u142b\7[\2\2\u142b\u142c\7\u0313\2\2\u142c"+
		"\u1444\5\u03a0\u01d1\2\u142d\u142f\7\u0326\2\2\u142e\u142d\3\2\2\2\u142e"+
		"\u142f\3\2\2\2\u142f\u1430\3\2\2\2\u1430\u1431\7\u01d5\2\2\u1431\u1435"+
		"\7\u0313\2\2\u1432\u1436\7\u00d4\2\2\u1433\u1436\7\u030b\2\2\u1434\u1436"+
		"\5\u03a0\u01d1\2\u1435\u1432\3\2\2\2\u1435\u1433\3\2\2\2\u1435\u1434\3"+
		"\2\2\2\u1436\u1444\3\2\2\2\u1437\u1439\7\u0326\2\2\u1438\u1437\3\2\2\2"+
		"\u1438\u1439\3\2\2\2\u1439\u143a\3\2\2\2\u143a\u143b\7\u013f\2\2\u143b"+
		"\u143c\7\u0313\2\2\u143c\u1444\7\u0310\2\2\u143d\u143f\7\u0326\2\2\u143e"+
		"\u143d\3\2\2\2\u143e\u143f\3\2\2\2\u143f\u1440\3\2\2\2\u1440\u1441\7\u018e"+
		"\2\2\u1441\u1442\7\u0313\2\2\u1442\u1444\t\b\2\2\u1443\u1428\3\2\2\2\u1443"+
		"\u142e\3\2\2\2\u1443\u1438\3\2\2\2\u1443\u143e\3\2\2\2\u1444\u1447\3\2"+
		"\2\2\u1445\u1443\3\2\2\2\u1445\u1446\3\2\2\2\u1446\u1449\3\2\2\2\u1447"+
		"\u1445\3\2\2\2\u1448\u1426\3\2\2\2\u1448\u1449\3\2\2\2\u1449\u1476\3\2"+
		"\2\2\u144a\u144b\5\u03a0\u01d1\2\u144b\u144c\7\u017b\2\2\u144c\u144d\7"+
		"\u00f3\2\2\u144d\u144e\7\u0313\2\2\u144e\u146d\7\u030f\2\2\u144f\u1451"+
		"\7\u0326\2\2\u1450\u144f\3\2\2\2\u1450\u1451\3\2\2\2\u1451\u1452\3\2\2"+
		"\2\u1452\u1453\7[\2\2\u1453\u1454\7\u0313\2\2\u1454\u146c\5\u03a0\u01d1"+
		"\2\u1455\u1457\7\u0326\2\2\u1456\u1455\3\2\2\2\u1456\u1457\3\2\2\2\u1457"+
		"\u1458\3\2\2\2\u1458\u1459\7\u01d5\2\2\u1459\u145d\7\u0313\2\2\u145a\u145e"+
		"\7\u00d4\2\2\u145b\u145e\7\u030b\2\2\u145c\u145e\5\u03a0\u01d1\2\u145d"+
		"\u145a\3\2\2\2\u145d\u145b\3\2\2\2\u145d\u145c\3\2\2\2\u145e\u146c\3\2"+
		"\2\2\u145f\u1461\7\u0326\2\2\u1460\u145f\3\2\2\2\u1460\u1461\3\2\2\2\u1461"+
		"\u1462\3\2\2\2\u1462\u1463\7\u013f\2\2\u1463\u1464\7\u0313\2\2\u1464\u146c"+
		"\7\u0310\2\2\u1465\u1467\7\u0326\2\2\u1466\u1465\3\2\2\2\u1466\u1467\3"+
		"\2\2\2\u1467\u1468\3\2\2\2\u1468\u1469\7\u018e\2\2\u1469\u146a\7\u0313"+
		"\2\2\u146a\u146c\t\b\2\2\u146b\u1450\3\2\2\2\u146b\u1456\3\2\2\2\u146b"+
		"\u1460\3\2\2\2\u146b\u1466\3\2\2\2\u146c\u146f\3\2\2\2\u146d\u146b\3\2"+
		"\2\2\u146d\u146e\3\2\2\2\u146e\u1476\3\2\2\2\u146f\u146d\3\2\2\2\u1470"+
		"\u1471\5\u03a0\u01d1\2\u1471\u1472\7\u008b\2\2\u1472\u1473\7{\2\2\u1473"+
		"\u1474\7\u0288\2\2\u1474\u1476\3\2\2\2\u1475\u1425\3\2\2\2\u1475\u144a"+
		"\3\2\2\2\u1475\u1470\3\2\2\2\u1476\u149a\3\2\2\2\u1477\u1478\7H\2\2\u1478"+
		"\u1479\7\u0170\2\2\u1479\u1494\5\u03a0\u01d1\2\u147a\u147b\7\u017d\2\2"+
		"\u147b\u148a\7\u0236\2\2\u147c\u147e\7\u0326\2\2\u147d\u147c\3\2\2\2\u147d"+
		"\u147e\3\2\2\2\u147e\u147f\3\2\2\2\u147f\u1480\7[\2\2\u1480\u1481\7\u0313"+
		"\2\2\u1481\u1489\5\u03a0\u01d1\2\u1482\u1484\7\u0326\2\2\u1483\u1482\3"+
		"\2\2\2\u1483\u1484\3\2\2\2\u1484\u1485\3\2\2\2\u1485\u1486\7\u018e\2\2"+
		"\u1486\u1487\7\u0313\2\2\u1487\u1489\t\b\2\2\u1488\u147d\3\2\2\2\u1488"+
		"\u1483\3\2\2\2\u1489\u148c\3\2\2\2\u148a\u1488\3\2\2\2\u148a\u148b\3\2"+
		"\2\2\u148b\u1495\3\2\2\2\u148c\u148a\3\2\2\2\u148d\u148e\t\62\2\2\u148e"+
		"\u148f\7*\2\2\u148f\u1495\5\u03a0\u01d1\2\u1490\u1491\t\62\2\2\u1491\u1492"+
		"\7\21\2\2\u1492\u1493\7\u00ab\2\2\u1493\u1495\5\u03a0\u01d1\2\u1494\u147a"+
		"\3\2\2\2\u1494\u148d\3\2\2\2\u1494\u1490\3\2\2\2\u1495\u149a\3\2\2\2\u1496"+
		"\u1497\7H\2\2\u1497\u1498\7\u0170\2\2\u1498\u149a\5\u03a0\u01d1\2\u1499"+
		"\u1407\3\2\2\2\u1499\u1423\3\2\2\2\u1499\u1477\3\2\2\2\u1499\u1496\3\2"+
		"\2\2\u149a\u018f\3\2\2\2\u149b\u149c\7H\2\2\u149c\u149d\7\u0170\2\2\u149d"+
		"\u14a3\5\u03a0\u01d1\2\u149e\u149f\t\62\2\2\u149f\u14a0\7\u0236\2\2\u14a0"+
		"\u14a4\5\u03a0\u01d1\2\u14a1\u14a2\7\u017d\2\2\u14a2\u14a4\7\u0236\2\2"+
		"\u14a3\u149e\3\2\2\2\u14a3\u14a1\3\2\2\2\u14a3\u14a4\3\2\2\2\u14a4\u14a9"+
		"\3\2\2\2\u14a5\u14a6\7\u017b\2\2\u14a6\u14a7\7[\2\2\u14a7\u14a8\7\u0313"+
		"\2\2\u14a8\u14aa\5\u03a0\u01d1\2\u14a9\u14a5\3\2\2\2\u14a9\u14aa\3\2\2"+
		"\2\u14aa\u14b8\3\2\2\2\u14ab\u14ac\7H\2\2\u14ac\u14ad\7\u0170\2\2\u14ad"+
		"\u14ae\5\u03a0\u01d1\2\u14ae\u14af\7\u008b\2\2\u14af\u14b0\7{\2\2\u14b0"+
		"\u14b5\7\u0288\2\2\u14b1\u14b2\7\u017b\2\2\u14b2\u14b3\7[\2\2\u14b3\u14b4"+
		"\7\u0313\2\2\u14b4\u14b6\5\u03a0\u01d1\2\u14b5\u14b1\3\2\2\2\u14b5\u14b6"+
		"\3\2\2\2\u14b6\u14b8\3\2\2\2\u14b7\u149b\3\2\2\2\u14b7\u14ab\3\2\2\2\u14b8"+
		"\u0191\3\2\2\2\u14b9\u14ba\7\t\2\2\u14ba\u14bb\7\u0170\2\2\u14bb\u14bc"+
		"\5\u03a0\u01d1\2\u14bc\u14d5\7\u017b\2\2\u14bd\u14bf\7\u0326\2\2\u14be"+
		"\u14bd\3\2\2\2\u14be\u14bf\3\2\2\2\u14bf\u14c0\3\2\2\2\u14c0\u14c1\7\u0256"+
		"\2\2\u14c1\u14c2\7\u0313\2\2\u14c2\u14d6\5\u03a0\u01d1\2\u14c3\u14c5\7"+
		"\u0326\2\2\u14c4\u14c3\3\2\2\2\u14c4\u14c5\3\2\2\2\u14c5\u14c6\3\2\2\2"+
		"\u14c6\u14c7\7[\2\2\u14c7\u14c8\7\u0313\2\2\u14c8\u14d6\5\u03a0\u01d1"+
		"\2\u14c9\u14cb\7\u0326\2\2\u14ca\u14c9\3\2\2\2\u14ca\u14cb\3\2\2\2\u14cb"+
		"\u14cc\3\2\2\2\u14cc\u14cd\7\u0236\2\2\u14cd\u14ce\7\u0313\2\2\u14ce\u14d6"+
		"\5\u03a0\u01d1\2\u14cf\u14d1\7\u0326\2\2\u14d0\u14cf\3\2\2\2\u14d0\u14d1"+
		"\3\2\2\2\u14d1\u14d2\3\2\2\2\u14d2\u14d3\7\u018e\2\2\u14d3\u14d4\7\u0313"+
		"\2\2\u14d4\u14d6\t\b\2\2\u14d5\u14be\3\2\2\2\u14d5\u14c4\3\2\2\2\u14d5"+
		"\u14ca\3\2\2\2\u14d5\u14d0\3\2\2\2\u14d6\u14d7\3\2\2\2\u14d7\u14d5\3\2"+
		"\2\2\u14d7\u14d8\3\2\2\2\u14d8\u0193\3\2\2\2\u14d9\u14da\7\t\2\2\u14da"+
		"\u14db\7\u0300\2\2\u14db\u14de\7\u0092\2\2\u14dc\u14df\5\u03a0\u01d1\2"+
		"\u14dd\u14df\7\u01d3\2\2\u14de\u14dc\3\2\2\2\u14de\u14dd\3\2\2\2\u14df"+
		"\u14ff\3\2\2\2\u14e0\u14e1\7\u017b\2\2\u14e1\u14fa\7\u0324\2\2\u14e2\u14e3"+
		"\7\u021b\2\2\u14e3\u14e4\7\u0313\2\2\u14e4\u14fb\t\63\2\2\u14e5\u14e7"+
		"\7\u0326\2\2\u14e6\u14e5\3\2\2\2\u14e6\u14e7\3\2\2\2\u14e7\u14e8\3\2\2"+
		"\2\u14e8\u14e9\7\u02a5\2\2\u14e9\u14ea\7\u0313\2\2\u14ea\u14fb\7\u030b"+
		"\2\2\u14eb\u14ed\7\u0326\2\2\u14ec\u14eb\3\2\2\2\u14ec\u14ed\3\2\2\2\u14ed"+
		"\u14ee\3\2\2\2\u14ee\u14ef\7\u02a6\2\2\u14ef\u14f0\7\u0313\2\2\u14f0\u14fb"+
		"\7\u030b\2\2\u14f1\u14f2\7\u02a7\2\2\u14f2\u14f3\7\u0313\2\2\u14f3\u14fb"+
		"\7\u030b\2\2\u14f4\u14f5\7\u0247\2\2\u14f5\u14f6\7\u0313\2\2\u14f6\u14fb"+
		"\7\u030b\2\2\u14f7\u14f8\7\u0210\2\2\u14f8\u14f9\7\u0313\2\2\u14f9\u14fb"+
		"\7\u030b\2\2\u14fa\u14e2\3\2\2\2\u14fa\u14e6\3\2\2\2\u14fa\u14ec\3\2\2"+
		"\2\u14fa\u14f1\3\2\2\2\u14fa\u14f4\3\2\2\2\u14fa\u14f7\3\2\2\2\u14fb\u14fc"+
		"\3\2\2\2\u14fc\u14fa\3\2\2\2\u14fc\u14fd\3\2\2\2\u14fd\u14fe\3\2\2\2\u14fe"+
		"\u1500\7\u0325\2\2\u14ff\u14e0\3\2\2\2\u14ff\u1500\3\2\2\2\u1500\u1506"+
		"\3\2\2\2\u1501\u1504\7\u02f6\2\2\u1502\u1505\5\u03a0\u01d1\2\u1503\u1505"+
		"\7\u01d3\2\2\u1504\u1502\3\2\2\2\u1504\u1503\3\2\2\2\u1505\u1507\3\2\2"+
		"\2\u1506\u1501\3\2\2\2\u1506\u1507\3\2\2\2\u1507\u0195\3\2\2\2\u1508\u1509"+
		"\7H\2\2\u1509\u150a\7\u0300\2\2\u150a\u150b\7\u0092\2\2\u150b\u152b\5"+
		"\u03a0\u01d1\2\u150c\u150d\7\u017b\2\2\u150d\u1526\7\u0324\2\2\u150e\u150f"+
		"\7\u021b\2\2\u150f\u1510\7\u0313\2\2\u1510\u1527\t\63\2\2\u1511\u1513"+
		"\7\u0326\2\2\u1512\u1511\3\2\2\2\u1512\u1513\3\2\2\2\u1513\u1514\3\2\2"+
		"\2\u1514\u1515\7\u02a5\2\2\u1515\u1516\7\u0313\2\2\u1516\u1527\7\u030b"+
		"\2\2\u1517\u1519\7\u0326\2\2\u1518\u1517\3\2\2\2\u1518\u1519\3\2\2\2\u1519"+
		"\u151a\3\2\2\2\u151a\u151b\7\u02a6\2\2\u151b\u151c\7\u0313\2\2\u151c\u1527"+
		"\7\u030b\2\2\u151d\u151e\7\u02a7\2\2\u151e\u151f\7\u0313\2\2\u151f\u1527"+
		"\7\u030b\2\2\u1520\u1521\7\u0247\2\2\u1521\u1522\7\u0313\2\2\u1522\u1527"+
		"\7\u030b\2\2\u1523\u1524\7\u0210\2\2\u1524\u1525\7\u0313\2\2\u1525\u1527"+
		"\7\u030b\2\2\u1526\u150e\3\2\2\2\u1526\u1512\3\2\2\2\u1526\u1518\3\2\2"+
		"\2\u1526\u151d\3\2\2\2\u1526\u1520\3\2\2\2\u1526\u1523\3\2\2\2\u1527\u1528"+
		"\3\2\2\2\u1528\u1526\3\2\2\2\u1528\u1529\3\2\2\2\u1529\u152a\3\2\2\2\u152a"+
		"\u152c\7\u0325\2\2\u152b\u150c\3\2\2\2\u152b\u152c\3\2\2\2\u152c\u153a"+
		"\3\2\2\2\u152d\u1530\7\u02f6\2\2\u152e\u1531\5\u03a0\u01d1\2\u152f\u1531"+
		"\7\u01d3\2\2\u1530\u152e\3\2\2\2\u1530\u152f\3\2\2\2\u1530\u1531\3\2\2"+
		"\2\u1531\u1538\3\2\2\2\u1532\u1534\7\u0326\2\2\u1533\u1532\3\2\2\2\u1533"+
		"\u1534\3\2\2\2\u1534\u1535\3\2\2\2\u1535\u1536\7{\2\2\u1536\u1539\5\u03a0"+
		"\u01d1\2\u1537\u1539\7\u01d3\2\2\u1538\u1533\3\2\2\2\u1538\u1537\3\2\2"+
		"\2\u1538\u1539\3\2\2\2\u1539\u153b\3\2\2\2\u153a\u152d\3\2\2\2\u153a\u153b"+
		"\3\2\2\2\u153b\u0197\3\2\2\2\u153c\u153d\7H\2\2\u153d\u153e\7\u0301\2"+
		"\2\u153e\u153f\7\u012d\2\2\u153f\u1543\7\u01b7\2\2\u1540\u1541\5\u03a0"+
		"\u01d1\2\u1541\u1542\7\u031f\2\2\u1542\u1544\3\2\2\2\u1543\u1540\3\2\2"+
		"\2\u1543\u1544\3\2\2\2\u1544\u1545\3\2\2\2\u1545\u1546\5\u03a0\u01d1\2"+
		"\u1546\u154a\7\17\2\2\u1547\u154b\7\u030f\2\2\u1548\u154b\5\u03a0\u01d1"+
		"\2\u1549\u154b\7\u030a\2\2\u154a\u1547\3\2\2\2\u154a\u1548\3\2\2\2\u154a"+
		"\u1549\3\2\2\2\u154b\u0199\3\2\2\2\u154c\u154d\7H\2\2\u154d\u1550\7\u028a"+
		"\2\2\u154e\u1551\5\u036a\u01b6\2\u154f\u1551\5\u03a0\u01d1\2\u1550\u154e"+
		"\3\2\2\2\u1550\u154f\3\2\2\2\u1551\u1553\3\2\2\2\u1552\u1554\5\u019c\u00cf"+
		"\2\u1553\u1552\3\2\2\2\u1553\u1554\3\2\2\2\u1554\u1558\3\2\2\2\u1555\u1556"+
		"\7\u00e4\2\2\u1556\u1559\5\u03a0\u01d1\2\u1557\u1559\7Y\2\2\u1558\u1555"+
		"\3\2\2\2\u1558\u1557\3\2\2\2\u1558\u1559\3\2\2\2\u1559\u019b\3\2\2\2\u155a"+
		"\u1561\7\u017b\2\2\u155b\u155c\7\u02d2\2\2\u155c\u155d\7\u0313\2\2\u155d"+
		"\u155f\t\b\2\2\u155e\u1560\7\u0326\2\2\u155f\u155e\3\2\2\2\u155f\u1560"+
		"\3\2\2\2\u1560\u1562\3\2\2\2\u1561\u155b\3\2\2\2\u1561\u1562\3\2\2\2\u1562"+
		"\u1569\3\2\2\2\u1563\u1564\7\u02ac\2\2\u1564\u1565\7\u0313\2\2\u1565\u1567"+
		"\t\b\2\2\u1566\u1568\7\u0326\2\2\u1567\u1566\3\2\2\2\u1567\u1568\3\2\2"+
		"\2\u1568\u156a\3\2\2\2\u1569\u1563\3\2\2\2\u1569\u156a\3\2\2\2\u156a\u15a1"+
		"\3\2\2\2\u156b\u156c\7\u0184\2\2\u156c\u1573\7\u0324\2\2\u156d\u156f\7"+
		"\u0326\2\2\u156e\u156d\3\2\2\2\u156e\u156f\3\2\2\2\u156f\u1570\3\2\2\2"+
		"\u1570\u1571\7\u02d2\2\2\u1571\u1572\7\u0313\2\2\u1572\u1574\t\b\2\2\u1573"+
		"\u156e\3\2\2\2\u1573\u1574\3\2\2\2\u1574\u157b\3\2\2\2\u1575\u1577\7\u0326"+
		"\2\2\u1576\u1575\3\2\2\2\u1576\u1577\3\2\2\2\u1577\u1578\3\2\2\2\u1578"+
		"\u1579\7\u0286\2\2\u1579\u157a\7\u0313\2\2\u157a\u157c\5\u0370\u01b9\2"+
		"\u157b\u1576\3\2\2\2\u157b\u157c\3\2\2\2\u157c\u1583\3\2\2\2\u157d\u157f"+
		"\7\u0326\2\2\u157e\u157d\3\2\2\2\u157e\u157f\3\2\2\2\u157f\u1580\3\2\2"+
		"\2\u1580\u1581\7\u0244\2\2\u1581\u1582\7\u0313\2\2\u1582\u1584\7\u030b"+
		"\2\2\u1583\u157e\3\2\2\2\u1583\u1584\3\2\2\2\u1584\u158f\3\2\2\2\u1585"+
		"\u1587\7\u0326\2\2\u1586\u1585\3\2\2\2\u1586\u1587\3\2\2\2\u1587\u1588"+
		"\3\2\2\2\u1588\u1589\7v\2\2\u1589\u158d\7\17\2\2\u158a\u158e\7\u02c1\2"+
		"\2\u158b\u158e\7\u030f\2\2\u158c\u158e\7\u0274\2\2\u158d\u158a\3\2\2\2"+
		"\u158d\u158b\3\2\2\2\u158d\u158c\3\2\2\2\u158e\u1590\3\2\2\2\u158f\u1586"+
		"\3\2\2\2\u158f\u1590\3\2\2\2\u1590\u1598\3\2\2\2\u1591\u1593\7\u0326\2"+
		"\2\u1592\u1591\3\2\2\2\u1592\u1593\3\2\2\2\u1593\u1594\3\2\2\2\u1594\u1595"+
		"\7\u027c\2\2\u1595\u1596\7\u02d2\2\2\u1596\u1597\7\u0313\2\2\u1597\u1599"+
		"\t\b\2\2\u1598\u1592\3\2\2\2\u1598\u1599\3\2\2\2\u1599\u159e\3\2\2\2\u159a"+
		"\u159c\7\u0326\2\2\u159b\u159a\3\2\2\2\u159b\u159c\3\2\2\2\u159c\u159d"+
		"\3\2\2\2\u159d\u159f\7g\2\2\u159e\u159b\3\2\2\2\u159e\u159f\3\2\2\2\u159f"+
		"\u15a0\3\2\2\2\u15a0\u15a2\7\u0325\2\2\u15a1\u156b\3\2\2\2\u15a1\u15a2"+
		"\3\2\2\2\u15a2\u019d\3\2\2\2\u15a3\u15a4\7\t\2\2\u15a4\u15a7\7\u028a\2"+
		"\2\u15a5\u15a8\5\u036a\u01b6\2\u15a6\u15a8\5\u03a0\u01d1\2\u15a7\u15a5"+
		"\3\2\2\2\u15a7\u15a6\3\2\2\2\u15a8\u15ab\3\2\2\2\u15a9\u15ac\5\u019c\u00cf"+
		"\2\u15aa\u15ac\5\u01a0\u00d1\2\u15ab\u15a9\3\2\2\2\u15ab\u15aa\3\2\2\2"+
		"\u15ac\u019f\3\2\2\2\u15ad\u15b3\7\u0298\2\2\u15ae\u15af\7\u017b\2\2\u15af"+
		"\u15b0\7\u0324\2\2\u15b0\u15b1\5\u01a2\u00d2\2\u15b1\u15b2\7\u0325\2\2"+
		"\u15b2\u15b4\3\2\2\2\u15b3\u15ae\3\2\2\2\u15b3\u15b4\3\2\2\2\u15b4\u15c3"+
		"\3\2\2\2\u15b5\u15ba\7\u029f\2\2\u15b6\u15b7\7\u017b\2\2\u15b7\u15b8\7"+
		"\u0232\2\2\u15b8\u15b9\7\u0313\2\2\u15b9\u15bb\t\b\2\2\u15ba\u15b6\3\2"+
		"\2\2\u15ba\u15bb\3\2\2\2\u15bb\u15c3\3\2\2\2\u15bc\u15bd\7\u0254\2\2\u15bd"+
		"\u15c0\7\u015c\2\2\u15be\u15c1\5\u03a0\u01d1\2\u15bf\u15c1\7Y\2\2\u15c0"+
		"\u15be\3\2\2\2\u15c0\u15bf\3\2\2\2\u15c1\u15c3\3\2\2\2\u15c2\u15ad\3\2"+
		"\2\2\u15c2\u15b5\3\2\2\2\u15c2\u15bc\3\2\2\2\u15c3\u01a1\3\2\2\2\u15c4"+
		"\u15c5\7\u0246\2\2\u15c5\u15c6\7\u0313\2\2\u15c6\u15c7\7\u030b\2\2\u15c7"+
		"\u01a3\3\2\2\2\u15c8\u15c9\7H\2\2\u15c9\u15ca\7C\2\2\u15ca\u15cd\5\u038a"+
		"\u01c6\2\u15cb\u15cc\7\23\2\2\u15cc\u15ce\5\u03a0\u01d1\2\u15cd\u15cb"+
		"\3\2\2\2\u15cd\u15ce\3\2\2\2\u15ce\u15cf\3\2\2\2\u15cf\u15da\7\u0324\2"+
		"\2\u15d0\u15d3\5\u03a0\u01d1\2\u15d1\u15d3\7Y\2\2\u15d2\u15d0\3\2\2\2"+
		"\u15d2\u15d1\3\2\2\2\u15d3\u15d4\3\2\2\2\u15d4\u15d5\7\u02c3\2\2\u15d5"+
		"\u15d6\7%\2\2\u15d6\u15d8\t\64\2\2\u15d7\u15d9\7\u0326\2\2\u15d8\u15d7"+
		"\3\2\2\2\u15d8\u15d9\3\2\2\2\u15d9\u15db\3\2\2\2\u15da\u15d2\3\2\2\2\u15db"+
		"\u15dc\3\2\2\2\u15dc\u15da\3\2\2\2\u15dc\u15dd\3\2\2\2\u15dd\u15de\3\2"+
		"\2\2\u15de\u15df\7\u0325\2\2\u15df\u01a5\3\2\2\2\u15e0\u15e7\5\u0386\u01c4"+
		"\2\u15e1\u15e7\5\u0388\u01c5\2\u15e2\u15e7\5\u038e\u01c8\2\u15e3\u15e7"+
		"\5\u0392\u01ca\2\u15e4\u15e7\5\u0396\u01cc\2\u15e5\u15e7\5\u0390\u01c9"+
		"\2\u15e6\u15e0\3\2\2\2\u15e6\u15e1\3\2\2\2\u15e6\u15e2\3\2\2\2\u15e6\u15e3"+
		"\3\2\2\2\u15e6\u15e4\3\2\2\2\u15e6\u15e5\3\2\2\2\u15e7\u01a7\3\2\2\2\u15e8"+
		"\u15e9\7H\2\2\u15e9\u15ea\7\u024b\2\2\u15ea\u15eb\7\u02f0\2\2\u15eb\u15ee"+
		"\5\u03a0\u01d1\2\u15ec\u15ed\7\23\2\2\u15ed\u15ef\5\u03a0\u01d1\2\u15ee"+
		"\u15ec\3\2\2\2\u15ee\u15ef\3\2\2\2\u15ef\u15f0\3\2\2\2\u15f0\u15f1\7\u02f7"+
		"\2\2\u15f1\u15fa\7\u0313\2\2\u15f2\u15fb\7\u00d4\2\2\u15f3\u15fb\7\u01e8"+
		"\2\2\u15f4\u15fb\7\u02fe\2\2\u15f5\u15f6\7\u02f8\2\2\u15f6\u15f7\7\u017b"+
		"\2\2\u15f7\u15f8\7\u012d\2\2\u15f8\u15f9\7\u01b7\2\2\u15f9\u15fb\5\u03a0"+
		"\u01d1\2\u15fa\u15f2\3\2\2\2\u15fa\u15f3\3\2\2\2\u15fa\u15f4\3\2\2\2\u15fa"+
		"\u15f5\3\2\2\2\u15fb\u01a9\3\2\2\2\u15fc\u15fe\5\u02c4\u0163\2\u15fd\u15fc"+
		"\3\2\2\2\u15fd\u15fe\3\2\2\2\u15fe\u15ff\3\2\2\2\u15ff\u1607\7\u00c8\2"+
		"\2\u1600\u1601\7\u015d\2\2\u1601\u1602\7\u0324\2\2\u1602\u1603\5\u02b6"+
		"\u015c\2\u1603\u1605\7\u0325\2\2\u1604\u1606\7\u00f4\2\2\u1605\u1604\3"+
		"\2\2\2\u1605\u1606\3\2\2\2\u1606\u1608\3\2\2\2\u1607\u1600\3\2\2\2\u1607"+
		"\u1608\3\2\2\2\u1608\u160a\3\2\2\2\u1609\u160b\7\u00a4\2\2\u160a\u1609"+
		"\3\2\2\2\u160a\u160b\3\2\2\2\u160b\u160c\3\2\2\2\u160c\u160e\5\u0372\u01ba"+
		"\2\u160d\u160f\5\u0338\u019d\2\u160e\u160d\3\2\2\2\u160e\u160f\3\2\2\2"+
		"\u160f\u1611\3\2\2\2\u1610\u1612\5\u0332\u019a\2\u1611\u1610\3\2\2\2\u1611"+
		"\u1612\3\2\2\2\u1612\u1613\3\2\2\2\u1613\u1614\7\u02f6\2\2\u1614\u1615"+
		"\5\u02fe\u0180\2\u1615\u1616\7\u00e4\2\2\u1616\u1621\5\u02cc\u0167\2\u1617"+
		"\u1618\7\u0177\2\2\u1618\u161b\7\u00bb\2\2\u1619\u161a\7\n\2\2\u161a\u161c"+
		"\5\u02cc\u0167\2\u161b\u1619\3\2\2\2\u161b\u161c\3\2\2\2\u161c\u161d\3"+
		"\2\2\2\u161d\u161e\7\u015b\2\2\u161e\u1620\5\u01ac\u00d7\2\u161f\u1617"+
		"\3\2\2\2\u1620\u1623\3\2\2\2\u1621\u161f\3\2\2\2\u1621\u1622\3\2\2\2\u1622"+
		"\u1631\3\2\2\2\u1623\u1621\3\2\2\2\u1624\u1625\7\u0177\2\2\u1625\u1626"+
		"\7\u00db\2\2\u1626\u1629\7\u00bb\2\2\u1627\u1628\7%\2\2\u1628\u162a\7"+
		"\u0158\2\2\u1629\u1627\3\2\2\2\u1629\u162a\3\2\2\2\u162a\u162d\3\2\2\2"+
		"\u162b\u162c\7\n\2\2\u162c\u162e\5\u02cc\u0167\2\u162d\u162b\3\2\2\2\u162d"+
		"\u162e\3\2\2\2\u162e\u162f\3\2\2\2\u162f\u1630\7\u015b\2\2\u1630\u1632"+
		"\5\u01ae\u00d8\2\u1631\u1624\3\2\2\2\u1631\u1632\3\2\2\2\u1632\u1640\3"+
		"\2\2\2\u1633\u1634\7\u0177\2\2\u1634\u1635\7\u00db\2\2\u1635\u1636\7\u00bb"+
		"\2\2\u1636\u1637\7%\2\2\u1637\u163a\7\u0143\2\2\u1638\u1639\7\n\2\2\u1639"+
		"\u163b\5\u02cc\u0167\2\u163a\u1638\3\2\2\2\u163a\u163b\3\2\2\2\u163b\u163c"+
		"\3\2\2\2\u163c\u163d\7\u015b\2\2\u163d\u163f\5\u01ac\u00d7\2\u163e\u1633"+
		"\3\2\2\2\u163f\u1642\3\2\2\2\u1640\u163e\3\2\2\2\u1640\u1641\3\2\2\2\u1641"+
		"\u1644\3\2\2\2\u1642\u1640\3\2\2\2\u1643\u1645\5\u01c0\u00e1\2\u1644\u1643"+
		"\3\2\2\2\u1644\u1645\3\2\2\2\u1645\u1647\3\2\2\2\u1646\u1648\5\u02ea\u0176"+
		"\2\u1647\u1646\3\2\2\2\u1647\u1648\3\2\2\2\u1648\u1649\3\2\2\2\u1649\u164a"+
		"\7\u0327\2\2\u164a\u01ab\3\2\2\2\u164b\u164c\7\u016b\2\2\u164c\u164d\7"+
		"\u013c\2\2\u164d\u1652\5\u02c8\u0165\2\u164e\u164f\7\u0326\2\2\u164f\u1651"+
		"\5\u02c8\u0165\2\u1650\u164e\3\2\2\2\u1651\u1654\3\2\2\2\u1652\u1650\3"+
		"\2\2\2\u1652\u1653\3\2\2\2\u1653\u1657\3\2\2\2\u1654\u1652\3\2\2\2\u1655"+
		"\u1657\7\\\2\2\u1656\u164b\3\2\2\2\u1656\u1655\3\2\2\2\u1657\u01ad\3\2"+
		"\2\2\u1658\u165d\7\u00a1\2\2\u1659\u165a\7\u0324\2\2\u165a\u165b\5\u0378"+
		"\u01bd\2\u165b\u165c\7\u0325\2\2\u165c\u165e\3\2\2\2\u165d\u1659\3\2\2"+
		"\2\u165d\u165e\3\2\2\2\u165e\u1662\3\2\2\2\u165f\u1663\5\u0342\u01a2\2"+
		"\u1660\u1661\7Y\2\2\u1661\u1663\7\u0171\2\2\u1662\u165f\3\2\2\2\u1662"+
		"\u1660\3\2\2\2\u1663\u01af\3\2\2\2\u1664\u1666\5\u02c4\u0163\2\u1665\u1664"+
		"\3\2\2\2\u1665\u1666\3\2\2\2\u1666\u1667\3\2\2\2\u1667\u166f\7\\\2\2\u1668"+
		"\u1669\7\u015d\2\2\u1669\u166a\7\u0324\2\2\u166a\u166b\5\u02b6\u015c\2"+
		"\u166b\u166d\7\u0325\2\2\u166c\u166e\7\u00f4\2\2\u166d\u166c\3\2\2\2\u166d"+
		"\u166e\3\2\2\2\u166e\u1670\3\2\2\2\u166f\u1668\3\2\2\2\u166f\u1670\3\2"+
		"\2\2\u1670\u1672\3\2\2\2\u1671\u1673\7\u008b\2\2\u1672\u1671\3\2\2\2\u1672"+
		"\u1673\3\2\2\2\u1673\u1674\3\2\2\2\u1674\u1676\5\u01b2\u00da\2\u1675\u1677"+
		"\5\u0338\u019d\2\u1676\u1675\3\2\2\2\u1676\u1677\3\2\2\2\u1677\u1679\3"+
		"\2\2\2\u1678\u167a\5\u01c0\u00e1\2\u1679\u1678\3\2\2\2\u1679\u167a\3\2"+
		"\2\2\u167a\u167d\3\2\2\2\u167b\u167c\7\u008b\2\2\u167c\u167e\5\u02fe\u0180"+
		"\2\u167d\u167b\3\2\2\2\u167d\u167e\3\2\2\2\u167e\u168c\3\2\2\2\u167f\u168a"+
		"\7\u0178\2\2\u1680\u168b\5\u02cc\u0167\2\u1681\u1682\7J\2\2\u1682\u1688"+
		"\7\u00e0\2\2\u1683\u1685\7\u020c\2\2\u1684\u1683\3\2\2\2\u1684\u1685\3"+
		"\2\2\2\u1685\u1686\3\2\2\2\u1686\u1689\5\u037a\u01be\2\u1687\u1689\7\u030a"+
		"\2\2\u1688\u1684\3\2\2\2\u1688\u1687\3\2\2\2\u1689\u168b\3\2\2\2\u168a"+
		"\u1680\3\2\2\2\u168a\u1681\3\2\2\2\u168b\u168d\3\2\2\2\u168c\u167f\3\2"+
		"\2\2\u168c\u168d\3\2\2\2\u168d\u168f\3\2\2\2\u168e\u1690\5\u02e2\u0172"+
		"\2\u168f\u168e\3\2\2\2\u168f\u1690\3\2\2\2\u1690\u1692\3\2\2\2\u1691\u1693"+
		"\5\u02ea\u0176\2\u1692\u1691\3\2\2\2\u1692\u1693\3\2\2\2\u1693\u1695\3"+
		"\2\2\2\u1694\u1696\7\u0327\2\2\u1695\u1694\3\2\2\2\u1695\u1696\3\2\2\2"+
		"\u1696\u01b1\3\2\2\2\u1697\u169c\5\u0372\u01ba\2\u1698\u169c\5\u0334\u019b"+
		"\2\u1699\u169c\5\u0256\u012c\2\u169a\u169c\7\u030a\2\2\u169b\u1697\3\2"+
		"\2\2\u169b\u1698\3\2\2\2\u169b\u1699\3\2\2\2\u169b\u169a\3\2\2\2\u169c"+
		"\u01b3\3\2\2\2\u169d\u169f\5\u02c4\u0163\2\u169e\u169d\3\2\2\2\u169e\u169f"+
		"\3\2\2\2\u169f\u16a0\3\2\2\2\u16a0\u16a8\7\u00a1\2\2\u16a1\u16a2\7\u015d"+
		"\2\2\u16a2\u16a3\7\u0324\2\2\u16a3\u16a4\5\u02b6\u015c\2\u16a4\u16a6\7"+
		"\u0325\2\2\u16a5\u16a7\7\u00f4\2\2\u16a6\u16a5\3\2\2\2\u16a6\u16a7\3\2"+
		"\2\2\u16a7\u16a9\3\2\2\2\u16a8\u16a1\3\2\2\2\u16a8\u16a9\3\2\2\2\u16a9"+
		"\u16ab\3\2\2\2\u16aa\u16ac\7\u00a4\2\2\u16ab\u16aa\3\2\2\2\u16ab\u16ac"+
		"\3\2\2\2\u16ac\u16af\3\2\2\2\u16ad\u16b0\5\u0372\u01ba\2\u16ae\u16b0\5"+
		"\u0256\u012c\2\u16af\u16ad\3\2\2\2\u16af\u16ae\3\2\2\2\u16b0\u16b2\3\2"+
		"\2\2\u16b1\u16b3\5\u0338\u019d\2\u16b2\u16b1\3\2\2\2\u16b2\u16b3\3\2\2"+
		"\2\u16b3\u16b8\3\2\2\2\u16b4\u16b5\7\u0324\2\2\u16b5\u16b6\5\u0378\u01bd"+
		"\2\u16b6\u16b7\7\u0325\2\2\u16b7\u16b9\3\2\2\2\u16b8\u16b4\3\2\2\2\u16b8"+
		"\u16b9\3\2\2\2\u16b9\u16bb\3\2\2\2\u16ba\u16bc\5\u01c0\u00e1\2\u16bb\u16ba"+
		"\3\2\2\2\u16bb\u16bc\3\2\2\2\u16bc\u16bd\3\2\2\2\u16bd\u16bf\5\u01b6\u00dc"+
		"\2\u16be\u16c0\5\u02e2\u0172\2\u16bf\u16be\3\2\2\2\u16bf\u16c0\3\2\2\2"+
		"\u16c0\u16c2\3\2\2\2\u16c1\u16c3\5\u02ea\u0176\2\u16c2\u16c1\3\2\2\2\u16c2"+
		"\u16c3\3\2\2\2\u16c3\u16c5\3\2\2\2\u16c4\u16c6\7\u0327\2\2\u16c5\u16c4"+
		"\3\2\2\2\u16c5\u16c6\3\2\2\2\u16c6\u01b5\3\2\2\2\u16c7\u16cd\5\u0342\u01a2"+
		"\2\u16c8\u16cd\5\u031c\u018f\2\u16c9\u16cd\5\u0260\u0131\2\u16ca\u16cb"+
		"\7Y\2\2\u16cb\u16cd\7\u0171\2\2\u16cc\u16c7\3\2\2\2\u16cc\u16c8\3\2\2"+
		"\2\u16cc\u16c9\3\2\2\2\u16cc\u16ca\3\2\2\2\u16cd\u01b7\3\2\2\2\u16ce\u16d0"+
		"\7\u0324\2\2\u16cf\u16ce\3\2\2\2\u16cf\u16d0\3\2\2\2\u16d0\u16d1\3\2\2"+
		"\2\u16d1\u16d6\7\u029a\2\2\u16d2\u16d7\7\5\2\2\u16d3\u16d7\7b\2\2\u16d4"+
		"\u16d7\5\u02da\u016e\2\u16d5\u16d7\7\u0329\2\2\u16d6\u16d2\3\2\2\2\u16d6"+
		"\u16d3\3\2\2\2\u16d6\u16d4\3\2\2\2\u16d6\u16d5\3\2\2\2\u16d7\u16e0\3\2"+
		"\2\2\u16d8\u16d9\7\u030a\2\2\u16d9\u16da\7\u0313\2\2\u16da\u16dc\5\u02b6"+
		"\u015c\2\u16db\u16dd\7\u0326\2\2\u16dc\u16db\3\2\2\2\u16dc\u16dd\3\2\2"+
		"\2\u16dd\u16df\3\2\2\2\u16de\u16d8\3\2\2\2\u16df\u16e2\3\2\2\2\u16e0\u16de"+
		"\3\2\2\2\u16e0\u16e1\3\2\2\2\u16e1\u16e3\3\2\2\2\u16e2\u16e0\3\2\2\2\u16e3"+
		"\u16e4\7\u008b\2\2\u16e4\u16ea\5\u036a\u01b6\2\u16e5\u16e6\7\u00a4\2\2"+
		"\u16e6\u16e7\5\u03a0\u01d1\2\u16e7\u16e8\7\u0178\2\2\u16e8\u16e9\5\u02cc"+
		"\u0167\2\u16e9\u16eb\3\2\2\2\u16ea\u16e5\3\2\2\2\u16ea\u16eb\3\2\2\2\u16eb"+
		"\u16ed\3\2\2\2\u16ec\u16ee\7\u0325\2\2\u16ed\u16ec\3\2\2\2\u16ed\u16ee"+
		"\3\2\2\2\u16ee\u01b9\3\2\2\2\u16ef\u16f1\5\u02c4\u0163\2\u16f0\u16ef\3"+
		"\2\2\2\u16f0\u16f1\3\2\2\2\u16f1\u16f2\3\2\2\2\u16f2\u16f4\5\u02d4\u016b"+
		"\2\u16f3\u16f5\5\u02e0\u0171\2\u16f4\u16f3\3\2\2\2\u16f4\u16f5\3\2\2\2"+
		"\u16f5\u16f7\3\2\2\2\u16f6\u16f8\5\u02e2\u0172\2\u16f7\u16f6\3\2\2\2\u16f7"+
		"\u16f8\3\2\2\2\u16f8\u16fa\3\2\2\2\u16f9\u16fb\5\u02ea\u0176\2\u16fa\u16f9"+
		"\3\2\2\2\u16fa\u16fb\3\2\2\2\u16fb\u16fd\3\2\2\2\u16fc\u16fe\7\u0327\2"+
		"\2\u16fd\u16fc\3\2\2\2\u16fd\u16fe\3\2\2\2\u16fe\u01bb\3\2\2\2\u16ff\u1702"+
		"\7\u030a\2\2\u1700\u1702\5\u039c\u01cf\2\u1701\u16ff\3\2\2\2\u1701\u1700"+
		"\3\2\2\2\u1702\u01bd\3\2\2\2\u1703\u1705\5\u02c4\u0163\2\u1704\u1703\3"+
		"\2\2\2\u1704\u1705\3\2\2\2\u1705\u1706\3\2\2\2\u1706\u170e\7\u016b\2\2"+
		"\u1707\u1708\7\u015d\2\2\u1708\u1709\7\u0324\2\2\u1709\u170a\5\u02b6\u015c"+
		"\2\u170a\u170c\7\u0325\2\2\u170b\u170d\7\u00f4\2\2\u170c\u170b\3\2\2\2"+
		"\u170c\u170d\3\2\2\2\u170d\u170f\3\2\2\2\u170e\u1707\3\2\2\2\u170e\u170f"+
		"\3\2\2\2\u170f\u1712\3\2\2\2\u1710\u1713\5\u0372\u01ba\2\u1711\u1713\5"+
		"\u0256\u012c\2\u1712\u1710\3\2\2\2\u1712\u1711\3\2\2\2\u1713\u1715\3\2"+
		"\2\2\u1714\u1716\5\u0336\u019c\2\u1715\u1714\3\2\2\2\u1715\u1716\3\2\2"+
		"\2\u1716\u1717\3\2\2\2\u1717\u1718\7\u013c\2\2\u1718\u171d\5\u02c8\u0165"+
		"\2\u1719\u171a\7\u0326\2\2\u171a\u171c\5\u02c8\u0165\2\u171b\u1719\3\2"+
		"\2\2\u171c\u171f\3\2\2\2\u171d\u171b\3\2\2\2\u171d\u171e\3\2\2\2\u171e"+
		"\u1721\3\2\2\2\u171f\u171d\3\2\2\2\u1720\u1722\5\u01c0\u00e1\2\u1721\u1720"+
		"\3\2\2\2\u1721\u1722\3\2\2\2\u1722\u1725\3\2\2\2\u1723\u1724\7\u008b\2"+
		"\2\u1724\u1726\5\u02fe\u0180\2\u1725\u1723\3\2\2\2\u1725\u1726\3\2\2\2"+
		"\u1726\u1734\3\2\2\2\u1727\u1732\7\u0178\2\2\u1728\u1733\5\u02ca\u0166"+
		"\2\u1729\u172a\7J\2\2\u172a\u1730\7\u00e0\2\2\u172b\u172d\7\u020c\2\2"+
		"\u172c\u172b\3\2\2\2\u172c\u172d\3\2\2\2\u172d\u172e\3\2\2\2\u172e\u1731"+
		"\5\u037a\u01be\2\u172f\u1731\7\u030a\2\2\u1730\u172c\3\2\2\2\u1730\u172f"+
		"\3\2\2\2\u1731\u1733\3\2\2\2\u1732\u1728\3\2\2\2\u1732\u1729\3\2\2\2\u1733"+
		"\u1735\3\2\2\2\u1734\u1727\3\2\2\2\u1734\u1735\3\2\2\2\u1735\u1737\3\2"+
		"\2\2\u1736\u1738\5\u02e2\u0172\2\u1737\u1736\3\2\2\2\u1737\u1738\3\2\2"+
		"\2\u1738\u173a\3\2\2\2\u1739\u173b\5\u02ea\u0176\2\u173a\u1739\3\2\2\2"+
		"\u173a\u173b\3\2\2\2\u173b\u173d\3\2\2\2\u173c\u173e\7\u0327\2\2\u173d"+
		"\u173c\3\2\2\2\u173d\u173e\3\2\2\2\u173e\u01bf\3\2\2\2\u173f\u1740\7\u0273"+
		"\2\2\u1740\u1745\5\u01c2\u00e2\2\u1741\u1742\7\u0326\2\2\u1742\u1744\5"+
		"\u01c2\u00e2\2\u1743\u1741\3\2\2\2\u1744\u1747\3\2\2\2\u1745\u1743\3\2"+
		"\2\2\u1745\u1746\3\2\2\2\u1746\u1753\3\2\2\2\u1747\u1745\3\2\2\2\u1748"+
		"\u174b\7\u00a4\2\2\u1749\u174c\7\u030a\2\2\u174a\u174c\5\u036c\u01b7\2"+
		"\u174b\u1749\3\2\2\2\u174b\u174a\3\2\2\2\u174c\u1751\3\2\2\2\u174d\u174e"+
		"\7\u0324\2\2\u174e\u174f\5\u0378\u01bd\2\u174f\u1750\7\u0325\2\2\u1750"+
		"\u1752\3\2\2\2\u1751\u174d\3\2\2\2\u1751\u1752\3\2\2\2\u1752\u1754\3\2"+
		"\2\2\u1753\u1748\3\2\2\2\u1753\u1754\3\2\2\2\u1754\u01c1\3\2\2\2\u1755"+
		"\u1758\5\u01c4\u00e3\2\u1756\u1758\5\u02b6\u015c\2\u1757\u1755\3\2\2\2"+
		"\u1757\u1756\3\2\2\2\u1758\u175a\3\2\2\2\u1759\u175b\5\u0330\u0199\2\u175a"+
		"\u1759\3\2\2\2\u175a\u175b\3\2\2\2\u175b\u01c3\3\2\2\2\u175c\u1760\7\u01d8"+
		"\2\2\u175d\u1760\7\u0220\2\2\u175e\u1760\5\u036c\u01b7\2\u175f\u175c\3"+
		"\2\2\2\u175f\u175d\3\2\2\2\u175f\u175e\3\2\2\2\u1760\u1761\3\2\2\2\u1761"+
		"\u1764\7\u031f\2\2\u1762\u1765\7\u0329\2\2\u1763\u1765\5\u03a0\u01d1\2"+
		"\u1764\u1762\3\2\2\2\u1764\u1763\3\2\2\2\u1765\u1768\3\2\2\2\u1766\u1768"+
		"\7\u0303\2\2\u1767\u175f\3\2\2\2\u1767\u1766\3\2\2\2\u1768\u01c5\3\2\2"+
		"\2\u1769\u176a\7H\2\2\u176a\u176b\7T\2\2\u176b\u176f\5\u03a0\u01d1\2\u176c"+
		"\u176d\7=\2\2\u176d\u176e\7\u0313\2\2\u176e\u1770\t\65\2\2\u176f\u176c"+
		"\3\2\2\2\u176f\u1770\3\2\2\2\u1770\u177d\3\2\2\2\u1771\u1773\7\u00e4\2"+
		"\2\u1772\u1774\7\u00ff\2\2\u1773\u1772\3\2\2\2\u1773\u1774\3\2\2\2\u1774"+
		"\u1775\3\2\2\2\u1775\u177a\5\u035e\u01b0\2\u1776\u1777\7\u0326\2\2\u1777"+
		"\u1779\5\u035e\u01b0\2\u1778\u1776\3\2\2\2\u1779\u177c\3\2\2\2\u177a\u1778"+
		"\3\2\2\2\u177a\u177b\3\2\2\2\u177b\u177e\3\2\2\2\u177c\u177a\3\2\2\2\u177d"+
		"\u1771\3\2\2\2\u177d\u177e\3\2\2\2\u177e\u1789\3\2\2\2\u177f\u1780\7\u00ba"+
		"\2\2\u1780\u1781\7\u00e4\2\2\u1781\u1786\5\u035e\u01b0\2\u1782\u1783\7"+
		"\u0326\2\2\u1783\u1785\5\u035e\u01b0\2\u1784\u1782\3\2\2\2\u1785\u1788"+
		"\3\2\2\2\u1786\u1784\3\2\2\2\u1786\u1787\3\2\2\2\u1787\u178a\3\2\2\2\u1788"+
		"\u1786\3\2\2\2\u1789\u177f\3\2\2\2\u1789\u178a\3\2\2\2\u178a\u178d\3\2"+
		"\2\2\u178b\u178c\7\66\2\2\u178c\u178e\5\u03a0\u01d1\2\u178d\u178b\3\2"+
		"\2\2\u178d\u178e\3\2\2\2\u178e\u1798\3\2\2\2\u178f\u1790\7\u017b\2\2\u1790"+
		"\u1795\5\u035a\u01ae\2\u1791\u1792\7\u0326\2\2\u1792\u1794\5\u035a\u01ae"+
		"\2\u1793\u1791\3\2\2\2\u1794\u1797\3\2\2\2\u1795\u1793\3\2\2\2\u1795\u1796"+
		"\3\2\2\2\u1796\u1799\3\2\2\2\u1797\u1795\3\2\2\2\u1798\u178f\3\2\2\2\u1798"+
		"\u1799\3\2\2\2\u1799\u01c7\3\2\2\2\u179a\u179c\7H\2\2\u179b\u179d\7\u0167"+
		"\2\2\u179c\u179b\3\2\2\2\u179c\u179d\3\2\2\2\u179d\u179f\3\2\2\2\u179e"+
		"\u17a0\5\u037e\u01c0\2\u179f\u179e\3\2\2\2\u179f\u17a0\3\2\2\2\u17a0\u17a1"+
		"\3\2\2\2\u17a1\u17a2\7\u009d\2\2\u17a2\u17a3\5\u03a0\u01d1\2\u17a3\u17a4"+
		"\7\u00e4\2\2\u17a4\u17a5\5\u0316\u018c\2\u17a5\u17a6\7\u0324\2\2\u17a6"+
		"\u17a7\5\u0376\u01bc\2\u17a7\u17ad\7\u0325\2\2\u17a8\u17a9\7\u009b\2\2"+
		"\u17a9\u17aa\7\u0324\2\2\u17aa\u17ab\5\u0378\u01bd\2\u17ab\u17ac\7\u0325"+
		"\2\2\u17ac\u17ae\3\2\2\2\u17ad\u17a8\3\2\2\2\u17ad\u17ae\3\2\2\2\u17ae"+
		"\u17b1\3\2\2\2\u17af\u17b0\7\u0178\2\2\u17b0\u17b2\5\u02cc\u0167\2\u17b1"+
		"\u17af\3\2\2\2\u17b1\u17b2\3\2\2\2\u17b2\u17b4\3\2\2\2\u17b3\u17b5\5\u02a6"+
		"\u0154\2\u17b4\u17b3\3\2\2\2\u17b4\u17b5\3\2\2\2\u17b5\u17b8\3\2\2\2\u17b6"+
		"\u17b7\7\u00e4\2\2\u17b7\u17b9\5\u03a0\u01d1\2\u17b8\u17b6\3\2\2\2\u17b8"+
		"\u17b9\3\2\2\2\u17b9\u17bb\3\2\2\2\u17ba\u17bc\7\u0327\2\2\u17bb\u17ba"+
		"\3\2\2\2\u17bb\u17bc\3\2\2\2\u17bc\u01c9\3\2\2\2\u17bd\u17c0\7H\2\2\u17be"+
		"\u17bf\7\u00ec\2\2\u17bf\u17c1\7\t\2\2\u17c0\u17be\3\2\2\2\u17c0\u17c1"+
		"\3\2\2\2\u17c1\u17c4\3\2\2\2\u17c2\u17c4\7\t\2\2\u17c3\u17bd\3\2\2\2\u17c3"+
		"\u17c2\3\2\2\2\u17c4\u17c5\3\2\2\2\u17c5\u17c6\t\66\2\2\u17c6\u17c9\5"+
		"\u0370\u01b9\2\u17c7\u17c8\7\u0327\2\2\u17c8\u17ca\7\u030b\2\2\u17c9\u17c7"+
		"\3\2\2\2\u17c9\u17ca\3\2\2\2\u17ca\u17d9\3\2\2\2\u17cb\u17cd\7\u0324\2"+
		"\2\u17cc\u17cb\3\2\2\2\u17cc\u17cd\3\2\2\2\u17cd\u17ce\3\2\2\2\u17ce\u17d3"+
		"\5\u01e0\u00f1\2\u17cf\u17d0\7\u0326\2\2\u17d0\u17d2\5\u01e0\u00f1\2\u17d1"+
		"\u17cf\3\2\2\2\u17d2\u17d5\3\2\2\2\u17d3\u17d1\3\2\2\2\u17d3\u17d4\3\2"+
		"\2\2\u17d4\u17d7\3\2\2\2\u17d5\u17d3\3\2\2\2\u17d6\u17d8\7\u0325\2\2\u17d7"+
		"\u17d6\3\2\2\2\u17d7\u17d8\3\2\2\2\u17d8\u17da\3\2\2\2\u17d9\u17cc\3\2"+
		"\2\2\u17d9\u17da\3\2\2\2\u17da\u17e4\3\2\2\2\u17db\u17dc\7\u017b\2\2\u17dc"+
		"\u17e1\5\u01e2\u00f2\2\u17dd\u17de\7\u0326\2\2\u17de\u17e0\5\u01e2\u00f2"+
		"\2\u17df\u17dd\3\2\2\2\u17e0\u17e3\3\2\2\2\u17e1\u17df\3\2\2\2\u17e1\u17e2"+
		"\3\2\2\2\u17e2\u17e5\3\2\2\2\u17e3\u17e1\3\2\2\2\u17e4\u17db\3\2\2\2\u17e4"+
		"\u17e5\3\2\2\2\u17e5\u17e8\3\2\2\2\u17e6\u17e7\7\u0085\2\2\u17e7\u17e9"+
		"\7\u0111\2\2\u17e8\u17e6\3\2\2\2\u17e8\u17e9\3\2\2\2\u17e9\u17ea\3\2\2"+
		"\2\u17ea\u17eb\7\17\2\2\u17eb\u17ec\5\6\4\2\u17ec\u01cb\3\2\2\2\u17ed"+
		"\u17f0\5\u01ce\u00e8\2\u17ee\u17f0\5\u01d4\u00eb\2\u17ef\u17ed\3\2\2\2"+
		"\u17ef\u17ee\3\2\2\2\u17f0\u01cd\3\2\2\2\u17f1\u17f4\7H\2\2\u17f2\u17f3"+
		"\7\u00ec\2\2\u17f3\u17f5\7\t\2\2\u17f4\u17f2\3\2\2\2\u17f4\u17f5\3\2\2"+
		"\2\u17f5\u17f8\3\2\2\2\u17f6\u17f8\7\t\2\2\u17f7\u17f1\3\2\2\2\u17f7\u17f6"+
		"\3\2\2\2\u17f8\u17f9\3\2\2\2\u17f9\u17fa\7\u0162\2\2\u17fa\u17fb\5\u036e"+
		"\u01b8\2\u17fb\u17fc\7\u00e4\2\2\u17fc\u1806\5\u036c\u01b7\2\u17fd\u17fe"+
		"\7\u017b\2\2\u17fe\u1803\5\u01d0\u00e9\2\u17ff\u1800\7\u0326\2\2\u1800"+
		"\u1802\5\u01d0\u00e9\2\u1801\u17ff\3\2\2\2\u1802\u1805\3\2\2\2\u1803\u1801"+
		"\3\2\2\2\u1803\u1804\3\2\2\2\u1804\u1807\3\2\2\2\u1805\u1803\3\2\2\2\u1806"+
		"\u17fd\3\2\2\2\u1806\u1807\3\2\2\2\u1807\u180c\3\2\2\2\u1808\u180d\7\u0085"+
		"\2\2\u1809\u180d\7\u018a\2\2\u180a\u180b\7\u00a2\2\2\u180b\u180d\7\u00e0"+
		"\2\2\u180c\u1808\3\2\2\2\u180c\u1809\3\2\2\2\u180c\u180a\3\2\2\2\u180d"+
		"\u180e\3\2\2\2\u180e\u1813\5\u01d2\u00ea\2\u180f\u1810\7\u0326\2\2\u1810"+
		"\u1812\5\u01d2\u00ea\2\u1811\u180f\3\2\2\2\u1812\u1815\3\2\2\2\u1813\u1811"+
		"\3\2\2\2\u1813\u1814\3\2\2\2\u1814\u1818\3\2\2\2\u1815\u1813\3\2\2\2\u1816"+
		"\u1817\7\u017b\2\2\u1817\u1819\7\r\2\2\u1818\u1816\3\2\2\2\u1818\u1819"+
		"\3\2\2\2\u1819\u181d\3\2\2\2\u181a\u181b\7\u00db\2\2\u181b\u181c\7\u0085"+
		"\2\2\u181c\u181e\7\u0111\2\2\u181d\u181a\3\2\2\2\u181d\u181e\3\2\2\2\u181e"+
		"\u181f\3\2\2\2\u181f\u1820\7\17\2\2\u1820\u1821\5\6\4\2\u1821\u01cf\3"+
		"\2\2\2\u1822\u1825\7\u01ec\2\2\u1823\u1825\5\u028e\u0148\2\u1824\u1822"+
		"\3\2\2\2\u1824\u1823\3\2\2\2\u1825\u01d1\3\2\2\2\u1826\u1827\t\67\2\2"+
		"\u1827\u01d3\3\2\2\2\u1828\u182b\7H\2\2\u1829\u182a\7\u00ec\2\2\u182a"+
		"\u182c\7\t\2\2\u182b\u1829\3\2\2\2\u182b\u182c\3\2\2\2\u182c\u182f\3\2"+
		"\2\2\u182d\u182f\7\t\2\2\u182e\u1828\3\2\2\2\u182e\u182d\3\2\2\2\u182f"+
		"\u1830\3\2\2\2\u1830\u1831\7\u0162\2\2\u1831\u1832\5\u036e\u01b8\2\u1832"+
		"\u1836\7\u00e4\2\2\u1833\u1834\7\5\2\2\u1834\u1837\7\u0136\2\2\u1835\u1837"+
		"\7T\2\2\u1836\u1833\3\2\2\2\u1836\u1835\3\2\2\2\u1837\u1841\3\2\2\2\u1838"+
		"\u1839\7\u017b\2\2\u1839\u183e\5\u01d0\u00e9\2\u183a\u183b\7\u0326\2\2"+
		"\u183b\u183d\5\u01d0\u00e9\2\u183c\u183a\3\2\2\2\u183d\u1840\3\2\2\2\u183e"+
		"\u183c\3\2\2\2\u183e\u183f\3\2\2\2\u183f\u1842\3\2\2\2\u1840\u183e\3\2"+
		"\2\2\u1841\u1838\3\2\2\2\u1841\u1842\3\2\2\2\u1842\u1843\3\2\2\2\u1843"+
		"\u1844\t8\2\2\u1844\u1849\5\u01d6\u00ec\2\u1845\u1846\7\u0326\2\2\u1846"+
		"\u1848\5\u01d2\u00ea\2\u1847\u1845\3\2\2\2\u1848\u184b\3\2\2\2\u1849\u1847"+
		"\3\2\2\2\u1849\u184a\3\2\2\2\u184a\u184c\3\2\2\2\u184b\u1849\3\2\2\2\u184c"+
		"\u184d\7\17\2\2\u184d\u184e\5\6\4\2\u184e\u01d5\3\2\2\2\u184f\u1850\5"+
		"\u03a2\u01d2\2\u1850\u01d7\3\2\2\2\u1851\u1854\7H\2\2\u1852\u1853\7\u00ec"+
		"\2\2\u1853\u1855\7\t\2\2\u1854\u1852\3\2\2\2\u1854\u1855\3\2\2\2\u1855"+
		"\u1858\3\2\2\2\u1856\u1858\7\t\2\2\u1857\u1851\3\2\2\2\u1857\u1856\3\2"+
		"\2\2\u1858\u1859\3\2\2\2\u1859\u185a\7\u008d\2\2\u185a\u1868\5\u0370\u01b9"+
		"\2\u185b\u185c\7\u0324\2\2\u185c\u1861\5\u01e0\u00f1\2\u185d\u185e\7\u0326"+
		"\2\2\u185e\u1860\5\u01e0\u00f1\2\u185f\u185d\3\2\2\2\u1860\u1863\3\2\2"+
		"\2\u1861\u185f\3\2\2\2\u1861\u1862\3\2\2\2\u1862\u1864\3\2\2\2\u1863\u1861"+
		"\3\2\2\2\u1864\u1865\7\u0325\2\2\u1865\u1869\3\2\2\2\u1866\u1867\7\u0324"+
		"\2\2\u1867\u1869\7\u0325\2\2\u1868\u185b\3\2\2\2\u1868\u1866\3\2\2\2\u1869"+
		"\u186d\3\2\2\2\u186a\u186e\5\u01da\u00ee\2\u186b\u186e\5\u01dc\u00ef\2"+
		"\u186c\u186e\5\u01de\u00f0\2\u186d\u186a\3\2\2\2\u186d\u186b\3\2\2\2\u186d"+
		"\u186c\3\2\2\2\u186e\u1870\3\2\2\2\u186f\u1871\7\u0327\2\2\u1870\u186f"+
		"\3\2\2\2\u1870\u1871\3\2\2\2\u1871\u01d9\3\2\2\2\u1872\u1873\7\u011a\2"+
		"\2\u1873\u187d\7\u0155\2\2\u1874\u1875\7\u017b\2\2\u1875\u187a\5\u01e4"+
		"\u00f3\2\u1876\u1877\7\u0326\2\2\u1877\u1879\5\u01e4\u00f3\2\u1878\u1876"+
		"\3\2\2\2\u1879\u187c\3\2\2\2\u187a\u1878\3\2\2\2\u187a\u187b\3\2\2\2\u187b"+
		"\u187e\3\2\2\2\u187c\u187a\3\2\2\2\u187d\u1874\3\2\2\2\u187d\u187e\3\2"+
		"\2\2\u187e\u1880\3\2\2\2\u187f\u1881\7\17\2\2\u1880\u187f\3\2\2\2\u1880"+
		"\u1881\3\2\2\2\u1881\u1882\3\2\2\2\u1882\u1883\7\u0119\2\2\u1883\u1884"+
		"\5\u01ba\u00de\2\u1884\u01db\3\2\2\2\u1885\u1886\7\u011a\2\2\u1886\u1887"+
		"\7\u030a\2\2\u1887\u1891\5\u0292\u014a\2\u1888\u1889\7\u017b\2\2\u1889"+
		"\u188e\5\u01e4\u00f3\2\u188a\u188b\7\u0326\2\2\u188b\u188d\5\u01e4\u00f3"+
		"\2\u188c\u188a\3\2\2\2\u188d\u1890\3\2\2\2\u188e\u188c\3\2\2\2\u188e\u188f"+
		"\3\2\2\2\u188f\u1892\3\2\2\2\u1890\u188e\3\2\2\2\u1891\u1888\3\2\2\2\u1891"+
		"\u1892\3\2\2\2\u1892\u1894\3\2\2\2\u1893\u1895\7\17\2\2\u1894\u1893\3"+
		"\2\2\2\u1894\u1895\3\2\2\2\u1895\u1896\3\2\2\2\u1896\u189a\7\33\2\2\u1897"+
		"\u1899\5\b\5\2\u1898\u1897\3\2\2\2\u1899\u189c\3\2\2\2\u189a\u1898\3\2"+
		"\2\2\u189a\u189b\3\2\2\2\u189b\u189d\3\2\2\2\u189c\u189a\3\2\2\2\u189d"+
		"\u189e\7\u0119\2\2\u189e\u189f\7l\2\2\u189f\u01dd\3\2\2\2\u18a0\u18a1"+
		"\7\u011a\2\2\u18a1\u18ab\5\u0398\u01cd\2\u18a2\u18a3\7\u017b\2\2\u18a3"+
		"\u18a8\5\u01e4\u00f3\2\u18a4\u18a5\7\u0326\2\2\u18a5\u18a7\5\u01e4\u00f3"+
		"\2\u18a6\u18a4\3\2\2\2\u18a7\u18aa\3\2\2\2\u18a8\u18a6\3\2\2\2\u18a8\u18a9"+
		"\3\2\2\2\u18a9\u18ac\3\2\2\2\u18aa\u18a8\3\2\2\2\u18ab\u18a2\3\2\2\2\u18ab"+
		"\u18ac\3\2\2\2\u18ac\u18ae\3\2\2\2\u18ad\u18af\7\17\2\2\u18ae\u18ad\3"+
		"\2\2\2\u18ae\u18af\3\2\2\2\u18af\u18b0\3\2\2\2\u18b0\u18b4\7\33\2\2\u18b1"+
		"\u18b3\5\b\5\2\u18b2\u18b1\3\2\2\2\u18b3\u18b6\3\2\2\2\u18b4\u18b2\3\2"+
		"\2\2\u18b4\u18b5\3\2\2\2\u18b5\u18b7\3\2\2\2\u18b6\u18b4\3\2\2\2\u18b7"+
		"\u18b8\7\u0119\2\2\u18b8\u18ba\5\u02b6\u015c\2\u18b9\u18bb\7\u0327\2\2"+
		"\u18ba\u18b9\3\2\2\2\u18ba\u18bb\3\2\2\2\u18bb\u18bc\3\2\2\2\u18bc\u18bd"+
		"\7l\2\2\u18bd\u01df\3\2\2\2\u18be\u18c2\7\u030a\2\2\u18bf\u18c0\5\u03a0"+
		"\u01d1\2\u18c0\u18c1\7\u031f\2\2\u18c1\u18c3\3\2\2\2\u18c2\u18bf\3\2\2"+
		"\2\u18c2\u18c3\3\2\2\2\u18c3\u18c5\3\2\2\2\u18c4\u18c6\7\17\2\2\u18c5"+
		"\u18c4\3\2\2\2\u18c5\u18c6\3\2\2\2\u18c6\u18c7\3\2\2\2\u18c7\u18c9\5\u0398"+
		"\u01cd\2\u18c8\u18ca\7\u0172\2\2\u18c9\u18c8\3\2\2\2\u18c9\u18ca\3\2\2"+
		"\2\u18ca\u18cd\3\2\2\2\u18cb\u18cc\7\u0313\2\2\u18cc\u18ce\5\u039a\u01ce"+
		"\2\u18cd\u18cb\3\2\2\2\u18cd\u18ce\3\2\2\2\u18ce\u18d0\3\2\2\2\u18cf\u18d1"+
		"\t9\2\2\u18d0\u18cf\3\2\2\2\u18d0\u18d1\3\2\2\2\u18d1\u01e1\3\2\2\2\u18d2"+
		"\u18d6\7\u01ec\2\2\u18d3\u18d6\7\u0299\2\2\u18d4\u18d6\5\u028e\u0148\2"+
		"\u18d5\u18d2\3\2\2\2\u18d5\u18d3\3\2\2\2\u18d5\u18d4\3\2\2\2\u18d6\u01e3"+
		"\3\2\2\2\u18d7\u18e4\7\u01ec\2\2\u18d8\u18e4\7\u02b5\2\2\u18d9\u18da\7"+
		"\u011a\2\2\u18da\u18db\7\u00de\2\2\u18db\u18dc\7\u00e4\2\2\u18dc\u18dd"+
		"\7\u00de\2\2\u18dd\u18e4\7\u021e\2\2\u18de\u18df\7\'\2\2\u18df\u18e0\7"+
		"\u00e4\2\2\u18e0\u18e1\7\u00de\2\2\u18e1\u18e4\7\u021e\2\2\u18e2\u18e4"+
		"\5\u028e\u0148\2\u18e3\u18d7\3\2\2\2\u18e3\u18d8\3\2\2\2\u18e3\u18d9\3"+
		"\2\2\2\u18e3\u18de\3\2\2\2\u18e3\u18e2\3\2\2\2\u18e4\u01e5\3\2\2\2\u18e5"+
		"\u18e6\7H\2\2\u18e6\u18e7\7\u0149\2\2\u18e7\u18e8\5\u03a0\u01d1\2\u18e8"+
		"\u18e9\7\u00e4\2\2\u18e9\u18ea\5\u0316\u018c\2\u18ea\u18eb\7\u0324\2\2"+
		"\u18eb\u18ec\5\u0378\u01bd\2\u18ec\u18ff\7\u0325\2\2\u18ed\u18f3\7\u017b"+
		"\2\2\u18ee\u18f4\7\u0207";
	private static final String _serializedATNSegment3 =
		"\2\2\u18ef\u18f0\7\u02b4\2\2\u18f0\u18f1\7\u030b\2\2\u18f1\u18f4\t:\2"+
		"\2\u18f2\u18f4\7\u02d1\2\2\u18f3\u18ee\3\2\2\2\u18f3\u18ef\3\2\2\2\u18f3"+
		"\u18f2\3\2\2\2\u18f4\u18f7\3\2\2\2\u18f5\u18f6\7\u0326\2\2\u18f6\u18f8"+
		"\7\u0260\2\2\u18f7\u18f5\3\2\2\2\u18f7\u18f8\3\2\2\2\u18f8\u18fd\3\2\2"+
		"\2\u18f9\u18fa\7\u0326\2\2\u18fa\u18fb\7\u021c\2\2\u18fb\u18fc\7\u0313"+
		"\2\2\u18fc\u18fe\5\u037c\u01bf\2\u18fd\u18f9\3\2\2\2\u18fd\u18fe\3\2\2"+
		"\2\u18fe\u1900\3\2\2\2\u18ff\u18ed\3\2\2\2\u18ff\u1900\3\2\2\2\u1900\u1902"+
		"\3\2\2\2\u1901\u1903\7\u0327\2\2\u1902\u1901\3\2\2\2\u1902\u1903\3\2\2"+
		"\2\u1903\u01e7\3\2\2\2\u1904\u1905\7H\2\2\u1905\u1906\7\u0155\2\2\u1906"+
		"\u1907\5\u036c\u01b7\2\u1907\u1908\7\u0324\2\2\u1908\u190a\5\u0298\u014d"+
		"\2\u1909\u190b\7\u0326\2\2\u190a\u1909\3\2\2\2\u190a\u190b\3\2\2\2\u190b"+
		"\u190c\3\2\2\2\u190c\u1910\7\u0325\2\2\u190d\u190f\5\u01ea\u00f6\2\u190e"+
		"\u190d\3\2\2\2\u190f\u1912\3\2\2\2\u1910\u190e\3\2\2\2\u1910\u1911\3\2"+
		"\2\2\u1911\u1916\3\2\2\2\u1912\u1910\3\2\2\2\u1913\u1914\7\u00e4\2\2\u1914"+
		"\u1917\5\u03a0\u01d1\2\u1915\u1917\7Y\2\2\u1916\u1913\3\2\2\2\u1916\u1915"+
		"\3\2\2\2\u1916\u1917\3\2\2\2\u1917\u191b\3\2\2\2\u1918\u1919\7\u02e1\2"+
		"\2\u1919\u191c\5\u03a0\u01d1\2\u191a\u191c\7Y\2\2\u191b\u1918\3\2\2\2"+
		"\u191b\u191a\3\2\2\2\u191b\u191c\3\2\2\2\u191c\u191e\3\2\2\2\u191d\u191f"+
		"\7\u0327\2\2\u191e\u191d\3\2\2\2\u191e\u191f\3\2\2\2\u191f\u01e9\3\2\2"+
		"\2\u1920\u1921\7\u017b\2\2\u1921\u1922\7\u0324\2\2\u1922\u1927\5\u02a8"+
		"\u0155\2\u1923\u1924\7\u0326\2\2\u1924\u1926\5\u02a8\u0155\2\u1925\u1923"+
		"\3\2\2\2\u1926\u1929\3\2\2\2\u1927\u1925\3\2\2\2\u1927\u1928\3\2\2\2\u1928"+
		"\u192a\3\2\2\2\u1929\u1927\3\2\2\2\u192a\u192b\7\u0325\2\2\u192b\u01eb"+
		"\3\2\2\2\u192c\u192d\7H\2\2\u192d\u192e\7\u0174\2\2\u192e\u1933\5\u036e"+
		"\u01b8\2\u192f\u1930\7\u0324\2\2\u1930\u1931\5\u0378\u01bd\2\u1931\u1932"+
		"\7\u0325\2\2\u1932\u1934\3\2\2\2\u1933\u192f\3\2\2\2\u1933\u1934\3\2\2"+
		"\2\u1934\u193e\3\2\2\2\u1935\u1936\7\u017b\2\2\u1936\u193b\5\u01ee\u00f8"+
		"\2\u1937\u1938\7\u0326\2\2\u1938\u193a\5\u01ee\u00f8\2\u1939\u1937\3\2"+
		"\2\2\u193a\u193d\3\2\2\2\u193b\u1939\3\2\2\2\u193b\u193c\3\2\2\2\u193c"+
		"\u193f\3\2\2\2\u193d\u193b\3\2\2\2\u193e\u1935\3\2\2\2\u193e\u193f\3\2"+
		"\2\2\u193f\u1940\3\2\2\2\u1940\u1941\7\17\2\2\u1941\u1945\5\u01ba\u00de"+
		"\2\u1942\u1943\7\u017b\2\2\u1943\u1944\7-\2\2\u1944\u1946\7\u00eb\2\2"+
		"\u1945\u1942\3\2\2\2\u1945\u1946\3\2\2\2\u1946\u1948\3\2\2\2\u1947\u1949"+
		"\7\u0327\2\2\u1948\u1947\3\2\2\2\u1948\u1949\3\2\2\2\u1949\u01ed\3\2\2"+
		"\2\u194a\u194b\t;\2\2\u194b\u01ef\3\2\2\2\u194c\u194d\7\t\2\2\u194d\u194e"+
		"\7\u0155\2\2\u194e\u1975\5\u036c\u01b7\2\u194f\u1950\7\u013c\2\2\u1950"+
		"\u1951\7\u0324\2\2\u1951\u1952\7\u0235\2\2\u1952\u1953\7\u0313\2\2\u1953"+
		"\u1954\t<\2\2\u1954\u1976\7\u0325\2\2\u1955\u1956\7\3\2\2\u1956\u1976"+
		"\5\u029a\u014e\2\u1957\u1958\7\t\2\2\u1958\u1959\7\67\2\2\u1959\u1976"+
		"\5\u029c\u014f\2\u195a\u195b\7g\2\2\u195b\u195c\7\67\2\2\u195c\u1976\5"+
		"\u03a0\u01d1\2\u195d\u195e\7g\2\2\u195e\u195f\7<\2\2\u195f\u1976\5\u03a0"+
		"\u01d1\2\u1960\u1961\7\u017b\2\2\u1961\u1962\7-\2\2\u1962\u1963\7\3\2"+
		"\2\u1963\u1964\7<\2\2\u1964\u1965\5\u03a0\u01d1\2\u1965\u1966\7\u0088"+
		"\2\2\u1966\u1967\7\u00ab\2\2\u1967\u1968\7\u0324\2\2\u1968\u1969\5\u0378"+
		"\u01bd\2\u1969\u196a\7\u0325\2\2\u196a\u196b\7\u010d\2\2\u196b\u196c\5"+
		"\u036c\u01b7\2\u196c\u196d\7\u0324\2\2\u196d\u196e\5\u0378\u01bd\2\u196e"+
		"\u196f\7\u0325\2\2\u196f\u1976\3\2\2\2\u1970\u1971\7-\2\2\u1971\u1972"+
		"\7<\2\2\u1972\u1976\5\u03a0\u01d1\2\u1973\u1974\7\u0298\2\2\u1974\u1976"+
		"\5\u01ea\u00f6\2\u1975\u194f\3\2\2\2\u1975\u1955\3\2\2\2\u1975\u1957\3"+
		"\2\2\2\u1975\u195a\3\2\2\2\u1975\u195d\3\2\2\2\u1975\u1960\3\2\2\2\u1975"+
		"\u1970\3\2\2\2\u1975\u1973\3\2\2\2\u1976\u1978\3\2\2\2\u1977\u1979\7\u0327"+
		"\2\2\u1978\u1977\3\2\2\2\u1978\u1979\3\2\2\2\u1979\u01f1\3\2\2\2\u197a"+
		"\u197b\7\t\2\2\u197b\u197e\7T\2\2\u197c\u197f\5\u03a0\u01d1\2\u197d\u197f"+
		"\7J\2\2\u197e\u197c\3\2\2\2\u197e\u197d\3\2\2\2\u197f\u198c\3\2\2\2\u1980"+
		"\u1981\7\u0253\2\2\u1981\u1982\7\u0256\2\2\u1982\u1983\7\u0313\2\2\u1983"+
		"\u198d\5\u03a0\u01d1\2\u1984\u1985\7\66\2\2\u1985\u198d\5\u03a0\u01d1"+
		"\2\u1986\u1987\7\u013c\2\2\u1987\u198a\5\u01f4\u00fb\2\u1988\u1989\7\u017b"+
		"\2\2\u1989\u198b\5\u023a\u011e\2\u198a\u1988\3\2\2\2\u198a\u198b\3\2\2"+
		"\2\u198b\u198d\3\2\2\2\u198c\u1980\3\2\2\2\u198c\u1984\3\2\2\2\u198c\u1986"+
		"\3\2\2\2\u198d\u198f\3\2\2\2\u198e\u1990\7\u0327\2\2\u198f\u198e\3\2\2"+
		"\2\u198f\u1990\3\2\2\2\u1990\u01f3\3\2\2\2\u1991\u19a9\5\u01f6\u00fc\2"+
		"\u1992\u19a9\5\u01f8\u00fd\2\u1993\u19a9\5\u01fc\u00ff\2\u1994\u19a9\5"+
		"\u01fe\u0100\2\u1995\u19a9\5\u0202\u0102\2\u1996\u19a9\5\u021c\u010f\2"+
		"\u1997\u19a9\5\u021e\u0110\2\u1998\u19a9\5\u0220\u0111\2\u1999\u19a9\5"+
		"\u0222\u0112\2\u199a\u19a9\5\u0224\u0113\2\u199b\u19a9\5\u0226\u0114\2"+
		"\u199c\u19a9\5\u0228\u0115\2\u199d\u199e\7\u01fd\2\2\u199e\u19a9\5\u035c"+
		"\u01af\2\u199f\u19a9\5\u022a\u0116\2\u19a0\u19a9\5\u022c\u0117\2\u19a1"+
		"\u19a9\5\u022e\u0118\2\u19a2\u19a9\5\u0230\u0119\2\u19a3\u19a9\5\u0232"+
		"\u011a\2\u19a4\u19a9\5\u0234\u011b\2\u19a5\u19a9\5\u0236\u011c\2\u19a6"+
		"\u19a9\5\u0238\u011d\2\u19a7\u19a9\5\u023a\u011e\2\u19a8\u1991\3\2\2\2"+
		"\u19a8\u1992\3\2\2\2\u19a8\u1993\3\2\2\2\u19a8\u1994\3\2\2\2\u19a8\u1995"+
		"\3\2\2\2\u19a8\u1996\3\2\2\2\u19a8\u1997\3\2\2\2\u19a8\u1998\3\2\2\2\u19a8"+
		"\u1999\3\2\2\2\u19a8\u199a\3\2\2\2\u19a8\u199b\3\2\2\2\u19a8\u199c\3\2"+
		"\2\2\u19a8\u199d\3\2\2\2\u19a8\u199f\3\2\2\2\u19a8\u19a0\3\2\2\2\u19a8"+
		"\u19a1\3\2\2\2\u19a8\u19a2\3\2\2\2\u19a8\u19a3\3\2\2\2\u19a8\u19a4\3\2"+
		"\2\2\u19a8\u19a5\3\2\2\2\u19a8\u19a6\3\2\2\2\u19a8\u19a7\3\2\2\2\u19a9"+
		"\u01f5\3\2\2\2\u19aa\u19ab\7\u019c\2\2\u19ab\u19bc\5\u037c\u01bf\2\u19ac"+
		"\u19ad\7\u019d\2\2\u19ad\u19bc\7\u00e1\2\2\u19ae\u19b3\7\u00e4\2\2\u19af"+
		"\u19b0\7\u021c\2\2\u19b0\u19b1\7\u0313\2\2\u19b1\u19b4\7\u00e4\2\2\u19b2"+
		"\u19b4\7\u00e1\2\2\u19b3\u19af\3\2\2\2\u19b3\u19b2\3\2\2\2\u19b4\u19bc"+
		"\3\2\2\2\u19b5\u19b6\7\u019e\2\2\u19b6\u19bc\5\u037c\u01bf\2\u19b7\u19b8"+
		"\7\u019f\2\2\u19b8\u19bc\5\u037c\u01bf\2\u19b9\u19ba\7\u01a0\2\2\u19ba"+
		"\u19bc\t\b\2\2\u19bb\u19aa\3\2\2\2\u19bb\u19ac\3\2\2\2\u19bb\u19ae\3\2"+
		"\2\2\u19bb\u19b5\3\2\2\2\u19bb\u19b7\3\2\2\2\u19bb\u19b9\3\2\2\2\u19bc"+
		"\u01f7\3\2\2\2\u19bd\u19be\7\u01b3\2\2\u19be\u19ce\7\u0313\2\2\u19bf\u19cf"+
		"\7\u00e1\2\2\u19c0\u19cb\7\u00e4\2\2\u19c1\u19c6\5\u01fa\u00fe\2\u19c2"+
		"\u19c3\7\u0326\2\2\u19c3\u19c5\5\u01fa\u00fe\2\u19c4\u19c2\3\2\2\2\u19c5"+
		"\u19c8\3\2\2\2\u19c6\u19c4\3\2\2\2\u19c6\u19c7\3\2\2\2\u19c7\u19ca\3\2"+
		"\2\2\u19c8\u19c6\3\2\2\2\u19c9\u19c1\3\2\2\2\u19ca\u19cd\3\2\2\2\u19cb"+
		"\u19c9\3\2\2\2\u19cb\u19cc\3\2\2\2\u19cc\u19cf\3\2\2\2\u19cd\u19cb\3\2"+
		"\2\2\u19ce\u19bf\3\2\2\2\u19ce\u19c0\3\2\2\2\u19cf\u01f9\3\2\2\2\u19d0"+
		"\u19d1\7\u019b\2\2\u19d1\u19d2\7\u0313\2\2\u19d2\u19d7\5\u037c\u01bf\2"+
		"\u19d3\u19d4\7\u01b2\2\2\u19d4\u19d5\7\u0313\2\2\u19d5\u19d7\t=\2\2\u19d6"+
		"\u19d0\3\2\2\2\u19d6\u19d3\3\2\2\2\u19d7\u01fb\3\2\2\2\u19d8\u19d9\7="+
		"\2\2\u19d9\u19da\7\u0313\2\2\u19da\u19db\t\65\2\2\u19db\u01fd\3\2\2\2"+
		"\u19dc\u19dd\7\u01c8\2\2\u19dd\u19e1\5\u037c\u01bf\2\u19de\u19df\7\u01c9"+
		"\2\2\u19df\u19e1\t>\2\2\u19e0\u19dc\3\2\2\2\u19e0\u19de\3\2\2\2\u19e1"+
		"\u01ff\3\2\2\2\u19e2\u19e3\7\t\2\2\u19e3\u19e4\7m\2\2\u19e4\u19e7\5\u03a0"+
		"\u01d1\2\u19e5\u19e6\7\23\2\2\u19e6\u19e8\5\u03a0\u01d1\2\u19e7\u19e5"+
		"\3\2\2\2\u19e7\u19e8\3\2\2\2\u19e8\u19f0\3\2\2\2\u19e9\u19ea\7\u014a\2"+
		"\2\u19ea\u19ee\7\u0313\2\2\u19eb\u19ef\7\u014d\2\2\u19ec\u19ef\7\u0150"+
		"\2\2\u19ed\u19ef\7\u01e2\2\2\u19ee\u19eb\3\2\2\2\u19ee\u19ec\3\2\2\2\u19ee"+
		"\u19ed\3\2\2\2\u19ef\u19f1\3\2\2\2\u19f0\u19e9\3\2\2\2\u19f0\u19f1\3\2"+
		"\2\2\u19f1\u19f2\3\2\2\2\u19f2\u19f3\7\17\2\2\u19f3\u19f4\7\u0159\2\2"+
		"\u19f4\u19f5\7\u0324\2\2\u19f5\u19f6\7\u00b7\2\2\u19f6\u19f7\7\u0313\2"+
		"\2\u19f7\u19fc\7\u030b\2\2\u19f8\u19f9\7\u0326\2\2\u19f9\u19fa\7\u00b6"+
		"\2\2\u19fa\u19fb\7\u0313\2\2\u19fb\u19fd\t?\2\2\u19fc\u19f8\3\2\2\2\u19fc"+
		"\u19fd\3\2\2\2\u19fd\u19fe\3\2\2\2\u19fe\u1a6c\7\u0325\2\2\u19ff\u1a6d"+
		"\7\u02ee\2\2\u1a00\u1a01\7\u0085\2\2\u1a01\u1a02\7\u0138\2\2\u1a02\u1a03"+
		"\7\u0324\2\2\u1a03\u1a04\7\24\2\2\u1a04\u1a15\7\u0313\2\2\u1a05\u1a07"+
		"\7\u017a\2\2\u1a06\u1a08\t@\2\2\u1a07\u1a06\3\2\2\2\u1a07\u1a08\3\2\2"+
		"\2\u1a08\u1a0b\3\2\2\2\u1a09\u1a0a\7*\2\2\u1a0a\u1a0c\5\u03a0\u01d1\2"+
		"\u1a0b\u1a09\3\2\2\2\u1a0b\u1a0c\3\2\2\2\u1a0c\u1a16\3\2\2\2\u1a0d\u1a0e"+
		"\7*\2\2\u1a0e\u1a10\5\u03a0\u01d1\2\u1a0f\u1a11\7\u017a\2\2\u1a10\u1a0f"+
		"\3\2\2\2\u1a10\u1a11\3\2\2\2\u1a11\u1a13\3\2\2\2\u1a12\u1a14\t@\2\2\u1a13"+
		"\u1a12\3\2\2\2\u1a13\u1a14\3\2\2\2\u1a14\u1a16\3\2\2\2\u1a15\u1a05\3\2"+
		"\2\2\u1a15\u1a0d\3\2\2\2\u1a16\u1a28\3\2\2\2\u1a17\u1a19\7\u0326\2\2\u1a18"+
		"\u1a17\3\2\2\2\u1a18\u1a19\3\2\2\2\u1a19\u1a1a\3\2\2\2\u1a1a\u1a1b\7\u01ec"+
		"\2\2\u1a1b\u1a1c\7\u0313\2\2\u1a1c\u1a26\tA\2\2\u1a1d\u1a24\7\u018c\2"+
		"\2\u1a1e\u1a25\7\4\2\2\u1a1f\u1a25\7\u0291\2\2\u1a20\u1a21\7\4\2\2\u1a21"+
		"\u1a25\7\u0291\2\2\u1a22\u1a23\7\u0291\2\2\u1a23\u1a25\7\4\2\2\u1a24\u1a1e"+
		"\3\2\2\2\u1a24\u1a1f\3\2\2\2\u1a24\u1a20\3\2\2\2\u1a24\u1a22\3\2\2\2\u1a25"+
		"\u1a27\3\2\2\2\u1a26\u1a1d\3\2\2\2\u1a26\u1a27\3\2\2\2\u1a27\u1a29\3\2"+
		"\2\2\u1a28\u1a18\3\2\2\2\u1a28\u1a29\3\2\2\2\u1a29\u1a30\3\2\2\2\u1a2a"+
		"\u1a2c\7\u0326\2\2\u1a2b\u1a2a\3\2\2\2\u1a2b\u1a2c\3\2\2\2\u1a2c\u1a2d"+
		"\3\2\2\2\u1a2d\u1a2e\7\u00c9\2\2\u1a2e\u1a2f\7\u0313\2\2\u1a2f\u1a31\t"+
		"B\2\2\u1a30\u1a2b\3\2\2\2\u1a30\u1a31\3\2\2\2\u1a31\u1a38\3\2\2\2\u1a32"+
		"\u1a34\7\u0326\2\2\u1a33\u1a32\3\2\2\2\u1a33\u1a34\3\2\2\2\u1a34\u1a35"+
		"\3\2\2\2\u1a35\u1a36\7\u00ca\2\2\u1a36\u1a37\7\u0313\2\2\u1a37\u1a39\7"+
		"\u030b\2\2\u1a38\u1a33\3\2\2\2\u1a38\u1a39\3\2\2\2\u1a39\u1a3a\3\2\2\2"+
		"\u1a3a\u1a6d\7\u0325\2\2\u1a3b\u1a3c\7\u0085\2\2\u1a3c\u1a3d\7U\2\2\u1a3d"+
		"\u1a3e\7\u0324\2\2\u1a3e\u1a3f\7\24\2\2\u1a3f\u1a50\7\u0313\2\2\u1a40"+
		"\u1a42\7\u017a\2\2\u1a41\u1a43\t@\2\2\u1a42\u1a41\3\2\2\2\u1a42\u1a43"+
		"\3\2\2\2\u1a43\u1a46\3\2\2\2\u1a44\u1a45\7*\2\2\u1a45\u1a47\5\u03a0\u01d1"+
		"\2\u1a46\u1a44\3\2\2\2\u1a46\u1a47\3\2\2\2\u1a47\u1a51\3\2\2\2\u1a48\u1a49"+
		"\7*\2\2\u1a49\u1a4b\5\u03a0\u01d1\2\u1a4a\u1a4c\7\u017a\2\2\u1a4b\u1a4a"+
		"\3\2\2\2\u1a4b\u1a4c\3\2\2\2\u1a4c\u1a4e\3\2\2\2\u1a4d\u1a4f\t@\2\2\u1a4e"+
		"\u1a4d\3\2\2\2\u1a4e\u1a4f\3\2\2\2\u1a4f\u1a51\3\2\2\2\u1a50\u1a40\3\2"+
		"\2\2\u1a50\u1a48\3\2\2\2\u1a51\u1a63\3\2\2\2\u1a52\u1a54\7\u0326\2\2\u1a53"+
		"\u1a52\3\2\2\2\u1a53\u1a54\3\2\2\2\u1a54\u1a55\3\2\2\2\u1a55\u1a56\7\u01ec"+
		"\2\2\u1a56\u1a57\7\u0313\2\2\u1a57\u1a61\tA\2\2\u1a58\u1a5f\7\u018c\2"+
		"\2\u1a59\u1a60\7\4\2\2\u1a5a\u1a60\7\u0291\2\2\u1a5b\u1a5c\7\4\2\2\u1a5c"+
		"\u1a60\7\u0291\2\2\u1a5d\u1a5e\7\u0291\2\2\u1a5e\u1a60\7\4\2\2\u1a5f\u1a59"+
		"\3\2\2\2\u1a5f\u1a5a\3\2\2\2\u1a5f\u1a5b\3\2\2\2\u1a5f\u1a5d\3\2\2\2\u1a60"+
		"\u1a62\3\2\2\2\u1a61\u1a58\3\2\2\2\u1a61\u1a62\3\2\2\2\u1a62\u1a64\3\2"+
		"\2\2\u1a63\u1a53\3\2\2\2\u1a63\u1a64\3\2\2\2\u1a64\u1a66\3\2\2\2\u1a65"+
		"\u1a67\7\u0326\2\2\u1a66\u1a65\3\2\2\2\u1a66\u1a67\3\2\2\2\u1a67\u1a68"+
		"\3\2\2\2\u1a68\u1a69\7\u0120\2\2\u1a69\u1a6a\7\u0313\2\2\u1a6a\u1a6b\t"+
		"C\2\2\u1a6b\u1a6d\7\u0325\2\2\u1a6c\u19ff\3\2\2\2\u1a6c\u1a00\3\2\2\2"+
		"\u1a6c\u1a3b\3\2\2\2\u1a6d\u0201\3\2\2\2\u1a6e\u1a6f\5\u0204\u0103\2\u1a6f"+
		"\u0203\3\2\2\2\u1a70\u1a71\5\u0206\u0104\2\u1a71\u1a72\5\u020c\u0107\2"+
		"\u1a72\u1a77\3\2\2\2\u1a73\u1a74\5\u0208\u0105\2\u1a74\u1a75\5\u020e\u0108"+
		"\2\u1a75\u1a77\3\2\2\2\u1a76\u1a70\3\2\2\2\u1a76\u1a73\3\2\2\2\u1a77\u0205"+
		"\3\2\2\2\u1a78\u1a79\7\u0279\2\2\u1a79\u0207\3\2\2\2\u1a7a\u1a7b\7\u017e"+
		"\2\2\u1a7b\u0209\3\2\2\2\u1a7c\u1a7d\7\u0313\2\2\u1a7d\u020b\3\2\2\2\u1a7e"+
		"\u1a7f\5\u020a\u0106\2\u1a7f\u1a80\5\u0212\u010a\2\u1a80\u1a8b\3\2\2\2"+
		"\u1a81\u1a8b\7}\2\2\u1a82\u1a8b\7\u0087\2\2\u1a83\u1a8b\7\u00e1\2\2\u1a84"+
		"\u1a8b\7\u0117\2\2\u1a85\u1a86\7\u0128\2\2\u1a86\u1a8b\tD\2\2\u1a87\u1a8b"+
		"\7\u02d7\2\2\u1a88\u1a89\7\u02e7\2\2\u1a89\u1a8b\7\u030b\2\2\u1a8a\u1a7e"+
		"\3\2\2\2\u1a8a\u1a81\3\2\2\2\u1a8a\u1a82\3\2\2\2\u1a8a\u1a83\3\2\2\2\u1a8a"+
		"\u1a84\3\2\2\2\u1a8a\u1a85\3\2\2\2\u1a8a\u1a87\3\2\2\2\u1a8a\u1a88\3\2"+
		"\2\2\u1a8b\u020d\3\2\2\2\u1a8c\u1a8d\5\u020a\u0106\2\u1a8d\u1a8e\5\u0210"+
		"\u0109\2\u1a8e\u1a91\3\2\2\2\u1a8f\u1a91\7\u00e1\2\2\u1a90\u1a8c\3\2\2"+
		"\2\u1a90\u1a8f\3\2\2\2\u1a91\u020f\3\2\2\2\u1a92\u1a93\5\u0212\u010a\2"+
		"\u1a93\u0211\3\2\2\2\u1a94\u1a95\5\u0216\u010c\2\u1a95\u1a96\5\u021a\u010e"+
		"\2\u1a96\u1a97\5\u0214\u010b\2\u1a97\u1a98\5\u0218\u010d\2\u1a98\u0213"+
		"\3\2\2\2\u1a99\u1a9a\7\u0328\2\2\u1a9a\u0215\3\2\2\2\u1a9b\u1a9c\7\u0159"+
		"\2\2\u1a9c\u1a9d\7\u0328\2\2\u1a9d\u1a9e\7f\2\2\u1a9e\u0217\3\2\2\2\u1a9f"+
		"\u1aa0\7\u030b\2\2\u1aa0\u0219\3\2\2\2\u1aa1\u1aa2\5\u03a0\u01d1\2\u1aa2"+
		"\u1aa3\7\u031f\2\2\u1aa3\u1aa4\5\u021a\u010e\2\u1aa4\u1aac\3\2\2\2\u1aa5"+
		"\u1aa6\5\u03a0\u01d1\2\u1aa6\u1aa7\7\u031f\2\2\u1aa7\u1aaa\3\2\2\2\u1aa8"+
		"\u1aaa\5\u03a0\u01d1\2\u1aa9\u1aa5\3\2\2\2\u1aa9\u1aa8\3\2\2\2\u1aaa\u1aac"+
		"\3\2\2\2\u1aab\u1aa1\3\2\2\2\u1aab\u1aa9\3\2\2\2\u1aac\u021b\3\2\2\2\u1aad"+
		"\u1aae\7\u01ce\2\2\u1aae\u1aaf\5\u037c\u01bf\2\u1aaf\u021d\3\2\2\2\u1ab0"+
		"\u1ab1\7\u01ec\2\2\u1ab1\u1ab2\5\u037c\u01bf\2\u1ab2\u021f\3\2\2\2\u1ab3"+
		"\u1ab4\tE\2\2\u1ab4\u0221\3\2\2\2\u1ab5\u1ab6\tF\2\2\u1ab6\u0223\3\2\2"+
		"\2\u1ab7\u1ab8\tG\2\2\u1ab8\u0225\3\2\2\2\u1ab9\u1aba\7\u01d7\2\2\u1aba"+
		"\u1abb\7\u0313\2\2\u1abb\u1abc\tH\2\2\u1abc\u0227\3\2\2\2\u1abd\u1abe"+
		"\7\u01d0\2\2\u1abe\u1ad7\5\u037c\u01bf\2\u1abf\u1ac0\7\u02ec\2\2\u1ac0"+
		"\u1ad7\5\u037c\u01bf\2\u1ac1\u1ac2\7\u01d5\2\2\u1ac2\u1ac5\7\u0313\2\2"+
		"\u1ac3\u1ac6\5\u03a0\u01d1\2\u1ac4\u1ac6\7\u030f\2\2\u1ac5\u1ac3\3\2\2"+
		"\2\u1ac5\u1ac4\3\2\2\2\u1ac6\u1ad7\3\2\2\2\u1ac7\u1ac8\7\u01d4\2\2\u1ac8"+
		"\u1acb\7\u0313\2\2\u1ac9\u1acc\5\u03a0\u01d1\2\u1aca\u1acc\7\u030f\2\2"+
		"\u1acb\u1ac9\3\2\2\2\u1acb\u1aca\3\2\2\2\u1acc\u1ad7\3\2\2\2\u1acd\u1ace"+
		"\7\u0257\2\2\u1ace\u1acf\7\u0313\2\2\u1acf\u1ad7\t\b\2\2\u1ad0\u1ad1\7"+
		"\u02e9\2\2\u1ad1\u1ad2\7\u0313\2\2\u1ad2\u1ad7\t\b\2\2\u1ad3\u1ad4\7\u02ef"+
		"\2\2\u1ad4\u1ad5\7\u0313\2\2\u1ad5\u1ad7\7\u030b\2\2\u1ad6\u1abd\3\2\2"+
		"\2\u1ad6\u1abf\3\2\2\2\u1ad6\u1ac1\3\2\2\2\u1ad6\u1ac7\3\2\2\2\u1ad6\u1acd"+
		"\3\2\2\2\u1ad6\u1ad0\3\2\2\2\u1ad6\u1ad3\3\2\2\2\u1ad7\u0229\3\2\2\2\u1ad8"+
		"\u1ae1\7\u0211\2\2\u1ad9\u1ada\7\u01a1\2\2\u1ada\u1adb\7\u0092\2\2\u1adb"+
		"\u1adc\7\u0313\2\2\u1adc\u1adf\5\u03a0\u01d1\2\u1add\u1adf\7\u00e1\2\2"+
		"\u1ade\u1ad9\3\2\2\2\u1ade\u1add\3\2\2\2\u1adf\u1ae2\3\2\2\2\u1ae0\u1ae2"+
		"\tI\2\2\u1ae1\u1ade\3\2\2\2\u1ae1\u1ae0\3\2\2\2\u1ae2\u022b\3\2\2\2\u1ae3"+
		"\u1ae4\7\u0252\2\2\u1ae4\u1ae5\t\b\2\2\u1ae5\u022d\3\2\2\2\u1ae6\u1ae7"+
		"\7\u0276\2\2\u1ae7\u1ae8\tJ\2\2\u1ae8\u022f\3\2\2\2\u1ae9\u1aea\7\u029b"+
		"\2\2\u1aea\u1af0\tK\2\2\u1aeb\u1aec\7\u02e8\2\2\u1aec\u1af0\5\u037c\u01bf"+
		"\2\u1aed\u1aee\7\u0275\2\2\u1aee\u1af0\tL\2\2\u1aef\u1ae9\3\2\2\2\u1aef"+
		"\u1aeb\3\2\2\2\u1aef\u1aed\3\2\2\2\u1af0\u0231\3\2\2\2\u1af1\u1af8\7\u01ea"+
		"\2\2\u1af2\u1af8\7\u01e3\2\2\u1af3\u1af8\7\u0259\2\2\u1af4\u1af8\7\u01ee"+
		"\2\2\u1af5\u1af6\7\u0215\2\2\u1af6\u1af8\5\u037c\u01bf\2\u1af7\u1af1\3"+
		"\2\2\2\u1af7\u1af2\3\2\2\2\u1af7\u1af3\3\2\2\2\u1af7\u1af4\3\2\2\2\u1af7"+
		"\u1af5\3\2\2\2\u1af8\u0233\3\2\2\2\u1af9\u1afa\7\u018f\2\2\u1afa\u1aff"+
		"\5\u037c\u01bf\2\u1afb\u1afc\7\u0294\2\2\u1afc\u1aff\t\b\2\2\u1afd\u1aff"+
		"\t\b\2\2\u1afe\u1af9\3\2\2\2\u1afe\u1afb\3\2\2\2\u1afe\u1afd\3\2\2\2\u1aff"+
		"\u0235\3\2\2\2\u1b00\u1b01\7\u0191\2\2\u1b01\u1b16\5\u037c\u01bf\2\u1b02"+
		"\u1b03\7\u0190\2\2\u1b03\u1b16\5\u037c\u01bf\2\u1b04\u1b05\7\u0192\2\2"+
		"\u1b05\u1b16\5\u037c\u01bf\2\u1b06\u1b07\7\u0193\2\2\u1b07\u1b16\5\u037c"+
		"\u01bf\2\u1b08\u1b09\7\u0196\2\2\u1b09\u1b16\5\u037c\u01bf\2\u1b0a\u1b0b"+
		"\7\u01ba\2\2\u1b0b\u1b0c\7\u0313\2\2\u1b0c\u1b16\7\u030b\2\2\u1b0d\u1b0e"+
		"\7\u01bc\2\2\u1b0e\u1b16\5\u037c\u01bf\2\u1b0f\u1b10\7\u0268\2\2\u1b10"+
		"\u1b16\5\u037c\u01bf\2\u1b11\u1b12\7\u028d\2\2\u1b12\u1b16\5\u037c\u01bf"+
		"\2\u1b13\u1b14\7\u029c\2\2\u1b14\u1b16\5\u037c\u01bf\2\u1b15\u1b00\3\2"+
		"\2\2\u1b15\u1b02\3\2\2\2\u1b15\u1b04\3\2\2\2\u1b15\u1b06\3\2\2\2\u1b15"+
		"\u1b08\3\2\2\2\u1b15\u1b0a\3\2\2\2\u1b15\u1b0d\3\2\2\2\u1b15\u1b0f\3\2"+
		"\2\2\u1b15\u1b11\3\2\2\2\u1b15\u1b13\3\2\2\2\u1b16\u0237\3\2\2\2\u1b17"+
		"\u1b18\7\u02df\2\2\u1b18\u1b19\7\u0313\2\2\u1b19\u1b1a\7\u030b\2\2\u1b1a"+
		"\u1b1b\tM\2\2\u1b1b\u0239\3\2\2\2\u1b1c\u1b1d\7\u011f\2\2\u1b1d\u1b1e"+
		"\7\u018a\2\2\u1b1e\u1b23\7\u030b\2\2\u1b1f\u1b20\7\u011f\2\2\u1b20\u1b23"+
		"\7\u0219\2\2\u1b21\u1b23\7\u0264\2\2\u1b22\u1b1c\3\2\2\2\u1b22\u1b1f\3"+
		"\2\2\2\u1b22\u1b21\3\2\2\2\u1b23\u023b\3\2\2\2\u1b24\u1b25\7g\2\2\u1b25"+
		"\u1b28\7\u009d\2\2\u1b26\u1b27\7\u0099\2\2\u1b27\u1b29\7w\2\2\u1b28\u1b26"+
		"\3\2\2\2\u1b28\u1b29\3\2\2\2\u1b29\u1b3a\3\2\2\2\u1b2a\u1b2f\5\u023e\u0120"+
		"\2\u1b2b\u1b2c\7\u0326\2\2\u1b2c\u1b2e\5\u023e\u0120\2\u1b2d\u1b2b\3\2"+
		"\2\2\u1b2e\u1b31\3\2\2\2\u1b2f\u1b2d\3\2\2\2\u1b2f\u1b30\3\2\2\2\u1b30"+
		"\u1b3b\3\2\2\2\u1b31\u1b2f\3\2\2\2\u1b32\u1b37\5\u0240\u0121\2\u1b33\u1b34"+
		"\7\u0326\2\2\u1b34\u1b36\5\u0240\u0121\2\u1b35\u1b33\3\2\2\2\u1b36\u1b39"+
		"\3\2\2\2\u1b37\u1b35\3\2\2\2\u1b37\u1b38\3\2\2\2\u1b38\u1b3b\3\2\2\2\u1b39"+
		"\u1b37\3\2\2\2\u1b3a\u1b2a\3\2\2\2\u1b3a\u1b32\3\2\2\2\u1b3b\u1b3d\3\2"+
		"\2\2\u1b3c\u1b3e\7\u0327\2\2\u1b3d\u1b3c\3\2\2\2\u1b3d\u1b3e\3\2\2\2\u1b3e"+
		"\u023d\3\2\2\2\u1b3f\u1b40\5\u03a0\u01d1\2\u1b40\u1b41\7\u00e4\2\2\u1b41"+
		"\u1b42\5\u036a\u01b6\2\u1b42\u023f\3\2\2\2\u1b43\u1b44\5\u03a0\u01d1\2"+
		"\u1b44\u1b45\7\u031f\2\2\u1b45\u1b47\3\2\2\2\u1b46\u1b43\3\2\2\2\u1b46"+
		"\u1b47\3\2\2\2\u1b47\u1b48\3\2\2\2\u1b48\u1b49\5\u03a0\u01d1\2\u1b49\u1b4a"+
		"\7\u031f\2\2\u1b4a\u1b4b\5\u03a0\u01d1\2\u1b4b\u0241\3\2\2\2\u1b4c\u1b4d"+
		"\7g\2\2\u1b4d\u1b50\t\66\2\2\u1b4e\u1b4f\7\u0099\2\2\u1b4f\u1b51\7w\2"+
		"\2\u1b50\u1b4e\3\2\2\2\u1b50\u1b51\3\2\2\2\u1b51\u1b52\3\2\2\2\u1b52\u1b57"+
		"\5\u0370\u01b9\2\u1b53\u1b54\7\u0326\2\2\u1b54\u1b56\5\u0370\u01b9\2\u1b55"+
		"\u1b53\3\2\2\2\u1b56\u1b59\3\2\2\2\u1b57\u1b55\3\2\2\2\u1b57\u1b58\3\2"+
		"\2\2\u1b58\u1b5b\3\2\2\2\u1b59\u1b57\3\2\2\2\u1b5a\u1b5c\7\u0327\2\2\u1b5b"+
		"\u1b5a\3\2\2\2\u1b5b\u1b5c\3\2\2\2\u1b5c\u0243\3\2\2\2\u1b5d\u1b60\5\u0246"+
		"\u0124\2\u1b5e\u1b60\5\u0248\u0125\2\u1b5f\u1b5d\3\2\2\2\u1b5f\u1b5e\3"+
		"\2\2\2\u1b60\u0245\3\2\2\2\u1b61\u1b62\7g\2\2\u1b62\u1b65\7\u0162\2\2"+
		"\u1b63\u1b64\7\u0099\2\2\u1b64\u1b66\7w\2\2\u1b65\u1b63\3\2\2\2\u1b65"+
		"\u1b66\3\2\2\2\u1b66\u1b67\3\2\2\2\u1b67\u1b6c\5\u036e\u01b8\2\u1b68\u1b69"+
		"\7\u0326\2\2\u1b69\u1b6b\5\u036e\u01b8\2\u1b6a\u1b68\3\2\2\2\u1b6b\u1b6e"+
		"\3\2\2\2\u1b6c\u1b6a\3\2\2\2\u1b6c\u1b6d\3\2\2\2\u1b6d\u1b70\3\2\2\2\u1b6e"+
		"\u1b6c\3\2\2\2\u1b6f\u1b71\7\u0327\2\2\u1b70\u1b6f\3\2\2\2\u1b70\u1b71"+
		"\3\2\2\2\u1b71\u0247\3\2\2\2\u1b72\u1b73\7g\2\2\u1b73\u1b76\7\u0162\2"+
		"\2\u1b74\u1b75\7\u0099\2\2\u1b75\u1b77\7w\2\2\u1b76\u1b74\3\2\2\2\u1b76"+
		"\u1b77\3\2\2\2\u1b77\u1b78\3\2\2\2\u1b78\u1b7d\5\u036e\u01b8\2\u1b79\u1b7a"+
		"\7\u0326\2\2\u1b7a\u1b7c\5\u036e\u01b8\2\u1b7b\u1b79\3\2\2\2\u1b7c\u1b7f"+
		"\3\2\2\2\u1b7d\u1b7b\3\2\2\2\u1b7d\u1b7e\3\2\2\2\u1b7e\u1b80\3\2\2\2\u1b7f"+
		"\u1b7d\3\2\2\2\u1b80\u1b84\7\u00e4\2\2\u1b81\u1b85\7T\2\2\u1b82\u1b83"+
		"\7\5\2\2\u1b83\u1b85\7\u0136\2\2\u1b84\u1b81\3\2\2\2\u1b84\u1b82\3\2\2"+
		"\2\u1b85\u1b87\3\2\2\2\u1b86\u1b88\7\u0327\2\2\u1b87\u1b86\3\2\2\2\u1b87"+
		"\u1b88\3\2\2\2\u1b88\u0249\3\2\2\2\u1b89\u1b8a\7g\2\2\u1b8a\u1b8d\7\u008d"+
		"\2\2\u1b8b\u1b8c\7\u0099\2\2\u1b8c\u1b8e\7w\2\2\u1b8d\u1b8b\3\2\2\2\u1b8d"+
		"\u1b8e\3\2\2\2\u1b8e\u1b8f\3\2\2\2\u1b8f\u1b94\5\u0370\u01b9\2\u1b90\u1b91"+
		"\7\u0326\2\2\u1b91\u1b93\5\u0370\u01b9\2\u1b92\u1b90\3\2\2\2\u1b93\u1b96"+
		"\3\2\2\2\u1b94\u1b92\3\2\2\2\u1b94\u1b95\3\2\2\2\u1b95\u1b98\3\2\2\2\u1b96"+
		"\u1b94\3\2\2\2\u1b97\u1b99\7\u0327\2\2\u1b98\u1b97\3\2\2\2\u1b98\u1b99"+
		"\3\2\2\2\u1b99\u024b\3\2\2\2\u1b9a\u1b9b\7g\2\2\u1b9b\u1ba5\7\u0149\2"+
		"\2\u1b9c\u1b9e\7\u0326\2\2\u1b9d\u1b9c\3\2\2\2\u1b9d\u1b9e\3\2\2\2\u1b9e"+
		"\u1ba2\3\2\2\2\u1b9f\u1ba0\5\u036c\u01b7\2\u1ba0\u1ba1\7\u031f\2\2\u1ba1"+
		"\u1ba3\3\2\2\2\u1ba2\u1b9f\3\2\2\2\u1ba2\u1ba3\3\2\2\2\u1ba3\u1ba4\3\2"+
		"\2\2\u1ba4\u1ba6\5\u03a0\u01d1\2\u1ba5\u1b9d\3\2\2\2\u1ba6\u1ba7\3\2\2"+
		"\2\u1ba7\u1ba5\3\2\2\2\u1ba7\u1ba8\3\2\2\2\u1ba8\u1ba9\3\2\2\2\u1ba9\u1baa"+
		"\7\u0327\2\2\u1baa\u024d\3\2\2\2\u1bab\u1bac\7g\2\2\u1bac\u1baf\7\u0155"+
		"\2\2\u1bad\u1bae\7\u0099\2\2\u1bae\u1bb0\7w\2\2\u1baf\u1bad\3\2\2\2\u1baf"+
		"\u1bb0\3\2\2\2\u1bb0\u1bb1\3\2\2\2\u1bb1\u1bb3\5\u036c\u01b7\2\u1bb2\u1bb4"+
		"\7\u0327\2\2\u1bb3\u1bb2\3\2\2\2\u1bb3\u1bb4\3\2\2\2\u1bb4\u024f\3\2\2"+
		"\2\u1bb5\u1bb6\7g\2\2\u1bb6\u1bb9\7\u0174\2\2\u1bb7\u1bb8\7\u0099\2\2"+
		"\u1bb8\u1bba\7w\2\2\u1bb9\u1bb7\3\2\2\2\u1bb9\u1bba\3\2\2\2\u1bba\u1bbb"+
		"\3\2\2\2\u1bbb\u1bc0\5\u036e\u01b8\2\u1bbc\u1bbd\7\u0326\2\2\u1bbd\u1bbf"+
		"\5\u036e\u01b8\2\u1bbe\u1bbc\3\2\2\2\u1bbf\u1bc2\3\2\2\2\u1bc0\u1bbe\3"+
		"\2\2\2\u1bc0\u1bc1\3\2\2\2\u1bc1\u1bc4\3\2\2\2\u1bc2\u1bc0\3\2\2\2\u1bc3"+
		"\u1bc5\7\u0327\2\2\u1bc4\u1bc3\3\2\2\2\u1bc4\u1bc5\3\2\2\2\u1bc5\u0251"+
		"\3\2\2\2\u1bc6\u1bc7\7H\2\2\u1bc7\u1bc8\7\u02f0\2\2\u1bc8\u1bcd\5\u036e"+
		"\u01b8\2\u1bc9\u1bca\7\u008b\2\2\u1bca\u1bcb\5\u0398\u01cd\2\u1bcb\u1bcc"+
		"\5\u039a\u01ce\2\u1bcc\u1bce\3\2\2\2\u1bcd\u1bc9\3\2\2\2\u1bcd\u1bce\3"+
		"\2\2\2\u1bce\u1bd5\3\2\2\2\u1bcf\u1bd0\7\17\2\2\u1bd0\u1bd1\7\u0155\2"+
		"\2\u1bd1\u1bd2\7\u0324\2\2\u1bd2\u1bd3\5\u0298\u014d\2\u1bd3\u1bd4\7\u0325"+
		"\2\2\u1bd4\u1bd6\3\2\2\2\u1bd5\u1bcf\3\2\2\2\u1bd5\u1bd6\3\2\2\2\u1bd6"+
		"\u0253\3\2\2\2\u1bd7\u1bd8\7g\2\2\u1bd8\u1bdb\7\u02f0\2\2\u1bd9\u1bda"+
		"\7\u0099\2\2\u1bda\u1bdc\7w\2\2\u1bdb\u1bd9\3\2\2\2\u1bdb\u1bdc\3\2\2"+
		"\2\u1bdc\u1bdd\3\2\2\2\u1bdd\u1bde\5\u036e\u01b8\2\u1bde\u0255\3\2\2\2"+
		"\u1bdf\u1be2\5\u0258\u012d\2\u1be0\u1be2\5\u025a\u012e\2\u1be1\u1bdf\3"+
		"\2\2\2\u1be1\u1be0\3\2\2\2\u1be2\u0257\3\2\2\2\u1be3\u1be4\7\u00e8\2\2"+
		"\u1be4\u1be5\7\u0324\2\2\u1be5\u1be6\5\u03a0\u01d1\2\u1be6\u1be7\7\u0326"+
		"\2\2\u1be7\u1be8\7\u030f\2\2\u1be8\u1be9\7\u0325\2\2\u1be9\u0259\3\2\2"+
		"\2\u1bea\u1beb\7\u00e7\2\2\u1beb\u1bec\7\u0324\2\2\u1bec\u1bed\7\u030f"+
		"\2\2\u1bed\u1bee\7\u0326\2\2\u1bee\u1bef\7\u030f\2\2\u1bef\u1bf0\7\u0325"+
		"\2\2\u1bf0\u1bf2\7\u031f\2\2\u1bf1\u1bf3\5\u03a0\u01d1\2\u1bf2\u1bf1\3"+
		"\2\2\2\u1bf2\u1bf3\3\2\2\2\u1bf3\u1bf4\3\2\2\2\u1bf4\u1bf6\7\u031f\2\2"+
		"\u1bf5\u1bf7\5\u03a0\u01d1\2\u1bf6\u1bf5\3\2\2\2\u1bf6\u1bf7\3\2\2\2\u1bf7"+
		"\u1bf8\3\2\2\2\u1bf8\u1bf9\7\u031f\2\2\u1bf9\u1bfa\5\u03a0\u01d1\2\u1bfa"+
		"\u025b\3\2\2\2\u1bfb\u1bfc\7X\2\2\u1bfc\u1bfe\7\u030a\2\2\u1bfd\u1bff"+
		"\7\17\2\2\u1bfe\u1bfd\3\2\2\2\u1bfe\u1bff\3\2\2\2\u1bff\u1c00\3\2\2\2"+
		"\u1c00\u1c02\5\u0292\u014a\2\u1c01\u1c03\7\u0327\2\2\u1c02\u1c01\3\2\2"+
		"\2\u1c02\u1c03\3\2\2\2\u1c03\u1c27\3\2\2\2\u1c04\u1c05\7X\2\2\u1c05\u1c0a"+
		"\5\u0290\u0149\2\u1c06\u1c07\7\u0326\2\2\u1c07\u1c09\5\u0290\u0149\2\u1c08"+
		"\u1c06\3\2\2\2\u1c09\u1c0c\3\2\2\2\u1c0a\u1c08\3\2\2\2\u1c0a\u1c0b\3\2"+
		"\2\2\u1c0b\u1c0e\3\2\2\2\u1c0c\u1c0a\3\2\2\2\u1c0d\u1c0f\7\u0327\2\2\u1c0e"+
		"\u1c0d\3\2\2\2\u1c0e\u1c0f\3\2\2\2\u1c0f\u1c27\3\2\2\2\u1c10\u1c11\7X"+
		"\2\2\u1c11\u1c13\7\u030a\2\2\u1c12\u1c14\7\17\2\2\u1c13\u1c12\3\2\2\2"+
		"\u1c13\u1c14\3\2\2\2\u1c14\u1c15\3\2\2\2\u1c15\u1c17\5\u0294\u014b\2\u1c16"+
		"\u1c18\7\u0327\2\2\u1c17\u1c16\3\2\2\2\u1c17\u1c18\3\2\2\2\u1c18\u1c27"+
		"\3\2\2\2\u1c19\u1c1a\7\u017b\2\2\u1c1a\u1c1b\7\u0302\2\2\u1c1b\u1c1c\7"+
		"\u0324\2\2\u1c1c\u1c1e\7\u030f\2\2\u1c1d\u1c1f\7\u0326\2\2\u1c1e\u1c1d"+
		"\3\2\2\2\u1c1e\u1c1f\3\2\2\2\u1c1f\u1c20\3\2\2\2\u1c20\u1c21\7\17\2\2"+
		"\u1c21\u1c22\5\u03a0\u01d1\2\u1c22\u1c24\7\u0325\2\2\u1c23\u1c25\7\u0327"+
		"\2\2\u1c24\u1c23\3\2\2\2\u1c24\u1c25\3\2\2\2\u1c25\u1c27\3\2\2\2\u1c26"+
		"\u1bfb\3\2\2\2\u1c26\u1c04\3\2\2\2\u1c26\u1c10\3\2\2\2\u1c26\u1c19\3\2"+
		"\2\2\u1c27\u025d\3\2\2\2\u1c28\u1c2a\7\62\2\2\u1c29\u1c2b\7\u020c\2\2"+
		"\u1c2a\u1c29\3\2\2\2\u1c2a\u1c2b\3\2\2\2\u1c2b\u1c2c\3\2\2\2\u1c2c\u1c2e"+
		"\5\u037a\u01be\2\u1c2d\u1c2f\7\u0327\2\2\u1c2e\u1c2d\3\2\2\2\u1c2e\u1c2f"+
		"\3\2\2\2\u1c2f\u1c43\3\2\2\2\u1c30\u1c32\7W\2\2\u1c31\u1c33\7\u020c\2"+
		"\2\u1c32\u1c31\3\2\2\2\u1c32\u1c33\3\2\2\2\u1c33\u1c34\3\2\2\2\u1c34\u1c36"+
		"\5\u037a\u01be\2\u1c35\u1c37\7\u0327\2\2\u1c36\u1c35\3\2\2\2\u1c36\u1c37"+
		"\3\2\2\2\u1c37\u1c43\3\2\2\2\u1c38\u1c43\5\u02aa\u0156\2\u1c39\u1c43\5"+
		"\u02b0\u0159\2\u1c3a\u1c3c\7\u00e6\2\2\u1c3b\u1c3d\7\u020c\2\2\u1c3c\u1c3b"+
		"\3\2\2\2\u1c3c\u1c3d\3\2\2\2\u1c3d\u1c3e\3\2\2\2\u1c3e\u1c40\5\u037a\u01be"+
		"\2\u1c3f\u1c41\7\u0327\2\2\u1c40\u1c3f\3\2\2\2\u1c40\u1c41\3\2\2\2\u1c41"+
		"\u1c43\3\2\2\2\u1c42\u1c28\3\2\2\2\u1c42\u1c30\3\2\2\2\u1c42\u1c38\3\2"+
		"\2\2\u1c42\u1c39\3\2\2\2\u1c42\u1c3a\3\2\2\2\u1c43\u025f\3\2\2\2\u1c44"+
		"\u1c47\7v\2\2\u1c45\u1c46\7\u030a\2\2\u1c46\u1c48\7\u0313\2\2\u1c47\u1c45"+
		"\3\2\2\2\u1c47\u1c48\3\2\2\2\u1c48\u1c4b\3\2\2\2\u1c49\u1c4c\5\u0370\u01b9"+
		"\2\u1c4a\u1c4c\5\u02b6\u015c\2\u1c4b\u1c49\3\2\2\2\u1c4b\u1c4a\3\2\2\2"+
		"\u1c4c\u1c55\3\2\2\2\u1c4d\u1c52\5\u0262\u0132\2\u1c4e\u1c4f\7\u0326\2"+
		"\2\u1c4f\u1c51\5\u0262\u0132\2\u1c50\u1c4e\3\2\2\2\u1c51\u1c54\3\2\2\2"+
		"\u1c52\u1c50\3\2\2\2\u1c52\u1c53\3\2\2\2\u1c53\u1c56\3\2\2\2\u1c54\u1c52"+
		"\3\2\2\2\u1c55\u1c4d\3\2\2\2\u1c55\u1c56\3\2\2\2\u1c56\u1c58\3\2\2\2\u1c57"+
		"\u1c59\7\u0327\2\2\u1c58\u1c57\3\2\2\2\u1c58\u1c59\3\2\2\2\u1c59\u1c71"+
		"\3\2\2\2\u1c5a\u1c5b\7v\2\2\u1c5b\u1c5c\7\u0324\2\2\u1c5c\u1c61\5\u0264"+
		"\u0133\2\u1c5d\u1c5e\7\u032c\2\2\u1c5e\u1c60\5\u0264\u0133\2\u1c5f\u1c5d"+
		"\3\2\2\2\u1c60\u1c63\3\2\2\2\u1c61\u1c5f\3\2\2\2\u1c61\u1c62\3\2\2\2\u1c62"+
		"\u1c64\3\2\2\2\u1c63\u1c61\3\2\2\2\u1c64\u1c6b\7\u0325\2\2\u1c65\u1c67"+
		"\7\17\2\2\u1c66\u1c65\3\2\2\2\u1c66\u1c67\3\2\2\2\u1c67\u1c68\3\2\2\2"+
		"\u1c68\u1c69\tN\2\2\u1c69\u1c6a\7\u0313\2\2\u1c6a\u1c6c\7\u030f\2\2\u1c6b"+
		"\u1c66\3\2\2\2\u1c6b\u1c6c\3\2\2\2\u1c6c\u1c6e\3\2\2\2\u1c6d\u1c6f\7\u0327"+
		"\2\2\u1c6e\u1c6d\3\2\2\2\u1c6e\u1c6f\3\2\2\2\u1c6f\u1c71\3\2\2\2\u1c70"+
		"\u1c44\3\2\2\2\u1c70\u1c5a\3\2\2\2\u1c71\u0261\3\2\2\2\u1c72\u1c73\7\u030a"+
		"\2\2\u1c73\u1c75\7\u0313\2\2\u1c74\u1c72\3\2\2\2\u1c74\u1c75\3\2\2\2\u1c75"+
		"\u1c7f\3\2\2\2\u1c76\u1c79\5\u02b4\u015b\2\u1c77\u1c79\5\u03a0\u01d1\2"+
		"\u1c78\u1c76\3\2\2\2\u1c78\u1c77\3\2\2\2\u1c79\u1c7b\3\2\2\2\u1c7a\u1c7c"+
		"\tO\2\2\u1c7b\u1c7a\3\2\2\2\u1c7b\u1c7c\3\2\2\2\u1c7c\u1c80\3\2\2\2\u1c7d"+
		"\u1c80\7Y\2\2\u1c7e\u1c80\7\u00de\2\2\u1c7f\u1c78\3\2\2\2\u1c7f\u1c7d"+
		"\3\2\2\2\u1c7f\u1c7e\3\2\2\2\u1c80\u0263\3\2\2\2\u1c81\u1c82\t\3\2\2\u1c82"+
		"\u0265\3\2\2\2\u1c83\u1c85\5\u028e\u0148\2\u1c84\u1c86\7\u0327\2\2\u1c85"+
		"\u1c84\3\2\2\2\u1c85\u1c86\3\2\2\2\u1c86\u1cbf\3\2\2\2\u1c87\u1c93\7\u0091"+
		"\2\2\u1c88\u1c8a\7\5\2\2\u1c89\u1c8b\7\u0285\2\2\u1c8a\u1c89\3\2\2\2\u1c8a"+
		"\u1c8b\3\2\2\2\u1c8b\u1c94\3\2\2\2\u1c8c\u1c91\5\u0280\u0141\2\u1c8d\u1c8e"+
		"\7\u0324\2\2\u1c8e\u1c8f\5\u0378\u01bd\2\u1c8f\u1c90\7\u0325\2\2\u1c90"+
		"\u1c92\3\2\2\2\u1c91\u1c8d\3\2\2\2\u1c91\u1c92\3\2\2\2\u1c92\u1c94\3\2"+
		"\2\2\u1c93\u1c88\3\2\2\2\u1c93\u1c8c\3\2\2\2\u1c94\u1c97\3\2\2\2\u1c95"+
		"\u1c96\7\u00e4\2\2\u1c96\u1c98\5\u036c\u01b7\2\u1c97\u1c95\3\2\2\2\u1c97"+
		"\u1c98\3\2\2\2\u1c98\u1c99\3\2\2\2\u1c99\u1c9a\7\u015c\2\2\u1c9a\u1c9f"+
		"\5\u03a0\u01d1\2\u1c9b\u1c9c\7\u0326\2\2\u1c9c\u1c9e\5\u03a0\u01d1\2\u1c9d"+
		"\u1c9b\3\2\2\2\u1c9e\u1ca1\3\2\2\2\u1c9f\u1c9d\3\2\2\2\u1c9f\u1ca0\3\2"+
		"\2\2\u1ca0\u1ca5\3\2\2\2\u1ca1\u1c9f\3\2\2\2\u1ca2\u1ca3\7\u017b\2\2\u1ca3"+
		"\u1ca4\7\u0091\2\2\u1ca4\u1ca6\7\u00eb\2\2\u1ca5\u1ca2\3\2\2\2\u1ca5\u1ca6"+
		"\3\2\2\2\u1ca6\u1ca9\3\2\2\2\u1ca7\u1ca8\7\17\2\2\u1ca8\u1caa\5\u03a0"+
		"\u01d1\2\u1ca9\u1ca7\3\2\2\2\u1ca9\u1caa\3\2\2\2\u1caa\u1cac\3\2\2\2\u1cab"+
		"\u1cad\7\u0327\2\2\u1cac\u1cab\3\2\2\2\u1cac\u1cad\3\2\2\2\u1cad\u1cbf"+
		"\3\2\2\2\u1cae\u1cb5\7\u011b\2\2\u1caf\u1cb0\7\u0324\2\2\u1cb0\u1cb1\7"+
		"\u017b\2\2\u1cb1\u1cb2\7\u01bf\2\2\u1cb2\u1cb3\7\u0313\2\2\u1cb3\u1cb4"+
		"\7\u030a\2\2\u1cb4\u1cb6\7\u0325\2\2\u1cb5\u1caf\3\2\2\2\u1cb5\u1cb6\3"+
		"\2\2\2\u1cb6\u1cb8\3\2\2\2\u1cb7\u1cb9\7\u0327\2\2\u1cb8\u1cb7\3\2\2\2"+
		"\u1cb8\u1cb9\3\2\2\2\u1cb9\u1cbf\3\2\2\2\u1cba\u1cbf\5\u0272\u013a\2\u1cbb"+
		"\u1cbf\5\u0274\u013b\2\u1cbc\u1cbf\5\u0276\u013c\2\u1cbd\u1cbf\5\u0268"+
		"\u0135\2\u1cbe\u1c83\3\2\2\2\u1cbe\u1c87\3\2\2\2\u1cbe\u1cae\3\2\2\2\u1cbe"+
		"\u1cba\3\2\2\2\u1cbe\u1cbb\3\2\2\2\u1cbe\u1cbc\3\2\2\2\u1cbe\u1cbd\3\2"+
		"\2\2\u1cbf\u0267\3\2\2\2\u1cc0\u1cc1\7H\2\2\u1cc1\u1cc2\7*\2\2\u1cc2\u1cc5"+
		"\5\u03a0\u01d1\2\u1cc3\u1cc4\7\23\2\2\u1cc4\u1cc6\5\u03a0\u01d1\2\u1cc5"+
		"\u1cc3\3\2\2\2\u1cc5\u1cc6\3\2\2\2\u1cc6\u1cca\3\2\2\2\u1cc7\u1cc8\7\u008b"+
		"\2\2\u1cc8\u1ccb\5\u026a\u0136\2\u1cc9\u1ccb\5\u026e\u0138\2\u1cca\u1cc7"+
		"\3\2\2\2\u1cca\u1cc9\3\2\2\2\u1ccb\u1cd2\3\2\2\2\u1ccc\u1ccd\7\u0183\2"+
		"\2\u1ccd\u1cce\7\u0085\2\2\u1cce\u1ccf\7\33\2\2\u1ccf\u1cd0\7\u01df\2"+
		"\2\u1cd0\u1cd1\7\u0313\2\2\u1cd1\u1cd3\t\b\2\2\u1cd2\u1ccc\3\2\2\2\u1cd2"+
		"\u1cd3\3\2\2\2\u1cd3\u0269\3\2\2\2\u1cd4\u1cd5\7\u0197\2\2\u1cd5\u1ce6"+
		"\5\u03a0\u01d1\2\u1cd6\u1cd8\7\u01ef\2\2\u1cd7\u1cd6\3\2\2\2\u1cd7\u1cd8"+
		"\3\2\2\2\u1cd8\u1cd9\3\2\2\2\u1cd9\u1cda\7\u0081\2\2\u1cda\u1cdb\7\u0313"+
		"\2\2\u1cdb\u1ce3\7\u030f\2\2\u1cdc\u1cdd\7\u017b\2\2\u1cdd\u1cde\7\u0283"+
		"\2\2\u1cde\u1cdf\7\u00ab\2\2\u1cdf\u1ce0\7\u0324\2\2\u1ce0\u1ce1\5\u026c"+
		"\u0137\2\u1ce1\u1ce2\7\u0325\2\2\u1ce2\u1ce4\3\2\2\2\u1ce3\u1cdc\3\2\2"+
		"\2\u1ce3\u1ce4\3\2\2\2\u1ce4\u1ce6\3\2\2\2\u1ce5\u1cd4\3\2\2\2\u1ce5\u1cd7"+
		"\3\2\2\2\u1ce6\u026b\3\2\2\2\u1ce7\u1ce8\tP\2\2\u1ce8\u1ce9\7\u0313\2"+
		"\2\u1ce9\u1cf0\7\u030f\2\2\u1cea\u1ceb\7\u0326\2\2\u1ceb\u1cec\tQ\2\2"+
		"\u1cec\u1ced\7%\2\2\u1ced\u1cee\7\u00f3\2\2\u1cee\u1cef\7\u0313\2\2\u1cef"+
		"\u1cf1\7\u030f\2\2\u1cf0\u1cea\3\2\2\2\u1cf0\u1cf1\3\2\2\2\u1cf1\u026d"+
		"\3\2\2\2\u1cf2\u1cf3\7\u01ec\2\2\u1cf3\u1cf4\7%\2\2\u1cf4\u1cf5\7\u00f3"+
		"\2\2\u1cf5\u1cf6\7\u0313\2\2\u1cf6\u1cf8\7\u030f\2\2\u1cf7\u1cf2\3\2\2"+
		"\2\u1cf7\u1cf8\3\2\2\2\u1cf8\u1cf9\3\2\2\2\u1cf9\u1cfa\7\u017b\2\2\u1cfa"+
		"\u1cfb\7\u02d6\2\2\u1cfb\u1cfc\7\u0313\2\2\u1cfc\u1d01\7\u030f\2\2\u1cfd"+
		"\u1cfe\7\u0326\2\2\u1cfe\u1d00\5\u0270\u0139\2\u1cff\u1cfd\3\2\2\2\u1d00"+
		"\u1d03\3\2\2\2\u1d01\u1cff\3\2\2\2\u1d01\u1d02\3\2\2\2\u1d02\u026f\3\2"+
		"\2\2\u1d03\u1d01\3\2\2\2\u1d04\u1d05\tR\2\2\u1d05\u1d06\7\u0313\2\2\u1d06"+
		"\u1d07\7\u030f\2\2\u1d07\u0271\3\2\2\2\u1d08\u1d09\7\u00e6\2\2\u1d09\u1d0a"+
		"\7\u02db\2\2\u1d0a\u1d0b\7\u00ab\2\2\u1d0b\u1d0c\5\u03a0\u01d1\2\u1d0c"+
		"\u1d0d\7\u01d2\2\2\u1d0d\u1d0e\7%\2\2\u1d0e\u1d0f\5\u027e\u0140\2\u1d0f"+
		"\u1d19\3\2\2\2\u1d10\u1d11\7\u00e6\2\2\u1d11\u1d12\7\u00bc\2\2\u1d12\u1d13"+
		"\7\u00ab\2\2\u1d13\u1d14\7\u01d2\2\2\u1d14\u1d15\7%\2\2\u1d15\u1d16\7"+
		"\u00f3\2\2\u1d16\u1d17\7\u0313\2\2\u1d17\u1d19\7\u030f\2\2\u1d18\u1d08"+
		"\3\2\2\2\u1d18\u1d10\3\2\2\2\u1d19\u0273\3\2\2\2\u1d1a\u1d1b\7\62\2\2"+
		"\u1d1b\u1d1c\7\u02db\2\2\u1d1c\u1d1d\7\u00ab\2\2\u1d1d\u1d26\5\u03a0\u01d1"+
		"\2\u1d1e\u1d1f\7\62\2\2\u1d1f\u1d20\7\5\2\2\u1d20\u1d21\7\u02db\2\2\u1d21"+
		"\u1d26\7\u0228\2\2\u1d22\u1d23\7\62\2\2\u1d23\u1d24\7\u00bc\2\2\u1d24"+
		"\u1d26\7\u00ab\2\2\u1d25\u1d1a\3\2\2\2\u1d25\u1d1e\3\2\2\2\u1d25\u1d22"+
		"\3\2\2\2\u1d26\u0275\3\2\2\2\u1d27\u1d28\7H\2\2\u1d28\u1d29\7\u00bc\2"+
		"\2\u1d29\u1d2a\7\u00ab\2\2\u1d2a\u1d2b\7\u01ec\2\2\u1d2b\u1d2c\7%\2\2"+
		"\u1d2c\u1d2d\7\u00f3\2\2\u1d2d\u1d2e\7\u0313\2\2\u1d2e\u1d4b\7\u030f\2"+
		"\2\u1d2f\u1d30\7H\2\2\u1d30\u1d31\7\u02db\2\2\u1d31\u1d32\7\u00ab\2\2"+
		"\u1d32\u1d35\5\u03a0\u01d1\2\u1d33\u1d34\7\23\2\2\u1d34\u1d36\5\u03a0"+
		"\u01d1\2\u1d35\u1d33\3\2\2\2\u1d35\u1d36\3\2\2\2\u1d36\u1d3a\3\2\2\2\u1d37"+
		"\u1d38\7\u008b\2\2\u1d38\u1d39\7\u0288\2\2\u1d39\u1d3b\5\u03a0\u01d1\2"+
		"\u1d3a\u1d37\3\2\2\2\u1d3a\u1d3b\3\2\2\2\u1d3b\u1d3c\3\2\2\2\u1d3c\u1d46"+
		"\7\u017b\2\2\u1d3d\u1d42\5\u0278\u013d\2\u1d3e\u1d3f\7\u01ec\2\2\u1d3f"+
		"\u1d40\7%\2\2\u1d40\u1d42\5\u027c\u013f\2\u1d41\u1d3d\3\2\2\2\u1d41\u1d3e"+
		"\3\2\2\2\u1d42\u1d44\3\2\2\2\u1d43\u1d45\7\u0326\2\2\u1d44\u1d43\3\2\2"+
		"\2\u1d44\u1d45\3\2\2\2\u1d45\u1d47\3\2\2\2\u1d46\u1d41\3\2\2\2\u1d47\u1d48"+
		"\3\2\2\2\u1d48\u1d46\3\2\2\2\u1d48\u1d49\3\2\2\2\u1d49\u1d4b\3\2\2\2\u1d4a"+
		"\u1d27\3\2\2\2\u1d4a\u1d2f\3\2\2\2\u1d4b\u0277\3\2\2\2\u1d4c\u1d4d\7\u0229"+
		"\2\2\u1d4d\u1d4e\7\u0313\2\2\u1d4e\u1d5c\7\u030f\2\2\u1d4f\u1d50\7\u018c"+
		"\2\2\u1d50\u1d51\7\u0313\2\2\u1d51\u1d5c\5\u027a\u013e\2\u1d52\u1d53\7"+
		"\u0217\2\2\u1d53\u1d54\7\u0313\2\2\u1d54\u1d5c\7\u030f\2\2\u1d55\u1d56"+
		"\7\u0289\2\2\u1d56\u1d57\7\u0313\2\2\u1d57\u1d5c\7\u030f\2\2\u1d58\u1d59"+
		"\7\u01c5\2\2\u1d59\u1d5a\7\u0313\2\2\u1d5a\u1d5c\t\13\2\2\u1d5b\u1d4c"+
		"\3\2\2\2\u1d5b\u1d4f\3\2\2\2\u1d5b\u1d52\3\2\2\2\u1d5b\u1d55\3\2\2\2\u1d5b"+
		"\u1d58\3\2\2\2\u1d5c\u0279\3\2\2\2\u1d5d\u1d5e\t\61\2\2\u1d5e\u027b\3"+
		"\2\2\2\u1d5f\u1d60\7*\2\2\u1d60\u1d6b\5\u03a0\u01d1\2\u1d61\u1d62\7\21"+
		"\2\2\u1d62\u1d63\7\u00ab\2\2\u1d63\u1d6b\5\u03a0\u01d1\2\u1d64\u1d65\7"+
		"\u02db\2\2\u1d65\u1d66\7\u00ab\2\2\u1d66\u1d6b\5\u03a0\u01d1\2\u1d67\u1d68"+
		"\7\u00f3\2\2\u1d68\u1d69\7\u0313\2\2\u1d69\u1d6b\7\u030f\2\2\u1d6a\u1d5f"+
		"\3\2\2\2\u1d6a\u1d61\3\2\2\2\u1d6a\u1d64\3\2\2\2\u1d6a\u1d67\3\2\2\2\u1d6b"+
		"\u027d\3\2\2\2\u1d6c\u1d6d\7*\2\2\u1d6d\u1d72\5\u03a0\u01d1\2\u1d6e\u1d6f"+
		"\7\u017b\2\2\u1d6f\u1d70\7\u00f3\2\2\u1d70\u1d71\7\u0313\2\2\u1d71\u1d73"+
		"\7\u030f\2\2\u1d72\u1d6e\3\2\2\2\u1d72\u1d73\3\2\2\2\u1d73\u1d84\3\2\2"+
		"\2\u1d74\u1d75\7\21\2\2\u1d75\u1d76\7\u00ab\2\2\u1d76\u1d7b\5\u03a0\u01d1"+
		"\2\u1d77\u1d78\7\u017b\2\2\u1d78\u1d79\7\u00f3\2\2\u1d79\u1d7a\7\u0313"+
		"\2\2\u1d7a\u1d7c\7\u030f\2\2\u1d7b\u1d77\3\2\2\2\u1d7b\u1d7c\3\2\2\2\u1d7c"+
		"\u1d84\3\2\2\2\u1d7d\u1d7e\7\u02db\2\2\u1d7e\u1d7f\7\u00ab\2\2\u1d7f\u1d84"+
		"\5\u03a0\u01d1\2\u1d80\u1d81\7\u00f3\2\2\u1d81\u1d82\7\u0313\2\2\u1d82"+
		"\u1d84\7\u030f\2\2\u1d83\u1d6c\3\2\2\2\u1d83\u1d74\3\2\2\2\u1d83\u1d7d"+
		"\3\2\2\2\u1d83\u1d80\3\2\2\2\u1d84\u027f\3\2\2\2\u1d85\u1da0\7v\2\2\u1d86"+
		"\u1d87\7\u0174\2\2\u1d87\u1da0\5\u03a0\u01d1\2\u1d88\u1d89\7\u02de\2\2"+
		"\u1d89\u1da0\5\u03a0\u01d1\2\u1d8a\u1d8c\7\u01be\2\2\u1d8b\u1d8d\5\u03a0"+
		"\u01d1\2\u1d8c\u1d8b\3\2\2\2\u1d8c\u1d8d\3\2\2\2\u1d8d\u1da0\3\2\2\2\u1d8e"+
		"\u1d8f\7H\2\2\u1d8f\u1da0\tS\2\2\u1d90\u1da0\7\u02c7\2\2\u1d91\u1da0\7"+
		"\u021a\2\2\u1d92\u1da0\7\u0131\2\2\u1d93\u1da0\7\u010d\2\2\u1d94\u1da0"+
		"\7\u00a1\2\2\u1d95\u1d9d\7\t\2\2\u1d96\u1d98\7\f\2\2\u1d97\u1d96\3\2\2"+
		"\2\u1d97\u1d98\3\2\2\2\u1d98\u1d9b\3\2\2\2\u1d99\u1d9c\5\u03a0\u01d1\2"+
		"\u1d9a\u1d9c\7T\2\2\u1d9b\u1d99\3\2\2\2\u1d9b\u1d9a\3\2\2\2\u1d9c\u1d9e"+
		"\3\2\2\2\u1d9d\u1d97\3\2\2\2\u1d9d\u1d9e\3\2\2\2\u1d9e\u1da0\3\2\2\2\u1d9f"+
		"\u1d85\3\2\2\2\u1d9f\u1d86\3\2\2\2\u1d9f\u1d88\3\2\2\2\u1d9f\u1d8a\3\2"+
		"\2\2\u1d9f\u1d8e\3\2\2\2\u1d9f\u1d90\3\2\2\2\u1d9f\u1d91\3\2\2\2\u1d9f"+
		"\u1d92\3\2\2\2\u1d9f\u1d93\3\2\2\2\u1d9f\u1d94\3\2\2\2\u1d9f\u1d95\3\2"+
		"\2\2\u1da0\u0281\3\2\2\2\u1da1\u1da2\7\u013c\2\2\u1da2\u1da5\7\u030a\2"+
		"\2\u1da3\u1da4\7\u031f\2\2\u1da4\u1da6\5\u03a0\u01d1\2\u1da5\u1da3\3\2"+
		"\2\2\u1da5\u1da6\3\2\2\2\u1da6\u1da7\3\2\2\2\u1da7\u1da8\7\u0313\2\2\u1da8"+
		"\u1daa\5\u02b6\u015c\2\u1da9\u1dab\7\u0327\2\2\u1daa\u1da9\3\2\2\2\u1daa"+
		"\u1dab\3\2\2\2\u1dab\u1dc9\3\2\2\2\u1dac\u1dad\7\u013c\2\2\u1dad\u1dae"+
		"\7\u030a\2\2\u1dae\u1daf\5\u03a6\u01d4\2\u1daf\u1db1\5\u02b6\u015c\2\u1db0"+
		"\u1db2\7\u0327\2\2\u1db1\u1db0\3\2\2\2\u1db1\u1db2\3\2\2\2\u1db2\u1dc9"+
		"\3\2\2\2\u1db3\u1db4\7\u013c\2\2\u1db4\u1db5\7\u030a\2\2\u1db5\u1db6\7"+
		"\u0313\2\2\u1db6\u1db7\7O\2\2\u1db7\u1dc2\5\u02ac\u0157\2\u1db8\u1dc0"+
		"\7\u0085\2\2\u1db9\u1dba\7\u0109\2\2\u1dba\u1dc1\7\u026e\2\2\u1dbb\u1dbe"+
		"\7\u016b\2\2\u1dbc\u1dbd\7\u00e0\2\2\u1dbd\u1dbf\5\u0378\u01bd\2\u1dbe"+
		"\u1dbc\3\2\2\2\u1dbe\u1dbf\3\2\2\2\u1dbf\u1dc1\3\2\2\2\u1dc0\u1db9\3\2"+
		"\2\2\u1dc0\u1dbb\3\2\2\2\u1dc1\u1dc3\3\2\2\2\u1dc2\u1db8\3\2\2\2\u1dc2"+
		"\u1dc3\3\2\2\2\u1dc3\u1dc5\3\2\2\2\u1dc4\u1dc6\7\u0327\2\2\u1dc5\u1dc4"+
		"\3\2\2\2\u1dc5\u1dc6\3\2\2\2\u1dc6\u1dc9\3\2\2\2\u1dc7\u1dc9\5\u02b2\u015a"+
		"\2\u1dc8\u1da1\3\2\2\2\u1dc8\u1dac\3\2\2\2\u1dc8\u1db3\3\2\2\2\u1dc8\u1dc7"+
		"\3\2\2\2\u1dc9\u0283\3\2\2\2\u1dca\u1dcb\7\33\2\2\u1dcb\u1dcc\7c\2\2\u1dcc"+
		"\u1dcf\tT\2\2\u1dcd\u1dd0\5\u03a0\u01d1\2\u1dce\u1dd0\7\u030a\2\2\u1dcf"+
		"\u1dcd\3\2\2\2\u1dcf\u1dce\3\2\2\2\u1dcf\u1dd0\3\2\2\2\u1dd0\u1dd2\3\2"+
		"\2\2\u1dd1\u1dd3\7\u0327\2\2\u1dd2\u1dd1\3\2\2\2\u1dd2\u1dd3\3\2\2\2\u1dd3"+
		"\u1e18\3\2\2\2\u1dd4\u1dd5\7\33\2\2\u1dd5\u1ddf\tT\2\2\u1dd6\u1dd9\5\u03a0"+
		"\u01d1\2\u1dd7\u1dd9\7\u030a\2\2\u1dd8\u1dd6\3\2\2\2\u1dd8\u1dd7\3\2\2"+
		"\2\u1dd9\u1ddd\3\2\2\2\u1dda\u1ddb\7\u017b\2\2\u1ddb\u1ddc\7\u023a\2\2"+
		"\u1ddc\u1dde\7\u030f\2\2\u1ddd\u1dda\3\2\2\2\u1ddd\u1dde\3\2\2\2\u1dde"+
		"\u1de0\3\2\2\2\u1ddf\u1dd8\3\2\2\2\u1ddf\u1de0\3\2\2\2\u1de0\u1de2\3\2"+
		"\2\2\u1de1\u1de3\7\u0327\2\2\u1de2\u1de1\3\2\2\2\u1de2\u1de3\3\2\2\2\u1de3"+
		"\u1e18\3\2\2\2\u1de4\u1de5\79\2\2\u1de5\u1df2\tT\2\2\u1de6\u1de9\5\u03a0"+
		"\u01d1\2\u1de7\u1de9\7\u030a\2\2\u1de8\u1de6\3\2\2\2\u1de8\u1de7\3\2\2"+
		"\2\u1de9\u1df0\3\2\2\2\u1dea\u1deb\7\u017b\2\2\u1deb\u1dec\7\u0324\2\2"+
		"\u1dec\u1ded\7\u01d7\2\2\u1ded\u1dee\7\u0313\2\2\u1dee\u1def\t\b\2\2\u1def"+
		"\u1df1\7\u0325\2\2\u1df0\u1dea\3\2\2\2\u1df0\u1df1\3\2\2\2\u1df1\u1df3"+
		"\3\2\2\2\u1df2\u1de8\3\2\2\2\u1df2\u1df3\3\2\2\2\u1df3\u1df5\3\2\2\2\u1df4"+
		"\u1df6\7\u0327\2\2\u1df5\u1df4\3\2\2\2\u1df5\u1df6\3\2\2\2\u1df6\u1e18"+
		"\3\2\2\2\u1df7\u1df9\79\2\2\u1df8\u1dfa\7\u02ff\2\2\u1df9\u1df8\3\2\2"+
		"\2\u1df9\u1dfa\3\2\2\2\u1dfa\u1dfc\3\2\2\2\u1dfb\u1dfd\7\u0327\2\2\u1dfc"+
		"\u1dfb\3\2\2\2\u1dfc\u1dfd\3\2\2\2\u1dfd\u1e18\3\2\2\2\u1dfe\u1dff\7\u011f"+
		"\2\2\u1dff\u1e02\tT\2\2\u1e00\u1e03\5\u03a0\u01d1\2\u1e01\u1e03\7\u030a"+
		"\2\2\u1e02\u1e00\3\2\2\2\u1e02\u1e01\3\2\2\2\u1e02\u1e03\3\2\2\2\u1e03"+
		"\u1e05\3\2\2\2\u1e04\u1e06\7\u0327\2\2\u1e05\u1e04\3\2\2\2\u1e05\u1e06"+
		"\3\2\2\2\u1e06\u1e18\3\2\2\2\u1e07\u1e09\7\u011f\2\2\u1e08\u1e0a\7\u02ff"+
		"\2\2\u1e09\u1e08\3\2\2\2\u1e09\u1e0a\3\2\2\2\u1e0a\u1e0c\3\2\2\2\u1e0b"+
		"\u1e0d\7\u0327\2\2\u1e0c\u1e0b\3\2\2\2\u1e0c\u1e0d\3\2\2\2\u1e0d\u1e18"+
		"\3\2\2\2\u1e0e\u1e0f\7\u012b\2\2\u1e0f\u1e12\tT\2\2\u1e10\u1e13\5\u03a0"+
		"\u01d1\2\u1e11\u1e13\7\u030a\2\2\u1e12\u1e10\3\2\2\2\u1e12\u1e11\3\2\2"+
		"\2\u1e12\u1e13\3\2\2\2\u1e13\u1e15\3\2\2\2\u1e14\u1e16\7\u0327\2\2\u1e15"+
		"\u1e14\3\2\2\2\u1e15\u1e16\3\2\2\2\u1e16\u1e18\3\2\2\2\u1e17\u1dca\3\2"+
		"\2\2\u1e17\u1dd4\3\2\2\2\u1e17\u1de4\3\2\2\2\u1e17\u1df7\3\2\2\2\u1e17"+
		"\u1dfe\3\2\2\2\u1e17\u1e07\3\2\2\2\u1e17\u1e0e\3\2\2\2\u1e18\u0285\3\2"+
		"\2\2\u1e19\u1e1b\7\u020d\2\2\u1e1a\u1e1c\7\u030b\2\2\u1e1b\u1e1a\3\2\2"+
		"\2\u1e1b\u1e1c\3\2\2\2\u1e1c\u0287\3\2\2\2\u1e1d\u1e1e\7\u016e\2\2\u1e1e"+
		"\u1e20\5\u03a0\u01d1\2\u1e1f\u1e21\7\u0327\2\2\u1e20\u1e1f\3\2\2\2\u1e20"+
		"\u1e21\3\2\2\2\u1e21\u0289\3\2\2\2\u1e22\u1e23\7V\2\2\u1e23\u1e28\5\u03a2"+
		"\u01d2\2\u1e24\u1e25\7\u0324\2\2\u1e25\u1e26\5\u0344\u01a3\2\u1e26\u1e27"+
		"\7\u0325\2\2\u1e27\u1e29\3\2\2\2\u1e28\u1e24\3\2\2\2\u1e28\u1e29\3\2\2"+
		"\2\u1e29\u1e2c\3\2\2\2\u1e2a\u1e2b\7\u017b\2\2\u1e2b\u1e2d\5\u028c\u0147"+
		"\2\u1e2c\u1e2a\3\2\2\2\u1e2c\u1e2d\3\2\2\2\u1e2d\u1e2f\3\2\2\2\u1e2e\u1e30"+
		"\7\u0327\2\2\u1e2f\u1e2e\3\2\2\2\u1e2f\u1e30\3\2\2\2\u1e30\u028b\3\2\2"+
		"\2\u1e31\u1e34\5\u03a2\u01d2\2\u1e32\u1e33\7\u0326\2\2\u1e33\u1e35\5\u03a2"+
		"\u01d2\2\u1e34\u1e32\3\2\2\2\u1e34\u1e35\3\2\2\2\u1e35\u028d\3\2\2\2\u1e36"+
		"\u1e37\7v\2\2\u1e37\u1e38\7\17\2\2\u1e38\u1e39\tU\2\2\u1e39\u028f\3\2"+
		"\2\2\u1e3a\u1e3c\7\u030a\2\2\u1e3b\u1e3d\7\17\2\2\u1e3c\u1e3b\3\2\2\2"+
		"\u1e3c\u1e3d\3\2\2\2\u1e3d\u1e3e\3\2\2\2\u1e3e\u1e41\5\u0398\u01cd\2\u1e3f"+
		"\u1e40\7\u0313\2\2\u1e40\u1e42\5\u02b6\u015c\2\u1e41\u1e3f\3\2\2\2\u1e41"+
		"\u1e42\3\2\2\2\u1e42\u0291\3\2\2\2\u1e43\u1e44\7\u0155\2\2\u1e44\u1e45"+
		"\7\u0324\2\2\u1e45\u1e46\5\u0298\u014d\2\u1e46\u1e47\7\u0325\2\2\u1e47"+
		"\u0293\3\2\2\2\u1e48\u1e49\7\u0301\2\2\u1e49\u1e4b\7\u0324\2\2\u1e4a\u1e4c"+
		"\tV\2\2\u1e4b\u1e4a\3\2\2\2\u1e4b\u1e4c\3\2\2\2\u1e4c\u1e4d\3\2\2\2\u1e4d"+
		"\u1e4e\5\u0296\u014c\2\u1e4e\u1e4f\7\u0325\2\2\u1e4f\u0295\3\2\2\2\u1e50"+
		"\u1e51\7\u030c\2\2\u1e51\u1e52\7\u031f\2\2\u1e52\u1e53\7\u030c\2\2\u1e53"+
		"\u0297\3\2\2\2\u1e54\u1e5b\5\u029a\u014e\2\u1e55\u1e57\7\u0326\2\2\u1e56"+
		"\u1e55\3\2\2\2\u1e56\u1e57\3\2\2\2\u1e57\u1e58\3\2\2\2\u1e58\u1e5a\5\u029a"+
		"\u014e\2\u1e59\u1e56\3\2\2\2\u1e5a\u1e5d\3\2\2\2\u1e5b\u1e59\3\2\2\2\u1e5b"+
		"\u1e5c\3\2\2\2\u1e5c\u0299\3\2\2\2\u1e5d\u1e5b\3\2\2\2\u1e5e\u1e61\5\u029c"+
		"\u014f\2\u1e5f\u1e61\5\u02a0\u0151\2\u1e60\u1e5e\3\2\2\2\u1e60\u1e5f\3"+
		"\2\2\2\u1e61\u029b\3\2\2\2\u1e62\u1e66\5\u03a0\u01d1\2\u1e63\u1e67\5\u0398"+
		"\u01cd\2\u1e64\u1e65\7\17\2\2\u1e65\u1e67\5\u02b6\u015c\2\u1e66\u1e63"+
		"\3\2\2\2\u1e66\u1e64\3\2\2\2\u1e67\u1e6a\3\2\2\2\u1e68\u1e69\7\66\2\2"+
		"\u1e69\u1e6b\5\u03a0\u01d1\2\u1e6a\u1e68\3\2\2\2\u1e6a\u1e6b\3\2\2\2\u1e6b"+
		"\u1e6d\3\2\2\2\u1e6c\u1e6e\5\u0380\u01c1\2\u1e6d\u1e6c\3\2\2\2\u1e6d\u1e6e"+
		"\3\2\2\2\u1e6e\u1e84\3\2\2\2\u1e6f\u1e70\7<\2\2\u1e70\u1e72\5\u03a0\u01d1"+
		"\2\u1e71\u1e6f\3\2\2\2\u1e71\u1e72\3\2\2\2\u1e72\u1e73\3\2\2\2\u1e73\u1e75"+
		"\5\u0382\u01c2\2\u1e74\u1e76\5\u0382\u01c2\2\u1e75\u1e74\3\2\2\2\u1e75"+
		"\u1e76\3\2\2\2\u1e76\u1e85\3\2\2\2\u1e77\u1e7d\7\u0096\2\2\u1e78\u1e79"+
		"\7\u0324\2\2\u1e79\u1e7a\7\u030b\2\2\u1e7a\u1e7b\7\u0326\2\2\u1e7b\u1e7c"+
		"\7\u030b\2\2\u1e7c\u1e7e\7\u0325\2\2\u1e7d\u1e78\3\2\2\2\u1e7d\u1e7e\3"+
		"\2\2\2\u1e7e\u1e82\3\2\2\2\u1e7f\u1e80\7\u00db\2\2\u1e80\u1e81\7\u0085"+
		"\2\2\u1e81\u1e83\7\u0111\2\2\u1e82\u1e7f\3\2\2\2\u1e82\u1e83\3\2\2\2\u1e83"+
		"\u1e85\3\2\2\2\u1e84\u1e71\3\2\2\2\u1e84\u1e77\3\2\2\2\u1e84\u1e85\3\2"+
		"\2\2\u1e85\u1e87\3\2\2\2\u1e86\u1e88\7\u0122\2\2\u1e87\u1e86\3\2\2\2\u1e87"+
		"\u1e88\3\2\2\2\u1e88\u1e8c\3\2\2\2\u1e89\u1e8b\5\u029e\u0150\2\u1e8a\u1e89"+
		"\3\2\2\2\u1e8b\u1e8e\3\2\2\2\u1e8c\u1e8a\3\2\2\2\u1e8c\u1e8d\3\2\2\2\u1e8d"+
		"\u029d\3\2\2\2\u1e8e\u1e8c\3\2\2\2\u1e8f\u1e90\7<\2\2\u1e90\u1e92\5\u03a0"+
		"\u01d1\2\u1e91\u1e8f\3\2\2\2\u1e91\u1e92\3\2\2\2\u1e92\u1eb8\3\2\2\2\u1e93"+
		"\u1e94\7\u00ff\2\2\u1e94\u1e97\7\u00ab\2\2\u1e95\u1e97\7\u0167\2\2\u1e96"+
		"\u1e93\3\2\2\2\u1e96\u1e95\3\2\2\2\u1e97\u1e99\3\2\2\2\u1e98\u1e9a\5\u037e"+
		"\u01c0\2\u1e99\u1e98\3\2\2\2\u1e99\u1e9a\3\2\2\2\u1e9a\u1e9c\3\2\2\2\u1e9b"+
		"\u1e9d\5\u02a6\u0154\2\u1e9c\u1e9b\3\2\2\2\u1e9c\u1e9d\3\2\2\2\u1e9d\u1eb9"+
		"\3\2\2\2\u1e9e\u1ea2\7-\2\2\u1e9f\u1ea0\7\u00db\2\2\u1ea0\u1ea1\7\u0085"+
		"\2\2\u1ea1\u1ea3\7\u0111\2\2\u1ea2\u1e9f\3\2\2\2\u1ea2\u1ea3\3\2\2\2\u1ea3"+
		"\u1ea4\3\2\2\2\u1ea4\u1ea5\7\u0324\2\2\u1ea5\u1ea6\5\u02cc\u0167\2\u1ea6"+
		"\u1ea7\7\u0325\2\2\u1ea7\u1eb9\3\2\2\2\u1ea8\u1ea9\7\u0088\2\2\u1ea9\u1eab"+
		"\7\u00ab\2\2\u1eaa\u1ea8\3\2\2\2\u1eaa\u1eab\3\2\2\2\u1eab\u1eac\3\2\2"+
		"\2\u1eac\u1ead\7\u010d\2\2\u1ead\u1eae\5\u036c\u01b7\2\u1eae\u1eaf\7\u0324"+
		"\2\2\u1eaf\u1eb0\5\u0378\u01bd\2\u1eb0\u1eb2\7\u0325\2\2\u1eb1\u1eb3\5"+
		"\u02a2\u0152\2\u1eb2\u1eb1\3\2\2\2\u1eb2\u1eb3\3\2\2\2\u1eb3\u1eb5\3\2"+
		"\2\2\u1eb4\u1eb6\5\u02a4\u0153\2\u1eb5\u1eb4\3\2\2\2\u1eb5\u1eb6\3\2\2"+
		"\2\u1eb6\u1eb9\3\2\2\2\u1eb7\u1eb9\5\u0380\u01c1\2\u1eb8\u1e96\3\2\2\2"+
		"\u1eb8\u1e9e\3\2\2\2\u1eb8\u1eaa\3\2\2\2\u1eb8\u1eb7\3\2\2\2\u1eb9\u029f"+
		"\3\2\2\2\u1eba\u1ebb\7<\2\2\u1ebb\u1ebd\5\u03a0\u01d1\2\u1ebc\u1eba\3"+
		"\2\2\2\u1ebc\u1ebd\3\2\2\2\u1ebd\u1efb\3\2\2\2\u1ebe\u1ebf\7\u00ff\2\2"+
		"\u1ebf\u1ec2\7\u00ab\2\2\u1ec0\u1ec2\7\u0167\2\2\u1ec1\u1ebe\3\2\2\2\u1ec1"+
		"\u1ec0\3\2\2\2\u1ec2\u1ec4\3\2\2\2\u1ec3\u1ec5\5\u037e\u01c0\2\u1ec4\u1ec3"+
		"\3\2\2\2\u1ec4\u1ec5\3\2\2\2\u1ec5\u1ec6\3\2\2\2\u1ec6\u1ec7\7\u0324\2"+
		"\2\u1ec7\u1ec8\5\u0376\u01bc\2\u1ec8\u1eca\7\u0325\2\2\u1ec9\u1ecb\5\u02a6"+
		"\u0154\2\u1eca\u1ec9\3\2\2\2\u1eca\u1ecb\3\2\2\2\u1ecb\u1ece\3\2\2\2\u1ecc"+
		"\u1ecd\7\u00e4\2\2\u1ecd\u1ecf\5\u03a0\u01d1\2\u1ece\u1ecc\3\2\2\2\u1ece"+
		"\u1ecf\3\2\2\2\u1ecf\u1efc\3\2\2\2\u1ed0\u1ed4\7-\2\2\u1ed1\u1ed2\7\u00db"+
		"\2\2\u1ed2\u1ed3\7\u0085\2\2\u1ed3\u1ed5\7\u0111\2\2\u1ed4\u1ed1\3\2\2"+
		"\2\u1ed4\u1ed5\3\2\2\2\u1ed5\u1ed6\3\2\2\2\u1ed6\u1ed7\7\u0324\2\2\u1ed7"+
		"\u1ed8\5\u02cc\u0167\2\u1ed8\u1ed9\7\u0325\2\2\u1ed9\u1efc\3\2\2\2\u1eda"+
		"\u1edc\7Y\2\2\u1edb\u1edd\7\u0324\2\2\u1edc\u1edb\3\2\2\2\u1edc\u1edd"+
		"\3\2\2\2\u1edd\u1ee2\3\2\2\2\u1ede\u1ee3\7\u030f\2\2\u1edf\u1ee3\7\u032c"+
		"\2\2\u1ee0\u1ee3\5\u031e\u0190\2\u1ee1\u1ee3\7\u030b\2\2\u1ee2\u1ede\3"+
		"\2\2\2\u1ee2\u1edf\3\2\2\2\u1ee2\u1ee0\3\2\2\2\u1ee2\u1ee1\3\2\2\2\u1ee3"+
		"\u1ee4\3\2\2\2\u1ee4\u1ee2\3\2\2\2\u1ee4\u1ee5\3\2\2\2\u1ee5\u1ee7\3\2"+
		"\2\2\u1ee6\u1ee8\7\u0325\2\2\u1ee7\u1ee6\3\2\2\2\u1ee7\u1ee8\3\2\2\2\u1ee8"+
		"\u1ee9\3\2\2\2\u1ee9\u1eea\7\u0085\2\2\u1eea\u1efc\5\u03a0\u01d1\2\u1eeb"+
		"\u1eec\7\u0088\2\2\u1eec\u1eed\7\u00ab\2\2\u1eed\u1eee\7\u0324\2\2\u1eee"+
		"\u1eef\5\u0378\u01bd\2\u1eef\u1ef0\7\u0325\2\2\u1ef0\u1ef1\7\u010d\2\2"+
		"\u1ef1\u1ef2\5\u036c\u01b7\2\u1ef2\u1ef3\7\u0324\2\2\u1ef3\u1ef4\5\u0378"+
		"\u01bd\2\u1ef4\u1ef6\7\u0325\2\2\u1ef5\u1ef7\5\u02a2\u0152\2\u1ef6\u1ef5"+
		"\3\2\2\2\u1ef6\u1ef7\3\2\2\2\u1ef7\u1ef9\3\2\2\2\u1ef8\u1efa\5\u02a4\u0153"+
		"\2\u1ef9\u1ef8\3\2\2\2\u1ef9\u1efa\3\2\2\2\u1efa\u1efc\3\2\2\2\u1efb\u1ec1"+
		"\3\2\2\2\u1efb\u1ed0\3\2\2\2\u1efb\u1eda\3\2\2\2\u1efb\u1eeb\3\2\2\2\u1efc"+
		"\u02a1\3\2\2\2\u1efd\u1efe\7\u00e4\2\2\u1efe\u1f06\7\\\2\2\u1eff\u1f00"+
		"\7\u0261\2\2\u1f00\u1f07\7\u0182\2\2\u1f01\u1f07\7(\2\2\u1f02\u1f03\7"+
		"\u013c\2\2\u1f03\u1f07\7\u00de\2\2\u1f04\u1f05\7\u013c\2\2\u1f05\u1f07"+
		"\7Y\2\2\u1f06\u1eff\3\2\2\2\u1f06\u1f01\3\2\2\2\u1f06\u1f02\3\2\2\2\u1f06"+
		"\u1f04\3\2\2\2\u1f07\u02a3\3\2\2\2\u1f08\u1f09\7\u00e4\2\2\u1f09\u1f11"+
		"\7\u016b\2\2\u1f0a\u1f0b\7\u0261\2\2\u1f0b\u1f12\7\u0182\2\2\u1f0c\u1f12"+
		"\7(\2\2\u1f0d\u1f0e\7\u013c\2\2\u1f0e\u1f12\7\u00de\2\2\u1f0f\u1f10\7"+
		"\u013c\2\2\u1f10\u1f12\7Y\2\2\u1f11\u1f0a\3\2\2\2\u1f11\u1f0c\3\2\2\2"+
		"\u1f11\u1f0d\3\2\2\2\u1f11\u1f0f\3\2\2\2\u1f12\u02a5\3\2\2\2\u1f13\u1f14"+
		"\7\u017b\2\2\u1f14\u1f15\7\u0324\2\2\u1f15\u1f1a\5\u02a8\u0155\2\u1f16"+
		"\u1f17\7\u0326\2\2\u1f17\u1f19\5\u02a8\u0155\2\u1f18\u1f16\3\2\2\2\u1f19"+
		"\u1f1c\3\2\2\2\u1f1a\u1f18\3\2\2\2\u1f1a\u1f1b\3\2\2\2\u1f1b\u1f1d\3\2"+
		"\2\2\u1f1c\u1f1a\3\2\2\2\u1f1d\u1f1e\7\u0325\2\2\u1f1e\u02a7\3\2\2\2\u1f1f"+
		"\u1f20\5\u03a2\u01d2\2\u1f20\u1f24\7\u0313\2\2\u1f21\u1f25\5\u03a2\u01d2"+
		"\2\u1f22\u1f25\5\u037c\u01bf\2\u1f23\u1f25\7\u030b\2\2\u1f24\u1f21\3\2"+
		"\2\2\u1f24\u1f22\3\2\2\2\u1f24\u1f23\3\2\2\2\u1f25\u02a9\3\2\2\2\u1f26"+
		"\u1f27\7X\2\2\u1f27\u1f47\5\u037a\u01be\2\u1f28\u1f32\7O\2\2\u1f29\u1f30"+
		"\5\u02ac\u0157\2\u1f2a\u1f2b\7\u0085\2\2\u1f2b\u1f2e\7\u016b\2\2\u1f2c"+
		"\u1f2d\7\u00e0\2\2\u1f2d\u1f2f\5\u0378\u01bd\2\u1f2e\u1f2c\3\2\2\2\u1f2e"+
		"\u1f2f\3\2\2\2\u1f2f\u1f31\3\2\2\2\u1f30\u1f2a\3\2\2\2\u1f30\u1f31\3\2"+
		"\2\2\u1f31\u1f33\3\2\2\2\u1f32\u1f29\3\2\2\2\u1f32\u1f33\3\2\2\2\u1f33"+
		"\u1f48\3\2\2\2\u1f34\u1f36\7\u021f\2\2\u1f35\u1f34\3\2\2\2\u1f35\u1f36"+
		"\3\2\2\2\u1f36\u1f38\3\2\2\2\u1f37\u1f39\7\u02b7\2\2\u1f38\u1f37\3\2\2"+
		"\2\u1f38\u1f39\3\2\2\2\u1f39\u1f3a\3\2\2\2\u1f3a\u1f3b\7O\2\2\u1f3b\u1f3c"+
		"\7\u0085\2\2\u1f3c\u1f45\5\u01ba\u00de\2\u1f3d\u1f43\7\u0085\2\2\u1f3e"+
		"\u1f3f\7\u0109\2\2\u1f3f\u1f44\7\u026e\2\2\u1f40\u1f44\7\u016b\2\2\u1f41"+
		"\u1f42\7\u00e0\2\2\u1f42\u1f44\5\u0378\u01bd\2\u1f43\u1f3e\3\2\2\2\u1f43"+
		"\u1f40\3\2\2\2\u1f43\u1f41\3\2\2\2\u1f44\u1f46\3\2\2\2\u1f45\u1f3d\3\2"+
		"\2\2\u1f45\u1f46\3\2\2\2\u1f46\u1f48\3\2\2\2\u1f47\u1f28\3\2\2\2\u1f47"+
		"\u1f35\3\2\2\2\u1f48\u1f4a\3\2\2\2\u1f49\u1f4b\7\u0327\2\2\u1f4a\u1f49"+
		"\3\2\2\2\u1f4a\u1f4b\3\2\2\2\u1f4b\u02ab\3\2\2\2\u1f4c\u1f4e\5\u02ae\u0158"+
		"\2\u1f4d\u1f4c\3\2\2\2\u1f4e\u1f51\3\2\2\2\u1f4f\u1f4d\3\2\2\2\u1f4f\u1f50"+
		"\3\2\2\2\u1f50\u1f52\3\2\2\2\u1f51\u1f4f\3\2\2\2\u1f52\u1f53\7\u0085\2"+
		"\2\u1f53\u1f54\5\u01ba\u00de\2\u1f54\u02ad\3\2\2\2\u1f55\u1f5b\t>\2\2"+
		"\u1f56\u1f5b\tW\2\2\u1f57\u1f5b\tX\2\2\u1f58\u1f5b\tY\2\2\u1f59\u1f5b"+
		"\7\u02f1\2\2\u1f5a\u1f55\3\2\2\2\u1f5a\u1f56\3\2\2\2\u1f5a\u1f57\3\2\2"+
		"\2\u1f5a\u1f58\3\2\2\2\u1f5a\u1f59\3\2\2\2\u1f5b\u02af\3\2\2\2\u1f5c\u1f66"+
		"\7\u0080\2\2\u1f5d\u1f64\7\u025b\2\2\u1f5e\u1f64\7\u0280\2\2\u1f5f\u1f64"+
		"\7\u01ff\2\2\u1f60\u1f64\7\u022b\2\2\u1f61\u1f62\tZ\2\2\u1f62\u1f64\5"+
		"\u02b6\u015c\2\u1f63\u1f5d\3\2\2\2\u1f63\u1f5e\3\2\2\2\u1f63\u1f5f\3\2"+
		"\2\2\u1f63\u1f60\3\2\2\2\u1f63\u1f61\3\2\2\2\u1f63\u1f64\3\2\2\2\u1f64"+
		"\u1f65\3\2\2\2\u1f65\u1f67\7\u008b\2\2\u1f66\u1f63\3\2\2\2\u1f66\u1f67"+
		"\3\2\2\2\u1f67\u1f69\3\2\2\2\u1f68\u1f6a\7\u020c\2\2\u1f69\u1f68\3\2\2"+
		"\2\u1f69\u1f6a\3\2\2\2\u1f6a\u1f6b\3\2\2\2\u1f6b\u1f75\5\u037a\u01be\2"+
		"\u1f6c\u1f6d\7\u00a4\2\2\u1f6d\u1f72\7\u030a\2\2\u1f6e\u1f6f\7\u0326\2"+
		"\2\u1f6f\u1f71\7\u030a\2\2\u1f70\u1f6e\3\2\2\2\u1f71\u1f74\3\2\2\2\u1f72"+
		"\u1f70\3\2\2\2\u1f72\u1f73\3\2\2\2\u1f73\u1f76\3\2\2\2\u1f74\u1f72\3\2"+
		"\2\2\u1f75\u1f6c\3\2\2\2\u1f75\u1f76\3\2\2\2\u1f76\u1f78\3\2\2\2\u1f77"+
		"\u1f79\7\u0327\2\2\u1f78\u1f77\3\2\2\2\u1f78\u1f79\3\2\2\2\u1f79\u02b1"+
		"\3\2\2\2\u1f7a\u1f7b\7\u013c\2\2\u1f7b\u1f7f\5\u03a0\u01d1\2\u1f7c\u1f80"+
		"\5\u03a0\u01d1\2\u1f7d\u1f80\5\u02b4\u015b\2\u1f7e\u1f80\5\u037c\u01bf"+
		"\2\u1f7f\u1f7c\3\2\2\2\u1f7f\u1f7d\3\2\2\2\u1f7f\u1f7e\3\2\2\2\u1f80\u1f82"+
		"\3\2\2\2\u1f81\u1f83\7\u0327\2\2\u1f82\u1f81\3\2\2\2\u1f82\u1f83\3\2\2"+
		"\2\u1f83\u1fab\3\2\2\2\u1f84\u1f85\7\u013c\2\2\u1f85\u1f86\7\u0160\2\2"+
		"\u1f86\u1f87\7\u0223\2\2\u1f87\u1f90\7\u022e\2\2\u1f88\u1f89\7\u0109\2"+
		"\2\u1f89\u1f91\7\u02f3\2\2\u1f8a\u1f8b\7\u0109\2\2\u1f8b\u1f91\7\u01b9"+
		"\2\2\u1f8c\u1f8d\7\u02a4\2\2\u1f8d\u1f91\7\u0109\2\2\u1f8e\u1f91\7\u02cd"+
		"\2\2\u1f8f\u1f91\7\u02c4\2\2\u1f90\u1f88\3\2\2\2\u1f90\u1f8a\3\2\2\2\u1f90"+
		"\u1f8c\3\2\2\2\u1f90\u1f8e\3\2\2\2\u1f90\u1f8f\3\2\2\2\u1f91\u1f93\3\2"+
		"\2\2\u1f92\u1f94\7\u0327\2\2\u1f93\u1f92\3\2\2\2\u1f93\u1f94\3\2\2\2\u1f94"+
		"\u1fab\3\2\2\2\u1f95\u1f96\7\u013c\2\2\u1f96\u1f97\7\u0098\2\2\u1f97\u1f98"+
		"\5\u036c\u01b7\2\u1f98\u1f9a\5\u037c\u01bf\2\u1f99\u1f9b\7\u0327\2\2\u1f9a"+
		"\u1f99\3\2\2\2\u1f9a\u1f9b\3\2\2\2\u1f9b\u1fab\3\2\2\2\u1f9c\u1f9d\7\u013c"+
		"\2\2\u1f9d\u1f9e\7\u0190\2\2\u1f9e\u1fab\5\u037c\u01bf\2\u1f9f\u1fa0\7"+
		"\u013c\2\2\u1fa0\u1fa1\7\u028d\2\2\u1fa1\u1fab\5\u037c\u01bf\2\u1fa2\u1fa3"+
		"\7\u013c\2\2\u1fa3\u1fa4\7\u0192\2\2\u1fa4\u1fab\5\u037c\u01bf\2\u1fa5"+
		"\u1fa6\7\u013c\2\2\u1fa6\u1fa7\7\u0193\2\2\u1fa7\u1fab\5\u037c\u01bf\2"+
		"\u1fa8\u1fa9\7\u013c\2\2\u1fa9\u1fab\5\u0328\u0195\2\u1faa\u1f7a\3\2\2"+
		"\2\u1faa\u1f84\3\2\2\2\u1faa\u1f95\3\2\2\2\u1faa\u1f9c\3\2\2\2\u1faa\u1f9f"+
		"\3\2\2\2\u1faa\u1fa2\3\2\2\2\u1faa\u1fa5\3\2\2\2\u1faa\u1fa8\3\2\2\2\u1fab"+
		"\u02b3\3\2\2\2\u1fac\u1faf\5\u039c\u01cf\2\u1fad\u1faf\7\u030a\2\2\u1fae"+
		"\u1fac\3\2\2\2\u1fae\u1fad\3\2\2\2\u1faf\u02b5\3\2\2\2\u1fb0\u1fb1\b\u015c"+
		"\1\2\u1fb1\u1fb9\5\u02b8\u015d\2\u1fb2\u1fb9\5\u031e\u0190\2\u1fb3\u1fb9"+
		"\5\u02ba\u015e\2\u1fb4\u1fb9\5\u0374\u01bb\2\u1fb5\u1fb9\5\u02be\u0160"+
		"\2\u1fb6\u1fb9\5\u02bc\u015f\2\u1fb7\u1fb9\5\u034e\u01a8\2\u1fb8\u1fb0"+
		"\3\2\2\2\u1fb8\u1fb2\3\2\2\2\u1fb8\u1fb3\3\2\2\2\u1fb8\u1fb4\3\2\2\2\u1fb8"+
		"\u1fb5\3\2\2\2\u1fb8\u1fb6\3\2\2\2\u1fb8\u1fb7\3\2\2\2\u1fb9\u1fcd\3\2"+
		"\2\2\u1fba\u1fbb\f\7\2\2\u1fbb\u1fbc\t[\2\2\u1fbc\u1fcc\5\u02b6\u015c"+
		"\b\u1fbd\u1fbe\f\6\2\2\u1fbe\u1fbf\t\\\2\2\u1fbf\u1fcc\5\u02b6\u015c\7"+
		"\u1fc0\u1fc1\f\5\2\2\u1fc1\u1fc2\5\u03a4\u01d3\2\u1fc2\u1fc3\5\u02b6\u015c"+
		"\6\u1fc3\u1fcc\3\2\2\2\u1fc4\u1fc5\f\4\2\2\u1fc5\u1fc6\5\u03a6\u01d4\2"+
		"\u1fc6\u1fc7\5\u02b6\u015c\5\u1fc7\u1fcc\3\2\2\2\u1fc8\u1fc9\f\f\2\2\u1fc9"+
		"\u1fca\7\66\2\2\u1fca\u1fcc\5\u03a0\u01d1\2\u1fcb\u1fba\3\2\2\2\u1fcb"+
		"\u1fbd\3\2\2\2\u1fcb\u1fc0\3\2\2\2\u1fcb\u1fc4\3\2\2\2\u1fcb\u1fc8\3\2"+
		"\2\2\u1fcc\u1fcf\3\2\2\2\u1fcd\u1fcb\3\2\2\2\u1fcd\u1fce\3\2\2\2\u1fce"+
		"\u02b7\3\2\2\2\u1fcf\u1fcd\3\2\2\2\u1fd0\u1fd5\7Y\2\2\u1fd1\u1fd5\7\u00de"+
		"\2\2\u1fd2\u1fd5\7\u030a\2\2\u1fd3\u1fd5\5\u039c\u01cf\2\u1fd4\u1fd0\3"+
		"\2\2\2\u1fd4\u1fd1\3\2\2\2\u1fd4\u1fd2\3\2\2\2\u1fd4\u1fd3\3\2\2\2\u1fd5"+
		"\u02b9\3\2\2\2\u1fd6\u1fd7\7)\2\2\u1fd7\u1fd9\5\u02b6\u015c\2\u1fd8\u1fda"+
		"\5\u032c\u0197\2\u1fd9\u1fd8\3\2\2\2\u1fda\u1fdb\3\2\2\2\u1fdb\u1fd9\3"+
		"\2\2\2\u1fdb\u1fdc\3\2\2\2\u1fdc\u1fdf\3\2\2\2\u1fdd\u1fde\7j\2\2\u1fde"+
		"\u1fe0\5\u02b6\u015c\2\u1fdf\u1fdd\3\2\2\2\u1fdf\u1fe0\3\2\2\2\u1fe0\u1fe1"+
		"\3\2\2\2\u1fe1\u1fe2\7l\2\2\u1fe2\u1ff0\3\2\2\2\u1fe3\u1fe5\7)\2\2\u1fe4"+
		"\u1fe6\5\u032e\u0198\2\u1fe5\u1fe4\3\2\2\2\u1fe6\u1fe7\3\2\2\2\u1fe7\u1fe5"+
		"\3\2\2\2\u1fe7\u1fe8\3\2\2\2\u1fe8\u1feb\3\2\2\2\u1fe9\u1fea\7j\2\2\u1fea"+
		"\u1fec\5\u02b6\u015c\2\u1feb\u1fe9\3\2\2\2\u1feb\u1fec\3\2\2\2\u1fec\u1fed"+
		"\3\2\2\2\u1fed\u1fee\7l\2\2\u1fee\u1ff0\3\2\2\2\u1fef\u1fd6\3\2\2\2\u1fef"+
		"\u1fe3\3\2\2\2\u1ff0\u02bb\3\2\2\2\u1ff1\u1ff2\7\u032e\2\2\u1ff2\u1ff6"+
		"\5\u02b6\u015c\2\u1ff3\u1ff4\t]\2\2\u1ff4\u1ff6\5\u02b6\u015c\2\u1ff5"+
		"\u1ff1\3\2\2\2\u1ff5\u1ff3\3\2\2\2\u1ff6\u02bd\3\2\2\2\u1ff7\u1ff8\7\u0324"+
		"\2\2\u1ff8\u1ff9\5\u02b6\u015c\2\u1ff9\u1ffa\7\u0325\2\2\u1ffa\u2000\3"+
		"\2\2\2\u1ffb\u1ffc\7\u0324\2\2\u1ffc\u1ffd\5\u02c2\u0162\2\u1ffd\u1ffe"+
		"\7\u0325\2\2\u1ffe\u2000\3\2\2\2\u1fff\u1ff7\3\2\2\2\u1fff\u1ffb\3\2\2"+
		"\2\u2000\u02bf\3\2\2\2\u2001\u200a\7\u00de\2\2\u2002\u200a\5\u039c\u01cf"+
		"\2\u2003\u200a\5\u031e\u0190\2\u2004\u200a\7\u030a\2\2\u2005\u2006\7\u0324"+
		"\2\2\u2006\u2007\5\u02c0\u0161\2\u2007\u2008\7\u0325\2\2\u2008\u200a\3"+
		"\2\2\2\u2009\u2001\3\2\2\2\u2009\u2002\3\2\2\2\u2009\u2003\3\2\2\2\u2009"+
		"\u2004\3\2\2\2\u2009\u2005\3\2\2\2\u200a\u02c1\3\2\2\2\u200b\u200c\5\u01ba"+
		"\u00de\2\u200c\u02c3\3\2\2\2\u200d\u2010\7\u017b\2\2\u200e\u200f\7\u0302"+
		"\2\2\u200f\u2011\7\u0326\2\2\u2010\u200e\3\2\2\2\u2010\u2011\3\2\2\2\u2011"+
		"\u2012\3\2\2\2\u2012\u2017\5\u02c6\u0164\2\u2013\u2014\7\u0326\2\2\u2014"+
		"\u2016\5\u02c6\u0164\2\u2015\u2013\3\2\2\2\u2016\u2019\3\2\2\2\u2017\u2015"+
		"\3\2\2\2\u2017\u2018\3\2\2\2\u2018\u2028\3\2\2\2\u2019\u2017\3\2\2\2\u201a"+
		"\u201b\7\u017b\2\2\u201b\u2020\7\37\2\2\u201c\u201d\7\u0324\2\2\u201d"+
		"\u201e\5\u0314\u018b\2\u201e\u201f\7\u0325\2\2\u201f\u2021\3\2\2\2\u2020"+
		"\u201c\3\2\2\2\u2020\u2021\3\2\2\2\u2021\u2022\3\2\2\2\u2022\u2023\7\17"+
		"\2\2\u2023\u2024\7\u0324\2\2\u2024\u2025\5\u01ba\u00de\2\u2025\u2026\7"+
		"\u0325\2\2\u2026\u2028\3\2\2\2\u2027\u200d\3\2\2\2\u2027\u201a\3\2\2\2"+
		"\u2028\u02c5\3\2\2\2\u2029\u202e\5\u03a0\u01d1\2\u202a\u202b\7\u0324\2"+
		"\2\u202b\u202c\5\u0378\u01bd\2\u202c\u202d\7\u0325\2\2\u202d\u202f\3\2"+
		"\2\2\u202e\u202a\3\2\2\2\u202e\u202f\3\2\2\2\u202f\u2030\3\2\2\2\u2030"+
		"\u2031\7\17\2\2\u2031\u2032\7\u0324\2\2\u2032\u2033\5\u01ba\u00de\2\u2033"+
		"\u2034\7\u0325\2\2\u2034\u02c7\3\2\2\2\u2035\u2038\5\u0374\u01bb\2\u2036"+
		"\u2038\7\u030a\2\2\u2037\u2035\3\2\2\2\u2037\u2036\3\2\2\2\u2038\u203b"+
		"\3\2\2\2\u2039\u203c\7\u0313\2\2\u203a\u203c\5\u03a6\u01d4\2\u203b\u2039"+
		"\3\2\2\2\u203b\u203a\3\2\2\2\u203c\u203d\3\2\2\2\u203d\u2046\5\u02b6\u015c"+
		"\2\u203e\u203f\5\u03a0\u01d1\2\u203f\u2040\7\u031f\2\2\u2040\u2041\5\u03a0"+
		"\u01d1\2\u2041\u2042\7\u0324\2\2\u2042\u2043\5\u0344\u01a3\2\u2043\u2044"+
		"\7\u0325\2\2\u2044\u2046\3\2\2\2\u2045\u2037\3\2\2\2\u2045\u203e\3\2\2"+
		"\2\u2046\u02c9\3\2\2\2\u2047\u204c\5\u02cc\u0167\2\u2048\u2049\7\u0326"+
		"\2\2\u2049\u204b\5\u02cc\u0167\2\u204a\u2048\3\2\2\2\u204b\u204e\3\2\2"+
		"\2\u204c\u204a\3\2\2\2\u204c\u204d\3\2\2\2\u204d\u02cb\3\2\2\2\u204e\u204c"+
		"\3\2\2\2\u204f\u2054\5\u02ce\u0168\2\u2050\u2051\7\u00ec\2\2\u2051\u2053"+
		"\5\u02ce\u0168\2\u2052\u2050\3\2\2\2\u2053\u2056\3\2\2\2\u2054\u2052\3"+
		"\2\2\2\u2054\u2055\3\2\2\2\u2055\u02cd\3\2\2\2\u2056\u2054\3\2\2\2\u2057"+
		"\u205c\5\u02d0\u0169\2\u2058\u2059\7\n\2\2\u2059\u205b\5\u02d0\u0169\2"+
		"\u205a\u2058\3\2\2\2\u205b\u205e\3\2\2\2\u205c\u205a\3\2\2\2\u205c\u205d"+
		"\3\2\2\2\u205d\u02cf\3\2\2\2\u205e\u205c\3\2\2\2\u205f\u2061\7\u00db\2"+
		"\2\u2060\u205f\3\2\2\2\u2060\u2061\3\2\2\2\u2061\u2062\3\2\2\2\u2062\u2063"+
		"\5\u02d2\u016a\2\u2063\u02d1\3\2\2\2\u2064\u2065\7w\2\2\u2065\u2066\7"+
		"\u0324\2\2\u2066\u2067\5\u02c2\u0162\2\u2067\u2068\7\u0325\2\2\u2068\u209c"+
		"\3\2\2\2\u2069\u206a\5\u02b6\u015c\2\u206a\u206b\5\u03a4\u01d3\2\u206b"+
		"\u206c\5\u02b6\u015c\2\u206c\u209c\3\2\2\2\u206d\u206e\5\u02b6\u015c\2"+
		"\u206e\u206f\5\u03a4\u01d3\2\u206f\u2070\t^\2\2\u2070\u2071\7\u0324\2"+
		"\2\u2071\u2072\5\u02c2\u0162\2\u2072\u2073\7\u0325\2\2\u2073\u209c\3\2"+
		"\2\2\u2074\u2076\5\u02b6\u015c\2\u2075\u2077\7\u00db\2\2\u2076\u2075\3"+
		"\2\2\2\u2076\u2077\3\2\2\2\u2077\u2078\3\2\2\2\u2078\u2079\7\34\2\2\u2079"+
		"\u207a\5\u02b6\u015c\2\u207a\u207b\7\n\2\2\u207b\u207c\5\u02b6\u015c\2"+
		"\u207c\u209c\3\2\2\2\u207d\u207f\5\u02b6\u015c\2\u207e\u2080\7\u00db\2"+
		"\2\u207f\u207e\3\2\2\2\u207f\u2080\3\2\2\2\u2080\u2081\3\2\2\2\u2081\u2082"+
		"\7\u009a\2\2\u2082\u2085\7\u0324\2\2\u2083\u2086\5\u02c2\u0162\2\u2084"+
		"\u2086\5\u0344\u01a3\2\u2085\u2083\3\2\2\2\u2085\u2084\3\2\2\2\u2086\u2087"+
		"\3\2\2\2\u2087\u2088\7\u0325\2\2\u2088\u209c\3\2\2\2\u2089\u208b\5\u02b6"+
		"\u015c\2\u208a\u208c\7\u00db\2\2\u208b\u208a\3\2\2\2\u208b\u208c\3\2\2"+
		"\2\u208c\u208d\3\2\2\2\u208d\u208e\7\u00b3\2\2\u208e\u2091\5\u02b6\u015c"+
		"\2\u208f\u2090\7o\2\2\u2090\u2092\5\u02b6\u015c\2\u2091\u208f\3\2\2\2"+
		"\u2091\u2092\3\2\2\2\u2092\u209c\3\2\2\2\u2093\u2094\5\u02b6\u015c\2\u2094"+
		"\u2095\7\u00a7\2\2\u2095\u2096\5\u0380\u01c1\2\u2096\u209c\3\2\2\2\u2097"+
		"\u2098\7\u0324\2\2\u2098\u2099\5\u02cc\u0167\2\u2099\u209a\7\u0325\2\2"+
		"\u209a\u209c\3\2\2\2\u209b\u2064\3\2\2\2\u209b\u2069\3\2\2\2\u209b\u206d"+
		"\3\2\2\2\u209b\u2074\3\2\2\2\u209b\u207d\3\2\2\2\u209b\u2089\3\2\2\2\u209b"+
		"\u2093\3\2\2\2\u209b\u2097\3\2\2\2\u209c\u02d3\3\2\2\2\u209d\u20a3\5\u02d8"+
		"\u016d\2\u209e\u209f\7\u0324\2\2\u209f\u20a0\5\u02d4\u016b\2\u20a0\u20a1"+
		"\7\u0325\2\2\u20a1\u20a3\3\2\2\2\u20a2\u209d\3\2\2\2\u20a2\u209e\3\2\2"+
		"\2\u20a3\u20a7\3\2\2\2\u20a4\u20a6\5\u02d6\u016c\2\u20a5\u20a4\3\2\2\2"+
		"\u20a6\u20a9\3\2\2\2\u20a7\u20a5\3\2\2\2\u20a7\u20a8\3\2\2\2\u20a8\u02d5"+
		"\3\2\2\2\u20a9\u20a7\3\2\2\2\u20aa\u20ac\7\u0166\2\2\u20ab\u20ad\7\5\2"+
		"\2\u20ac\u20ab\3\2\2\2\u20ac\u20ad\3\2\2\2\u20ad\u20b1\3\2\2\2\u20ae\u20b1"+
		"\7t\2\2\u20af\u20b1\7\u00a3\2\2\u20b0\u20aa\3\2\2\2\u20b0\u20ae\3\2\2"+
		"\2\u20b0\u20af\3\2\2\2\u20b1\u20b7\3\2\2\2\u20b2\u20b8\5\u02d8\u016d\2"+
		"\u20b3\u20b4\7\u0324\2\2\u20b4\u20b5\5\u02d4\u016b\2\u20b5\u20b6\7\u0325"+
		"\2\2\u20b6\u20b8\3\2\2\2\u20b7\u20b2\3\2\2\2\u20b7\u20b3\3\2\2\2\u20b8"+
		"\u02d7\3\2\2\2\u20b9\u20bb\7\u0131\2\2\u20ba\u20bc\t_\2\2\u20bb\u20ba"+
		"\3\2\2\2\u20bb\u20bc\3\2\2\2\u20bc\u20be\3\2\2\2\u20bd\u20bf\5\u02da\u016e"+
		"\2\u20be\u20bd\3\2\2\2\u20be\u20bf\3\2\2\2\u20bf\u20c0\3\2\2\2\u20c0\u20c3"+
		"\5\u02f0\u0179\2\u20c1\u20c2\7\u00a4\2\2\u20c2\u20c4\5\u036c\u01b7\2\u20c3"+
		"\u20c1\3\2\2\2\u20c3\u20c4\3\2\2\2\u20c4\u20c7\3\2\2\2\u20c5\u20c6\7\u008b"+
		"\2\2\u20c6\u20c8\5\u02fe\u0180\2\u20c7\u20c5\3\2\2\2\u20c7\u20c8\3\2\2"+
		"\2\u20c8\u20cb\3\2\2\2\u20c9\u20ca\7\u0178\2\2\u20ca\u20cc\5\u02cc\u0167"+
		"\2\u20cb\u20c9\3\2\2\2\u20cb\u20cc\3\2\2\2\u20cc\u20da\3\2\2\2\u20cd\u20ce"+
		"\7\u0092\2\2\u20ce\u20d0\7%\2\2\u20cf\u20d1\7\5\2\2\u20d0\u20cf\3\2\2"+
		"\2\u20d0\u20d1\3\2\2\2\u20d1\u20d2\3\2\2\2\u20d2\u20d7\5\u02e8\u0175\2"+
		"\u20d3\u20d4\7\u0326\2\2\u20d4\u20d6\5\u02e8\u0175\2\u20d5\u20d3\3\2\2"+
		"\2\u20d6\u20d9\3\2\2\2\u20d7\u20d5\3\2\2\2\u20d7\u20d8\3\2\2\2\u20d8\u20db"+
		"\3\2\2\2\u20d9\u20d7\3\2\2\2\u20da\u20cd\3\2\2\2\u20da\u20db\3\2\2\2\u20db"+
		"\u20de\3\2\2\2\u20dc\u20dd\7\u0093\2\2\u20dd\u20df\5\u02cc\u0167\2\u20de"+
		"\u20dc\3\2\2\2\u20de\u20df\3\2\2\2\u20df\u02d9\3\2\2\2\u20e0\u20e3\7\u015d"+
		"\2\2\u20e1\u20e4\5\u02dc\u016f\2\u20e2\u20e4\5\u02de\u0170\2\u20e3\u20e1"+
		"\3\2\2\2\u20e3\u20e2\3\2\2\2\u20e4\u20e7\3\2\2\2\u20e5\u20e6\7\u017b\2"+
		"\2\u20e6\u20e8\7\u02e3\2\2\u20e7\u20e5\3\2\2\2\u20e7\u20e8\3\2\2\2\u20e8"+
		"\u02db\3\2\2\2\u20e9\u20ea\t`\2\2\u20ea\u20f1\7\u00f4\2\2\u20eb\u20ec"+
		"\7\u0324\2\2\u20ec\u20ed\5\u02b6\u015c\2\u20ed\u20ee\7\u0325\2\2\u20ee"+
		"\u20ef\7\u00f4\2\2\u20ef\u20f1\3\2\2\2\u20f0\u20e9\3\2\2\2\u20f0\u20eb"+
		"\3\2\2\2\u20f1\u02dd\3\2\2\2\u20f2\u20f8\7\u030b\2\2\u20f3\u20f4\7\u0324"+
		"\2\2\u20f4\u20f5\5\u02b6\u015c\2\u20f5\u20f6\7\u0325\2\2\u20f6\u20f8\3"+
		"\2\2\2\u20f7\u20f2\3\2\2\2\u20f7\u20f3\3\2\2\2\u20f8\u02df\3\2\2\2\u20f9"+
		"\u20fa\7\u00ed\2\2\u20fa\u20fb\7%\2\2\u20fb\u2100\5\u02e6\u0174\2\u20fc"+
		"\u20fd\7\u0326\2\2\u20fd\u20ff\5\u02e6\u0174\2\u20fe\u20fc\3\2\2\2\u20ff"+
		"\u2102\3\2\2\2\u2100\u20fe\3\2\2\2\u2100\u2101\3\2\2\2\u2101\u210e\3\2"+
		"\2\2\u2102\u2100\3\2\2\2\u2103\u2104\7\u026b\2\2\u2104\u2105\5\u02b6\u015c"+
		"\2\u2105\u210c\ta\2\2\u2106\u2107\7\u0080\2\2\u2107\u2108\tb\2\2\u2108"+
		"\u2109\5\u02b6\u015c\2\u2109\u210a\ta\2\2\u210a\u210b\7\u026e\2\2\u210b"+
		"\u210d\3\2\2\2\u210c\u2106\3\2\2\2\u210c\u210d\3\2\2\2\u210d\u210f\3\2"+
		"\2\2\u210e\u2103\3\2\2\2\u210e\u210f\3\2\2\2\u210f\u02e1\3\2\2\2\u2110"+
		"\u2111\7\u0085\2\2\u2111\u2129\7!\2\2\u2112\u2113\7\u0085\2\2\u2113\u2115"+
		"\7\u0301\2\2\u2114\u2116\5\u02e4\u0173\2\u2115\u2114\3\2\2\2\u2115\u2116"+
		"\3\2\2\2\u2116\u2129\3\2\2\2\u2117\u2118\7\u0085\2\2\u2118\u2119\7\u0301"+
		"\2\2\u2119\u211b\tc\2\2\u211a\u211c\7\u0326\2\2\u211b\u211a\3\2\2\2\u211b"+
		"\u211c\3\2\2\2\u211c\u2120\3\2\2\2\u211d\u211e\7\u0324\2\2\u211e\u211f"+
		"\7\u030f\2\2\u211f\u2121\7\u0325\2\2\u2120\u211d\3\2\2\2\u2120\u2121\3"+
		"\2\2\2\u2121\u2125\3\2\2\2\u2122\u2124\5\u02e4\u0173\2\u2123\u2122\3\2"+
		"\2\2\u2124\u2127\3\2\2\2\u2125\u2123\3\2\2\2\u2125\u2126\3\2\2\2\u2126"+
		"\u2129\3\2\2\2\u2127\u2125\3\2\2\2\u2128\u2110\3\2\2\2\u2128\u2112\3\2"+
		"\2\2\u2128\u2117\3\2\2\2\u2129\u02e3\3\2\2\2\u212a\u212b\7\u0326\2\2\u212b"+
		"\u212c\td\2\2\u212c\u02e5\3\2\2\2\u212d\u212f\5\u02b6\u015c\2\u212e\u2130"+
		"\te\2\2\u212f\u212e\3\2\2\2\u212f\u2130\3\2\2\2\u2130\u02e7\3\2\2\2\u2131"+
		"\u2132\5\u02b6\u015c\2\u2132\u02e9\3\2\2\2\u2133\u2134\7\u00eb\2\2\u2134"+
		"\u2135\7\u0324\2\2\u2135\u213a\5\u02ec\u0177\2\u2136\u2137\7\u0326\2\2"+
		"\u2137\u2139\5\u02ec\u0177\2\u2138\u2136\3\2\2\2\u2139\u213c\3\2\2\2\u213a"+
		"\u2138\3\2\2\2\u213a\u213b\3\2\2\2\u213b\u213d\3\2\2\2\u213c\u213a\3\2"+
		"\2\2\u213d\u213e\7\u0325\2\2\u213e\u02eb\3\2\2\2\u213f\u2140\7\u01f8\2"+
		"\2\u2140\u216d\7\u030b\2\2\u2141\u2142\tf\2\2\u2142\u216d\7\u0092\2\2"+
		"\u2143\u2144\tg\2\2\u2144\u216d\7\u0166\2\2\u2145\u2146\th\2\2\u2146\u216d"+
		"\7\u00a9\2\2\u2147\u2148\7\u01f1\2\2\u2148\u216d\7\u02fc\2\2\u2149\u214a"+
		"\7\u0202\2\2\u214a\u216d\7\u00ed\2\2\u214b\u216d\7\u0218\2\2\u214c\u214d"+
		"\7\u0225\2\2\u214d\u216d\7\u00fa\2\2\u214e\u214f\7\u0226\2\2\u214f\u216d"+
		"\7\u00fa\2\2\u2150\u2151\7\u0246\2\2\u2151\u216d\7\u030b\2\2\u2152\u2153"+
		"\7\u0248\2\2\u2153\u216d\7\u030b\2\2\u2154\u2155\7\u0271\2\2\u2155\u2156"+
		"\7\u0085\2\2\u2156\u2157\7\u0324\2\2\u2157\u215c\5\u02ee\u0178\2\u2158"+
		"\u2159\7\u0326\2\2\u2159\u215b\5\u02ee\u0178\2\u215a\u2158\3\2\2\2\u215b"+
		"\u215e\3\2\2\2\u215c\u215a\3\2\2\2\u215c\u215d\3\2\2\2\u215d\u215f\3\2"+
		"\2\2\u215e\u215c\3\2\2\2\u215f\u2160\7\u0325\2\2\u2160\u216d\3\2\2\2\u2161"+
		"\u2162\7\u0271\2\2\u2162\u2163\7\u0085\2\2\u2163\u216d\7\u02f4\2\2\u2164"+
		"\u2165\7\u0276\2\2\u2165\u216d\tJ\2\2\u2166\u216d\7\u0299\2\2\u2167\u2168"+
		"\7\u02ad\2\2\u2168\u216d\7\u00fa\2\2\u2169\u216a\7\u016e\2\2\u216a\u216b"+
		"\7\u00fa\2\2\u216b\u216d\7\u030f\2\2\u216c\u213f\3\2\2\2\u216c\u2141\3"+
		"\2\2\2\u216c\u2143\3\2\2\2\u216c\u2145\3\2\2\2\u216c\u2147\3\2\2\2\u216c"+
		"\u2149\3\2\2\2\u216c\u214b\3\2\2\2\u216c\u214c\3\2\2\2\u216c\u214e\3\2"+
		"\2\2\u216c\u2150\3\2\2\2\u216c\u2152\3\2\2\2\u216c\u2154\3\2\2\2\u216c"+
		"\u2161\3\2\2\2\u216c\u2164\3\2\2\2\u216c\u2166\3\2\2\2\u216c\u2167\3\2"+
		"\2\2\u216c\u2169\3\2\2\2\u216d\u02ed\3\2\2\2\u216e\u2175\7\u030a\2\2\u216f"+
		"\u2176\7\u02f4\2\2\u2170\u2173\7\u0313\2\2\u2171\u2174\5\u039c\u01cf\2"+
		"\u2172\u2174\7\u00de\2\2\u2173\u2171\3\2\2\2\u2173\u2172\3\2\2\2\u2174"+
		"\u2176\3\2\2\2\u2175\u216f\3\2\2\2\u2175\u2170\3\2\2\2\u2176\u02ef\3\2"+
		"\2\2\u2177\u217c\5\u02fc\u017f\2\u2178\u2179\7\u0326\2\2\u2179\u217b\5"+
		"\u02fc\u017f\2\u217a\u2178\3\2\2\2\u217b\u217e\3\2\2\2\u217c\u217a\3\2"+
		"\2\2\u217c\u217d\3\2\2\2\u217d\u02f1\3\2\2\2\u217e\u217c\3\2\2\2\u217f"+
		"\u2180\7\u0324\2\2\u2180\u2185\5\u0264\u0133\2\u2181\u2182\7\u0326\2\2"+
		"\u2182\u2184\5\u0264\u0133\2\u2183\u2181\3\2\2\2\u2184\u2187\3\2\2\2\u2185"+
		"\u2183\3\2\2\2\u2185\u2186\3\2\2\2\u2186\u2188\3\2\2\2\u2187\u2185\3\2"+
		"\2\2\u2188\u2189\7\u0325\2\2\u2189\u02f3\3\2\2\2\u218a\u2190\7\u0329\2"+
		"\2\u218b\u218c\5\u036c\u01b7\2\u218c\u218d\7\u031f\2\2\u218d\u218e\5\u02f4"+
		"\u017b\2\u218e\u2190\3\2\2\2\u218f\u218a\3\2\2\2\u218f\u218b\3\2\2\2\u2190"+
		"\u02f5\3\2\2\2\u2191\u2192\5\u036c\u01b7\2\u2192\u2193\7\u031f\2\2\u2193"+
		"\u2195\3\2\2\2\u2194\u2191\3\2\2\2\u2194\u2195\3\2\2\2\u2195\u219b\3\2"+
		"\2\2\u2196\u219c\5\u03a0\u01d1\2\u2197\u2198\7\u0323\2\2\u2198\u219c\7"+
		"\u0096\2\2\u2199\u219a\7\u0323\2\2\u219a\u219c\7\u02b1\2\2\u219b\u2196"+
		"\3\2\2\2\u219b\u2197\3\2\2\2\u219b\u2199\3\2\2\2\u219c\u219e\3\2\2\2\u219d"+
		"\u219f\5\u0330\u0199\2\u219e\u219d\3\2\2\2\u219e\u219f\3\2\2\2\u219f\u02f7"+
		"\3\2\2\2\u21a0\u21a1\5\u03a0\u01d1\2\u21a1\u21a2\7\u031f\2\2\u21a2\u21a3"+
		"\5\u03a0\u01d1\2\u21a3\u21a5\5\u02f2\u017a\2\u21a4\u21a6\5\u0330\u0199"+
		"\2\u21a5\u21a4\3\2\2\2\u21a5\u21a6\3\2\2\2\u21a6\u21b2\3\2\2\2\u21a7\u21a8"+
		"\5\u03a0\u01d1\2\u21a8\u21a9\7\u0328\2\2\u21a9\u21aa\7\u0328\2\2\u21aa"+
		"\u21ac\5\u03a0\u01d1\2\u21ab\u21ad\5\u02f2\u017a\2\u21ac\u21ab\3\2\2\2"+
		"\u21ac\u21ad\3\2\2\2\u21ad\u21af\3\2\2\2\u21ae\u21b0\5\u0330\u0199\2\u21af"+
		"\u21ae\3\2\2\2\u21af\u21b0\3\2\2\2\u21b0\u21b2\3\2\2\2\u21b1\u21a0\3\2"+
		"\2\2\u21b1\u21a7\3\2\2\2\u21b2\u02f9\3\2\2\2\u21b3\u21b5\5\u02b6\u015c"+
		"\2\u21b4\u21b6\5\u0330\u0199\2\u21b5\u21b4\3\2\2\2\u21b5\u21b6\3\2\2\2"+
		"\u21b6\u21bc\3\2\2\2\u21b7\u21b8\5\u0340\u01a1\2\u21b8\u21b9\7\u0313\2"+
		"\2\u21b9\u21ba\5\u02b6\u015c\2\u21ba\u21bc\3\2\2\2\u21bb\u21b3\3\2\2\2"+
		"\u21bb\u21b7\3\2\2\2\u21bc\u02fb\3\2\2\2\u21bd\u21c2\5\u02f4\u017b\2\u21be"+
		"\u21c2\5\u02f6\u017c\2\u21bf\u21c2\5\u02f8\u017d\2\u21c0\u21c2\5\u02fa"+
		"\u017e\2\u21c1\u21bd\3\2\2\2\u21c1\u21be\3\2\2\2\u21c1\u21bf\3\2\2\2\u21c1"+
		"\u21c0\3\2\2\2\u21c2\u02fd\3\2\2\2\u21c3\u21c8\5\u0300\u0181\2\u21c4\u21c5"+
		"\7\u0326\2\2\u21c5\u21c7\5\u0300\u0181\2\u21c6\u21c4\3\2\2\2\u21c7\u21ca"+
		"\3\2\2\2\u21c8\u21c6\3\2\2\2\u21c8\u21c9\3\2\2\2\u21c9\u02ff\3\2\2\2\u21ca"+
		"\u21c8\3\2\2\2\u21cb\u21d1\5\u0302\u0182\2\u21cc\u21cd\7\u0324\2\2\u21cd"+
		"\u21ce\5\u0302\u0182\2\u21ce\u21cf\7\u0325\2\2\u21cf\u21d1\3\2\2\2\u21d0"+
		"\u21cb\3\2\2\2\u21d0\u21cc\3\2\2\2\u21d1\u0301\3\2\2\2\u21d2\u21d6\5\u0304"+
		"\u0183\2\u21d3\u21d5\5\u030e\u0188\2\u21d4\u21d3\3\2\2\2\u21d5\u21d8\3"+
		"\2\2\2\u21d6\u21d4\3\2\2\2\u21d6\u21d7\3\2\2\2\u21d7\u0303\3\2\2\2\u21d8"+
		"\u21d6\3\2\2\2\u21d9\u21db\5\u0316\u018c\2\u21da\u21dc\5\u0332\u019a\2"+
		"\u21db\u21da\3\2\2\2\u21db\u21dc\3\2\2\2\u21dc\u2208\3\2\2\2\u21dd\u21df"+
		"\5\u036a\u01b6\2\u21de\u21e0\5\u0332\u019a\2\u21df\u21de\3\2\2\2\u21df"+
		"\u21e0\3\2\2\2\u21e0\u2208\3\2\2\2\u21e1\u21e3\5\u0318\u018d\2\u21e2\u21e4"+
		"\5\u0332\u019a\2\u21e3\u21e2\3\2\2\2\u21e3\u21e4\3\2\2\2\u21e4\u2208\3"+
		"\2\2\2\u21e5\u21ea\5\u031c\u018f\2\u21e6\u21e8\5\u0332\u019a\2\u21e7\u21e9"+
		"\5\u033e\u01a0\2\u21e8\u21e7\3\2\2\2\u21e8\u21e9\3\2\2\2\u21e9\u21eb\3"+
		"\2\2\2\u21ea\u21e6\3\2\2\2\u21ea\u21eb\3\2\2\2\u21eb\u2208\3\2\2\2\u21ec"+
		"\u21ed\5\u030c\u0187\2\u21ed\u21ee\5\u0332\u019a\2\u21ee\u2208\3\2\2\2"+
		"\u21ef\u21f1\5\u031e\u0190\2\u21f0\u21f2\5\u0332\u019a\2\u21f1\u21f0\3"+
		"\2\2\2\u21f1\u21f2\3\2\2\2\u21f2\u2208\3\2\2\2\u21f3\u21f5\7\u030a\2\2"+
		"\u21f4\u21f6\5\u0332\u019a\2\u21f5\u21f4\3\2\2\2\u21f5\u21f6\3\2\2\2\u21f6"+
		"\u2208\3\2\2\2\u21f7\u21f8\7\u030a\2\2\u21f8\u21f9\7\u031f\2\2\u21f9\u21fe"+
		"\5\u031e\u0190\2\u21fa\u21fc\5\u0332\u019a\2\u21fb\u21fd\5\u033e\u01a0"+
		"\2\u21fc\u21fb\3\2\2\2\u21fc\u21fd\3\2\2\2\u21fd\u21ff\3\2\2\2\u21fe\u21fa"+
		"\3\2\2\2\u21fe\u21ff\3\2\2\2\u21ff\u2208\3\2\2\2\u2200\u2208\5\u0306\u0184"+
		"\2\u2201\u2202\7\u0328\2\2\u2202\u2203\7\u0328\2\2\u2203\u2205\5\u031e"+
		"\u0190\2\u2204\u2206\5\u0332\u019a\2\u2205\u2204\3\2\2\2\u2205\u2206\3"+
		"\2\2\2\u2206\u2208\3\2\2\2\u2207\u21d9\3\2\2\2\u2207\u21dd\3\2\2\2\u2207"+
		"\u21e1\3\2\2\2\u2207\u21e5\3\2\2\2\u2207\u21ec\3\2\2\2\u2207\u21ef\3\2"+
		"\2\2\u2207\u21f3\3\2\2\2\u2207\u21f7\3\2\2\2\u2207\u2200\3\2\2\2\u2207"+
		"\u2201\3\2\2\2\u2208\u0305\3\2\2\2\u2209\u220a\7\u00ea\2\2\u220a\u220b"+
		"\7\u0324\2\2\u220b\u220c\5\u02b6\u015c\2\u220c\u220d\7\u0326\2\2\u220d"+
		"\u2210\5\u02b6\u015c\2\u220e\u220f\7\u0326\2\2\u220f\u2211\5\u02b6\u015c"+
		"\2\u2210\u220e\3\2\2\2\u2210\u2211\3\2\2\2\u2211\u2212\3\2\2\2\u2212\u2218"+
		"\7\u0325\2\2\u2213\u2214\7\u017b\2\2\u2214\u2215\7\u0324\2\2\u2215\u2216"+
		"\5\u0308\u0185\2\u2216\u2217\7\u0325\2\2\u2217\u2219\3\2\2\2\u2218\u2213"+
		"\3\2\2\2\u2218\u2219\3\2\2\2\u2219\u0307\3\2\2\2\u221a\u221f\5\u030a\u0186"+
		"\2\u221b\u221c\7\u0326\2\2\u221c\u221e\5\u030a\u0186\2\u221d\u221b\3\2"+
		"\2\2\u221e\u2221\3\2\2\2\u221f\u221d\3\2\2\2\u221f\u2220\3\2\2\2\u2220"+
		"\u0309\3\2\2\2\u2221\u221f\3\2\2\2\u2222\u2223\7\u030c\2\2\u2223\u2225"+
		"\5\u0398\u01cd\2\u2224\u2226\7\u030f\2\2\u2225\u2224\3\2\2\2\u2225\u2226"+
		"\3\2\2\2\u2226\u030b\3\2\2\2\u2227\u2228\7+\2\2\u2228\u2229\7\u0324\2"+
		"\2\u2229\u222a\7,\2\2\u222a\u222b\5\u036c\u01b7\2\u222b\u222c\7\u0326"+
		"\2\2\u222c\u222d\ti\2\2\u222d\u222e\7\u0325\2\2\u222e\u030d\3\2\2\2\u222f"+
		"\u2231\7\u00a0\2\2\u2230\u222f\3\2\2\2\u2230\u2231\3\2\2\2\u2231\u2237"+
		"\3\2\2\2\u2232\u2234\tj\2\2\u2233\u2235\7\u00ee\2\2\u2234\u2233\3\2\2"+
		"\2\u2234\u2235\3\2\2\2\u2235\u2237\3\2\2\2\u2236\u2230\3\2\2\2\u2236\u2232"+
		"\3\2\2\2\u2237\u2239\3\2\2\2\u2238\u223a\tk\2\2\u2239\u2238\3\2\2\2\u2239"+
		"\u223a\3\2\2\2\u223a\u223b\3\2\2\2\u223b\u223c\7\u00a9\2\2\u223c\u223d"+
		"\5\u0300\u0181\2\u223d\u223e\7\u00e4\2\2\u223e\u223f\5\u02cc\u0167\2\u223f"+
		"\u2252\3\2\2\2\u2240\u2241\7I\2\2\u2241\u2242\7\u00a9\2\2\u2242\u2252"+
		"\5\u0300\u0181\2\u2243\u2244\7I\2\2\u2244\u2245\7\u0195\2\2\u2245\u2252"+
		"\5\u0300\u0181\2\u2246\u2247\7\u00ee\2\2\u2247\u2248\7\u0195\2\2\u2248"+
		"\u2252\5\u0300\u0181\2\u2249\u224a\7\u00f9\2\2\u224a\u224b\5\u0310\u0189"+
		"\2\u224b\u224c\5\u0332\u019a\2\u224c\u2252\3\2\2\2\u224d\u224e\7\u0169"+
		"\2\2\u224e\u224f\5\u0312\u018a\2\u224f\u2250\5\u0332\u019a\2\u2250\u2252"+
		"\3\2\2\2\u2251\u2236\3\2\2\2\u2251\u2240\3\2\2\2\u2251\u2243\3\2\2\2\u2251"+
		"\u2246\3\2\2\2\u2251\u2249\3\2\2\2\u2251\u224d\3\2\2\2\u2252\u030f\3\2"+
		"\2\2\u2253\u2254\7\u0324\2\2\u2254\u2255\5\u0348\u01a5\2\u2255\u2256\7"+
		"\u0085\2\2\u2256\u2257\5\u0374\u01bb\2\u2257\u2258\7\u009a\2\2\u2258\u2259"+
		"\5\u033e\u01a0\2\u2259\u225a\7\u0325\2\2\u225a\u0311\3\2\2\2\u225b\u225c"+
		"\7\u0324\2\2\u225c\u225d\5\u02b6\u015c\2\u225d\u225e\7\u0085\2\2\u225e"+
		"\u225f\5\u0374\u01bb\2\u225f\u2260\7\u009a\2\2\u2260\u2261\7\u0324\2\2"+
		"\u2261\u2262\5\u0314\u018b\2\u2262\u2263\7\u0325\2\2\u2263\u2264\7\u0325"+
		"\2\2\u2264\u0313\3\2\2\2\u2265\u226a\5\u0374\u01bb\2\u2266\u2267\7\u0326"+
		"\2\2\u2267\u2269\5\u0374\u01bb\2\u2268\u2266\3\2\2\2\u2269\u226c\3\2\2"+
		"\2\u226a\u2268\3\2\2\2\u226a\u226b\3\2\2\2\u226b\u0315\3\2\2\2\u226c\u226a"+
		"\3\2\2\2\u226d\u226f\5\u036c\u01b7\2\u226e\u2270\5\u0336\u019c\2\u226f"+
		"\u226e\3\2\2\2\u226f\u2270\3\2\2\2\u2270\u0317\3\2\2\2\u2271\u2272\7\u00e9"+
		"\2\2\u2272\u2273\7\u0324\2\2\u2273\u2274\7\u030f\2\2\u2274\u2275\7\u0326"+
		"\2\2\u2275\u2276\7\u030f\2\2\u2276\u2277\7\u0326\2\2\u2277\u2278\7\u030f"+
		"\2\2\u2278\u228c\7\u0325\2\2\u2279\u227a\7\u00e9\2\2\u227a\u227b\7\u0324"+
		"\2\2\u227b\u227c\7$\2\2\u227c\u227d\7\u030f\2\2\u227d\u2287\7\u0326\2"+
		"\2\u227e\u2283\5\u031a\u018e\2\u227f\u2280\7\u0326\2\2\u2280\u2282\5\u031a"+
		"\u018e\2\u2281\u227f\3\2\2\2\u2282\u2285\3\2\2\2\u2283\u2281\3\2\2\2\u2283"+
		"\u2284\3\2\2\2\u2284\u2288\3\2\2\2\u2285\u2283\3\2\2\2\u2286\u2288\5\u03a0"+
		"\u01d1\2\u2287\u227e\3\2\2\2\u2287\u2286\3\2\2\2\u2288\u2289\3\2\2\2\u2289"+
		"\u228a\7\u0325\2\2\u228a\u228c\3\2\2\2\u228b\u2271\3\2\2\2\u228b\u2279"+
		"\3\2\2\2\u228c\u0319\3\2\2\2\u228d\u228e\5\u03a0\u01d1\2\u228e\u228f\7"+
		"\u0313\2\2\u228f\u2290\t\26\2\2\u2290\u031b\3\2\2\2\u2291\u229c\5\u02c2"+
		"\u0162\2\u2292\u2293\7\u0324\2\2\u2293\u2294\5\u02c2\u0162\2\u2294\u2295"+
		"\7\u0325\2\2\u2295\u229c\3\2\2\2\u2296\u229c\5\u0342\u01a2\2\u2297\u2298"+
		"\7\u0324\2\2\u2298\u2299\5\u0342\u01a2\2\u2299\u229a\7\u0325\2\2\u229a"+
		"\u229c\3\2\2\2\u229b\u2291\3\2\2\2\u229b\u2292\3\2\2\2\u229b\u2296\3\2"+
		"\2\2\u229b\u2297\3\2\2\2\u229c\u031d\3\2\2\2\u229d\u2319\5\u0346\u01a4"+
		"\2\u229e\u2319\5\u0348\u01a5\2\u229f\u2319\5\u034a\u01a6\2\u22a0\u22a1"+
		"\5\u0384\u01c3\2\u22a1\u22a3\7\u0324\2\2\u22a2\u22a4\5\u0344\u01a3\2\u22a3"+
		"\u22a2\3\2\2\2\u22a3\u22a4\3\2\2\2\u22a4\u22a5\3\2\2\2\u22a5\u22a6\7\u0325"+
		"\2\2\u22a6\u2319\3\2\2\2\u22a7\u22a8\7\u01a7\2\2\u22a8\u22a9\7\u0324\2"+
		"\2\u22a9\u22aa\7\u0329\2\2\u22aa\u2319\7\u0325\2\2\u22ab\u22ac\7\u01ae"+
		"\2\2\u22ac\u22ad\7\u0324\2\2\u22ad\u22ae\5\u02b6\u015c\2\u22ae\u22af\7"+
		"\17\2\2\u22af\u22b0\5\u0398\u01cd\2\u22b0\u22b1\7\u0325\2\2\u22b1\u2319"+
		"\3\2\2\2\u22b2\u22b3\7F\2\2\u22b3\u22b4\7\u0324\2\2\u22b4\u22b5\5\u0398"+
		"\u01cd\2\u22b5\u22b6\7\u0326\2\2\u22b6\u22b9\5\u02b6\u015c\2\u22b7\u22b8"+
		"\7\u0326\2\2\u22b8\u22ba\5\u02b6\u015c\2\u22b9\u22b7\3\2\2\2\u22b9\u22ba"+
		"\3\2\2\2\u22ba\u22bb\3\2\2\2\u22bb\u22bc\7\u0325\2\2\u22bc\u2319\3\2\2"+
		"\2\u22bd\u22be\7\u01b4\2\2\u22be\u22bf\7\u0324\2\2\u22bf\u22c0\7\u0329"+
		"\2\2\u22c0\u2319\7\u0325\2\2\u22c1\u22c2\7\65\2\2\u22c2\u22c3\7\u0324"+
		"\2\2\u22c3\u22c4\5\u0344\u01a3\2\u22c4\u22c5\7\u0325\2\2\u22c5\u2319\3"+
		"\2\2\2\u22c6\u2319\7M\2\2\u22c7\u2319\7N\2\2\u22c8\u22c9\7\u01ca\2\2\u22c9"+
		"\u22ca\7\u0324\2\2\u22ca\u22cb\7\u030c\2\2\u22cb\u22cc\7\u0326\2\2\u22cc"+
		"\u22cd\5\u02b6\u015c\2\u22cd\u22ce\7\u0326\2\2\u22ce\u22cf\5\u02b6\u015c"+
		"\2\u22cf\u22d0\7\u0325\2\2\u22d0\u2319\3\2\2\2\u22d1\u22d2\7\u01cb\2\2"+
		"\u22d2\u22d3\7\u0324\2\2\u22d3\u22d4\7\u030c\2\2\u22d4\u22d5\7\u0326\2"+
		"\2\u22d5\u22d6\5\u02b6\u015c\2\u22d6\u22d7\7\u0326\2\2\u22d7\u22d8\5\u02b6"+
		"\u015c\2\u22d8\u22d9\7\u0325\2\2\u22d9\u2319\3\2\2\2\u22da\u22db\7\u01cc"+
		"\2\2\u22db\u22dc\7\u0324\2\2\u22dc\u22dd\7\u030c\2\2\u22dd\u22de\7\u0326"+
		"\2\2\u22de\u22df\5\u02b6\u015c\2\u22df\u22e0\7\u0325\2\2\u22e0\u2319\3"+
		"\2\2\2\u22e1\u22e2\7\u01cd\2\2\u22e2\u22e3\7\u0324\2\2\u22e3\u22e4\7\u030c"+
		"\2\2\u22e4\u22e5\7\u0326\2\2\u22e5\u22e6\5\u02b6\u015c\2\u22e6\u22e7\7"+
		"\u0325\2\2\u22e7\u2319\3\2\2\2\u22e8\u22e9\7\u020a\2\2\u22e9\u22ea\7\u0324"+
		"\2\2\u22ea\u2319\7\u0325\2\2\u22eb\u22ec\7\u020b\2\2\u22ec\u22ed\7\u0324"+
		"\2\2\u22ed\u2319\7\u0325\2\2\u22ee\u22ef\7\u0096\2\2\u22ef\u22f0\7\u0324"+
		"\2\2\u22f0\u22f3\5\u0398\u01cd\2\u22f1\u22f2\7\u0326\2\2\u22f2\u22f4\7"+
		"\u030b\2\2\u22f3\u22f1\3\2\2\2\u22f3\u22f4\3\2\2\2\u22f4\u22f7\3\2\2\2"+
		"\u22f5\u22f6\7\u0326\2\2\u22f6\u22f8\7\u030b\2\2\u22f7\u22f5\3\2\2\2\u22f7"+
		"\u22f8\3\2\2\2\u22f8\u22f9\3\2\2\2\u22f9\u22fa\7\u0325\2\2\u22fa\u2319"+
		"\3\2\2\2\u22fb\u2319\7\u0251\2\2\u22fc\u22fd\7\u00df\2\2\u22fd\u22fe\7"+
		"\u0324\2\2\u22fe\u22ff\5\u02b6\u015c\2\u22ff\u2300\7\u0326\2\2\u2300\u2301"+
		"\5\u02b6\u015c\2\u2301\u2302\7\u0325\2\2\u2302\u2319\3\2\2\2\u2303\u2304"+
		"\7\u02d9\2\2\u2304\u2305\7\u0324\2\2\u2305\u2306\5\u02b6\u015c\2\u2306"+
		"\u2307\7\u0326\2\2\u2307\u2308\7\u030b\2\2\u2308\u2309\7\u0326\2\2\u2309"+
		"\u230a\7\u030b\2\2\u230a\u230b\7\u0326\2\2\u230b\u230c\5\u02b6\u015c\2"+
		"\u230c\u230d\7\u0325\2\2\u230d\u2319\3\2\2\2\u230e\u2319\7\u013b\2\2\u230f"+
		"\u2319\7\u0154\2\2\u2310\u2311\7\u00a8\2\2\u2311\u2312\7\u0324\2\2\u2312"+
		"\u2313\5\u02b6\u015c\2\u2313\u2314\7\u0326\2\2\u2314\u2315\5\u02b6\u015c"+
		"\2\u2315\u2316\7\u0325\2\2\u2316\u2319\3\2\2\2\u2317\u2319\5\u0320\u0191"+
		"\2\u2318\u229d\3\2\2\2\u2318\u229e\3\2\2\2\u2318\u229f\3\2\2\2\u2318\u22a0"+
		"\3\2\2\2\u2318\u22a7\3\2\2\2\u2318\u22ab\3\2\2\2\u2318\u22b2\3\2\2\2\u2318"+
		"\u22bd\3\2\2\2\u2318\u22c1\3\2\2\2\u2318\u22c6\3\2\2\2\u2318\u22c7\3\2"+
		"\2\2\u2318\u22c8\3\2\2\2\u2318\u22d1\3\2\2\2\u2318\u22da\3\2\2\2\u2318"+
		"\u22e1\3\2\2\2\u2318\u22e8\3\2\2\2\u2318\u22eb\3\2\2\2\u2318\u22ee\3\2"+
		"\2\2\u2318\u22fb\3\2\2\2\u2318\u22fc\3\2\2\2\u2318\u2303\3\2\2\2\u2318"+
		"\u230e\3\2\2\2\u2318\u230f\3\2\2\2\u2318\u2310\3\2\2\2\u2318\u2317\3\2"+
		"\2\2\u2319\u031f\3\2\2\2\u231a\u2320\5\u0322\u0192\2\u231b\u2320\5\u0324"+
		"\u0193\2\u231c\u2320\5\u0326\u0194\2\u231d\u2320\5\u0328\u0195\2\u231e"+
		"\u2320\5\u032a\u0196\2\u231f\u231a\3\2\2\2\u231f\u231b\3\2\2\2\u231f\u231c"+
		"\3\2\2\2\u231f\u231d\3\2\2\2\u231f\u231e\3\2\2\2\u2320\u0321\3\2\2\2\u2321"+
		"\u2326\7\u030a\2\2\u2322\u2326\7\u030c\2\2\u2323\u2326\7r\2\2\u2324\u2326"+
		"\5\u0324\u0193\2\u2325\u2321\3\2\2\2\u2325\u2322\3\2\2\2\u2325\u2323\3"+
		"\2\2\2\u2325\u2324\3\2\2\2\u2326\u2327\3\2\2\2\u2327\u2328\7\u031f\2\2"+
		"\u2328\u2329\7\u02f9\2\2\u2329\u232a\7\u0324\2\2\u232a\u232b\7\u030f\2"+
		"\2\u232b\u232c\7\u0326\2\2\u232c\u232d\7\u030f\2\2\u232d\u234d\7\u0325"+
		"\2\2\u232e\u2333\7\u030a\2\2\u232f\u2333\7\u030c\2\2\u2330\u2333\7r\2"+
		"\2\u2331\u2333\5\u0324\u0193\2\u2332\u232e\3\2\2\2\u2332\u232f\3\2\2\2"+
		"\u2332\u2330\3\2\2\2\u2332\u2331\3\2\2\2\u2333\u2334\3\2\2\2\u2334\u2335"+
		"\7\u031f\2\2\u2335\u2336\7\u02b0\2\2\u2336\u2337\7\u031f\2\2\u2337\u2338"+
		"\7\u02f9\2\2\u2338\u2339\7\u0324\2\2\u2339\u233a\7\u030f\2\2\u233a\u233b"+
		"\7\u0326\2\2\u233b\u233c\7\u030f\2\2\u233c\u234d\7\u0325\2\2\u233d\u2342"+
		"\7\u030a\2\2\u233e\u2342\7\u030c\2\2\u233f\u2342\7r\2\2\u2340\u2342\5"+
		"\u0324\u0193\2\u2341\u233d\3\2\2\2\u2341\u233e\3\2\2\2\u2341\u233f\3\2"+
		"\2\2\u2341\u2340\3\2\2\2\u2342\u2343\3\2\2\2\u2343\u2344\7\u031f\2\2\u2344"+
		"\u2345\7\u00f1\2\2\u2345\u2346\7\u031f\2\2\u2346\u2347\7\u02f9\2\2\u2347"+
		"\u2348\7\u0324\2\2\u2348\u2349\7\u030f\2\2\u2349\u234a\7\u0326\2\2\u234a"+
		"\u234b\7\u030f\2\2\u234b\u234d\7\u0325\2\2\u234c\u2325\3\2\2\2\u234c\u2332"+
		"\3\2\2\2\u234c\u2341\3\2\2\2\u234d\u0323\3\2\2\2\u234e\u2352\7\u030a\2"+
		"\2\u234f\u2352\7\u030c\2\2\u2350\u2352\5\u036a\u01b6\2\u2351\u234e\3\2"+
		"\2\2\u2351\u234f\3\2\2\2\u2351\u2350\3\2\2\2\u2352\u2353\3\2\2\2\u2353"+
		"\u2354\7\u031f\2\2\u2354\u2355\7\u028c\2\2\u2355\u2356\7\u0324\2\2\u2356"+
		"\u2357\7\u030f\2\2\u2357\u2365\7\u0325\2\2\u2358\u235c\7\u030a\2\2\u2359"+
		"\u235c\7\u030c\2\2\u235a\u235c\5\u036a\u01b6\2\u235b\u2358\3\2\2\2\u235b"+
		"\u2359\3\2\2\2\u235b\u235a\3\2\2\2\u235c\u235d\3\2\2\2\u235d\u235e\7\u031f"+
		"\2\2\u235e\u235f\7\u02b0\2\2\u235f\u2360\7\u031f\2\2\u2360\u2361\7\u028c"+
		"\2\2\u2361\u2362\7\u0324\2\2\u2362\u2363\7\u030f\2\2\u2363\u2365\7\u0325"+
		"\2\2\u2364\u2351\3\2\2\2\u2364\u235b\3\2\2\2\u2365\u0325\3\2\2\2\u2366"+
		"\u2367\tl\2\2\u2367\u2368\7\u031f\2\2\u2368\u2369\7\u01f0\2\2\u2369\u236a"+
		"\7\u0324\2\2\u236a\u236b\7\u030f\2\2\u236b\u236c\7\u0325\2\2\u236c\u0327"+
		"\3\2\2\2\u236d\u236e\tl\2\2\u236e\u236f\7\u031f\2\2\u236f\u2370\7\u0253"+
		"\2\2\u2370\u2371\7\u0324\2\2\u2371\u2372\7\u030f\2\2\u2372\u2373\7\u0325"+
		"\2\2\u2373\u0329\3\2\2\2\u2374\u2375\tl\2\2\u2375\u2376\7\u031f\2\2\u2376"+
		"\u2377\7\u025e\2\2\u2377\u2378\7\u0324\2\2\u2378\u2379\7\u030f\2\2\u2379"+
		"\u237a\7\u0325\2\2\u237a\u032b\3\2\2\2\u237b\u237c\7\u0177\2\2\u237c\u237d"+
		"\5\u02b6\u015c\2\u237d\u237e\7\u015b\2\2\u237e\u237f\5\u02b6\u015c\2\u237f"+
		"\u032d\3\2\2\2\u2380\u2381\7\u0177\2\2\u2381\u2382\5\u02cc\u0167\2\u2382"+
		"\u2383\7\u015b\2\2\u2383\u2384\5\u02b6\u015c\2\u2384\u032f\3\2\2\2\u2385"+
		"\u2387\7\17\2\2\u2386\u2385\3\2\2\2\u2386\u2387\3\2\2\2\u2387\u2388\3"+
		"\2\2\2\u2388\u2389\5\u0340\u01a1\2\u2389\u0331\3\2\2\2\u238a\u238c\7\17"+
		"\2\2\u238b\u238a\3\2\2\2\u238b\u238c\3\2\2\2\u238c\u238d\3\2\2\2\u238d"+
		"\u238e\5\u0334\u019b\2\u238e\u0333\3\2\2\2\u238f\u2391\5\u03a0\u01d1\2"+
		"\u2390\u2392\5\u0336\u019c\2\u2391\u2390\3\2\2\2\u2391\u2392\3\2\2\2\u2392"+
		"\u0335\3\2\2\2\u2393\u2395\7\u017b\2\2\u2394\u2393\3\2\2\2\u2394\u2395"+
		"\3\2\2\2\u2395\u2396\3\2\2\2\u2396\u2397\7\u0324\2\2\u2397\u239e\5\u033a"+
		"\u019e\2\u2398\u239a\7\u0326\2\2\u2399\u2398\3\2\2\2\u2399\u239a\3\2\2"+
		"\2\u239a\u239b\3\2\2\2\u239b\u239d\5\u033a\u019e\2\u239c\u2399\3\2\2\2"+
		"\u239d\u23a0\3\2\2\2\u239e\u239c\3\2\2\2\u239e\u239f\3\2\2\2\u239f\u23a1"+
		"\3\2\2\2\u23a0\u239e\3\2\2\2\u23a1\u23a2\7\u0325\2\2\u23a2\u0337\3\2\2"+
		"\2\u23a3\u23a4\7\u017b\2\2\u23a4\u23a5\7\u0324\2\2\u23a5\u23ac\5\u033a"+
		"\u019e\2\u23a6\u23a8\7\u0326\2\2\u23a7\u23a6\3\2\2\2\u23a7\u23a8\3\2\2"+
		"\2\u23a8\u23a9\3\2\2\2\u23a9\u23ab\5\u033a\u019e\2\u23aa\u23a7\3\2\2\2"+
		"\u23ab\u23ae\3\2\2\2\u23ac\u23aa\3\2\2\2\u23ac\u23ad\3\2\2\2\u23ad\u23af"+
		"\3\2\2\2\u23ae\u23ac\3\2\2\2\u23af\u23b0\7\u0325\2\2\u23b0\u0339\3\2\2"+
		"\2\u23b1\u23b3\7\u025d\2\2\u23b2\u23b1\3\2\2\2\u23b2\u23b3\3\2\2\2\u23b3"+
		"\u23da\3\2\2\2\u23b4\u23b5\7\u009d\2\2\u23b5\u23b6\7\u0324\2\2\u23b6\u23bb"+
		"\5\u033c\u019f\2\u23b7\u23b8\7\u0326\2\2\u23b8\u23ba\5\u033c\u019f\2\u23b9"+
		"\u23b7\3\2\2\2\u23ba\u23bd\3\2\2\2\u23bb\u23b9\3\2\2\2\u23bb\u23bc\3\2"+
		"\2\2\u23bc\u23be\3\2\2\2\u23bd\u23bb\3\2\2\2\u23be\u23bf\7\u0325\2\2\u23bf"+
		"\u23db\3\2\2\2\u23c0\u23c1\7\u009d\2\2\u23c1\u23c2\7\u0313\2\2\u23c2\u23db"+
		"\5\u033c\u019f\2\u23c3\u23d2\7\u0086\2\2\u23c4\u23c5\7\u0324\2\2\u23c5"+
		"\u23c6\5\u033c\u019f\2\u23c6\u23c7\7\u0324\2\2\u23c7\u23cc\7\u030c\2\2"+
		"\u23c8\u23c9\7\u0326\2\2\u23c9\u23cb\7\u030c\2\2\u23ca\u23c8\3\2\2\2\u23cb"+
		"\u23ce\3\2\2\2\u23cc\u23ca\3\2\2\2\u23cc\u23cd\3\2\2\2\u23cd\u23cf\3\2"+
		"\2\2\u23ce\u23cc\3\2\2\2\u23cf\u23d0\7\u0325\2\2\u23d0\u23d1\7\u0325\2"+
		"\2\u23d1\u23d3\3\2\2\2\u23d2\u23c4\3\2\2\2\u23d2\u23d3\3\2\2\2\u23d3\u23db"+
		"\3\2\2\2\u23d4\u23db\7\u02c4\2\2\u23d5\u23db\7\u02cd\2\2\u23d6\u23d7\7"+
		"\u02ce\2\2\u23d7\u23d8\7\u0313\2\2\u23d8\u23db\7\u030b\2\2\u23d9\u23db"+
		"\7\u030c\2\2\u23da\u23b4\3\2\2\2\u23da\u23c0\3\2\2\2\u23da\u23c3\3\2\2"+
		"\2\u23da\u23d4\3\2\2\2\u23da\u23d5\3\2\2\2\u23da\u23d6\3\2\2\2\u23da\u23d9"+
		"\3\2\2\2\u23db\u033b\3\2\2\2\u23dc\u23df\5\u03a0\u01d1\2\u23dd\u23df\7"+
		"\u030b\2\2\u23de\u23dc\3\2\2\2\u23de\u23dd\3\2\2\2\u23df\u033d\3\2\2\2"+
		"\u23e0\u23e1\7\u0324\2\2\u23e1\u23e6\5\u0340\u01a1\2\u23e2\u23e3\7\u0326"+
		"\2\2\u23e3\u23e5\5\u0340\u01a1\2\u23e4\u23e2\3\2\2\2\u23e5\u23e8\3\2\2"+
		"\2\u23e6\u23e4\3\2\2\2\u23e6\u23e7\3\2\2\2\u23e7\u23e9\3\2\2\2\u23e8\u23e6"+
		"\3\2\2\2\u23e9\u23ea\7\u0325\2\2\u23ea\u033f\3\2\2\2\u23eb\u23ee\5\u03a0"+
		"\u01d1\2\u23ec\u23ee\7\u030f\2\2\u23ed\u23eb\3\2\2\2\u23ed\u23ec\3\2\2"+
		"\2\u23ee\u0341\3\2\2\2\u23ef\u23f0\7\u0171\2\2\u23f0\u23f1\7\u0324\2\2"+
		"\u23f1\u23f2\5\u0344\u01a3\2\u23f2\u23fa\7\u0325\2\2\u23f3\u23f4\7\u0326"+
		"\2\2\u23f4\u23f5\7\u0324\2\2\u23f5\u23f6\5\u0344\u01a3\2\u23f6\u23f7\7"+
		"\u0325\2\2\u23f7\u23f9\3\2\2\2\u23f8\u23f3\3\2\2\2\u23f9\u23fc\3\2\2\2"+
		"\u23fa\u23f8\3\2\2\2\u23fa\u23fb\3\2\2\2\u23fb\u0343\3\2\2\2\u23fc\u23fa"+
		"\3\2\2\2\u23fd\u2402\5\u02b6\u015c\2\u23fe\u23ff\7\u0326\2\2\u23ff\u2401"+
		"\5\u02b6\u015c\2\u2400\u23fe\3\2\2\2\u2401\u2404\3\2\2\2\u2402\u2400\3"+
		"\2\2\2\u2402\u2403\3\2\2\2\u2403\u0345\3\2\2\2\u2404\u2402\3\2\2\2\u2405"+
		"\u2406\tm\2\2\u2406\u2407\7\u0324\2\2\u2407\u2408\7\u0325\2\2\u2408\u2410"+
		"\5\u034e\u01a8\2\u2409\u240a\7\u0265\2\2\u240a\u240b\7\u0324\2\2\u240b"+
		"\u240c\5\u02b6\u015c\2\u240c\u240d\7\u0325\2\2\u240d\u240e\5\u034e\u01a8"+
		"\2\u240e\u2410\3\2\2\2\u240f\u2405\3\2\2\2\u240f\u2409\3\2\2\2\u2410\u0347"+
		"\3\2\2\2\u2411\u2412\tn\2\2\u2412\u2413\7\u0324\2\2\u2413\u2414\5\u034c"+
		"\u01a7\2\u2414\u2416\7\u0325\2\2\u2415\u2417\5\u034e\u01a8\2\u2416\u2415"+
		"\3\2\2\2\u2416\u2417\3\2\2\2\u2417\u2432\3\2\2\2\u2418\u2419\to\2\2\u2419"+
		"\u241c\7\u0324\2\2\u241a\u241d\7\u0329\2\2\u241b\u241d\5\u034c\u01a7\2"+
		"\u241c\u241a\3\2\2\2\u241c\u241b\3\2\2\2\u241d\u241e\3\2\2\2\u241e\u2420"+
		"\7\u0325\2\2\u241f\u2421\5\u034e\u01a8\2\u2420\u241f\3\2\2\2\u2420\u2421"+
		"\3\2\2\2\u2421\u2432\3\2\2\2\u2422\u2423\7\u01b5\2\2\u2423\u2424\7\u0324"+
		"\2\2\u2424\u2425\5\u034c\u01a7\2\u2425\u2426\7\u0325\2\2\u2426\u2432\3"+
		"\2\2\2\u2427\u2428\7\u020e\2\2\u2428\u2429\7\u0324\2\2\u2429\u242a\5\u02b6"+
		"\u015c\2\u242a\u242b\7\u0325\2\2\u242b\u2432\3\2\2\2\u242c\u242d\7\u020f"+
		"\2\2\u242d\u242e\7\u0324\2\2\u242e\u242f\5\u0344\u01a3\2\u242f\u2430\7"+
		"\u0325\2\2\u2430\u2432\3\2\2\2\u2431\u2411\3\2\2\2\u2431\u2418\3\2\2\2"+
		"\u2431\u2422\3\2\2\2\u2431\u2427\3\2\2\2\u2431\u242c\3\2\2\2\u2432\u0349"+
		"\3\2\2\2\u2433\u2434\tp\2\2\u2434\u2435\7\u0324\2\2\u2435\u2436\5\u02b6"+
		"\u015c\2\u2436\u2437\7\u0325\2\2\u2437\u2438\5\u034e\u01a8\2\u2438\u2448"+
		"\3\2\2\2\u2439\u243a\tq\2\2\u243a\u243b\7\u0324\2\2\u243b\u2442\5\u02b6"+
		"\u015c\2\u243c\u243d\7\u0326\2\2\u243d\u2440\5\u02b6\u015c\2\u243e\u243f"+
		"\7\u0326\2\2\u243f\u2441\5\u02b6\u015c\2\u2440\u243e\3\2\2\2\u2440\u2441"+
		"\3\2\2\2\u2441\u2443\3\2\2\2\u2442\u243c\3\2\2\2\u2442\u2443\3\2\2\2\u2443"+
		"\u2444\3\2\2\2\u2444\u2445\7\u0325\2\2\u2445\u2446\5\u034e\u01a8\2\u2446"+
		"\u2448\3\2\2\2\u2447\u2433\3\2\2\2\u2447\u2439\3\2\2\2\u2448\u034b\3\2"+
		"\2\2\u2449\u244b\t_\2\2\u244a\u2449\3\2\2\2\u244a\u244b\3\2\2\2\u244b"+
		"\u244c\3\2\2\2\u244c\u244d\5\u02b6\u015c\2\u244d\u034d\3\2\2\2\u244e\u244f"+
		"\7\u00ef\2\2\u244f\u2453\7\u0324\2\2\u2450\u2451\7\u0277\2\2\u2451\u2452"+
		"\7%\2\2\u2452\u2454\5\u0344\u01a3\2\u2453\u2450\3\2\2\2\u2453\u2454\3"+
		"\2\2\2\u2454\u2456\3\2\2\2\u2455\u2457\5\u02e0\u0171\2\u2456\u2455\3\2"+
		"\2\2\u2456\u2457\3\2\2\2\u2457\u2459\3\2\2\2\u2458\u245a\5\u0350\u01a9"+
		"\2\u2459\u2458\3\2\2\2\u2459\u245a\3\2\2\2\u245a\u245b\3\2\2\2\u245b\u245c"+
		"\7\u0325\2\2\u245c\u034f\3\2\2\2\u245d\u245e\tr\2\2\u245e\u245f\5\u0352"+
		"\u01aa\2\u245f\u0351\3\2\2\2\u2460\u2467\5\u0356\u01ac\2\u2461\u2462\7"+
		"\34\2\2\u2462\u2463\5\u0354\u01ab\2\u2463\u2464\7\n\2\2\u2464\u2465\5"+
		"\u0354\u01ab\2\u2465\u2467\3\2\2\2\u2466\u2460\3\2\2\2\u2466\u2461\3\2"+
		"\2\2\u2467\u0353\3\2\2\2\u2468\u246b\5\u0356\u01ac\2\u2469\u246b\5\u0358"+
		"\u01ad\2\u246a\u2468\3\2\2\2\u246a\u2469\3\2\2\2\u246b\u0355\3\2\2\2\u246c"+
		"\u246d\7\u02f2\2\2\u246d\u2473\7\u027e\2\2\u246e\u246f\7\u030b\2\2\u246f"+
		"\u2473\7\u027e\2\2\u2470\u2471\7J\2\2\u2471\u2473\7\u02b0\2\2\u2472\u246c"+
		"\3\2\2\2\u2472\u246e\3\2\2\2\u2472\u2470\3\2\2\2\u2473\u0357\3\2\2\2\u2474"+
		"\u2475\7\u02f2\2\2\u2475\u2479\7\u0201\2\2\u2476\u2477\7\u030b\2\2\u2477"+
		"\u2479\7\u0201\2\2\u2478\u2474\3\2\2\2\u2478\u2476\3\2\2\2\u2479\u0359"+
		"\3\2\2\2\u247a\u247b\7\u01fd\2\2\u247b\u2480\5\u035c\u01af\2\u247c\u247d"+
		"\7\u0326\2\2\u247d\u247f\5\u035c\u01af\2\u247e\u247c\3\2\2\2\u247f\u2482"+
		"\3\2\2\2\u2480\u247e\3\2\2\2\u2480\u2481\3\2\2\2\u2481\u249d\3\2\2\2\u2482"+
		"\u2480\3\2\2\2\u2483\u2484\7\u01d5\2\2\u2484\u2487\7\u0313\2\2\u2485\u2488"+
		"\5\u03a0\u01d1\2\u2486\u2488\7\u030f\2\2\u2487\u2485\3\2\2\2\u2487\u2486"+
		"\3\2\2\2\u2488\u249d\3\2\2\2\u2489\u248a\7\u01d4\2\2\u248a\u248d\7\u0313"+
		"\2\2\u248b\u248e\5\u03a0\u01d1\2\u248c\u248e\7\u030f\2\2\u248d\u248b\3"+
		"\2\2\2\u248d\u248c\3\2\2\2\u248e\u249d\3\2\2\2\u248f\u2490\7\u0257\2\2"+
		"\u2490\u2491\7\u0313\2\2\u2491\u249d\t\b\2\2\u2492\u2493\7\u02e9\2\2\u2493"+
		"\u2494\7\u0313\2\2\u2494\u249d\t";
	private static final String _serializedATNSegment4 =
		"\b\2\2\u2495\u2496\7\u02ef\2\2\u2496\u2497\7\u0313\2\2\u2497\u249d\7\u030b"+
		"\2\2\u2498\u2499\7\u01d0\2\2\u2499\u249d\t\b\2\2\u249a\u249b\7\u02ec\2"+
		"\2\u249b\u249d\t\b\2\2\u249c\u247a\3\2\2\2\u249c\u2483\3\2\2\2\u249c\u2489"+
		"\3\2\2\2\u249c\u248f\3\2\2\2\u249c\u2492\3\2\2\2\u249c\u2495\3\2\2\2\u249c"+
		"\u2498\3\2\2\2\u249c\u249a\3\2\2\2\u249d\u035b\3\2\2\2\u249e\u24a5\7\u0324"+
		"\2\2\u249f\u24a0\7\u025f\2\2\u24a0\u24a1\7\u0313\2\2\u24a1\u24a6\ts\2"+
		"\2\u24a2\u24a3\7\u01e0\2\2\u24a3\u24a4\7\u0313\2\2\u24a4\u24a6\7\u030f"+
		"\2\2\u24a5\u249f\3\2\2\2\u24a5\u24a2\3\2\2\2\u24a6\u24a7\3\2\2\2\u24a7"+
		"\u24a8\7\u0325\2\2\u24a8\u035d\3\2\2\2\u24a9\u24ac\5\u0360\u01b1\2\u24aa"+
		"\u24ac\5\u0362\u01b2\2\u24ab\u24a9\3\2\2\2\u24ab\u24aa\3\2\2\2\u24ac\u035f"+
		"\3\2\2\2\u24ad\u24ae\7\u01fa\2\2\u24ae\u24b1\5\u03a0\u01d1\2\u24af\u24b0"+
		"\7>\2\2\u24b0\u24b2\7\u01fd\2\2\u24b1\u24af\3\2\2\2\u24b1\u24b2\3\2\2"+
		"\2\u24b2\u24b4\3\2\2\2\u24b3\u24b5\7Y\2\2\u24b4\u24b3\3\2\2\2\u24b4\u24b5"+
		"\3\2\2\2\u24b5\u24b8\3\2\2\2\u24b6\u24b7\7>\2\2\u24b7\u24b9\7\u024d\2"+
		"\2\u24b8\u24b6\3\2\2\2\u24b8\u24b9\3\2\2\2\u24b9\u24ba\3\2\2\2\u24ba\u24bf"+
		"\5\u0362\u01b2\2\u24bb\u24bc\7\u0326\2\2\u24bc\u24be\5\u0362\u01b2\2\u24bd"+
		"\u24bb\3\2\2\2\u24be\u24c1\3\2\2\2\u24bf\u24bd\3\2\2\2\u24bf\u24c0\3\2"+
		"\2\2\u24c0\u0361\3\2\2\2\u24c1\u24bf\3\2\2\2\u24c2\u24c3\7\u0324\2\2\u24c3"+
		"\u24c4\7\u0256\2\2\u24c4\u24c7\7\u0313\2\2\u24c5\u24c8\5\u03a0\u01d1\2"+
		"\u24c6\u24c8\7\u030f\2\2\u24c7\u24c5\3\2\2\2\u24c7\u24c6\3\2\2\2\u24c8"+
		"\u24ca\3\2\2\2\u24c9\u24cb\7\u0326\2\2\u24ca\u24c9\3\2\2\2\u24ca\u24cb"+
		"\3\2\2\2\u24cb\u24cc\3\2\2\2\u24cc\u24cd\7\u0082\2\2\u24cd\u24ce\7\u0313"+
		"\2\2\u24ce\u24d0\7\u030f\2\2\u24cf\u24d1\7\u0326\2\2\u24d0\u24cf\3\2\2"+
		"\2\u24d0\u24d1\3\2\2\2\u24d1\u24d8\3\2\2\2\u24d2\u24d3\7\u02cb\2\2\u24d3"+
		"\u24d4\7\u0313\2\2\u24d4\u24d6\5\u03a8\u01d5\2\u24d5\u24d7\7\u0326\2\2"+
		"\u24d6\u24d5\3\2\2\2\u24d6\u24d7\3\2\2\2\u24d7\u24d9\3\2\2\2\u24d8\u24d2"+
		"\3\2\2\2\u24d8\u24d9\3\2\2\2\u24d9\u24e3\3\2\2\2\u24da\u24db\7\u0249\2"+
		"\2\u24db\u24de\7\u0313\2\2\u24dc\u24df\5\u03a8\u01d5\2\u24dd\u24df\7\u02f5"+
		"\2\2\u24de\u24dc\3\2\2\2\u24de\u24dd\3\2\2\2\u24df\u24e1\3\2\2\2\u24e0"+
		"\u24e2\7\u0326\2\2\u24e1\u24e0\3\2\2\2\u24e1\u24e2\3\2\2\2\u24e2\u24e4"+
		"\3\2\2\2\u24e3\u24da\3\2\2\2\u24e3\u24e4\3\2\2\2\u24e4\u24eb\3\2\2\2\u24e5"+
		"\u24e6\7\u01fb\2\2\u24e6\u24e7\7\u0313\2\2\u24e7\u24e9\5\u03a8\u01d5\2"+
		"\u24e8\u24ea\7\u0326\2\2\u24e9\u24e8\3\2\2\2\u24e9\u24ea\3\2\2\2\u24ea"+
		"\u24ec\3\2\2\2\u24eb\u24e5\3\2\2\2\u24eb\u24ec\3\2\2\2\u24ec\u24ed\3\2"+
		"\2\2\u24ed\u24ee\7\u0325\2\2\u24ee\u0363\3\2\2\2\u24ef\u24f0\5\u03a0\u01d1"+
		"\2\u24f0\u24f1\7\u031f\2\2\u24f1\u24f2\5\u03a0\u01d1\2\u24f2\u24f3\7\u031f"+
		"\2\2\u24f3\u24f4\5\u03a0\u01d1\2\u24f4\u24f5\7\u031f\2\2\u24f5\u2501\3"+
		"\2\2\2\u24f6\u24f7\5\u03a0\u01d1\2\u24f7\u24f9\7\u031f\2\2\u24f8\u24fa"+
		"\5\u03a0\u01d1\2\u24f9\u24f8\3\2\2\2\u24f9\u24fa\3\2\2\2\u24fa\u24fb\3"+
		"\2\2\2\u24fb\u24fc\7\u031f\2\2\u24fc\u2501\3\2\2\2\u24fd\u24fe\5\u03a0"+
		"\u01d1\2\u24fe\u24ff\7\u031f\2\2\u24ff\u2501\3\2\2\2\u2500\u24ef\3\2\2"+
		"\2\u2500\u24f6\3\2\2\2\u2500\u24fd\3\2\2\2\u2500\u2501\3\2\2\2\u2501\u2502"+
		"\3\2\2\2\u2502\u2503\5\u03a0\u01d1\2\u2503\u0365\3\2\2\2\u2504\u250a\5"+
		"\u03a0\u01d1\2\u2505\u2506\5\u03a0\u01d1\2\u2506\u2507\7\u031f\2\2\u2507"+
		"\u2508\5\u03a0\u01d1\2\u2508\u250a\3\2\2\2\u2509\u2504\3\2\2\2\u2509\u2505"+
		"\3\2\2\2\u250a\u0367\3\2\2\2\u250b\u2511\5\u03a0\u01d1\2\u250c\u250d\5"+
		"\u03a0\u01d1\2\u250d\u250e\7\u031f\2\2\u250e\u250f\5\u03a0\u01d1\2\u250f"+
		"\u2511\3\2\2\2\u2510\u250b\3\2\2\2\u2510\u250c\3\2\2\2\u2511\u0369\3\2"+
		"\2\2\u2512\u2513\5\u03a0\u01d1\2\u2513\u2514\7\u031f\2\2\u2514\u2515\5"+
		"\u03a0\u01d1\2\u2515\u2516\7\u031f\2\2\u2516\u2517\5\u03a0\u01d1\2\u2517"+
		"\u2518\7\u031f\2\2\u2518\u2524\3\2\2\2\u2519\u251a\5\u03a0\u01d1\2\u251a"+
		"\u251c\7\u031f\2\2\u251b\u251d\5\u03a0\u01d1\2\u251c\u251b\3\2\2\2\u251c"+
		"\u251d\3\2\2\2\u251d\u251e\3\2\2\2\u251e\u251f\7\u031f\2\2\u251f\u2524"+
		"\3\2\2\2\u2520\u2521\5\u03a0\u01d1\2\u2521\u2522\7\u031f\2\2\u2522\u2524"+
		"\3\2\2\2\u2523\u2512\3\2\2\2\u2523\u2519\3\2\2\2\u2523\u2520\3\2\2\2\u2523"+
		"\u2524\3\2\2\2\u2524\u2525\3\2\2\2\u2525\u2526\5\u03a0\u01d1\2\u2526\u036b"+
		"\3\2\2\2\u2527\u2528\5\u03a0\u01d1\2\u2528\u252a\7\u031f\2\2\u2529\u252b"+
		"\5\u03a0\u01d1\2\u252a\u2529\3\2\2\2\u252a\u252b\3\2\2\2\u252b\u252c\3"+
		"\2\2\2\u252c\u252d\7\u031f\2\2\u252d\u2532\3\2\2\2\u252e\u252f\5\u03a0"+
		"\u01d1\2\u252f\u2530\7\u031f\2\2\u2530\u2532\3\2\2\2\u2531\u2527\3\2\2"+
		"\2\u2531\u252e\3\2\2\2\u2531\u2532\3\2\2\2\u2532\u2533\3\2\2\2\u2533\u2542"+
		"\5\u03a0\u01d1\2\u2534\u2535\5\u03a0\u01d1\2\u2535\u2537\7\u031f\2\2\u2536"+
		"\u2538\5\u03a0\u01d1\2\u2537\u2536\3\2\2\2\u2537\u2538\3\2\2\2\u2538\u2539"+
		"\3\2\2\2\u2539\u253a\7\u031f\2\2\u253a\u253f\3\2\2\2\u253b\u253c\5\u03a0"+
		"\u01d1\2\u253c\u253d\7\u031f\2\2\u253d\u253f\3\2\2\2\u253e\u2534\3\2\2"+
		"\2\u253e\u253b\3\2\2\2\u253e\u253f\3\2\2\2\u253f\u2540\3\2\2\2\u2540\u2542"+
		"\7\37\2\2\u2541\u2531\3\2\2\2\u2541\u253e\3\2\2\2\u2542\u036d\3\2\2\2"+
		"\u2543\u2544\5\u03a0\u01d1\2\u2544\u2545\7\u031f\2\2\u2545\u2547\3\2\2"+
		"\2\u2546\u2543\3\2\2\2\u2546\u2547\3\2\2\2\u2547\u2548\3\2\2\2\u2548\u2549"+
		"\5\u03a0\u01d1\2\u2549\u036f\3\2\2\2\u254a\u254b\5\u03a0\u01d1\2\u254b"+
		"\u254d\7\u031f\2\2\u254c\u254e\5\u03a0\u01d1\2\u254d\u254c\3\2\2\2\u254d"+
		"\u254e\3\2\2\2\u254e\u254f\3\2\2\2\u254f\u2550\7\u031f\2\2\u2550\u2555"+
		"\3\2\2\2\u2551\u2552\5\u03a0\u01d1\2\u2552\u2553\7\u031f\2\2\u2553\u2555"+
		"\3\2\2\2\u2554\u254a\3\2\2\2\u2554\u2551\3\2\2\2\u2554\u2555\3\2\2\2\u2555"+
		"\u2556\3\2\2\2\u2556\u2557\5\u03a0\u01d1\2\u2557\u0371\3\2\2\2\u2558\u255b"+
		"\5\u036a\u01b6\2\u2559\u255b\7\u030a\2\2\u255a\u2558\3\2\2\2\u255a\u2559"+
		"\3\2\2\2\u255b\u0373\3\2\2\2\u255c\u255d\5\u036c\u01b7\2\u255d\u255e\7"+
		"\u031f\2\2\u255e\u2560\3\2\2\2\u255f\u255c\3\2\2\2\u255f\u2560\3\2\2\2"+
		"\u2560\u2561\3\2\2\2\u2561\u258d\5\u03a0\u01d1\2\u2562\u2563\5\u036c\u01b7"+
		"\2\u2563\u2564\7\u031f\2\2\u2564\u2566\3\2\2\2\u2565\u2562\3\2\2\2\u2565"+
		"\u2566\3\2\2\2\u2566\u2567\3\2\2\2\u2567\u258d\7\u01ba\2\2\u2568\u2569"+
		"\5\u036c\u01b7\2\u2569\u256a\7\u031f\2\2\u256a\u256c\3\2\2\2\u256b\u2568"+
		"\3\2\2\2\u256b\u256c\3\2\2\2\u256c\u256d\3\2\2\2\u256d\u258d\7\u02d2\2"+
		"\2\u256e\u256f\5\u036c\u01b7\2\u256f\u2570\7\u031f\2\2\u2570\u2572\3\2"+
		"\2\2\u2571\u256e\3\2\2\2\u2571\u2572\3\2\2\2\u2572\u2573\3\2\2\2\u2573"+
		"\u258d\7\u028d\2\2\u2574\u2575\5\u036c\u01b7\2\u2575\u2576\7\u031f\2\2"+
		"\u2576\u2578\3\2\2\2\u2577\u2574\3\2\2\2\u2577\u2578\3\2\2\2\u2578\u2579"+
		"\3\2\2\2\u2579\u258d\7\u0196\2\2\u257a\u257b\5\u036c\u01b7\2\u257b\u257c"+
		"\7\u031f\2\2\u257c\u257e\3\2\2\2\u257d\u257a\3\2\2\2\u257d\u257e\3\2\2"+
		"\2\u257e\u257f\3\2\2\2\u257f\u258d\7\u0193\2\2\u2580\u2581\5\u036c\u01b7"+
		"\2\u2581\u2582\7\u031f\2\2\u2582\u2584\3\2\2\2\u2583\u2580\3\2\2\2\u2583"+
		"\u2584\3\2\2\2\u2584\u2585\3\2\2\2\u2585\u258d\7\u0192\2\2\u2586\u2587"+
		"\5\u036c\u01b7\2\u2587\u2588\7\u031f\2\2\u2588\u258a\3\2\2\2\u2589\u2586"+
		"\3\2\2\2\u2589\u258a\3\2\2\2\u258a\u258b\3\2\2\2\u258b\u258d\7\u0190\2"+
		"\2\u258c\u255f\3\2\2\2\u258c\u2565\3\2\2\2\u258c\u256b\3\2\2\2\u258c\u2571"+
		"\3\2\2\2\u258c\u2577\3\2\2\2\u258c\u257d\3\2\2\2\u258c\u2583\3\2\2\2\u258c"+
		"\u2589\3\2\2\2\u258d\u0375\3\2\2\2\u258e\u2590\5\u03a0\u01d1\2\u258f\u2591"+
		"\te\2\2\u2590\u258f\3\2\2\2\u2590\u2591\3\2\2\2\u2591\u2599\3\2\2\2\u2592"+
		"\u2593\7\u0326\2\2\u2593\u2595\5\u03a0\u01d1\2\u2594\u2596\te\2\2\u2595"+
		"\u2594\3\2\2\2\u2595\u2596\3\2\2\2\u2596\u2598\3\2\2\2\u2597\u2592\3\2"+
		"\2\2\u2598\u259b\3\2\2\2\u2599\u2597\3\2\2\2\u2599\u259a\3\2\2\2\u259a"+
		"\u0377\3\2\2\2\u259b\u2599\3\2\2\2\u259c\u25a1\5\u03a0\u01d1\2\u259d\u259e"+
		"\7\u0326\2\2\u259e\u25a0\5\u03a0\u01d1\2\u259f\u259d\3\2\2\2\u25a0\u25a3"+
		"\3\2\2\2\u25a1\u259f\3\2\2\2\u25a1\u25a2\3\2\2\2\u25a2\u0379\3\2\2\2\u25a3"+
		"\u25a1\3\2\2\2\u25a4\u25a7\5\u03a0\u01d1\2\u25a5\u25a7\7\u030a\2\2\u25a6"+
		"\u25a4\3\2\2\2\u25a6\u25a5\3\2\2\2\u25a7\u037b\3\2\2\2\u25a8\u25a9\t\b"+
		"\2\2\u25a9\u037d\3\2\2\2\u25aa\u25ab\tt\2\2\u25ab\u037f\3\2\2\2\u25ac"+
		"\u25ae\7\u00db\2\2\u25ad\u25ac\3\2\2\2\u25ad\u25ae\3\2\2\2\u25ae\u25af"+
		"\3\2\2\2\u25af\u25b0\7\u00de\2\2\u25b0\u0381\3\2\2\2\u25b1\u25b9\5\u0380"+
		"\u01c1\2\u25b2\u25b3\7Y\2\2\u25b3\u25b6\5\u02c0\u0161\2\u25b4\u25b5\7"+
		"\u017b\2\2\u25b5\u25b7\7\u0171\2\2\u25b6\u25b4\3\2\2\2\u25b6\u25b7\3\2"+
		"\2\2\u25b7\u25b9\3\2\2\2\u25b8\u25b1\3\2\2\2\u25b8\u25b2\3\2\2\2\u25b9"+
		"\u0383\3\2\2\2\u25ba\u25c0\5\u0370\u01b9\2\u25bb\u25c0\7\u011e\2\2\u25bc"+
		"\u25c0\7\u00b0\2\2\u25bd\u25c0\7\u01a7\2\2\u25be\u25c0\7\u01b4\2\2\u25bf"+
		"\u25ba\3\2\2\2\u25bf\u25bb\3\2\2\2\u25bf\u25bc\3\2\2\2\u25bf\u25bd\3\2"+
		"\2\2\u25bf\u25be\3\2\2\2\u25c0\u0385\3\2\2\2\u25c1\u25c2\7\33\2\2\u25c2"+
		"\u25c3\7E\2\2\u25c3\u25c4\7\u02e5\2\2\u25c4\u25c5\7\u0324\2\2\u25c5\u25c6"+
		"\7\u030a\2\2\u25c6\u25c7\7\u0325\2\2\u25c7\u25c8\7\u02e7\2\2\u25c8\u25c9"+
		"\7\u0313\2\2\u25c9\u25cb\5\u01bc\u00df\2\u25ca\u25cc\7\u0327\2\2\u25cb"+
		"\u25ca\3\2\2\2\u25cb\u25cc\3\2\2\2\u25cc\u0387\3\2\2\2\u25cd\u25ce\7\33"+
		"\2\2\u25ce\u25d0\7\u01df\2\2\u25cf\u25d1\7E\2\2\u25d0\u25cf\3\2\2\2\u25d0"+
		"\u25d1\3\2\2\2\u25d1\u25d2\3\2\2\2\u25d2\u25d3\7\u030a\2\2\u25d3\u25d4"+
		"\7\u008b\2\2\u25d4\u25d5\7\u0137\2\2\u25d5\u25d6\5\u038c\u01c7\2\u25d6"+
		"\u25d7\7\u015c\2\2\u25d7\u25d8\7\u0137\2\2\u25d8\u25db\5\u038c\u01c7\2"+
		"\u25d9\u25da\7\u0326\2\2\u25da\u25dc\7\u030f\2\2\u25db\u25d9\3\2\2\2\u25db"+
		"\u25dc\3\2\2\2\u25dc\u25dd\3\2\2\2\u25dd\u25de\7\u00e4\2\2\u25de\u25df"+
		"\7C\2\2\u25df\u25f6\5\u038a\u01c6\2\u25e0\u25e7\7\u017b\2\2\u25e1\u25e2"+
		"\tu\2\2\u25e2\u25e3\7\u0313\2\2\u25e3\u25e5\7\u030a\2\2\u25e4\u25e6\7"+
		"\u0326\2\2\u25e5\u25e4\3\2\2\2\u25e5\u25e6\3\2\2\2\u25e6\u25e8\3\2\2\2"+
		"\u25e7\u25e1\3\2\2\2\u25e7\u25e8\3\2\2\2\u25e8\u25ef\3\2\2\2\u25e9\u25ea"+
		"\7\u00b2\2\2\u25ea\u25eb\7\u0313\2\2\u25eb\u25ed\t\2\2\2\u25ec\u25ee\7"+
		"\u0326\2\2\u25ed\u25ec\3\2\2\2\u25ed\u25ee\3\2\2\2\u25ee\u25f0\3\2\2\2"+
		"\u25ef\u25e9\3\2\2\2\u25ef\u25f0\3\2\2\2\u25f0\u25f4\3\2\2\2\u25f1\u25f2"+
		"\7\u01ec\2\2\u25f2\u25f3\7\u0313\2\2\u25f3\u25f5\t\b\2\2\u25f4\u25f1\3"+
		"\2\2\2\u25f4\u25f5\3\2\2\2\u25f5\u25f7\3\2\2\2\u25f6\u25e0\3\2\2\2\u25f6"+
		"\u25f7\3\2\2\2\u25f7\u25f9\3\2\2\2\u25f8\u25fa\7\u0327\2\2\u25f9\u25f8"+
		"\3\2\2\2\u25f9\u25fa\3\2\2\2\u25fa\u0389\3\2\2\2\u25fb\u25fe\5\u03a0\u01d1"+
		"\2\u25fc\u25fe\5\u02b6\u015c\2\u25fd\u25fb\3\2\2\2\u25fd\u25fc\3\2\2\2"+
		"\u25fe\u038b\3\2\2\2\u25ff\u2602\5\u03a0\u01d1\2\u2600\u2602\5\u02b6\u015c"+
		"\2\u2601\u25ff\3\2\2\2\u2601\u2600\3\2\2\2\u2602\u038d\3\2\2\2\u2603\u2604"+
		"\7l\2\2\u2604\u2605\7E\2\2\u2605\u2607\7\u030a\2\2\u2606\u2608\7\u0327"+
		"\2\2\u2607\u2606\3\2\2\2\u2607\u2608\3\2\2\2\u2608\u2615\3\2\2\2\u2609"+
		"\u2610\7\u017b\2\2\u260a\u260b\7p\2\2\u260b\u260c\7\u0313\2\2\u260c\u260d"+
		"\t\3\2\2\u260d\u260e\7\u01dd\2\2\u260e\u260f\7\u0313\2\2\u260f\u2611\t"+
		"\3\2\2\u2610\u260a\3\2\2\2\u2610\u2611\3\2\2\2\u2611\u2613\3\2\2\2\u2612"+
		"\u2614\7\u01b6\2\2\u2613\u2612\3\2\2\2\u2613\u2614\3\2\2\2\u2614\u2616"+
		"\3\2\2\2\u2615\u2609\3\2\2\2\u2615\u2616\3\2\2\2\u2616\u038f\3\2\2\2\u2617"+
		"\u2619\7\u0176\2\2\u2618\u2617\3\2\2\2\u2618\u2619\3\2\2\2\u2619\u261a"+
		"\3\2\2\2\u261a\u261b\7\u0324\2\2\u261b\u261c\5\u0392\u01ca\2\u261c\u2622"+
		"\7\u0325\2\2\u261d\u261f\7\u0326\2\2\u261e\u261d\3\2\2\2\u261e\u261f\3"+
		"\2\2\2\u261f\u2620\3\2\2\2\u2620\u2621\7\u02e7\2\2\u2621\u2623\5\u01bc"+
		"\u00df\2\u2622\u261e\3\2\2\2\u2622\u2623\3\2\2\2\u2623\u2625\3\2\2\2\u2624"+
		"\u2626\7\u0327\2\2\u2625\u2624\3\2\2\2\u2625\u2626\3\2\2\2\u2626\u0391"+
		"\3\2\2\2\u2627\u2628\7\u008e\2\2\u2628\u2629\7E\2\2\u2629\u262a\7\u0092"+
		"\2\2\u262a\u262b\t\3\2\2\u262b\u262c\7\u008b\2\2\u262c\u262e\5\u0394\u01cb"+
		"\2\u262d\u262f\7\u0327\2\2\u262e\u262d\3\2\2\2\u262e\u262f\3\2\2\2\u262f"+
		"\u0393\3\2\2\2\u2630\u2631\5\u03a0\u01d1\2\u2631\u2632\7\u031f\2\2\u2632"+
		"\u2633\5\u03a0\u01d1\2\u2633\u2634\7\u031f\2\2\u2634\u2635\5\u03a0\u01d1"+
		"\2\u2635\u2638\3\2\2\2\u2636\u2638\5\u03a0\u01d1\2\u2637\u2630\3\2\2\2"+
		"\u2637\u2636\3\2\2\2\u2638\u0395\3\2\2\2\u2639\u263a\7\u02c2\2\2\u263a"+
		"\u263b\7\u00e4\2\2\u263b\u263c\7E\2\2\u263c\u263d\t\3\2\2\u263d\u263e"+
		"\7\u024b\2\2\u263e\u263f\7\u02f0\2\2\u263f\u2643\5\u02b6\u015c\2\u2640"+
		"\u2641\7\u0324\2\2\u2641\u2642\t\3\2\2\u2642\u2644\7\u0325\2\2\u2643\u2640"+
		"\3\2\2\2\u2643\u2644\3\2\2\2\u2644\u2646\3\2\2\2\u2645\u2647\7\u0327\2"+
		"\2\u2646\u2645\3\2\2\2\u2646\u2647\3\2\2\2\u2647\u0397\3\2\2\2\u2648\u264a"+
		"\5\u03a0\u01d1\2\u2649\u264b\7\u0096\2\2\u264a\u2649\3\2\2\2\u264a\u264b"+
		"\3\2\2\2\u264b\u2653\3\2\2\2\u264c\u264d\7\u0324\2\2\u264d\u2650\tv\2"+
		"\2\u264e\u264f\7\u0326\2\2\u264f\u2651\7\u030b\2\2\u2650\u264e\3\2\2\2"+
		"\u2650\u2651\3\2\2\2\u2651\u2652\3\2\2\2\u2652\u2654\7\u0325\2\2\u2653"+
		"\u264c\3\2\2\2\u2653\u2654\3\2\2\2\u2654\u265a\3\2\2\2\u2655\u265a\7\u0221"+
		"\2\2\u2656\u265a\7\u02e6\2\2\u2657\u265a\7\u02cc\2\2\u2658\u265a\7\u01a5"+
		"\2\2\u2659\u2648\3\2\2\2\u2659\u2655\3\2\2\2\u2659\u2656\3\2\2\2\u2659"+
		"\u2657\3\2\2\2\u2659\u2658\3\2\2\2\u265a\u0399\3\2\2\2\u265b\u265f\7\u00de"+
		"\2\2\u265c\u265f\7Y\2\2\u265d\u265f\5\u039c\u01cf\2\u265e\u265b\3\2\2"+
		"\2\u265e\u265c\3\2\2\2\u265e\u265d\3\2\2\2\u265f\u039b\3\2\2\2\u2660\u2670"+
		"\7\u030f\2\2\u2661\u2670\7\u0310\2\2\u2662\u2664\5\u039e\u01d0\2\u2663"+
		"\u2662\3\2\2\2\u2663\u2664\3\2\2\2\u2664\u2665\3\2\2\2\u2665\u2670\7\u030b"+
		"\2\2\u2666\u2668\5\u039e\u01d0\2\u2667\u2666\3\2\2\2\u2667\u2668\3\2\2"+
		"\2\u2668\u2669\3\2\2\2\u2669\u2670\t`\2\2\u266a\u266c\5\u039e\u01d0\2"+
		"\u266b\u266a\3\2\2\2\u266b\u266c\3\2\2\2\u266c\u266d\3\2\2\2\u266d\u266e"+
		"\7\u0323\2\2\u266e\u2670\tw\2\2\u266f\u2660\3\2\2\2\u266f\u2661\3\2\2"+
		"\2\u266f\u2663\3\2\2\2\u266f\u2667\3\2\2\2\u266f\u266b\3\2\2\2\u2670\u039d"+
		"\3\2\2\2\u2671\u2672\t]\2\2\u2672\u039f\3\2\2\2\u2673\u2677\5\u03a2\u01d2"+
		"\2\u2674\u2677\7\u0307\2\2\u2675\u2677\7\u0309\2\2\u2676\u2673\3\2\2\2"+
		"\u2676\u2674\3\2\2\2\u2676\u2675\3\2\2\2\u2677\u03a1\3\2\2\2\u2678\u2679"+
		"\tx\2\2\u2679\u03a3\3\2\2\2\u267a\u268a\7\u0313\2\2\u267b\u268a\7\u0314"+
		"\2\2\u267c\u268a\7\u0315\2\2\u267d\u267e\7\u0315\2\2\u267e\u268a\7\u0313"+
		"\2\2\u267f\u2680\7\u0314\2\2\u2680\u268a\7\u0313\2\2\u2681\u2682\7\u0315"+
		"\2\2\u2682\u268a\7\u0314\2\2\u2683\u2684\7\u0316\2\2\u2684\u268a\7\u0313"+
		"\2\2\u2685\u2686\7\u0316\2\2\u2686\u268a\7\u0314\2\2\u2687\u2688\7\u0316"+
		"\2\2\u2688\u268a\7\u0315\2\2\u2689\u267a\3\2\2\2\u2689\u267b\3\2\2\2\u2689"+
		"\u267c\3\2\2\2\u2689\u267d\3\2\2\2\u2689\u267f\3\2\2\2\u2689\u2681\3\2"+
		"\2\2\u2689\u2683\3\2\2\2\u2689\u2685\3\2\2\2\u2689\u2687\3\2\2\2\u268a"+
		"\u03a5\3\2\2\2\u268b\u268c\ty\2\2\u268c\u03a7\3\2\2\2\u268d\u268f\7\u030b"+
		"\2\2\u268e\u2690\tz\2\2\u268f\u268e\3\2\2\2\u268f\u2690\3\2\2\2\u2690"+
		"\u03a9\3\2\2\2\u054f\u03ad\u03b6\u03bb\u03bf\u03c7\u03ce\u046d\u047b\u047f"+
		"\u0482\u0486\u048a\u048e\u0493\u0498\u049a\u049e\u04a1\u04a8\u04ab\u04b4"+
		"\u04b7\u04c2\u04c5\u04ca\u04cf\u04d2\u04d7\u04db\u04de\u04e2\u04e5\u04e8"+
		"\u04ef\u04f3\u04f5\u04fa\u0507\u050d\u0510\u0520\u0528\u052d\u0530\u0535"+
		"\u0538\u053d\u0545\u054a\u054d\u0552\u0558\u055d\u056e\u0571\u0574\u0577"+
		"\u057c\u0585\u0594\u05a5\u05b0\u05b6\u05c5\u05d4\u05dd\u05e1\u05e6\u05ec"+
		"\u05f2\u05f5\u05fa\u05ff\u0607\u0611\u0624\u062c\u0639\u063b\u0647\u0649"+
		"\u0650\u0659\u065f\u0668\u0677\u0681\u068b\u06b3\u06ca\u06ee\u0700\u0703"+
		"\u0708\u070b\u0710\u0713\u0718\u071b\u0720\u0723\u072b\u072e\u0736\u0743"+
		"\u074e\u0753\u0757\u075d\u0774\u0780\u078b\u0790\u0794\u079a\u079c\u07a9"+
		"\u07c0\u07c7\u07d0\u07d5\u07d8\u07dd\u07e0\u07e5\u07ea\u0806\u080d\u0812"+
		"\u0819\u081b\u0826\u082c\u083b\u0849\u084c\u084e\u0853\u0857\u085a\u085c"+
		"\u0862\u0865\u0867\u086d\u086f\u0885\u088d\u0895\u0897\u0899\u08a2\u08b7"+
		"\u08c4\u08d3\u08d7\u08fa\u08fd\u0902\u0914\u0917\u091c\u0936\u0944\u0949"+
		"\u0951\u0956\u095d\u0972\u0997\u099c\u09af\u09bb\u09be\u09c3\u09c6\u09cc"+
		"\u09db\u09e0\u09e8\u09eb\u09f0\u09f5\u09f8\u0a10\u0a17\u0a1c\u0a21\u0a26"+
		"\u0a28\u0a2f\u0a3c\u0a42\u0a47\u0a4f\u0a5f\u0a66\u0a6b\u0a70\u0a73\u0a79"+
		"\u0a7f\u0a84\u0a89\u0a8e\u0a91\u0a97\u0a9d\u0aa4\u0aa9\u0ab1\u0ab7\u0abb"+
		"\u0abf\u0adc\u0ae9\u0aef\u0af9\u0afc\u0b10\u0b14\u0b18\u0b1d\u0b2c\u0b33"+
		"\u0b3c\u0b44\u0b47\u0b4c\u0b51\u0b59\u0b5f\u0b63\u0b69\u0b6e\u0b72\u0b79"+
		"\u0b81\u0b89\u0b92\u0b97\u0b9b\u0b9e\u0ba2\u0ba8\u0bad\u0bb5\u0bbd\u0bc3"+
		"\u0bc9\u0bcc\u0bd1\u0bd4\u0bdb\u0bdd\u0be0\u0be6\u0be9\u0bee\u0bf1\u0bf6"+
		"\u0bf9\u0bfe\u0c01\u0c06\u0c09\u0c0c\u0c0f\u0c16\u0c1a\u0c21\u0c28\u0c2e"+
		"\u0c3b\u0c3f\u0c44\u0c4e\u0c57\u0c5b\u0c67\u0c6d\u0c72\u0c74\u0c88\u0c8c"+
		"\u0c94\u0c9d\u0ca3\u0ca9\u0cb1\u0cb3\u0cbd\u0cc1\u0cc4\u0cc8\u0ccd\u0cd3"+
		"\u0cd6\u0cda\u0ce2\u0ce4\u0ce7\u0cef\u0cf7\u0cfe\u0d05\u0d07\u0d09\u0d0e"+
		"\u0d14\u0d17\u0d19\u0d1b\u0d1e\u0d23\u0d26\u0d2b\u0d3a\u0d41\u0d48\u0d4a"+
		"\u0d4c\u0d51\u0d57\u0d5a\u0d5c\u0d5e\u0d61\u0d66\u0d69\u0d6e\u0d7b\u0d80"+
		"\u0d89\u0d8e\u0d94\u0d98\u0d9c\u0dad\u0daf\u0db9\u0dbe\u0dc0\u0dc4\u0dca"+
		"\u0dd2\u0dd7\u0dda\u0de2\u0de5\u0dea\u0def\u0df4\u0df9\u0dfe\u0e03\u0e07"+
		"\u0e0c\u0e17\u0e1c\u0e1f\u0e22\u0e27\u0e2a\u0e2f\u0e32\u0e37\u0e3a\u0e3f"+
		"\u0e42\u0e47\u0e4a\u0e4f\u0e55\u0e5a\u0e5d\u0e62\u0e69\u0e6b\u0e71\u0e7a"+
		"\u0e7f\u0e81\u0e8d\u0e93\u0e9f\u0ea2\u0ea7\u0ea9\u0eb3\u0eb8\u0eba\u0ebe"+
		"\u0ec4\u0ed6\u0ed8\u0ee7\u0ef9\u0f01\u0f0b\u0f1b\u0f30\u0f3b\u0f41\u0f4a"+
		"\u0f53\u0f59\u0f62\u0f67\u0f6a\u0f6f\u0f72\u0f77\u0f7a\u0f82\u0f88\u0f8c"+
		"\u0f93\u0f99\u0f9d\u0fa0\u0fa2\u0fa5\u0faa\u0fad\u0fb2\u0fb5\u0fba\u0fbd"+
		"\u0fc2\u0fc5\u0fd4\u0fdf\u0feb\u0ff2\u0ff9\u0ffd\u1002\u1005\u100a\u100d"+
		"\u1012\u1015\u101e\u1025\u1034\u1038\u103d\u1048\u1052\u105e\u1064\u1066"+
		"\u106e\u1077\u107c\u1087\u108a\u108e\u1096\u109a\u109e\u10a6\u10ab\u10b3"+
		"\u10b8\u10bc\u10be\u10c3\u10cc\u10cf\u10d4\u10db\u10e1\u10e3\u10e8\u10ee"+
		"\u10f4\u10f9\u10ff\u1106\u110b\u1110\u1115\u1118\u111c\u1120\u1124\u1128"+
		"\u112d\u1131\u1135\u113f\u1145\u114c\u114f\u1155\u115b\u1160\u1162\u1168"+
		"\u116a\u116f\u1175\u117b\u1180\u1182\u1186\u118a\u118d\u119b\u11a0\u11a4"+
		"\u11b1\u11b4\u11b6\u11be\u11c8\u11ce\u11d5\u11d8\u11de\u11e4\u11e9\u11eb"+
		"\u11f1\u11f3\u11f8\u11fe\u1204\u120a\u120f\u1211\u1215\u1219\u121c\u122a"+
		"\u122f\u1233\u1240\u1243\u1245\u124d\u1258\u1261\u126a\u1275\u127e\u1287"+
		"\u1293\u1297\u129c\u129e\u12a0\u12a5\u12a9\u12ae\u12b0\u12b2\u12c0\u12c5"+
		"\u12db\u12f1\u12f6\u1303\u130b\u131f\u1322\u1328\u1330\u1337\u133c\u1340"+
		"\u1344\u1347\u134e\u1360\u1362\u1376\u137e\u1383\u1395\u13a4\u13a6\u13ad"+
		"\u13b4\u13b9\u13be\u13c4\u13c9\u13cb\u13d2\u13d8\u13de\u13e1\u13e7\u13f1"+
		"\u13f4\u13fb\u13fe\u1403\u1405\u140d\u1411\u1417\u141c\u141e\u1421\u1428"+
		"\u142e\u1435\u1438\u143e\u1443\u1445\u1448\u1450\u1456\u145d\u1460\u1466"+
		"\u146b\u146d\u1475\u147d\u1483\u1488\u148a\u1494\u1499\u14a3\u14a9\u14b5"+
		"\u14b7\u14be\u14c4\u14ca\u14d0\u14d5\u14d7\u14de\u14e6\u14ec\u14fa\u14fc"+
		"\u14ff\u1504\u1506\u1512\u1518\u1526\u1528\u152b\u1530\u1533\u1538\u153a"+
		"\u1543\u154a\u1550\u1553\u1558\u155f\u1561\u1567\u1569\u156e\u1573\u1576"+
		"\u157b\u157e\u1583\u1586\u158d\u158f\u1592\u1598\u159b\u159e\u15a1\u15a7"+
		"\u15ab\u15b3\u15ba\u15c0\u15c2\u15cd\u15d2\u15d8\u15dc\u15e6\u15ee\u15fa"+
		"\u15fd\u1605\u1607\u160a\u160e\u1611\u161b\u1621\u1629\u162d\u1631\u163a"+
		"\u1640\u1644\u1647\u1652\u1656\u165d\u1662\u1665\u166d\u166f\u1672\u1676"+
		"\u1679\u167d\u1684\u1688\u168a\u168c\u168f\u1692\u1695\u169b\u169e\u16a6"+
		"\u16a8\u16ab\u16af\u16b2\u16b8\u16bb\u16bf\u16c2\u16c5\u16cc\u16cf\u16d6"+
		"\u16dc\u16e0\u16ea\u16ed\u16f0\u16f4\u16f7\u16fa\u16fd\u1701\u1704\u170c"+
		"\u170e\u1712\u1715\u171d\u1721\u1725\u172c\u1730\u1732\u1734\u1737\u173a"+
		"\u173d\u1745\u174b\u1751\u1753\u1757\u175a\u175f\u1764\u1767\u176f\u1773"+
		"\u177a\u177d\u1786\u1789\u178d\u1795\u1798\u179c\u179f\u17ad\u17b1\u17b4"+
		"\u17b8\u17bb\u17c0\u17c3\u17c9\u17cc\u17d3\u17d7\u17d9\u17e1\u17e4\u17e8"+
		"\u17ef\u17f4\u17f7\u1803\u1806\u180c\u1813\u1818\u181d\u1824\u182b\u182e"+
		"\u1836\u183e\u1841\u1849\u1854\u1857\u1861\u1868\u186d\u1870\u187a\u187d"+
		"\u1880\u188e\u1891\u1894\u189a\u18a8\u18ab\u18ae\u18b4\u18ba\u18c2\u18c5"+
		"\u18c9\u18cd\u18d0\u18d5\u18e3\u18f3\u18f7\u18fd\u18ff\u1902\u190a\u1910"+
		"\u1916\u191b\u191e\u1927\u1933\u193b\u193e\u1945\u1948\u1975\u1978\u197e"+
		"\u198a\u198c\u198f\u19a8\u19b3\u19bb\u19c6\u19cb\u19ce\u19d6\u19e0\u19e7"+
		"\u19ee\u19f0\u19fc\u1a07\u1a0b\u1a10\u1a13\u1a15\u1a18\u1a24\u1a26\u1a28"+
		"\u1a2b\u1a30\u1a33\u1a38\u1a42\u1a46\u1a4b\u1a4e\u1a50\u1a53\u1a5f\u1a61"+
		"\u1a63\u1a66\u1a6c\u1a76\u1a8a\u1a90\u1aa9\u1aab\u1ac5\u1acb\u1ad6\u1ade"+
		"\u1ae1\u1aef\u1af7\u1afe\u1b15\u1b22\u1b28\u1b2f\u1b37\u1b3a\u1b3d\u1b46"+
		"\u1b50\u1b57\u1b5b\u1b5f\u1b65\u1b6c\u1b70\u1b76\u1b7d\u1b84\u1b87\u1b8d"+
		"\u1b94\u1b98\u1b9d\u1ba2\u1ba7\u1baf\u1bb3\u1bb9\u1bc0\u1bc4\u1bcd\u1bd5"+
		"\u1bdb\u1be1\u1bf2\u1bf6\u1bfe\u1c02\u1c0a\u1c0e\u1c13\u1c17\u1c1e\u1c24"+
		"\u1c26\u1c2a\u1c2e\u1c32\u1c36\u1c3c\u1c40\u1c42\u1c47\u1c4b\u1c52\u1c55"+
		"\u1c58\u1c61\u1c66\u1c6b\u1c6e\u1c70\u1c74\u1c78\u1c7b\u1c7f\u1c85\u1c8a"+
		"\u1c91\u1c93\u1c97\u1c9f\u1ca5\u1ca9\u1cac\u1cb5\u1cb8\u1cbe\u1cc5\u1cca"+
		"\u1cd2\u1cd7\u1ce3\u1ce5\u1cf0\u1cf7\u1d01\u1d18\u1d25\u1d35\u1d3a\u1d41"+
		"\u1d44\u1d48\u1d4a\u1d5b\u1d6a\u1d72\u1d7b\u1d83\u1d8c\u1d97\u1d9b\u1d9d"+
		"\u1d9f\u1da5\u1daa\u1db1\u1dbe\u1dc0\u1dc2\u1dc5\u1dc8\u1dcf\u1dd2\u1dd8"+
		"\u1ddd\u1ddf\u1de2\u1de8\u1df0\u1df2\u1df5\u1df9\u1dfc\u1e02\u1e05\u1e09"+
		"\u1e0c\u1e12\u1e15\u1e17\u1e1b\u1e20\u1e28\u1e2c\u1e2f\u1e34\u1e3c\u1e41"+
		"\u1e4b\u1e56\u1e5b\u1e60\u1e66\u1e6a\u1e6d\u1e71\u1e75\u1e7d\u1e82\u1e84"+
		"\u1e87\u1e8c\u1e91\u1e96\u1e99\u1e9c\u1ea2\u1eaa\u1eb2\u1eb5\u1eb8\u1ebc"+
		"\u1ec1\u1ec4\u1eca\u1ece\u1ed4\u1edc\u1ee2\u1ee4\u1ee7\u1ef6\u1ef9\u1efb"+
		"\u1f06\u1f11\u1f1a\u1f24\u1f2e\u1f30\u1f32\u1f35\u1f38\u1f43\u1f45\u1f47"+
		"\u1f4a\u1f4f\u1f5a\u1f63\u1f66\u1f69\u1f72\u1f75\u1f78\u1f7f\u1f82\u1f90"+
		"\u1f93\u1f9a\u1faa\u1fae\u1fb8\u1fcb\u1fcd\u1fd4\u1fdb\u1fdf\u1fe7\u1feb"+
		"\u1fef\u1ff5\u1fff\u2009\u2010\u2017\u2020\u2027\u202e\u2037\u203b\u2045"+
		"\u204c\u2054\u205c\u2060\u2076\u207f\u2085\u208b\u2091\u209b\u20a2\u20a7"+
		"\u20ac\u20b0\u20b7\u20bb\u20be\u20c3\u20c7\u20cb\u20d0\u20d7\u20da\u20de"+
		"\u20e3\u20e7\u20f0\u20f7\u2100\u210c\u210e\u2115\u211b\u2120\u2125\u2128"+
		"\u212f\u213a\u215c\u216c\u2173\u2175\u217c\u2185\u218f\u2194\u219b\u219e"+
		"\u21a5\u21ac\u21af\u21b1\u21b5\u21bb\u21c1\u21c8\u21d0\u21d6\u21db\u21df"+
		"\u21e3\u21e8\u21ea\u21f1\u21f5\u21fc\u21fe\u2205\u2207\u2210\u2218\u221f"+
		"\u2225\u2230\u2234\u2236\u2239\u2251\u226a\u226f\u2283\u2287\u228b\u229b"+
		"\u22a3\u22b9\u22f3\u22f7\u2318\u231f\u2325\u2332\u2341\u234c\u2351\u235b"+
		"\u2364\u2386\u238b\u2391\u2394\u2399\u239e\u23a7\u23ac\u23b2\u23bb\u23cc"+
		"\u23d2\u23da\u23de\u23e6\u23ed\u23fa\u2402\u240f\u2416\u241c\u2420\u2431"+
		"\u2440\u2442\u2447\u244a\u2453\u2456\u2459\u2466\u246a\u2472\u2478\u2480"+
		"\u2487\u248d\u249c\u24a5\u24ab\u24b1\u24b4\u24b8\u24bf\u24c7\u24ca\u24d0"+
		"\u24d6\u24d8\u24de\u24e1\u24e3\u24e9\u24eb\u24f9\u2500\u2509\u2510\u251c"+
		"\u2523\u252a\u2531\u2537\u253e\u2541\u2546\u254d\u2554\u255a\u255f\u2565"+
		"\u256b\u2571\u2577\u257d\u2583\u2589\u258c\u2590\u2595\u2599\u25a1\u25a6"+
		"\u25ad\u25b6\u25b8\u25bf\u25cb\u25d0\u25db\u25e5\u25e7\u25ed\u25ef\u25f4"+
		"\u25f6\u25f9\u25fd\u2601\u2607\u2610\u2613\u2615\u2618\u261e\u2622\u2625"+
		"\u262e\u2637\u2643\u2646\u264a\u2650\u2653\u2659\u265e\u2663\u2667\u266b"+
		"\u266f\u2676\u2689\u268f";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}